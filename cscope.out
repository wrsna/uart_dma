cscope 15 $HOME/Documents/vaja9               0001078061
	@/home/vaje/Documents/vaja9/Makefile

1 #Li° 
of
 
avaûabÀ
 
make
 
gﬂls
:

2 #
#Æ»
DeÁu…
 
èrgë
, 
buûds
 
the
 
¥oje˘


4 #˛ó¿
CÀ™
 
up
 
the
 
¥oje˘


5 #ªbuûd 
Rebuûd
 
the
 
¥oje˘


6 #
#
#do¯
Buûd
 
the
 
documíèti⁄


9 #˛óndo¯
CÀ™
 
up
 
the
 
documíèti⁄


10 #ªbuûddo¯
Rebuûd
 
the
 
documíèti⁄


11 #
#C›yrighà(
c
Ë2011 
Atmñ
 
C‹p‹©i⁄
. 
AŒ
 
rights
 
ª£rved
.

13 #
#\
asf_li˚n£_°¨t


15 #
#\
∑ge
 
Li˚n£


17 #
#Redi°ributi⁄ 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
f‹ms
, 
wôh
 
‹
 
wôhout


19 #modifiˇti⁄, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
c⁄dôi⁄s
áª 
më
:

20 #
#1. 
Redi°ributi⁄s
 
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
c›yright
 
nŸi˚
,

22 #thi†
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
dis˛aimî
.

23 #
#2. 
Redi°ributi⁄s
 
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
above
 
c›yright
 
nŸi˚
,

25 #thi†
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
dis˛aimî
 
ö
Åhê
documíèti⁄


26 #™d/
‹
 
Ÿhî
 
m©îüls
 
¥ovided
 
wôh
 
the
 
di°ributi⁄
.

27 #
#3. 
The
 
«me
 
of
 
Atmñ
 
may
 
nŸ
 
be
 
u£d
 
to
 
íd‹£
 
‹
 
¥omŸe
 
¥odu˘s
 
dîived


29 #‰om 
this
 
so·w¨e
 
wôhout
 
•ecific
 
¥i‹
 
wrôãn
 
≥rmissi⁄
.

30 #
#4. 
This
 
so·w¨e
 
may
 
⁄ly
 
be
 
ªdi°ribuãd
 
™d
 
u£d
 
ö
 
c⁄√˘i⁄
 
wôh
 
™


32 #Atmñ 
mi¸oc⁄åﬁÀr
 
¥odu˘
.

33 #
#THIS 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
ATMEL
 "AS IS" 
AND
 
ANY
 
EXPRESS
 
OR
 
IMPLIED


35 #WARRANTIES, 
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
, 
THE
 
IMPLIED
 
WARRANTIES
 
OF


36 #MERCHANTABILITY, 
FITNESS
 
FOR
 
A
 
PARTICULAR
 
PURPOSE
 
AND
 
NON
-
INFRINGEMENT
 
ARE


37 #EXPRESSLY 
AND
 
SPECIFICALLY
 
DISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
ATMEL
 
BE
 
LIABLE
 
FOR


38 #ANY 
DIRECT
, 
INDIRECT
, 
INCIDENTAL
, 
SPECIAL
, 
EXEMPLARY
, 
OR
 
CONSEQUENTIAL


39 #DAMAGES (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
, 
PROCUREMENT
 
OF
 
SUBSTITUTE
 
GOODS


40 #OR 
SERVICES
; 
LOSS
 
OF
 
USE
, 
DATA
, 
OR
 
PROFITS
; OR 
BUSINESS
 
INTERRUPTION
)

41 #HOWEVER 
CAUSED
 
AND
 
ON
 
ANY
 
THEORY
 
OF
 
LIABILITY
, 
WHETHER
 
IN
 
CONTRACT
,

42 #STRICT 
LIABILITY
, 
OR
 
TORT
 (
INCLUDING
 
NEGLIGENCE
 OR 
OTHERWISE
Ë
ARISING
 
IN


43 #ANY 
WAY
 
OUT
 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE

44 #POSSIBILITY 
OF
 
SUCH
 
DAMAGE
.

45 #
#\
asf_li˚n£_°›


49 #In˛udê
the
 
comm⁄
 
Makefûe
, 
which
 
wûl
 
Æso
 
ö˛ude
Åhê
¥oje˘
 
•ecific


50 #c⁄fig.
mk
 
fûe
.

51 
	gPROJ
=
	$$
(
PN
)

52 
exp‹t
 
PROJ


54 
MAKEFILE_PATH
 = 
asf
/
ßm
/
utûs
/
make
/
Makefûe
.ßm.
ö


55 
ö˛ude
 
	`$
(
MAKEFILE_PATH
)

	@/home/vaje/Documents/vaja9/app/include/asf.h

6 #i‚de‡
ASF_H_


7 
	#ASF_H_


	)

14 
	~<ßm3x8e.h
>

15 
	~<pio.h
>

19 
	~<compûî.h
>

20 
	~<°©us_codes.h
>

29 
	~<i›‹t.h
>

30 
	~<dñay.h
>

31 
	~<adc.h
>

54 
	~<sys˛k.h
>

57 
	~<tc.h
>

	@/home/vaje/Documents/vaja9/app/include/bord.h

4 #i‚de‡
BORD_H_INCLUDE


5 
	#BORD_H_INCLUDE


	)

7 #ifde‡
__˝lu•lus


11 
	#D1
 
PIO_PD7


	)

12 
	#D2
 
PIO_PC29


	)

13 
	#D3
 
PIO_PC21


	)

14 
	#D4
 
PIO_PC22


	)

16 
	#D1_IDX
 
PIO_PD7_IDX


	)

17 
	#D2_IDX
 
PIO_PC29_IDX


	)

18 
	#D3_IDX
 
PIO_PC21_IDX


	)

19 
	#D4_IDX
 
PIO_PC22_IDX


	)

21 
	#T1
 
PIO_PC23


	)

22 
	#T2
 
PIO_PC24


	)

23 
	#T3
 
PIO_PC25


	)

24 
	#T4
 
PIO_PC26


	)

26 
	#T1_IDX
 
PIO_PC23_IDX


	)

27 
	#T2_IDX
 
PIO_PC24_IDX


	)

28 
	#T3_IDX
 
PIO_PC25_IDX


	)

29 
	#T4_IDX
 
PIO_PC26_IDX


	)

31 
	#Mask_T1
 1<<0

	)

32 
	#Mask_T2
 1<<1

	)

33 
	#Mask_T3
 1<<2

	)

34 
	#Mask_T4
 1<<3

	)

36 
	#HIGH
 1

	)

37 
	#LOW
 0

	)

41 
	#POT
 
PIO_PA16


	)

42 
	#POT_ADC
 
ADC_CHANNEL_7


	)

44 
	~<asf.h
>

47 
b‹d_öô
();

48 
gë_buâ⁄_¥ess
();

49 
gë_buâ⁄_°©e
();

51 
adc_£tup
();

52 
uöt32_t
 
adc_ªad
();

54 
timî_öô
();

61 #ifde‡
__˝lu•lus


	@/home/vaje/Documents/vaja9/app/include/conf_clock.h

47 #i‚de‡
CONF_CLOCK_H_INCLUDED


48 
	#CONF_CLOCK_H_INCLUDED


	)

59 
	#CONFIG_SYSCLK_SOURCE
 
SYSCLK_SRC_PLLACK


	)

64 
	#CONFIG_SYSCLK_PRES
 
SYSCLK_PRES_2


	)

74 
	#CONFIG_PLL0_SOURCE
 
PLL_SRC_MAINCK_XTAL


	)

75 
	#CONFIG_PLL0_MUL
 14

	)

76 
	#CONFIG_PLL0_DIV
 1

	)

83 
	#CONFIG_USBCLK_SOURCE
 
USBCLK_SRC_UPLL


	)

84 
	#CONFIG_USBCLK_DIV
 1

	)

	@/home/vaje/Documents/vaja9/app/include/fifo.h

1 #i‚de‡
FIFO_H_INCLUDED


2 
	#FIFO_H_INCLUDED


	)

5 
	~<asf.h
>

8 #ifde‡
__˝lu•lus


13 
	#KEYS_FIFO_SIZE
 10

	)

19 
	s_fifo
{

20 
uöt16_t
 
wrôe_idx
;

21 
uöt16_t
 
ªad_idx
;

22 
uöt16_t
 
fifo_size
;

23 
uöt8_t
 *
buff
;

26 
_fifo
 
	tfifo_t
;

33 
uöt16_t
 
fifo_ªad
 (
fifo_t
 *
fifo
, 
uöt8_t
 *
wrôe_addr
, uöt16_à
n
);

34 
uöt16_t
 
fifo_wrôe
(
fifo_t
 *
fifo
, c⁄° 
uöt8_t
 *
ªad_addr
, uöt16_à
n
);

35 
uöt16_t
 
fifo_look
(
fifo_t
 *
fifo
, 
uöt8_t
 *
wrôe_addr
);

40 #ifde‡
__˝lu•lus


	@/home/vaje/Documents/vaja9/app/include/lcd.h

8 #i‚de‡
LCD_H_


9 
	#LCD_H_


	)

13 #ifde‡
__˝lu•lus


17 
	~<dñay.h
>

18 
	~<i›‹t.h
>

23 
	#_PIN_LCD_D4
 
PIO_PC13_IDX


24 
	#_PIN_LCD_D5
 
PIO_PC15_IDX


25 
	#_PIN_LCD_D6
 
PIO_PC17_IDX


26 
	#_PIN_LCD_D7
 
PIO_PC19_IDX


27 
	#_PIN_LCD_RS
 
PIO_PC12_IDX


28 
	#_PIN_LCD_RW
 
PIO_PC14_IDX


29 
	#_PIN_LCD_E
 
PIO_PC16_IDX


30 

	)

34 
	#CLEAR_DISPLAY
 0x01

	)

35 
	#RETURN_HOME
 0x02

	)

36 
	#MODE
 0x04

	)

37 
	#CURSOR_DIRECTION_RIGHT
 0x02

38 
	#CURSOR_DIRECTION_LEFT
 0x00

39 
	#DISPLAY_SHIFT_ON
 0x01

40 
	#DISPLAY_SHIFT_OFF
 0x00

41 
	#CONTROL
 0x08

	)

42 
	#DISPLAY_ON
 0x04

43 
	#DISPLAY_OFF
 0x00

44 
	#CURSOR_ON
 0x02

45 
	#CURSOR_OFF
 0x00

46 
	#BLINK_ON
 0x01

47 
	#BLINK_OFF
 0x00

48 
	#SHIFT
 0x10

	)

49 
	#DISPLAY
 0x08

50 
	#CURSOR
 0x00

51 
	#RIGHT
 0x04

52 
	#LEFT
 0x00

53 
	#SET
 0x20

	)

54 
	#BITS_8
 0x10

55 
	#BITS_4
 0x00

56 
	#LINES_2
 0x08

57 
	#LINE_1
 0x00

58 
	#DOTS_5_10
 0x04

59 
	#DOTS_5_8
 0x00

60 
	#CGRAM
 0x40

	)

61 
	#DDRAM
 0x80

	)

64 
uöt8_t
 
lcd_gë_curs‹
();

67 
busy
();

71 
lcd_wrôe_high
(
uöt8_t
 
byã
);

75 
lcd_wrôe_low
(
uöt8_t
 
byã
);

79 
lcd_wrôe_hÆf_comm
(
uöt8_t
 
com
);

83 
lcd_wrôe_comm
(
uöt8_t
 
com
);

87 
lcd_wrôe_d©a
(
uöt8_t
 
d©a
);

90 
lcd_öô
();

93 *
lcd_°rög
;

94 
lcd_drivî
();

96 
ãxt2lcd
(*
izhod
, *
°r
, 
uöt8_t
 
pos
);

101 #ifde‡
__˝lu•lus


	@/home/vaje/Documents/vaja9/app/include/rtos.h

1 #i‚de‡
RTOS_H_INCLUDED


2 
	#RTOS_H_INCLUDED


	)

4 #ifde‡
__˝lu•lus


9 
	~<asf.h
>

10 
	~<b‹d.h
>

11 
	#MICRO_SEC
 1000000

	)

17 (*
±r_fun˘i⁄
)();

20 
	sèsk
{

21 
uöt32_t
 
œ°_tick
;

22 
«me
[15];

23 
±r_fun˘i⁄
 
drivî
;

26 
èsk
 
	tπos_èsk_t
;

35 
uöt8_t
 
πos_öô
(
uöt32_t
 
¶i˚_us
);

36 
πos_íabÀ
();

37 
πos_dißbÀ
();

46 #ifde‡
__˝lu•lus


	@/home/vaje/Documents/vaja9/app/include/rtos_task.h

1 #i‚de‡
RTOS_TASK_H_INCLUDED


2 
	#RTOS_TASK_H_INCLUDED


	)

6 #ifde‡
__˝lu•lus


11 
	~<πos.h
>

12 
	~<lcd.h
>

13 
	~<b‹d.h
>

14 
	~<fifo.h
>

16 
	#DAN
 24*60*60*10

	)

17 
	#URA
 1*60*60*10

	)

18 
	#MIN
 1*60*10

	)

26 
uø_drivî
();

27 
ˇlc_drivî
();

28 
buâ⁄s_drivî
();

30 
Àd_drivî
();

31 
ãxt_drivî
();

49 #ifde‡
__˝lu•lus


	@/home/vaje/Documents/vaja9/app/src/bord.c

7 #ifde‡
__˝lu•lus


12 
	~"b‹d.h
"

17 
b‹d_öô
(){

18 
dñay_öô
();

19 
i›‹t_öô
();

23 
i›‹t_íabÀ_pö
(
PIO_PC22_IDX
);

24 
i›‹t_íabÀ_pö
(
PIO_PC21_IDX
);

25 
i›‹t_íabÀ_pö
(
PIO_PC29_IDX
);

26 
i›‹t_íabÀ_pö
(
PIO_PD7_IDX
);

28 
i›‹t_íabÀ_pö
(
PIO_PB27_IDX
);

31 
i›‹t_£t_pö_dú
(
PIO_PC22_IDX
, 
IOPORT_DIR_OUTPUT
);

32 
i›‹t_£t_pö_dú
(
PIO_PC21_IDX
, 
IOPORT_DIR_OUTPUT
);

33 
i›‹t_£t_pö_dú
(
PIO_PC29_IDX
, 
IOPORT_DIR_OUTPUT
);

34 
i›‹t_£t_pö_dú
(
PIO_PD7_IDX
, 
IOPORT_DIR_OUTPUT
);

36 
i›‹t_£t_pö_dú
(
PIO_PB27_IDX
, 
IOPORT_DIR_OUTPUT
);

38 
i›‹t_£t_pö_Àvñ
(
PIO_PC22_IDX
, 0);

39 
i›‹t_£t_pö_Àvñ
(
PIO_PC21_IDX
, 0);

40 
i›‹t_£t_pö_Àvñ
(
PIO_PC29_IDX
, 0);

41 
i›‹t_£t_pö_Àvñ
(
PIO_PD7_IDX
, 0);

43 
pio_£t_≥rùhîÆ
(
PIOB
, 
PIO_OUTPUT_0
, 
PIO_ABSR_P27
);

48 
i›‹t_íabÀ_pö
(
PIO_PC23_IDX
);

49 
i›‹t_íabÀ_pö
(
PIO_PC24_IDX
);

50 
i›‹t_íabÀ_pö
(
PIO_PC25_IDX
);

51 
i›‹t_íabÀ_pö
(
PIO_PC26_IDX
);

54 
i›‹t_£t_pö_dú
(
PIO_PC23_IDX
, 
IOPORT_DIR_INPUT
);

55 
i›‹t_£t_pö_dú
(
PIO_PC24_IDX
, 
IOPORT_DIR_INPUT
);

56 
i›‹t_£t_pö_dú
(
PIO_PC25_IDX
, 
IOPORT_DIR_INPUT
);

57 
i›‹t_£t_pö_dú
(
PIO_PC26_IDX
, 
IOPORT_DIR_INPUT
);

61 
i›‹t_£t_pö_mode
(
PIO_PC23_IDX
, 
IOPORT_MODE_DEBOUNCE
);

62 
i›‹t_£t_pö_mode
(
PIO_PC24_IDX
, 
IOPORT_MODE_DEBOUNCE
);

63 
i›‹t_£t_pö_mode
(
PIO_PC25_IDX
, 
IOPORT_MODE_DEBOUNCE
);

64 
i›‹t_£t_pö_mode
(
PIO_PC26_IDX
, 
IOPORT_MODE_DEBOUNCE
);

66 
i›‹t_£t_pö_mode
(
PIO_PC23_IDX
, 
IOPORT_MODE_PULLUP
);

67 
i›‹t_£t_pö_mode
(
PIO_PC24_IDX
, 
IOPORT_MODE_PULLUP
);

68 
i›‹t_£t_pö_mode
(
PIO_PC25_IDX
, 
IOPORT_MODE_PULLUP
);

69 
i›‹t_£t_pö_mode
(
PIO_PC26_IDX
, 
IOPORT_MODE_PULLUP
);

79 
gë_buâ⁄_°©e
(){

80 
°™je
 = 0;

81 
pö1
 = 0, 
pö2
 = 0, 
pö3
 = 0, 
pö4
 = 0;

82 
maska1
 = 0, 
maska2
 = 0, 
maska3
 = 0, 
maska4
 = 0;

84 
maska1
 = 1<<0;

85 
maska2
 = 1<<1;

86 
maska3
 = 1<<2;

87 
maska4
 = 1<<3;

89 
pö1
 = 
i›‹t_gë_pö_Àvñ
(
PIO_PC23_IDX
)<<0;

90 
pö2
 = 
i›‹t_gë_pö_Àvñ
(
PIO_PC24_IDX
)<<1;

91 
pö3
 = 
i›‹t_gë_pö_Àvñ
(
PIO_PC25_IDX
)<<2;

92 
pö4
 = 
i›‹t_gë_pö_Àvñ
(
PIO_PC26_IDX
)<<3;

94 
°™je
 = (
pö1
 & 
maska1
) | stanje;

95 
°™je
 = (
pö2
 & 
maska2
) | stanje;

96 
°™je
 = (
pö3
 & 
maska3
) | stanje;

97 
°™je
 = (
pö4
 & 
maska4
) | stanje;

99  
°™je
;

105 
gë_buâ⁄_¥ess
(){

107 
ﬁd_°©e
 = 0;

108 
°©e
 = 0;

109 
°©e1
 = 0, 
°©e2
 = 0, 
°©e3
 = 0, 
°©e4
 = 0;

110 
Àds
 = 0, 
Àds1
 = 0, 
Àds2
 = 0, 
Àds3
 = 0, 
Àds4
 = 0;

113 
°©e1
 = 
i›‹t_gë_pö_Àvñ
(
PIO_PC23_IDX
)<<0;

114 
°©e2
 = 
i›‹t_gë_pö_Àvñ
(
PIO_PC24_IDX
)<<1;

115 
°©e3
 = 
i›‹t_gë_pö_Àvñ
(
PIO_PC25_IDX
)<<2;

116 
°©e4
 = 
i›‹t_gë_pö_Àvñ
(
PIO_PC26_IDX
)<<3;

118 
°©e
 = 
°©e1
 | 
°©e2
 | 
°©e3
 | 
°©e4
;

120 if((
ﬁd_°©e
 & 1<<0Ë&& (
°©e1
 =0))
Àds1
 = 1<<0;

121 if((
ﬁd_°©e
 & 1<<1Ë&& (
°©e2
 =0))
Àds2
 = 1<<1;

122 if((
ﬁd_°©e
 & 1<<2Ë&& (
°©e3
 =0))
Àds3
 = 1<<2;

123 if((
ﬁd_°©e
 & 1<<3Ë&& (
°©e4
 =0))
Àds4
 = 1<<3;

125 
Àds
 = 
Àds1
 | 
Àds2
 | 
Àds3
 | 
Àds4
;

126 
ﬁd_°©e
 = 
°©e
;

128  
Àds
;

134 
adc_£tup
(){

135 
sys˛k_íabÀ_≥rùhîÆ_˛ock
(
ID_ADC
);

136 
adc_öô
(
ADC
, 
Sy°emC‹eClock
, 6400000, 
ADC_STARTUP_TIME_4
);

137 
adc_c⁄figuª_timög
(
ADC
, 0, 
ADC_SETTLING_TIME_3
, 1);

138 
adc_£t_ªsﬁuti⁄
(
ADC
, 
ADC_12_BITS
);

139 
adc_c⁄figuª_åiggî
(
ADC
, 
ADC_TRIG_SW
,0);

140 
adc_íabÀ_ch™√l
(
ADC
, 
ADC_CHANNEL_7
);

147 
uöt32_t
 
adc_ªad
(){

148 
°©us
 = 0;

149 
mask
 = 1<<7;

151 
adc_°¨t
(
ADC
);

155 
°©us
 = 
adc_gë_°©us
(
ADC
Ë& 
mask
;

157 if(
°©us
){

158  
adc_gë_ch™√l_vÆue
(
ADC
, 
ADC_CHANNEL_7
);

171 
timî_öô
(){

173 
tc_öô
(
TC0
,0, 
TC_CMR_TCCLKS_TIMER_CLOCK3
 | 
TC_CMR_WAVE
 | 
TC_CMR_WAVSEL_UP_RC
 |
TC_CMR_BCPC_CLEAR
 | 
TC_CMR_BCPB_SET
 );

175 
tc_íabÀ_öãºu±
(
TC0
, 0, 
TC_IER_CPBS
 | 
TC_IER_CPCS
);

177 
tc_wrôe_rc
(
TC0
, 0, 2625000);

178 
tc_wrôe_rb
(
TC0
, 0, 2625000/2);

180 
tc_°¨t
(
TC0
,0);

186 #ifde‡
__˝lu•lus


	@/home/vaje/Documents/vaja9/app/src/fifo.c

1 
	~<fifo.h
>

3 #ifde‡
__˝lu•lus


8 
uöt8_t
 
keys_buff
[
KEYS_FIFO_SIZE
];

10 
fifo_t
 
keys_fifo
 = {

11 .
wrôe_idx
 = 0,

12 .
ªad_idx
 = 0,

13 .
fifo_size
 = 
KEYS_FIFO_SIZE
,

14 .
buff
 = 
keys_buff


26 
uöt16_t
 
fifo_ªad
 (
fifo_t
 *
fifo
, 
uöt8_t
 *
wrôe_addr
, uöt16_à
n
){

27 
uöt16_t
 
i
;

29 
i
 = 0; (i<
n
 && 
fifo
->
ªad_idx
 !fifo->
wrôe_idx
); i++){

31 
wrôe_addr
[
i
] = 
fifo
->
buff
[fifo->
ªad_idx
];

32 
fifo
->
ªad_idx
++;

33 
fifo
->
ªad_idx
 = fifo->read_idx%10;

37  
i
;

42 
uöt16_t
 
fifo_wrôe
(
fifo_t
 *
fifo
, c⁄° 
uöt8_t
 *
ªad_addr
, uöt16_à
n
){

43 
uöt16_t
 
i
;

44 
i
 = 0; i<
n
; i++){

46 if((
fifo
->
wrôe_idx
+1)%10 =fifo->
ªad_idx
){

50 
fifo
->
buff
[fifo->
wrôe_idx
] = 
ªad_addr
[
i
] ;

51 
fifo
->
wrôe_idx
++;

52 
fifo
->
wrôe_idx
 = fifo->write_idx%10;

57  
i
;

62 
uöt16_t
 
fifo_look
(
fifo_t
 *
fifo
, 
uöt8_t
 *
wrôe_addr
){

63 
uöt16_t
 
ªad
, 
i
;

64 
ªad
 = 
fifo
->
ªad_idx
;

68 
i
 = 0; 
ªad
 !
fifo
->
wrôe_idx
; i++){

70 
wrôe_addr
[
i
] = 
fifo
->
buff
[
ªad
];

71 
ªad
++;

72 
ªad
 =Ñead%10;

76  
i
;

88 #ifde‡
__˝lu•lus


	@/home/vaje/Documents/vaja9/app/src/lcd.c

10 #ifde‡
__˝lu•lus


14 
	~<lcd.h
>

16 
lcd_buff
[33] = " ";

17 *
lcd_°rög
 = 
lcd_buff
;

21 
uöt8_t
 
lcd_gë_curs‹
(){

22 
uöt8_t
 
posôi⁄
;

27 
i›‹t_£t_pö_dú
(
_PIN_LCD_D4
, 
IOPORT_DIR_INPUT
);

28 
i›‹t_£t_pö_dú
(
_PIN_LCD_D5
, 
IOPORT_DIR_INPUT
);

29 
i›‹t_£t_pö_dú
(
_PIN_LCD_D6
, 
IOPORT_DIR_INPUT
);

30 
i›‹t_£t_pö_dú
(
_PIN_LCD_D7
, 
IOPORT_DIR_INPUT
);

33 
i›‹t_£t_pö_Àvñ
(
_PIN_LCD_RS
, 0);

34 
i›‹t_£t_pö_Àvñ
(
_PIN_LCD_RW
, 1);

35 
dñay_us
(1);

36 
i›‹t_£t_pö_Àvñ
(
_PIN_LCD_E
, 1);

37 
dñay_us
(1);

40 
posôi⁄
 = 0 | (
i›‹t_gë_pö_Àvñ
(
_PIN_LCD_D6
) << 6) | \

41 
i›‹t_gë_pö_Àvñ
(
_PIN_LCD_D5
) << 5 | \

42 
i›‹t_gë_pö_Àvñ
(
_PIN_LCD_D4
)<<4;

45 
i›‹t_£t_pö_Àvñ
(
_PIN_LCD_E
, 0);

46 
dñay_us
(1);

47 
i›‹t_£t_pö_Àvñ
(
_PIN_LCD_E
, 1);

48 
dñay_us
(1);

52 
posôi⁄
 |(
i›‹t_gë_pö_Àvñ
(
_PIN_LCD_D7
) << 3) | \

53 
i›‹t_gë_pö_Àvñ
(
_PIN_LCD_D6
) << 2 | \

54 
i›‹t_gë_pö_Àvñ
(
_PIN_LCD_D5
)<<1 | \

55 
i›‹t_gë_pö_Àvñ
(
_PIN_LCD_D5
)<<0;

57 
i›‹t_£t_pö_Àvñ
(
_PIN_LCD_E
, 0);

63 
i›‹t_£t_pö_dú
(
_PIN_LCD_D4
, 
IOPORT_DIR_OUTPUT
);

64 
i›‹t_£t_pö_dú
(
_PIN_LCD_D5
, 
IOPORT_DIR_OUTPUT
);

65 
i›‹t_£t_pö_dú
(
_PIN_LCD_D6
, 
IOPORT_DIR_OUTPUT
);

66 
i›‹t_£t_pö_dú
(
_PIN_LCD_D7
, 
IOPORT_DIR_OUTPUT
);

68  
posôi⁄
;

73 
busy
(){

74 
uöt32_t
 
busy_Êag
;

80 
i›‹t_£t_pö_dú
(
_PIN_LCD_D4
, 
IOPORT_DIR_INPUT
);

81 
i›‹t_£t_pö_dú
(
_PIN_LCD_D5
, 
IOPORT_DIR_INPUT
);

82 
i›‹t_£t_pö_dú
(
_PIN_LCD_D6
, 
IOPORT_DIR_INPUT
);

83 
i›‹t_£t_pö_dú
(
_PIN_LCD_D7
, 
IOPORT_DIR_INPUT
);

86 
i›‹t_£t_pö_Àvñ
(
_PIN_LCD_RS
, 0);

87 
i›‹t_£t_pö_Àvñ
(
_PIN_LCD_RW
, 1);

91 
dñay_us
(1);

92 
i›‹t_£t_pö_Àvñ
(
_PIN_LCD_E
, 1);

93 
dñay_us
(1);

94 
busy_Êag
 = 
i›‹t_gë_pö_Àvñ
(
_PIN_LCD_D7
);

95 
i›‹t_£t_pö_Àvñ
(
_PIN_LCD_E
, 0);

96 
dñay_us
(1);

97 
i›‹t_£t_pö_Àvñ
(
_PIN_LCD_E
, 1);

98 
dñay_us
(1);

99 
i›‹t_£t_pö_Àvñ
(
_PIN_LCD_E
, 0);

100 } 
busy_Êag
);

106 
i›‹t_£t_pö_dú
(
_PIN_LCD_D4
, 
IOPORT_DIR_OUTPUT
);

107 
i›‹t_£t_pö_dú
(
_PIN_LCD_D5
, 
IOPORT_DIR_OUTPUT
);

108 
i›‹t_£t_pö_dú
(
_PIN_LCD_D6
, 
IOPORT_DIR_OUTPUT
);

109 
i›‹t_£t_pö_dú
(
_PIN_LCD_D7
, 
IOPORT_DIR_OUTPUT
);

115 
lcd_wrôe_high
(
uöt8_t
 
byã
){

117 
i›‹t_£t_pö_Àvñ
(
_PIN_LCD_RW
, 0);

118 
dñay_us
(1);

121 
i›‹t_£t_pö_Àvñ
(
_PIN_LCD_D7
, ( 
byã
&(1<<7) )!=0 );

122 
i›‹t_£t_pö_Àvñ
(
_PIN_LCD_D6
, ( 
byã
&(1<<6) )!=0 );

123 
i›‹t_£t_pö_Àvñ
(
_PIN_LCD_D5
, ( 
byã
&(1<<5) )!=0 );

124 
i›‹t_£t_pö_Àvñ
(
_PIN_LCD_D4
, ( 
byã
&(1<<4) )!=0 );

126 
i›‹t_£t_pö_Àvñ
(
_PIN_LCD_E
, 1);

127 
dñay_us
(1);

128 
i›‹t_£t_pö_Àvñ
(
_PIN_LCD_E
, 0);

133 
lcd_wrôe_low
(
uöt8_t
 
byã
){

134 
dñay_us
(1);

136 
i›‹t_£t_pö_Àvñ
(
_PIN_LCD_D7
, ( 
byã
&(1<<3) )!=0 );

137 
i›‹t_£t_pö_Àvñ
(
_PIN_LCD_D6
, ( 
byã
&(1<<2) )!=0 );

138 
i›‹t_£t_pö_Àvñ
(
_PIN_LCD_D5
, ( 
byã
&(1<<1) )!=0 );

139 
i›‹t_£t_pö_Àvñ
(
_PIN_LCD_D4
, ( 
byã
&(1<<0) )!=0 );

141 
i›‹t_£t_pö_Àvñ
(
_PIN_LCD_E
, 1);

142 
dñay_us
(1);

143 
i›‹t_£t_pö_Àvñ
(
_PIN_LCD_E
, 0);

144 
busy
();

149 
lcd_wrôe_hÆf_comm
(
uöt8_t
 
com
){

150 
i›‹t_£t_pö_Àvñ
(
_PIN_LCD_RS
, 0);

151 
lcd_wrôe_high
(
com
);

156 
lcd_wrôe_comm
(
uöt8_t
 
com
){

157 
lcd_wrôe_hÆf_comm
(
com
);

158 
lcd_wrôe_low
(
com
);

163 
lcd_wrôe_d©a
(
uöt8_t
 
d©a
){

164 
i›‹t_£t_pö_Àvñ
(
_PIN_LCD_RS
, 1);

165 
lcd_wrôe_high
(
d©a
);

166 
lcd_wrôe_low
(
d©a
);

170 
lcd_öô
(){

171 
i›‹t_öô
();

172 
dñay_öô
();

179 
i›‹t_£t_pö_dú
(
_PIN_LCD_D4
, 
IOPORT_DIR_OUTPUT
);

180 
i›‹t_£t_pö_dú
(
_PIN_LCD_D5
, 
IOPORT_DIR_OUTPUT
);

181 
i›‹t_£t_pö_dú
(
_PIN_LCD_D6
, 
IOPORT_DIR_OUTPUT
);

182 
i›‹t_£t_pö_dú
(
_PIN_LCD_D7
, 
IOPORT_DIR_OUTPUT
);

184 
i›‹t_£t_pö_dú
(
_PIN_LCD_E
, 
IOPORT_DIR_OUTPUT
);

185 
i›‹t_£t_pö_dú
(
_PIN_LCD_RS
, 
IOPORT_DIR_OUTPUT
);

186 
i›‹t_£t_pö_dú
(
_PIN_LCD_RW
, 
IOPORT_DIR_OUTPUT
);

189 
dñay_us
(40000);

191 
lcd_wrôe_hÆf_comm
(
SET
 | 
BITS_8
);

192 
dñay_us
(4100);

195 
lcd_wrôe_hÆf_comm
(
SET
 | 
BITS_8
);

196 
dñay_us
(100);

197 
lcd_wrôe_hÆf_comm
(
SET
 | 
BITS_8
);

198 
busy
();

199 
lcd_wrôe_hÆf_comm
(
SET
 | 
BITS_4
);

200 
dñay_us
(100);

201 
busy
();

202 
lcd_wrôe_comm
(
SET
 | 
BITS_4
 | 
LINES_2
 | 
DOTS_5_8
);

203 
lcd_wrôe_comm
(
CONTROL
 | 
DISPLAY_OFF
 | 
CURSOR_OFF
 | 
BLINK_OFF
);

204 
lcd_wrôe_comm
(
CLEAR_DISPLAY
);

205 
lcd_wrôe_comm
(
MODE
 | 
CURSOR_DIRECTION_RIGHT
 | 
DISPLAY_SHIFT_OFF
);

206 
lcd_wrôe_comm
(
CONTROL
 | 
DISPLAY_ON
 | 
CURSOR_OFF
 | 
BLINK_OFF
);

212 
lcd_drivî
(){

213 
i
;

214 
lcd_wrôe_comm
(
DDRAM
 | 0x00);

215 
i
 = 0; i < 16; i++){

216 
lcd_wrôe_d©a
(
lcd_°rög
[
i
]);

218 
lcd_wrôe_comm
(
DDRAM
 | 0x40);

219 ; 
i
 < 32; i++){

220 
lcd_wrôe_d©a
(
lcd_°rög
[
i
]);

224 
ãxt2lcd
(*
izhod
, *
°r
, 
uöt8_t
 
pos
){

225 
uöt8_t
 
i
;

228 if(((
uöt8_t
)(
°r
Ë+ 
pos
)>33){

229 
•rötf
(
izhod
, "too big stringÅo display ");

233 
i
 = 0; i<=32; i++){

234 if((
i
>
pos
Ë&& ((i-pos)<(
uöt8_t
)((
°r
)))){

235 
izhod
[
i
] = 
°r
[i-
pos
];

238 
izhod
[
i
] = ' ';

242 
•rötf
(
lcd_°rög
, 
izhod
);

247 #ifde‡
__˝lu•lus


	@/home/vaje/Documents/vaja9/app/src/main.c

1 
	~<asf.h
>

2 
	~"lcd.h
"

3 
	~"b‹d.h
"

5 
	~<πos_èsk.h
>

6 
	~<fifo.h
>

8 #ifde‡
__˝lu•lus


14 
uöt8_t
 
ã°_buff
[7];

23 
maö
 (){

25 
sys˛k_öô
();

28 
WDT
->
WDT_MR
 = 
WDT_MR_WDDIS
;

31 
i›‹t_öô
();

32 
dñay_öô
();

33 
lcd_öô
();

34 
b‹d_öô
();

70 
NVIC_E«bÀIRQ
(
SysTick_IRQn
);

72 if(
πos_öô
(20000) != 0){

75 
πos_íabÀ
();

77 
•rötf
(
lcd_°rög
,"FIFO v cakalnici");

88 #ifde‡
__˝lu•lus


	@/home/vaje/Documents/vaja9/app/src/rtos.c

1 
	~<πos.h
>

4 #ifde‡
__˝lu•lus


9 
πos_èsk_t
 *
èsk_li°
[];

10 
πos_èsk_t
 *
èsk_¥iv
;

16 
uöt8_t
 
πos_öô
(
uöt32_t
 
¶i˚s_us
){

18 
uöt32_t
 
	gn
 = 0;

19 
uöt64_t
 
	gbuff
 = 0;

21 
	gbuff
 = 
Sy°emC‹eClock
/8;

22 
	gbuff
 = 
buff
*
¶i˚s_us
;

23 
	gn
 = 
buff
/
MICRO_SEC
;

25 if((
	gn
-1Ë> 
	gSysTick_LOAD_RELOAD_Msk
)  1;

27 
	gSysTick
->
	gLOAD
 = 
n
 - 1;

28 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1<<
__NVIC_PRIO_BITS
) - 1);

29 
	gSysTick
->
	gVAL
 = 0;

30 
	gSysTick
-> 
	gCTRL
 = 0<<
SysTick_CTRL_CLKSOURCE_Pos
 | 
SysTick_CTRL_TICKINT_Msk
;

40 
πos_íabÀ
(){

41 
	gSysTick
-> 
	gCTRL
 |
SysTick_CTRL_ENABLE_Msk
;

46 
πos_dißbÀ
(){

47 
	gSysTick
-> 
	gCTRL
 |!
SysTick_CTRL_ENABLE_Msk
;

53 
SysTick_H™dÀr
(){

56 
uöt8_t
 
	gidx
 = 0;

57 
uöt32_t
 
	gtick
 = 0;

58 
uöt32_t
 
	g≥ndög_¥o˚s
 = 0;

59 
	gtick
++;

64 if(
	gèsk_¥iv
 != 0){

65 
èsk_¥iv
->
drivî
();

66 
	gèsk_¥iv
->
	gœ°_tick
 = 
tick
;

70 
	gèsk_li°
[
idx
]->
drivî
();

71 
	gèsk_li°
[
idx
]->
	gœ°_tick
 = 
tick
;

73 
	gidx
++;

74 if(
	gèsk_li°
[
idx
] == 0){

75 
idx
 = 0;

80 
	g≥ndög_¥o˚s
 = 
SCB
->
ICSR
;

82 if(
	g≥ndög_¥o˚s
 & 
	gSCB_ICSR_PENDSTSET_Msk
){

95 #ifde‡
__˝lu•lus


	@/home/vaje/Documents/vaja9/app/src/rtos_task.c

1 
	~<πos_èsk.h
>

3 #ifde‡
__˝lu•lus


7 
fifo_t
 
keys_fifo
;

10 
πos_èsk_t
 
	gèsk_lcd
 = {

11 .
œ°_tick
 = 0,

12 .
	g«me
 = "LCD",

13 .
	gdrivî
 = 
lcd_drivî


17 
πos_èsk_t
 
	gèsk_uø
 = {

18 .
œ°_tick
 = 0,

19 .
	g«me
 = "URA",

20 .
	gdrivî
 = 
uø_drivî


24 
πos_èsk_t
 
	gèsk_ãxt
 = {

25 .
œ°_tick
 = 0,

26 .
	g«me
 = "CALC",

27 .
	gdrivî
 = 
ãxt_drivî


31 
πos_èsk_t
 
	gèsk_tùke
 = {

32 .
œ°_tick
 = 0,

33 .
	g«me
 = "TIPKE",

34 .
	gdrivî
 = 
buâ⁄s_drivî


38 
πos_èsk_t
 
	gèsk_Àd
 = {

39 .
œ°_tick
 = 0,

40 .
	g«me
 = "LED",

41 .
	gdrivî
 = 
Àd_drivî


66 
uø_drivî
(){

67 
uöt32_t
 
	g˛k
 = 0;

69 
	g˛k
++;

71 if(!(
	g˛k
%12)){

72 
i›‹t_toggÀ_pö_Àvñ
(
D1_IDX
);

78 
ãxt_drivî
(){

79 
uöt8_t
 
	gwaôög
[
KEYS_FIFO_SIZE
];

80 
uöt16_t
 
	gn
, 
	gi
;

81 
	gn
=0;

82 
	gi
 = 0;

84 
	gi
 = 
fifo_look
(&
keys_fifo
,
waôög
);

86 
	gn
 = 0; (!“ =
i
) && (i != 0));Ç++){

87 
•rötf
(
lcd_°rög
+16+
n
,"%d",()
waôög
[n]);

89 
	glcd_°rög
[16+
i
] = ' ';

93 
buâ⁄s_drivî
(){

94 
	gbut⁄s
 = 0;

95 
uöt8_t
 
	gía
 = 1, 
	gdva
 = 2, 
	gåi
 = 3, 
	g°úi
 = 4;

97 
	gbut⁄s
 = 
gë_buâ⁄_¥ess
();

99 if(
	gbut⁄s
 & 
	gMask_T1
){

100 
fifo_wrôe
(&
keys_fifo
,&
ía
,1);

102 if(
	gbut⁄s
 & 
	gMask_T2
){

103 
fifo_wrôe
(&
keys_fifo
,&
dva
,1);

105 if(
	gbut⁄s
 & 
	gMask_T3
){

106 
fifo_wrôe
(&
keys_fifo
,&
åi
,1);

108 if(
	gbut⁄s
 & 
	gMask_T4
){

109 
fifo_wrôe
(&
keys_fifo
,&
°úi
,1);

114 
Àd_drivî
(){

115 
uöt8_t
 
	gcheck
, 
	gd©a_ªad
;

116 
uöt8_t
 
	gcou¡
=0;

119 if(
	gcou¡
>0){

120 if((
	gcou¡
%5 =0Ë&& (
cou¡
>50)){

121 
i›‹t_£t_pö_Àvñ
(
D4_IDX
, 
HIGH
);

122 
i›‹t_£t_pö_Àvñ
(
D2_IDX
, 
HIGH
);

125 if((
	gcou¡
%5 =3Ë&& (
cou¡
>50)){

126 
i›‹t_£t_pö_Àvñ
(
D4_IDX
, 
LOW
);

127 
i›‹t_£t_pö_Àvñ
(
D2_IDX
, 
LOW
);

133 
	gcou¡
--;

136 
	gcheck
 = 
fifo_ªad
 (&
keys_fifo
, &
d©a_ªad
, 1);

137 if(
	gcheck
 == 1){

138 
cou¡
 = 
d©a_ªad
 * 5 +50;

141 
i›‹t_£t_pö_Àvñ
(
D4_IDX
, 
HIGH
);

142 
i›‹t_£t_pö_Àvñ
(
D2_IDX
, 
HIGH
);

144 
	gcou¡
--;

161 
πos_èsk_t
 *
	gèsk_li°
[] = {&
èsk_tùke
, &
èsk_ãxt
, &
èsk_lcd
, &
èsk_uø
, 0 };

162 
πos_èsk_t
 *
	gèsk_¥iv
 = &
èsk_Àd
;

169 #ifde‡
__˝lu•lus


	@/home/vaje/Documents/vaja9/archive.sh

1 #!/
bö
/
sh


2 
	gPROJECT_NAME
="${1}"

3 
PROJECT_PATH
="${2}"

4 
PROJECT_DIR
="$(dirname ${2})"

5 
PROJECT_BASE
="$(basename ${2})"

6 
ARCHIVE_NAME
="${PROJECT_NAME}_$(date +%Y-%m-%d-%H.%M).tar.gz"

8 
echo
 " Creatingárchive >> ${ARCHIVE_NAME} << ..."

9 
make
 
˛ón
 -
e
 
PN
="${PROJECT_NAME}" > /
dev
/
nuŒ
 2>&1

10 
cd
 "${PROJECT_DIR}"

11 
èr
 -
czf
 "${ARCHIVE_NAME}" "${PROJECT_BASE}"

	@/home/vaje/Documents/vaja9/asf/common/boards/board.h

50 #i‚de‡
_BOARD_H_


51 
	#_BOARD_H_


	)

62 
	~"compûî.h
"

64 #ifde‡
__˝lu•lus


72 
	#EVK1100
 1

73 
	#EVK1101
 2

74 
	#UC3C_EK
 3

75 
	#EVK1104
 4

76 
	#EVK1105
 5

77 
	#STK600_RCUC3L0
 6

78 
	#UC3L_EK
 7

79 
	#XPLAIN
 8

80 
	#STK600_RC064X
 10

81 
	#STK600_RC100X
 11

82 
	#UC3_A3_XPLAINED
 13

83 
	#UC3_L0_XPLAINED
 15

84 
	#STK600_RCUC3D
 16

85 
	#STK600_RCUC3C0
 17

86 
	#XMEGA_B1_XPLAINED
 18

87 
	#XMEGA_A1_XPLAINED
 19

88 
	#XMEGA_A1U_XPLAINED_PRO
 20

89 
	#STK600_RCUC3L4
 21

90 
	#UC3_L0_XPLAINED_BC
 22

91 
	#MEGA1284P_XPLAINED_BC
 23

92 
	#STK600_RC044X
 24

93 
	#STK600_RCUC3B0
 25

94 
	#UC3_L0_QT600
 26

95 
	#XMEGA_A3BU_XPLAINED
 27

96 
	#STK600_RC064X_LCDX
 28

97 
	#STK600_RC100X_LCDX
 29

98 
	#UC3B_BOARD_CONTROLLER
 30

99 
	#RZ600
 31

100 
	#SAM3S_EK
 32

101 
	#SAM3U_EK
 33

102 
	#SAM3X_EK
 34

103 
	#SAM3N_EK
 35

104 
	#SAM3S_EK2
 36

105 
	#SAM4S_EK
 37

106 
	#STK600_RCUC3A0
 38

107 
	#STK600_MEGA
 39

108 
	#MEGA_1284P_XPLAINED
 40

109 
	#SAM4S_XPLAINED
 41

110 
	#ATXMEGA128A1_QT600
 42

111 
	#ARDUINO_DUE_X
 43

112 
	#STK600_RCUC3L3
 44

113 
	#SAM4L_EK
 45

114 
	#STK600_MEGA_RF
 46

115 
	#XMEGA_C3_XPLAINED
 47

116 
	#STK600_RC032X
 48

117 
	#SAM4S_EK2
 49

118 
	#XMEGA_E5_XPLAINED
 50

119 
	#SAM4E_EK
 51

120 
	#ATMEGA256RFR2_XPLAINED_PRO
 52

121 
	#SAM4S_XPLAINED_PRO
 53

122 
	#SAM4L_XPLAINED_PRO
 54

123 
	#ATMEGA256RFR2_ZIGBIT
 55

124 
	#XMEGA_RF233_ZIGBIT
 56

125 
	#XMEGA_RF212B_ZIGBIT
 57

126 
	#SAM4S_WPIR_RD
 58

127 
	#SAMD20_XPLAINED_PRO
 59

128 
	#SAM4L8_XPLAINED_PRO
 60

129 
	#SAM4N_XPLAINED_PRO
 61

130 
	#XMEGA_A3_REB_CBB
 62

131 
	#ATMEGARFX_RCB
 63

132 
	#SAM4C_EK
 64

133 
	#RCB256RFR2_XPRO
 65

134 
	#SAMG53_XPLAINED_PRO
 66

135 
	#SAM4CP16BMB
 67

136 
	#SAM4E_XPLAINED_PRO
 68

137 
	#SAMD21_XPLAINED_PRO
 69

138 
	#SAMR21_XPLAINED_PRO
 70

139 
	#SAM4CMP_DB
 71

140 
	#SAM4CMS_DB
 72

141 
	#ATPL230AMB
 73

142 
	#SAMD11_XPLAINED_PRO
 74

143 
	#SAMG55_XPLAINED_PRO
 75

144 
	#SAML21_XPLAINED_PRO
 76

145 
	#SAMD10_XPLAINED_MINI
 77

146 
	#SAMDA1_XPLAINED_PRO
 78

147 
	#SAMW25_XPLAINED_PRO
 79

148 
	#SAMC21_XPLAINED_PRO
 80

149 
	#SAMV71_XPLAINED_ULTRA
 81

150 
	#ATMEGA328P_XPLAINED_MINI
 82

151 
	#ATMEGA328PB_XPLAINED_MINI
 83

152 
	#SAMB11_XPLAINED_PRO
 84

153 
	#SAME70_XPLAINED
 85

154 
	#SAML22_XPLAINED_PRO
 86

155 
	#SAML22_XPLAINED_PRO_B
 87

156 
	#SAMR21ZLL_EK
 88

157 
	#ATMEGA168PB_XPLAINED_MINI
 89

158 
	#ATMEGA324PB_XPLAINED_PRO
 90

159 
	#SAMB11CSP_XPLAINED_PRO
 91

160 
	#SAMB11ZR_XPLAINED_PRO
 92

161 
	#SAMR30_XPLAINED_PRO
 93

162 
	#SIMULATOR_XMEGA_A1
 97

163 
	#AVR_SIMULATOR_UC3
 98

164 
	#USER_BOARD
 99

165 
	#DUMMY_BOARD
 100

167 

	)

171 
	#EXT1102
 1

172 
	#MC300
 2

173 
	#SENSORS_XPLAINED_INERTIAL_1
 3

174 
	#SENSORS_XPLAINED_INERTIAL_2
 4

175 
	#SENSORS_XPLAINED_PRESSURE_1
 5

176 
	#SENSORS_XPLAINED_LIGHTPROX_1
 6

177 
	#SENSORS_XPLAINED_INERTIAL_A1
 7

178 
	#RZ600_AT86RF231
 8

179 
	#RZ600_AT86RF230B
 9

180 
	#RZ600_AT86RF212
 10

181 
	#SENSORS_XPLAINED_BREADBOARD
 11

182 
	#SECURITY_XPLAINED
 12

183 
	#USER_EXT_BOARD
 99

185 

	)

186 #i‡
BOARD
 =
EVK1100


187 
	~"evk1100/evk1100.h
"

188 #ñi‡
BOARD
 =
EVK1101


189 
	~"evk1101/evk1101.h
"

190 #ñi‡
BOARD
 =
UC3C_EK


191 
	~"uc3c_ek/uc3c_ek.h
"

192 #ñi‡
BOARD
 =
EVK1104


193 
	~"evk1104/evk1104.h
"

194 #ñi‡
BOARD
 =
EVK1105


195 
	~"evk1105/evk1105.h
"

196 #ñi‡
BOARD
 =
STK600_RCUC3L0


197 
	~"°k600/rcuc3l0/°k600_rcuc3l0.h
"

198 #ñi‡
BOARD
 =
UC3L_EK


199 
	~"uc3l_ek/uc3l_ek.h
"

200 #ñi‡
BOARD
 =
STK600_RCUC3L4


201 
	~"°k600/rcuc3l4/°k600_rcuc3l4.h
"

202 #ñi‡
BOARD
 =
XPLAIN


203 
	~"x∂aö/x∂aö.h
"

204 #ñi‡
BOARD
 =
STK600_MEGA


206 #ñi‡
BOARD
 =
STK600_MEGA_RF


207 
	~"°k600.h
"

208 #ñi‡
BOARD
 =
ATMEGA256RFR2_XPLAINED_PRO


209 
	~"©mega256r‰2_x∂aöed_¥o/©mega256r‰2_x∂aöed_¥o.h
"

210 #ñi‡
BOARD
 =
ATMEGA256RFR2_ZIGBIT


211 
	~"©mega256r‰2_zigbô/©mega256r‰2_zigbô.h
"

212 #ñi‡
BOARD
 =
STK600_RC032X


213 
	~"°k600/rc032x/°k600_rc032x.h
"

214 #ñi‡
BOARD
 =
STK600_RC044X


215 
	~"°k600/rc044x/°k600_rc044x.h
"

216 #ñi‡
BOARD
 =
STK600_RC064X


217 
	~"°k600/rc064x/°k600_rc064x.h
"

218 #ñi‡
BOARD
 =
STK600_RC100X


219 
	~"°k600/rc100x/°k600_rc100x.h
"

220 #ñi‡
BOARD
 =
UC3_A3_XPLAINED


221 
	~"uc3_a3_x∂aöed/uc3_a3_x∂aöed.h
"

222 #ñi‡
BOARD
 =
UC3_L0_XPLAINED


223 
	~"uc3_l0_x∂aöed/uc3_l0_x∂aöed.h
"

224 #ñi‡
BOARD
 =
STK600_RCUC3B0


225 
	~"°k600/rcuc3b0/°k600_rcuc3b0.h
"

226 #ñi‡
BOARD
 =
STK600_RCUC3D


227 
	~"°k600/rcuc3d/°k600_rcuc3d.h
"

228 #ñi‡
BOARD
 =
STK600_RCUC3C0


229 
	~"°k600/rcuc3c0/°k600_rcuc3c0.h
"

230 #ñi‡
BOARD
 =
SAMG53_XPLAINED_PRO


231 
	~"ßmg53_x∂aöed_¥o/ßmg53_x∂aöed_¥o.h
"

232 #ñi‡
BOARD
 =
SAMG55_XPLAINED_PRO


233 
	~"ßmg55_x∂aöed_¥o/ßmg55_x∂aöed_¥o.h
"

234 #ñi‡
BOARD
 =
XMEGA_B1_XPLAINED


235 
	~"xmega_b1_x∂aöed/xmega_b1_x∂aöed.h
"

236 #ñi‡
BOARD
 =
STK600_RC064X_LCDX


237 
	~"°k600/rc064x_lcdx/°k600_rc064x_lcdx.h
"

238 #ñi‡
BOARD
 =
STK600_RC100X_LCDX


239 
	~"°k600/rc100x_lcdx/°k600_rc100x_lcdx.h
"

240 #ñi‡
BOARD
 =
XMEGA_A1_XPLAINED


241 
	~"xmega_a1_x∂aöed/xmega_a1_x∂aöed.h
"

242 #ñi‡
BOARD
 =
XMEGA_A1U_XPLAINED_PRO


243 
	~"xmega_a1u_x∂aöed_¥o/xmega_a1u_x∂aöed_¥o.h
"

244 #ñi‡
BOARD
 =
UC3_L0_XPLAINED_BC


245 
	~"uc3_l0_x∂aöed_bc/uc3_l0_x∂aöed_bc.h
"

246 #ñi‡
BOARD
 =
SAM3S_EK


247 
	~"ßm3s_ek/ßm3s_ek.h
"

248 
	~"sy°em_ßm3s.h
"

249 #ñi‡
BOARD
 =
SAM3S_EK2


250 
	~"ßm3s_ek2/ßm3s_ek2.h
"

251 
	~"sy°em_ßm3sd8.h
"

252 #ñi‡
BOARD
 =
SAM3U_EK


253 
	~"ßm3u_ek/ßm3u_ek.h
"

254 
	~"sy°em_ßm3u.h
"

255 #ñi‡
BOARD
 =
SAM3X_EK


256 
	~"ßm3x_ek/ßm3x_ek.h
"

257 
	~"sy°em_ßm3x.h
"

258 #ñi‡
BOARD
 =
SAM3N_EK


259 
	~"ßm3n_ek/ßm3n_ek.h
"

260 
	~"sy°em_ßm3n.h
"

261 #ñi‡
BOARD
 =
SAM4S_EK


262 
	~"ßm4s_ek/ßm4s_ek.h
"

263 
	~"sy°em_ßm4s.h
"

264 #ñi‡
BOARD
 =
SAM4S_WPIR_RD


265 
	~"ßm4s_wpú_rd/ßm4s_wpú_rd.h
"

266 
	~"sy°em_ßm4s.h
"

267 #ñi‡
BOARD
 =
SAM4S_XPLAINED


268 
	~"ßm4s_x∂aöed/ßm4s_x∂aöed.h
"

269 
	~"sy°em_ßm4s.h
"

270 #ñi‡
BOARD
 =
SAM4S_EK2


271 
	~"ßm4s_ek2/ßm4s_ek2.h
"

272 
	~"sy°em_ßm4s.h
"

273 #ñi‡
BOARD
 =
MEGA_1284P_XPLAINED


275 #ñi‡
BOARD
 =
ARDUINO_DUE_X


276 
	~"¨duöo_due_x/¨duöo_due_x.h
"

277 
	~"sy°em_ßm3x.h
"

278 #ñi‡
BOARD
 =
SAM4L_EK


279 
	~"ßm4l_ek/ßm4l_ek.h
"

280 #ñi‡
BOARD
 =
SAM4E_EK


281 
	~"ßm4e_ek/ßm4e_ek.h
"

282 #ñi‡
BOARD
 =
SAMD20_XPLAINED_PRO


283 
	~"ßmd20_x∂aöed_¥o/ßmd20_x∂aöed_¥o.h
"

284 #ñi‡
BOARD
 =
SAMD21_XPLAINED_PRO


285 
	~"ßmd21_x∂aöed_¥o/ßmd21_x∂aöed_¥o.h
"

286 #ñi‡
BOARD
 =
SAMR21_XPLAINED_PRO


287 
	~"ßmr21_x∂aöed_¥o/ßmr21_x∂aöed_¥o.h
"

288 #ñi‡
BOARD
 =
SAMR30_XPLAINED_PRO


289 
	~"ßmr30_x∂aöed_¥o/ßmr30_x∂aöed_¥o.h
"

290 #ñi‡
BOARD
 =
SAMR21ZLL_EK


291 
	~"ßmr21zŒ_ek/ßmr21zŒ_ek.h
"

292 #ñi‡
BOARD
 =
SAMD11_XPLAINED_PRO


293 
	~"ßmd11_x∂aöed_¥o/ßmd11_x∂aöed_¥o.h
"

294 #ñi‡
BOARD
 =
SAML21_XPLAINED_PRO
 && 
deföed
(
__SAML21J18A__
)

295 
	~"ßml21_x∂aöed_¥o/ßml21_x∂aöed_¥o.h
"

296 #ñi‡
BOARD
 =
SAML22_XPLAINED_PRO


297 
	~"ßml22_x∂aöed_¥o/ßml22_x∂aöed_¥o.h
"

298 #ñi‡
BOARD
 =
SAML22_XPLAINED_PRO_B


299 
	~"ßml22_x∂aöed_¥o_b/ßml22_x∂aöed_¥o_b.h
"

300 #ñi‡
BOARD
 =
SAML21_XPLAINED_PRO
 && 
deföed
(
__SAML21J18B__
)

301 
	~"ßml21_x∂aöed_¥o_b/ßml21_x∂aöed_¥o.h
"

302 #ñi‡
BOARD
 =
SAMD10_XPLAINED_MINI


303 
	~"ßmd10_x∂aöed_möi/ßmd10_x∂aöed_möi.h
"

304 #ñi‡
BOARD
 =
SAMDA1_XPLAINED_PRO


305 
	~"ßmda1_x∂aöed_¥o/ßmda1_x∂aöed_¥o.h
"

306 #ñi‡
BOARD
 =
SAMC21_XPLAINED_PRO


307 
	~"ßmc21_x∂aöed_¥o/ßmc21_x∂aöed_¥o.h
"

308 #ñi‡
BOARD
 =
SAM4N_XPLAINED_PRO


309 
	~"ßm4n_x∂aöed_¥o/ßm4n_x∂aöed_¥o.h
"

310 #ñi‡
BOARD
 =
SAMW25_XPLAINED_PRO


311 
	~"ßmw25_x∂aöed_¥o/ßmw25_x∂aöed_¥o.h
"

312 #ñi‡
BOARD
 =
SAMV71_XPLAINED_ULTRA


313 
	~"ßmv71_x∂aöed_u…ø/ßmv71_x∂aöed_u…ø.h
"

314 #ñi‡
BOARD
 =
MEGA1284P_XPLAINED_BC


315 
	~"mega1284p_x∂aöed_bc/mega1284p_x∂aöed_bc.h
"

316 #ñi‡
BOARD
 =
UC3_L0_QT600


317 
	~"uc3_l0_qt600/uc3_l0_qt600.h
"

318 #ñi‡
BOARD
 =
XMEGA_A3BU_XPLAINED


319 
	~"xmega_a3bu_x∂aöed/xmega_a3bu_x∂aöed.h
"

320 #ñi‡
BOARD
 =
XMEGA_E5_XPLAINED


321 
	~"xmega_e5_x∂aöed/xmega_e5_x∂aöed.h
"

322 #ñi‡
BOARD
 =
UC3B_BOARD_CONTROLLER


323 
	~"uc3b_bﬂrd_c⁄åﬁÀr/uc3b_bﬂrd_c⁄åﬁÀr.h
"

324 #ñi‡
BOARD
 =
RZ600


325 
	~"rz600/rz600.h
"

326 #ñi‡
BOARD
 =
STK600_RCUC3A0


327 
	~"°k600/rcuc3a0/°k600_rcuc3a0.h
"

328 #ñi‡
BOARD
 =
ATXMEGA128A1_QT600


329 
	~"©xmega128a1_qt600/©xmega128a1_qt600.h
"

330 #ñi‡
BOARD
 =
STK600_RCUC3L3


331 
	~"°k600/rcuc3l3/°k600_rcuc3l3.h
"

332 #ñi‡
BOARD
 =
SAM4S_XPLAINED_PRO


333 
	~"ßm4s_x∂aöed_¥o/ßm4s_x∂aöed_¥o.h
"

334 #ñi‡
BOARD
 =
SAM4L_XPLAINED_PRO


335 
	~"ßm4l_x∂aöed_¥o/ßm4l_x∂aöed_¥o.h
"

336 #ñi‡
BOARD
 =
SAM4L8_XPLAINED_PRO


337 
	~"ßm4l8_x∂aöed_¥o/ßm4l8_x∂aöed_¥o.h
"

338 #ñi‡
BOARD
 =
SAM4C_EK


339 
	~"ßm4c_ek/ßm4c_ek.h
"

340 #ñi‡
BOARD
 =
SAM4CMP_DB


341 
	~"ßm4cmp_db/ßm4cmp_db.h
"

342 #ñi‡
BOARD
 =
SAM4CMS_DB


343 
	~"ßm4cms_db/ßm4cms_db.h
"

344 #ñi‡
BOARD
 =
SAM4CP16BMB


345 
	~"ßm4˝16bmb/ßm4˝16bmb.h
"

346 #ñi‡
BOARD
 =
ATPL230AMB


347 
	~"©∂230amb/©∂230amb.h
"

348 #ñi‡
BOARD
 =
XMEGA_C3_XPLAINED


349 
	~"xmega_c3_x∂aöed/xmega_c3_x∂aöed.h
"

350 #ñi‡
BOARD
 =
XMEGA_RF233_ZIGBIT


351 
	~"xmega_rf233_zigbô/xmega_rf233_zigbô.h
"

352 #ñi‡
BOARD
 =
XMEGA_A3_REB_CBB


353 
	~"xmega_a3_ªb_cbb/xmega_a3_ªb_cbb.h
"

354 #ñi‡
BOARD
 =
ATMEGARFX_RCB


355 
	~"©meg¨fx_rcb/©meg¨fx_rcb.h
"

356 #ñi‡
BOARD
 =
RCB256RFR2_XPRO


357 
	~"©mega256r‰2_rcb_x¥o/©mega256r‰2_rcb_x¥o.h
"

358 #ñi‡
BOARD
 =
XMEGA_RF212B_ZIGBIT


359 
	~"xmega_rf212b_zigbô/xmega_rf212b_zigbô.h
"

360 #ñi‡
BOARD
 =
SAM4E_XPLAINED_PRO


361 
	~"ßm4e_x∂aöed_¥o/ßm4e_x∂aöed_¥o.h
"

362 #ñi‡
BOARD
 =
ATMEGA328P_XPLAINED_MINI


363 
	~"©mega328p_x∂aöed_möi/©mega328p_x∂aöed_möi.h
"

364 #ñi‡
BOARD
 =
ATMEGA328PB_XPLAINED_MINI


365 
	~"©mega328pb_x∂aöed_möi/©mega328pb_x∂aöed_möi.h
"

366 #ñi‡
BOARD
 =
SAMB11_XPLAINED_PRO


367 
	~"ßmb11_x∂aöed_¥o/ßmb11_x∂aöed_¥o.h
"

368 #ñi‡
BOARD
 =
SAME70_XPLAINED


369 
	~"ßme70_x∂aöed/ßme70_x∂aöed.h
"

370 #ñi‡
BOARD
 =
ATMEGA168PB_XPLAINED_MINI


371 
	~"©mega168pb_x∂aöed_möi/©mega168pb_x∂aöed_möi.h
"

372 #ñi‡
BOARD
 =
ATMEGA324PB_XPLAINED_PRO


373 
	~"©mega324pb_x∂aöed_¥o/©mega324pb_x∂aöed_¥o.h
"

374 #ñi‡
BOARD
 =
SAMB11CSP_XPLAINED_PRO


375 
	~"ßmb11c•_x∂aöed_¥o/ßmb11c•_x∂aöed_¥o.h
"

376 #ñi‡
BOARD
 =
SAMB11ZR_XPLAINED_PRO


377 
	~"ßmb11zr_x∂aöed_¥o/ßmb11zr_x∂aöed_¥o.h
"

378 #ñi‡
BOARD
 =
SIMULATOR_XMEGA_A1


379 
	~"simuœt‹/xmega_a1/simuœt‹_xmega_a1.h
"

380 #ñi‡
BOARD
 =
AVR_SIMULATOR_UC3


381 
	~"avr_simuœt‹_uc3/avr_simuœt‹_uc3.h
"

382 #ñi‡
BOARD
 =
USER_BOARD


384 
	~"u£r_bﬂrd.h
"

385 #ñi‡
BOARD
 =
DUMMY_BOARD


386 
	~"dummy/dummy_bﬂrd.h
"

388 #îr‹ 
No
 
known
 
Atmñ
 
bﬂrd
 
deföed


391 #i‡(
deföed
 
EXT_BOARD
)

392 #i‡
EXT_BOARD
 =
MC300


393 
	~"mc300/mc300.h
"

394 #ñi‡(
EXT_BOARD
 =
SENSORS_XPLAINED_INERTIAL_1
) || \

395 (
EXT_BOARD
 =
SENSORS_XPLAINED_INERTIAL_2
) || \

396 (
EXT_BOARD
 =
SENSORS_XPLAINED_INERTIAL_A1
) || \

397 (
EXT_BOARD
 =
SENSORS_XPLAINED_PRESSURE_1
) || \

398 (
EXT_BOARD
 =
SENSORS_XPLAINED_LIGHTPROX_1
) || \

399 (
EXT_BOARD
 =
SENSORS_XPLAINED_BREADBOARD
)

400 
	~"£ns‹s_x∂aöed/£ns‹s_x∂aöed.h
"

401 #ñi‡
EXT_BOARD
 =
RZ600_AT86RF231


402 
	~"©86rf231/©86rf231.h
"

403 #ñi‡
EXT_BOARD
 =
RZ600_AT86RF230B


404 
	~"©86rf230b/©86rf230b.h
"

405 #ñi‡
EXT_BOARD
 =
RZ600_AT86RF212


406 
	~"©86rf212/©86rf212.h
"

407 #ñi‡
EXT_BOARD
 =
SECURITY_XPLAINED


408 
	~"£curôy_x∂aöed.h
"

409 #ñi‡
EXT_BOARD
 =
USER_EXT_BOARD


416 #i‡(
deföed
(
__GNUC__
Ë&& deföed(
__AVR32__
)Ë|| (deföed(
__ICCAVR32__
Ë|| deföed(
__AAVR32__
))

417 #ifde‡
__AVR32_ABI_COMPILER__


424 
bﬂrd_öô
();

433 
bﬂrd_öô
();

437 #ifde‡
__˝lu•lus


	@/home/vaje/Documents/vaja9/asf/common/services/clock/dfll.h

46 #i‚de‡
CLK_DFLL_H_INCLUDED


47 
	#CLK_DFLL_H_INCLUDED


	)

49 
	~<∑πs.h
>

50 
	~"c⁄f_˛ock.h
"

52 #i‡
UC3L


53 
	~"uc3l/dÊl.h
"

54 #ñi‡
SAM4L


55 
	~"ßm4l/dÊl.h
"

57 #îr‹ 
Unsuµ‹ãd
 
chù
 
ty≥


351 
ölöe
 
	$dÊl_waô_f‹_cﬂr£_lock
(
dÊl_id
)

354 !
	`dÊl_is_cﬂr£_locked
(
dÊl_id
)) {

359 
	}
}

370 
ölöe
 
	$dÊl_waô_f‹_föe_lock
(
dÊl_id
)

373 !
	`dÊl_is_föe_locked
(
dÊl_id
)) {

378 
	}
}

389 
ölöe
 
	$dÊl_waô_f‹_accuøã_lock
(
dÊl_id
)

392 !
	`dÊl_is_accuøã_locked
(
dÊl_id
)) {

397 
	}
}

	@/home/vaje/Documents/vaja9/asf/common/services/clock/genclk.h

46 #i‚de‡
CLK_GENCLK_H_INCLUDED


47 
	#CLK_GENCLK_H_INCLUDED


	)

49 
	~"∑πs.h
"

51 #i‡
SAM3S


52 
	~"ßm3s/gí˛k.h
"

53 #ñi‡
SAM3U


54 
	~"ßm3u/gí˛k.h
"

55 #ñi‡
SAM3N


56 
	~"ßm3n/gí˛k.h
"

57 #ñi‡
SAM3XA


58 
	~"ßm3x/gí˛k.h
"

59 #ñi‡
SAM4S


60 
	~"ßm4s/gí˛k.h
"

61 #ñi‡
SAM4L


62 
	~"ßm4l/gí˛k.h
"

63 #ñi‡
SAM4E


64 
	~"ßm4e/gí˛k.h
"

65 #ñi‡
SAM4N


66 
	~"ßm4n/gí˛k.h
"

67 #ñi‡
SAM4C


68 
	~"ßm4c/gí˛k.h
"

69 #ñi‡
SAM4CM


70 
	~"ßm4cm/gí˛k.h
"

71 #ñi‡
SAM4CP


72 
	~"ßm4˝/gí˛k.h
"

73 #ñi‡
SAMG


74 
	~"ßmg/gí˛k.h
"

75 #ñi‡
SAMV71


76 
	~"ßmv71/gí˛k.h
"

77 #ñi‡
SAMV70


78 
	~"ßmv70/gí˛k.h
"

79 #ñi‡
SAME70


80 
	~"ßme70/gí˛k.h
"

81 #ñi‡
SAMS70


82 
	~"ßms70/gí˛k.h
"

83 #ñi‡(
UC3A0
 || 
UC3A1
)

84 
	~"uc3a0_a1/gí˛k.h
"

85 #ñi‡
UC3A3


86 
	~"uc3a3_a4/gí˛k.h
"

87 #ñi‡
UC3B


88 
	~"uc3b0_b1/gí˛k.h
"

89 #ñi‡
UC3C


90 
	~"uc3c/gí˛k.h
"

91 #ñi‡
UC3D


92 
	~"uc3d/gí˛k.h
"

93 #ñi‡
UC3L


94 
	~"uc3l/gí˛k.h
"

96 #îr‹ 
Unsuµ‹ãd
 
chù
 
ty≥


186 
ölöe
 
	$gí˛k_íabÀ_c⁄fig
(
id
, 
gí˛k_sour˚
 
§c
, 
dividî
)

188 
gí˛k_c⁄fig
 
gcfg
;

190 
	`gí˛k_c⁄fig_deÁu…s
(&
gcfg
, 
id
);

191 
	`gí˛k_íabÀ_sour˚
(
§c
);

192 
	`gí˛k_c⁄fig_£t_sour˚
(&
gcfg
, 
§c
);

193 
	`gí˛k_c⁄fig_£t_dividî
(&
gcfg
, 
dividî
);

194 
	`gí˛k_íabÀ
(&
gcfg
, 
id
);

195 
	}
}

	@/home/vaje/Documents/vaja9/asf/common/services/clock/osc.h

46 #i‚de‡
OSC_H_INCLUDED


47 
	#OSC_H_INCLUDED


	)

49 
	~"∑πs.h
"

50 
	~"c⁄f_˛ock.h
"

52 #i‡
SAM3S


53 
	~"ßm3s/osc.h
"

54 #ñi‡
SAM3XA


55 
	~"ßm3x/osc.h
"

56 #ñi‡
SAM3U


57 
	~"ßm3u/osc.h
"

58 #ñi‡
SAM3N


59 
	~"ßm3n/osc.h
"

60 #ñi‡
SAM4S


61 
	~"ßm4s/osc.h
"

62 #ñi‡
SAM4E


63 
	~"ßm4e/osc.h
"

64 #ñi‡
SAM4C


65 
	~"ßm4c/osc.h
"

66 #ñi‡
SAM4CM


67 
	~"ßm4cm/osc.h
"

68 #ñi‡
SAM4CP


69 
	~"ßm4˝/osc.h
"

70 #ñi‡
SAM4L


71 
	~"ßm4l/osc.h
"

72 #ñi‡
SAM4N


73 
	~"ßm4n/osc.h
"

74 #ñi‡
SAMG


75 
	~"ßmg/osc.h
"

76 #ñi‡
SAMV71


77 
	~"ßmv71/osc.h
"

78 #ñi‡
SAMV70


79 
	~"ßmv70/osc.h
"

80 #ñi‡
SAME70


81 
	~"ßme70/osc.h
"

82 #ñi‡
SAMS70


83 
	~"ßms70/osc.h
"

84 #ñi‡(
UC3A0
 || 
UC3A1
)

85 
	~"uc3a0_a1/osc.h
"

86 #ñi‡
UC3A3


87 
	~"uc3a3_a4/osc.h
"

88 #ñi‡
UC3B


89 
	~"uc3b0_b1/osc.h
"

90 #ñi‡
UC3C


91 
	~"uc3c/osc.h
"

92 #ñi‡
UC3D


93 
	~"uc3d/osc.h
"

94 #ñi‡
UC3L


95 
	~"uc3l/osc.h
"

96 #ñi‡
XMEGA


97 
	~"xmega/osc.h
"

99 #îr‹ 
Unsuµ‹ãd
 
chù
 
ty≥


162 #i‚de‡
__ASSEMBLY__


172 
ölöe
 
	$osc_waô_ªady
(
uöt8_t
 
id
)

174 !
	`osc_is_ªady
(
id
)) {

177 
	}
}

	@/home/vaje/Documents/vaja9/asf/common/services/clock/pll.h

46 #i‚de‡
CLK_PLL_H_INCLUDED


47 
	#CLK_PLL_H_INCLUDED


	)

49 
	~"∑πs.h
"

50 
	~"c⁄f_˛ock.h
"

52 #i‡
SAM3S


53 
	~"ßm3s/∂l.h
"

54 #ñi‡
SAM3XA


55 
	~"ßm3x/∂l.h
"

56 #ñi‡
SAM3U


57 
	~"ßm3u/∂l.h
"

58 #ñi‡
SAM3N


59 
	~"ßm3n/∂l.h
"

60 #ñi‡
SAM4S


61 
	~"ßm4s/∂l.h
"

62 #ñi‡
SAM4E


63 
	~"ßm4e/∂l.h
"

64 #ñi‡
SAM4C


65 
	~"ßm4c/∂l.h
"

66 #ñi‡
SAM4CM


67 
	~"ßm4cm/∂l.h
"

68 #ñi‡
SAM4CP


69 
	~"ßm4˝/∂l.h
"

70 #ñi‡
SAM4L


71 
	~"ßm4l/∂l.h
"

72 #ñi‡
SAM4N


73 
	~"ßm4n/∂l.h
"

74 #ñi‡
SAMG


75 
	~"ßmg/∂l.h
"

76 #ñi‡
SAMV71


77 
	~"ßmv71/∂l.h
"

78 #ñi‡
SAMV70


79 
	~"ßmv70/∂l.h
"

80 #ñi‡
SAME70


81 
	~"ßme70/∂l.h
"

82 #ñi‡
SAMS70


83 
	~"ßms70/∂l.h
"

84 #ñi‡(
UC3A0
 || 
UC3A1
)

85 
	~"uc3a0_a1/∂l.h
"

86 #ñi‡
UC3A3


87 
	~"uc3a3_a4/∂l.h
"

88 #ñi‡
UC3B


89 
	~"uc3b0_b1/∂l.h
"

90 #ñi‡
UC3C


91 
	~"uc3c/∂l.h
"

92 #ñi‡
UC3D


93 
	~"uc3d/∂l.h
"

94 #ñi‡(
UC3L0128
 || 
UC3L0256
 || 
UC3L3_L4
)

95 
	~"uc3l/∂l.h
"

96 #ñi‡
XMEGA


97 
	~"xmega/∂l.h
"

99 #îr‹ 
Unsuµ‹ãd
 
chù
 
ty≥


327 
ölöe
 
	$∂l_waô_f‹_lock
(
∂l_id
)

329 
	`As£π
(
∂l_id
 < 
NR_PLLS
);

331 !
	`∂l_is_locked
(
∂l_id
)) {

336 
	}
}

	@/home/vaje/Documents/vaja9/asf/common/services/clock/sam3x/genclk.h

47 #i‚de‡
CHIP_GENCLK_H_INCLUDED


48 
	#CHIP_GENCLK_H_INCLUDED


	)

50 
	~<osc.h
>

51 
	~<∂l.h
>

55 #ifde‡
__˝lu•lus


68 
	#GENCLK_PCK_0
 0

69 
	#GENCLK_PCK_1
 1

70 
	#GENCLK_PCK_2
 2

72 

	)

76 
	egí˛k_sour˚
 {

77 
GENCLK_PCK_SRC_SLCK_RC
 = 0,

78 
GENCLK_PCK_SRC_SLCK_XTAL
 = 1,

79 
GENCLK_PCK_SRC_SLCK_BYPASS
 = 2,

80 
GENCLK_PCK_SRC_MAINCK_4M_RC
 = 3,

81 
GENCLK_PCK_SRC_MAINCK_8M_RC
 = 4,

82 
GENCLK_PCK_SRC_MAINCK_12M_RC
 = 5,

83 
GENCLK_PCK_SRC_MAINCK_XTAL
 = 6,

84 
GENCLK_PCK_SRC_MAINCK_BYPASS
 = 7,

85 
GENCLK_PCK_SRC_PLLACK
 = 8,

86 
GENCLK_PCK_SRC_PLLBCK
 = 9,

87 
GENCLK_PCK_SRC_MCK
 = 10,

95 
	egí˛k_dividî
 {

96 
GENCLK_PCK_PRES_1
 = 
PMC_PCK_PRES_CLK_1
,

97 
GENCLK_PCK_PRES_2
 = 
PMC_PCK_PRES_CLK_2
,

98 
GENCLK_PCK_PRES_4
 = 
PMC_PCK_PRES_CLK_4
,

99 
GENCLK_PCK_PRES_8
 = 
PMC_PCK_PRES_CLK_8
,

100 
GENCLK_PCK_PRES_16
 = 
PMC_PCK_PRES_CLK_16
,

101 
GENCLK_PCK_PRES_32
 = 
PMC_PCK_PRES_CLK_32
,

102 
GENCLK_PCK_PRES_64
 = 
PMC_PCK_PRES_CLK_64
,

107 
	sgí˛k_c⁄fig
 {

108 
uöt32_t
 
˘æ
;

111 
ölöe
 
gí˛k_c⁄fig_deÁu…s
(
gí˛k_c⁄fig
 *
p_cfg
,

112 
uöt32_t
 
ul_id
)

114 
ul_id
 = ul_id;

115 
p_cfg
->
˘æ
 = 0;

118 
ölöe
 
gí˛k_c⁄fig_ªad
(
gí˛k_c⁄fig
 *
p_cfg
,

119 
uöt32_t
 
ul_id
)

121 
p_cfg
->
˘æ
 = 
PMC
->
PMC_PCK
[
ul_id
];

124 
ölöe
 
gí˛k_c⁄fig_wrôe
(c⁄° 
gí˛k_c⁄fig
 *
p_cfg
,

125 
uöt32_t
 
ul_id
)

127 
PMC
->
PMC_PCK
[
ul_id
] = 
p_cfg
->
˘æ
;

133 
ölöe
 
gí˛k_c⁄fig_£t_sour˚
(
gí˛k_c⁄fig
 *
p_cfg
,

134 
gí˛k_sour˚
 
e_§c
)

136 
p_cfg
->
˘æ
 &(~
PMC_PCK_CSS_Msk
);

138 
e_§c
) {

139 
GENCLK_PCK_SRC_SLCK_RC
:

140 
GENCLK_PCK_SRC_SLCK_XTAL
:

141 
GENCLK_PCK_SRC_SLCK_BYPASS
:

142 
p_cfg
->
˘æ
 |(
PMC_PCK_CSS_SLOW_CLK
);

145 
GENCLK_PCK_SRC_MAINCK_4M_RC
:

146 
GENCLK_PCK_SRC_MAINCK_8M_RC
:

147 
GENCLK_PCK_SRC_MAINCK_12M_RC
:

148 
GENCLK_PCK_SRC_MAINCK_XTAL
:

149 
GENCLK_PCK_SRC_MAINCK_BYPASS
:

150 
p_cfg
->
˘æ
 |(
PMC_PCK_CSS_MAIN_CLK
);

153 
GENCLK_PCK_SRC_PLLACK
:

154 
p_cfg
->
˘æ
 |(
PMC_PCK_CSS_PLLA_CLK
);

157 
GENCLK_PCK_SRC_PLLBCK
:

158 
p_cfg
->
˘æ
 |(
PMC_PCK_CSS_UPLL_CLK
);

161 
GENCLK_PCK_SRC_MCK
:

162 
p_cfg
->
˘æ
 |(
PMC_PCK_CSS_MCK
);

167 
ölöe
 
gí˛k_c⁄fig_£t_dividî
(
gí˛k_c⁄fig
 *
p_cfg
,

168 
uöt32_t
 
e_dividî
)

170 
p_cfg
->
˘æ
 &~
PMC_PCK_PRES_Msk
;

171 
p_cfg
->
˘æ
 |
e_dividî
;

176 
ölöe
 
gí˛k_íabÀ
(c⁄° 
gí˛k_c⁄fig
 *
p_cfg
,

177 
uöt32_t
 
ul_id
)

179 
PMC
->
PMC_PCK
[
ul_id
] = 
p_cfg
->
˘æ
;

180 
pmc_íabÀ_pck
(
ul_id
);

183 
ölöe
 
gí˛k_dißbÀ
(
uöt32_t
 
ul_id
)

185 
pmc_dißbÀ_pck
(
ul_id
);

188 
ölöe
 
gí˛k_íabÀ_sour˚
(
gí˛k_sour˚
 
e_§c
)

190 
e_§c
) {

191 
GENCLK_PCK_SRC_SLCK_RC
:

192 i‡(!
osc_is_ªady
(
OSC_SLCK_32K_RC
)) {

193 
osc_íabÀ
(
OSC_SLCK_32K_RC
);

194 
osc_waô_ªady
(
OSC_SLCK_32K_RC
);

198 
GENCLK_PCK_SRC_SLCK_XTAL
:

199 i‡(!
osc_is_ªady
(
OSC_SLCK_32K_XTAL
)) {

200 
osc_íabÀ
(
OSC_SLCK_32K_XTAL
);

201 
osc_waô_ªady
(
OSC_SLCK_32K_XTAL
);

205 
GENCLK_PCK_SRC_SLCK_BYPASS
:

206 i‡(!
osc_is_ªady
(
OSC_SLCK_32K_BYPASS
)) {

207 
osc_íabÀ
(
OSC_SLCK_32K_BYPASS
);

208 
osc_waô_ªady
(
OSC_SLCK_32K_BYPASS
);

212 
GENCLK_PCK_SRC_MAINCK_4M_RC
:

213 i‡(!
osc_is_ªady
(
OSC_MAINCK_4M_RC
)) {

214 
osc_íabÀ
(
OSC_MAINCK_4M_RC
);

215 
osc_waô_ªady
(
OSC_MAINCK_4M_RC
);

219 
GENCLK_PCK_SRC_MAINCK_8M_RC
:

220 i‡(!
osc_is_ªady
(
OSC_MAINCK_8M_RC
)) {

221 
osc_íabÀ
(
OSC_MAINCK_8M_RC
);

222 
osc_waô_ªady
(
OSC_MAINCK_8M_RC
);

226 
GENCLK_PCK_SRC_MAINCK_12M_RC
:

227 i‡(!
osc_is_ªady
(
OSC_MAINCK_12M_RC
)) {

228 
osc_íabÀ
(
OSC_MAINCK_12M_RC
);

229 
osc_waô_ªady
(
OSC_MAINCK_12M_RC
);

233 
GENCLK_PCK_SRC_MAINCK_XTAL
:

234 i‡(!
osc_is_ªady
(
OSC_MAINCK_XTAL
)) {

235 
osc_íabÀ
(
OSC_MAINCK_XTAL
);

236 
osc_waô_ªady
(
OSC_MAINCK_XTAL
);

240 
GENCLK_PCK_SRC_MAINCK_BYPASS
:

241 i‡(!
osc_is_ªady
(
OSC_MAINCK_BYPASS
)) {

242 
osc_íabÀ
(
OSC_MAINCK_BYPASS
);

243 
osc_waô_ªady
(
OSC_MAINCK_BYPASS
);

247 #ifde‡
CONFIG_PLL0_SOURCE


248 
GENCLK_PCK_SRC_PLLACK
:

249 
∂l_íabÀ_c⁄fig_deÁu…s
(0);

253 #ifde‡
CONFIG_PLL1_SOURCE


254 
GENCLK_PCK_SRC_PLLBCK
:

255 
∂l_íabÀ_c⁄fig_deÁu…s
(1);

259 
GENCLK_PCK_SRC_MCK
:

263 
As£π
(
Ál£
);

272 #ifde‡
__˝lu•lus


	@/home/vaje/Documents/vaja9/asf/common/services/clock/sam3x/osc.h

47 #i‚de‡
CHIP_OSC_H_INCLUDED


48 
	#CHIP_OSC_H_INCLUDED


	)

50 
	~"bﬂrd.h
"

51 
	~"pmc.h
"

55 #ifde‡
__˝lu•lus


65 #i‡!
deföed
(
BOARD_FREQ_SLCK_XTAL
)

66 #w¨nög 
The
 
bﬂrd
 
¶ow
 
˛ock
 
xèl
 
‰equícy
 
has
 
nŸ
 
bìn
 
deföed
.

67 
	#BOARD_FREQ_SLCK_XTAL
 (32768UL)

	)

70 #i‡!
deföed
(
BOARD_FREQ_SLCK_BYPASS
)

71 #w¨nög 
The
 
bﬂrd
 
¶ow
 
˛ock
 
by∑ss
 
‰equícy
 
has
 
nŸ
 
bìn
 
deföed
.

72 
	#BOARD_FREQ_SLCK_BYPASS
 (32768UL)

	)

75 #i‡!
deföed
(
BOARD_FREQ_MAINCK_XTAL
)

76 #w¨nög 
The
 
bﬂrd
 
maö
 
˛ock
 
xèl
 
‰equícy
 
has
 
nŸ
 
bìn
 
deföed
.

77 
	#BOARD_FREQ_MAINCK_XTAL
 (12000000UL)

	)

80 #i‡!
deföed
(
BOARD_FREQ_MAINCK_BYPASS
)

81 #w¨nög 
The
 
bﬂrd
 
maö
 
˛ock
 
by∑ss
 
‰equícy
 
has
 
nŸ
 
bìn
 
deföed
.

82 
	#BOARD_FREQ_MAINCK_BYPASS
 (12000000UL)

	)

85 #i‡!
deföed
(
BOARD_OSC_STARTUP_US
)

86 #w¨nög 
The
 
bﬂrd
 
maö
 
˛ock
 
xèl
 
°¨tup
 
time
 
has
 
nŸ
 
bìn
 
deföed
.

87 
	#BOARD_OSC_STARTUP_US
 (15625UL)

	)

97 
	#OSC_SLCK_32K_RC
 0

98 
	#OSC_SLCK_32K_XTAL
 1

99 
	#OSC_SLCK_32K_BYPASS
 2

100 
	#OSC_MAINCK_4M_RC
 3

101 
	#OSC_MAINCK_8M_RC
 4

102 
	#OSC_MAINCK_12M_RC
 5

103 
	#OSC_MAINCK_XTAL
 6

104 
	#OSC_MAINCK_BYPASS
 7

106 

	)

109 
	#OSC_SLCK_32K_RC_HZ
 
CHIP_FREQ_SLCK_RC


110 
	#OSC_SLCK_32K_XTAL_HZ
 
BOARD_FREQ_SLCK_XTAL


111 
	#OSC_SLCK_32K_BYPASS_HZ
 
BOARD_FREQ_SLCK_BYPASS


112 
	#OSC_MAINCK_4M_RC_HZ
 
CHIP_FREQ_MAINCK_RC_4MHZ


113 
	#OSC_MAINCK_8M_RC_HZ
 
CHIP_FREQ_MAINCK_RC_8MHZ


114 
	#OSC_MAINCK_12M_RC_HZ
 
CHIP_FREQ_MAINCK_RC_12MHZ


115 
	#OSC_MAINCK_XTAL_HZ
 
BOARD_FREQ_MAINCK_XTAL


116 
	#OSC_MAINCK_BYPASS_HZ
 
BOARD_FREQ_MAINCK_BYPASS


118 

	)

119 
ölöe
 
osc_íabÀ
(
uöt32_t
 
ul_id
)

121 
ul_id
) {

122 
OSC_SLCK_32K_RC
:

125 
OSC_SLCK_32K_XTAL
:

126 
pmc_swôch_s˛k_to_32kxèl
(
PMC_OSC_XTAL
);

129 
OSC_SLCK_32K_BYPASS
:

130 
pmc_swôch_s˛k_to_32kxèl
(
PMC_OSC_BYPASS
);

134 
OSC_MAINCK_4M_RC
:

135 
pmc_swôch_maöck_to_Á°rc
(
CKGR_MOR_MOSCRCF_4_MHz
);

138 
OSC_MAINCK_8M_RC
:

139 
pmc_swôch_maöck_to_Á°rc
(
CKGR_MOR_MOSCRCF_8_MHz
);

142 
OSC_MAINCK_12M_RC
:

143 
pmc_swôch_maöck_to_Á°rc
(
CKGR_MOR_MOSCRCF_12_MHz
);

147 
OSC_MAINCK_XTAL
:

148 
pmc_swôch_maöck_to_xèl
(
PMC_OSC_XTAL
,

149 
pmc_us_to_moscxt°
(
BOARD_OSC_STARTUP_US
,

150 
OSC_SLCK_32K_RC_HZ
));

153 
OSC_MAINCK_BYPASS
:

154 
pmc_swôch_maöck_to_xèl
(
PMC_OSC_BYPASS
,

155 
pmc_us_to_moscxt°
(
BOARD_OSC_STARTUP_US
,

156 
OSC_SLCK_32K_RC_HZ
));

161 
ölöe
 
osc_dißbÀ
(
uöt32_t
 
ul_id
)

163 
ul_id
) {

164 
OSC_SLCK_32K_RC
:

165 
OSC_SLCK_32K_XTAL
:

166 
OSC_SLCK_32K_BYPASS
:

169 
OSC_MAINCK_4M_RC
:

170 
OSC_MAINCK_8M_RC
:

171 
OSC_MAINCK_12M_RC
:

172 
pmc_osc_dißbÀ_Á°rc
();

175 
OSC_MAINCK_XTAL
:

176 
pmc_osc_dißbÀ_xèl
(
PMC_OSC_XTAL
);

179 
OSC_MAINCK_BYPASS
:

180 
pmc_osc_dißbÀ_xèl
(
PMC_OSC_BYPASS
);

185 
ölöe
 
boﬁ
 
osc_is_ªady
(
uöt32_t
 
ul_id
)

187 
ul_id
) {

188 
OSC_SLCK_32K_RC
:

191 
OSC_SLCK_32K_XTAL
:

192 
OSC_SLCK_32K_BYPASS
:

193  
pmc_osc_is_ªady_32kxèl
();

195 
OSC_MAINCK_4M_RC
:

196 
OSC_MAINCK_8M_RC
:

197 
OSC_MAINCK_12M_RC
:

198 
OSC_MAINCK_XTAL
:

199 
OSC_MAINCK_BYPASS
:

200  
pmc_osc_is_ªady_maöck
();

206 
ölöe
 
uöt32_t
 
osc_gë_øã
(uöt32_à
ul_id
)

208 
ul_id
) {

209 
OSC_SLCK_32K_RC
:

210  
OSC_SLCK_32K_RC_HZ
;

212 
OSC_SLCK_32K_XTAL
:

213  
BOARD_FREQ_SLCK_XTAL
;

215 
OSC_SLCK_32K_BYPASS
:

216  
BOARD_FREQ_SLCK_BYPASS
;

218 
OSC_MAINCK_4M_RC
:

219  
OSC_MAINCK_4M_RC_HZ
;

221 
OSC_MAINCK_8M_RC
:

222  
OSC_MAINCK_8M_RC_HZ
;

224 
OSC_MAINCK_12M_RC
:

225  
OSC_MAINCK_12M_RC_HZ
;

227 
OSC_MAINCK_XTAL
:

228  
BOARD_FREQ_MAINCK_XTAL
;

230 
OSC_MAINCK_BYPASS
:

231  
BOARD_FREQ_MAINCK_BYPASS
;

241 #ifde‡
__˝lu•lus


	@/home/vaje/Documents/vaja9/asf/common/services/clock/sam3x/pll.h

47 #i‚de‡
CHIP_PLL_H_INCLUDED


48 
	#CHIP_PLL_H_INCLUDED


	)

50 
	~<osc.h
>

54 #ifde‡
__˝lu•lus


65 
	#PLL_OUTPUT_MIN_HZ
 84000000

	)

66 
	#PLL_OUTPUT_MAX_HZ
 192000000

	)

68 
	#PLL_INPUT_MIN_HZ
 8000000

	)

69 
	#PLL_INPUT_MAX_HZ
 16000000

	)

71 
	#NR_PLLS
 2

	)

72 
	#PLLA_ID
 0

	)

73 
	#UPLL_ID
 1

74 

	)

75 
	#PLL_UPLL_HZ
 480000000

	)

77 
	#PLL_COUNT
 0x3fU

	)

79 
	e∂l_sour˚
 {

80 
PLL_SRC_MAINCK_4M_RC
 = 
OSC_MAINCK_4M_RC
,

81 
PLL_SRC_MAINCK_8M_RC
 = 
OSC_MAINCK_8M_RC
,

82 
PLL_SRC_MAINCK_12M_RC
 = 
OSC_MAINCK_12M_RC
,

83 
PLL_SRC_MAINCK_XTAL
 = 
OSC_MAINCK_XTAL
,

84 
PLL_SRC_MAINCK_BYPASS
 = 
OSC_MAINCK_BYPASS
,

85 
PLL_NR_SOURCES
,

88 
	s∂l_c⁄fig
 {

89 
uöt32_t
 
˘æ
;

92 
	#∂l_gë_deÁu…_øã
(
∂l_id
) \

93 ((
	`osc_gë_øã
(
CONFIG_PLL
##
∂l_id
##
_SOURCE
) \

94 * 
CONFIG_PLL
##
∂l_id
##
_MUL
) \

95 / 
CONFIG_PLL
##
∂l_id
##
_DIV
)

	)

98 #ifde‡
CONFIG_PLL1_SOURCE


99 #unde‡
CONFIG_PLL1_SOURCE


101 #ifde‡
CONFIG_PLL1_MUL


102 #unde‡
CONFIG_PLL1_MUL


104 #ifde‡
CONFIG_PLL1_DIV


105 #unde‡
CONFIG_PLL1_DIV


107 
	#CONFIG_PLL1_SOURCE
 
PLL_SRC_MAINCK_XTAL


	)

108 
	#CONFIG_PLL1_MUL
 0

	)

109 
	#CONFIG_PLL1_DIV
 0

	)

115 
ölöe
 
∂l_c⁄fig_öô
(
∂l_c⁄fig
 *
p_cfg
,

116 
∂l_sour˚
 
e_§c
, 
uöt32_t
 
ul_div
, uöt32_à
ul_mul
)

118 
uöt32_t
 
vco_hz
;

120 
As£π
(
e_§c
 < 
PLL_NR_SOURCES
);

122 i‡(
ul_div
 =0 && 
ul_mul
 == 0) {

123 
p_cfg
->
˘æ
 = 
CKGR_UCKR_UPLLCOUNT
(
PLL_COUNT
);

126 
vco_hz
 = 
osc_gë_øã
(
e_§c
Ë/ 
ul_div
;

127 
As£π
(
vco_hz
 >
PLL_INPUT_MIN_HZ
);

128 
As£π
(
vco_hz
 <
PLL_INPUT_MAX_HZ
);

130 
vco_hz
 *
ul_mul
;

131 
As£π
(
vco_hz
 >
PLL_OUTPUT_MIN_HZ
);

132 
As£π
(
vco_hz
 <
PLL_OUTPUT_MAX_HZ
);

135 
p_cfg
->
˘æ
 = 
CKGR_PLLAR_MULA
(
ul_mul
 - 1Ë| 
CKGR_PLLAR_DIVA
(
ul_div
Ë| 
CKGR_PLLAR_PLLACOUNT
(
PLL_COUNT
);

139 
	#∂l_c⁄fig_deÁu…s
(
cfg
, 
∂l_id
) \

140 
	`∂l_c⁄fig_öô
(
cfg
, \

141 
CONFIG_PLL
##
∂l_id
##
_SOURCE
, \

142 
CONFIG_PLL
##
∂l_id
##
_DIV
, \

143 
CONFIG_PLL
##
∂l_id
##
_MUL
)

	)

145 
ölöe
 
∂l_c⁄fig_ªad
(
∂l_c⁄fig
 *
p_cfg
, 
uöt32_t
 
ul_∂l_id
)

147 
As£π
(
ul_∂l_id
 < 
NR_PLLS
);

149 i‡(
ul_∂l_id
 =
PLLA_ID
) {

150 
p_cfg
->
˘æ
 = 
PMC
->
CKGR_PLLAR
;

152 
p_cfg
->
˘æ
 = 
PMC
->
CKGR_UCKR
;

156 
ölöe
 
∂l_c⁄fig_wrôe
(c⁄° 
∂l_c⁄fig
 *
p_cfg
, 
uöt32_t
 
ul_∂l_id
)

158 
As£π
(
ul_∂l_id
 < 
NR_PLLS
);

160 i‡(
ul_∂l_id
 =
PLLA_ID
) {

161 
pmc_dißbÀ_∂œck
();

162 
PMC
->
CKGR_PLLAR
 = 
CKGR_PLLAR_ONE
 | 
p_cfg
->
˘æ
;

164 
PMC
->
CKGR_UCKR
 = 
p_cfg
->
˘æ
;

168 
ölöe
 
∂l_íabÀ
(c⁄° 
∂l_c⁄fig
 *
p_cfg
, 
uöt32_t
 
ul_∂l_id
)

170 
As£π
(
ul_∂l_id
 < 
NR_PLLS
);

172 i‡(
ul_∂l_id
 =
PLLA_ID
) {

173 
pmc_dißbÀ_∂œck
();

174 
PMC
->
CKGR_PLLAR
 = 
CKGR_PLLAR_ONE
 | 
p_cfg
->
˘æ
;

176 
PMC
->
CKGR_UCKR
 = 
p_cfg
->
˘æ
 | 
CKGR_UCKR_UPLLEN
;

183 
ölöe
 
∂l_dißbÀ
(
uöt32_t
 
ul_∂l_id
)

185 
As£π
(
ul_∂l_id
 < 
NR_PLLS
);

187 i‡(
ul_∂l_id
 =
PLLA_ID
) {

188 
pmc_dißbÀ_∂œck
();

190 
PMC
->
CKGR_UCKR
 &~
CKGR_UCKR_UPLLEN
;

194 
ölöe
 
uöt32_t
 
∂l_is_locked
(uöt32_à
ul_∂l_id
)

196 
As£π
(
ul_∂l_id
 < 
NR_PLLS
);

198 i‡(
ul_∂l_id
 =
PLLA_ID
) {

199  
pmc_is_locked_∂œck
();

201  
pmc_is_locked_u∂l
();

205 
ölöe
 
∂l_íabÀ_sour˚
(
∂l_sour˚
 
e_§c
)

207 
e_§c
) {

208 
PLL_SRC_MAINCK_4M_RC
:

209 
PLL_SRC_MAINCK_8M_RC
:

210 
PLL_SRC_MAINCK_12M_RC
:

211 
PLL_SRC_MAINCK_XTAL
:

212 
PLL_SRC_MAINCK_BYPASS
:

213 
osc_íabÀ
(
e_§c
);

214 
osc_waô_ªady
(
e_§c
);

218 
As£π
(
Ál£
);

223 
ölöe
 
∂l_íabÀ_c⁄fig_deÁu…s
(
ul_∂l_id
)

225 
∂l_c⁄fig
 
∂lcfg
;

227 i‡(
∂l_is_locked
(
ul_∂l_id
)) {

230 
ul_∂l_id
) {

231 #ifde‡
CONFIG_PLL0_SOURCE


233 
∂l_íabÀ_sour˚
(
CONFIG_PLL0_SOURCE
);

234 
∂l_c⁄fig_öô
(&
∂lcfg
,

235 
CONFIG_PLL0_SOURCE
,

236 
CONFIG_PLL0_DIV
,

237 
CONFIG_PLL0_MUL
);

240 #ifde‡
CONFIG_PLL1_SOURCE


242 
∂l_íabÀ_sour˚
(
CONFIG_PLL1_SOURCE
);

243 
∂l_c⁄fig_öô
(&
∂lcfg
,

244 
CONFIG_PLL1_SOURCE
,

245 
CONFIG_PLL1_DIV
,

246 
CONFIG_PLL1_MUL
);

250 
As£π
(
Ál£
);

253 
∂l_íabÀ
(&
∂lcfg
, 
ul_∂l_id
);

254 !
∂l_is_locked
(
ul_∂l_id
));

261 #ifde‡
__˝lu•lus


	@/home/vaje/Documents/vaja9/asf/common/services/clock/sam3x/sysclk.c

47 
	~<sys˛k.h
>

51 #ifde‡
__˝lu•lus


62 #i‡
deföed
(
CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC
)

66 
uöt32_t
 
sys˛k_öôülized
 = 0;

79 
sys˛k_£t_¥esˇÀrs
(
uöt32_t
 
ul_¥es
)

81 
pmc_mck_£t_¥esˇÀr
(
ul_¥es
);

82 
Sy°emC‹eClockUpd©e
();

91 
sys˛k_£t_sour˚
(
uöt32_t
 
ul_§c
)

93 
	gul_§c
) {

94 
	gSYSCLK_SRC_SLCK_RC
:

95 
SYSCLK_SRC_SLCK_XTAL
:

96 
SYSCLK_SRC_SLCK_BYPASS
:

97 
pmc_mck_£t_sour˚
(
PMC_MCKR_CSS_SLOW_CLK
);

100 
	gSYSCLK_SRC_MAINCK_4M_RC
:

101 
SYSCLK_SRC_MAINCK_8M_RC
:

102 
SYSCLK_SRC_MAINCK_12M_RC
:

103 
SYSCLK_SRC_MAINCK_XTAL
:

104 
SYSCLK_SRC_MAINCK_BYPASS
:

105 
pmc_mck_£t_sour˚
(
PMC_MCKR_CSS_MAIN_CLK
);

108 
	gSYSCLK_SRC_PLLACK
:

109 
pmc_mck_£t_sour˚
(
PMC_MCKR_CSS_PLLA_CLK
);

112 
	gSYSCLK_SRC_UPLLCK
:

113 
pmc_mck_£t_sour˚
(
PMC_MCKR_CSS_UPLL_CLK
);

117 
Sy°emC‹eClockUpd©e
();

120 #i‡
deföed
(
CONFIG_USBCLK_SOURCE
Ë|| deföed(
__DOXYGEN__
)

130 
sys˛k_íabÀ_usb
()

132 
As£π
(
CONFIG_USBCLK_DIV
 > 0);

134 #ifde‡
CONFIG_PLL0_SOURCE


135 i‡(
	gCONFIG_USBCLK_SOURCE
 =
USBCLK_SRC_PLL0
) {

136 
∂l_c⁄fig
 
∂lcfg
;

138 
∂l_íabÀ_sour˚
(
CONFIG_PLL0_SOURCE
);

139 
∂l_c⁄fig_deÁu…s
(&
∂lcfg
, 0);

140 
∂l_íabÀ
(&
∂lcfg
, 0);

141 
∂l_waô_f‹_lock
(0);

142 
pmc_swôch_udpck_to_∂œck
(
CONFIG_USBCLK_DIV
 - 1);

143 
pmc_íabÀ_udpck
();

148 i‡(
	gCONFIG_USBCLK_SOURCE
 =
USBCLK_SRC_UPLL
) {

150 
pmc_íabÀ_u∂l_˛ock
();

151 
pmc_swôch_udpck_to_u∂lck
(
CONFIG_USBCLK_DIV
 - 1);

152 
pmc_íabÀ_udpck
();

162 
sys˛k_dißbÀ_usb
()

164 
pmc_dißbÀ_udpck
();

168 
sys˛k_öô
()

170 
∂l_c⁄fig
 
	g∂lcfg
;

173 
sy°em_öô_Êash
(
CHIP_FREQ_CPU_MAX
);

176 i‡(
	gCONFIG_SYSCLK_SOURCE
 =
SYSCLK_SRC_SLCK_RC
) {

177 
osc_íabÀ
(
OSC_SLCK_32K_RC
);

178 
osc_waô_ªady
(
OSC_SLCK_32K_RC
);

179 
pmc_swôch_mck_to_s˛k
(
CONFIG_SYSCLK_PRES
);

182 i‡(
	gCONFIG_SYSCLK_SOURCE
 =
SYSCLK_SRC_SLCK_XTAL
) {

183 
osc_íabÀ
(
OSC_SLCK_32K_XTAL
);

184 
osc_waô_ªady
(
OSC_SLCK_32K_XTAL
);

185 
pmc_swôch_mck_to_s˛k
(
CONFIG_SYSCLK_PRES
);

188 i‡(
	gCONFIG_SYSCLK_SOURCE
 =
SYSCLK_SRC_SLCK_BYPASS
) {

189 
osc_íabÀ
(
OSC_SLCK_32K_BYPASS
);

190 
osc_waô_ªady
(
OSC_SLCK_32K_BYPASS
);

191 
pmc_swôch_mck_to_s˛k
(
CONFIG_SYSCLK_PRES
);

194 i‡(
	gCONFIG_SYSCLK_SOURCE
 =
SYSCLK_SRC_MAINCK_4M_RC
) {

198 i‡(
CONFIG_SYSCLK_SOURCE
 =
SYSCLK_SRC_MAINCK_8M_RC
) {

199 
osc_íabÀ
(
OSC_MAINCK_8M_RC
);

200 
osc_waô_ªady
(
OSC_MAINCK_8M_RC
);

201 
pmc_swôch_mck_to_maöck
(
CONFIG_SYSCLK_PRES
);

204 i‡(
	gCONFIG_SYSCLK_SOURCE
 =
SYSCLK_SRC_MAINCK_12M_RC
) {

205 
osc_íabÀ
(
OSC_MAINCK_12M_RC
);

206 
osc_waô_ªady
(
OSC_MAINCK_12M_RC
);

207 
pmc_swôch_mck_to_maöck
(
CONFIG_SYSCLK_PRES
);

210 i‡(
	gCONFIG_SYSCLK_SOURCE
 =
SYSCLK_SRC_MAINCK_XTAL
) {

211 
osc_íabÀ
(
OSC_MAINCK_XTAL
);

212 
osc_waô_ªady
(
OSC_MAINCK_XTAL
);

213 
pmc_swôch_mck_to_maöck
(
CONFIG_SYSCLK_PRES
);

216 i‡(
	gCONFIG_SYSCLK_SOURCE
 =
SYSCLK_SRC_MAINCK_BYPASS
) {

217 
osc_íabÀ
(
OSC_MAINCK_BYPASS
);

218 
osc_waô_ªady
(
OSC_MAINCK_BYPASS
);

219 
pmc_swôch_mck_to_maöck
(
CONFIG_SYSCLK_PRES
);

222 #ifde‡
CONFIG_PLL0_SOURCE


223 i‡(
	gCONFIG_SYSCLK_SOURCE
 =
SYSCLK_SRC_PLLACK
) {

224 
∂l_íabÀ_sour˚
(
CONFIG_PLL0_SOURCE
);

225 
∂l_c⁄fig_deÁu…s
(&
∂lcfg
, 0);

226 
∂l_íabÀ
(&
∂lcfg
, 0);

227 
∂l_waô_f‹_lock
(0);

228 
pmc_swôch_mck_to_∂œck
(
CONFIG_SYSCLK_PRES
);

232 i‡(
	gCONFIG_SYSCLK_SOURCE
 =
SYSCLK_SRC_UPLLCK
) {

233 
∂l_íabÀ_sour˚
(
CONFIG_PLL1_SOURCE
);

234 
∂l_c⁄fig_deÁu…s
(&
∂lcfg
, 1);

235 
∂l_íabÀ
(&
∂lcfg
, 1);

236 
∂l_waô_f‹_lock
(1);

237 
pmc_swôch_mck_to_u∂lck
(
CONFIG_SYSCLK_PRES
);

241 
Sy°emC‹eClockUpd©e
();

244 
sy°em_öô_Êash
(
sys˛k_gë_˝u_hz
());

246 #i‡(
deföed
 
CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC
)

248 
	gsys˛k_öôülized
 = 1;

256 #ifde‡
__˝lu•lus


	@/home/vaje/Documents/vaja9/asf/common/services/clock/sam3x/sysclk.h

47 #i‚de‡
CHIP_SYSCLK_H_INCLUDED


48 
	#CHIP_SYSCLK_H_INCLUDED


	)

50 
	~<osc.h
>

51 
	~<∂l.h
>

118 #ifde‡
__˝lu•lus


138 #i‚de‡
CONFIG_SYSCLK_SOURCE


139 
	#CONFIG_SYSCLK_SOURCE
 
SYSCLK_SRC_MAINCK_4M_RC


	)

151 #i‚de‡
CONFIG_SYSCLK_PRES


152 
	#CONFIG_SYSCLK_PRES
 0

	)

159 
	#SYSCLK_SRC_SLCK_RC
 0

160 
	#SYSCLK_SRC_SLCK_XTAL
 1

161 
	#SYSCLK_SRC_SLCK_BYPASS
 2

162 
	#SYSCLK_SRC_MAINCK_4M_RC
 3

163 
	#SYSCLK_SRC_MAINCK_8M_RC
 4

164 
	#SYSCLK_SRC_MAINCK_12M_RC
 5

165 
	#SYSCLK_SRC_MAINCK_XTAL
 6

166 
	#SYSCLK_SRC_MAINCK_BYPASS
 7

167 
	#SYSCLK_SRC_PLLACK
 8

168 
	#SYSCLK_SRC_UPLLCK
 9

170 

	)

173 
	#SYSCLK_PRES_1
 
PMC_MCKR_PRES_CLK_1


174 
	#SYSCLK_PRES_2
 
PMC_MCKR_PRES_CLK_2


175 
	#SYSCLK_PRES_4
 
PMC_MCKR_PRES_CLK_4


176 
	#SYSCLK_PRES_8
 
PMC_MCKR_PRES_CLK_8


177 
	#SYSCLK_PRES_16
 
PMC_MCKR_PRES_CLK_16


178 
	#SYSCLK_PRES_32
 
PMC_MCKR_PRES_CLK_32


179 
	#SYSCLK_PRES_64
 
PMC_MCKR_PRES_CLK_64


180 
	#SYSCLK_PRES_3
 
PMC_MCKR_PRES_CLK_3


182 

	)

185 
	#USBCLK_SRC_PLL0
 0

186 
	#USBCLK_SRC_UPLL
 1

188 

	)

199 #ifde‡
__DOXYGEN__


200 
	#CONFIG_USBCLK_SOURCE


	)

211 #ifde‡
__DOXYGEN__


212 
	#CONFIG_USBCLK_DIV


	)

237 #i‡(
deföed
 
CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC
)

238 
uöt32_t
 
sys˛k_öôülized
;

240 
ölöe
 
uöt32_t
 
sys˛k_gë_maö_hz
()

242 #i‡(
deföed
 
CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC
)

243 i‡(!
	gsys˛k_öôülized
 ) {

244  
	gOSC_MAINCK_4M_RC_HZ
;

249 i‡(
	gCONFIG_SYSCLK_SOURCE
 =
SYSCLK_SRC_SLCK_RC
) {

250  
OSC_SLCK_32K_RC_HZ
;

251 } i‡(
	gCONFIG_SYSCLK_SOURCE
 =
SYSCLK_SRC_SLCK_XTAL
) {

252  
OSC_SLCK_32K_XTAL_HZ
;

253 } i‡(
	gCONFIG_SYSCLK_SOURCE
 =
SYSCLK_SRC_SLCK_BYPASS
) {

254  
OSC_SLCK_32K_BYPASS_HZ
;

255 } i‡(
	gCONFIG_SYSCLK_SOURCE
 =
SYSCLK_SRC_MAINCK_4M_RC
) {

256  
OSC_MAINCK_4M_RC_HZ
;

257 } i‡(
	gCONFIG_SYSCLK_SOURCE
 =
SYSCLK_SRC_MAINCK_8M_RC
) {

258  
OSC_MAINCK_8M_RC_HZ
;

259 } i‡(
	gCONFIG_SYSCLK_SOURCE
 =
SYSCLK_SRC_MAINCK_12M_RC
) {

260  
OSC_MAINCK_12M_RC_HZ
;

261 } i‡(
	gCONFIG_SYSCLK_SOURCE
 =
SYSCLK_SRC_MAINCK_XTAL
) {

262  
OSC_MAINCK_XTAL_HZ
;

263 } i‡(
	gCONFIG_SYSCLK_SOURCE
 =
SYSCLK_SRC_MAINCK_BYPASS
) {

264  
OSC_MAINCK_BYPASS_HZ
;

266 #ifde‡
CONFIG_PLL0_SOURCE


267 i‡(
	gCONFIG_SYSCLK_SOURCE
 =
SYSCLK_SRC_PLLACK
) {

268  
∂l_gë_deÁu…_øã
(0);

272 #ifde‡
CONFIG_PLL1_SOURCE


273 i‡(
	gCONFIG_SYSCLK_SOURCE
 =
SYSCLK_SRC_UPLLCK
) {

274  
PLL_UPLL_HZ
;

294 
ölöe
 
uöt32_t
 
sys˛k_gë_˝u_hz
()

298  
sys˛k_gë_maö_hz
() /

299 ((
	gCONFIG_SYSCLK_PRES
 =
SYSCLK_PRES_3
) ? 3 :

300 (1 << (
CONFIG_SYSCLK_PRES
 >> 
PMC_MCKR_PRES_Pos
)));

308 
ölöe
 
uöt32_t
 
sys˛k_gë_≥rùhîÆ_hz
()

312  
sys˛k_gë_maö_hz
() /

313 ((
	gCONFIG_SYSCLK_PRES
 =
SYSCLK_PRES_3
) ? 3 :

314 (1 << (
CONFIG_SYSCLK_PRES
 >> 
PMC_MCKR_PRES_Pos
)));

325 
ölöe
 
uöt32_t
 
sys˛k_gë_≥rùhîÆ_bus_hz
(c⁄° vﬁ©ûê*
moduÀ
)

327 
UNUSED
(
moduÀ
);

328  
sys˛k_gë_≥rùhîÆ_hz
();

340 
ölöe
 
sys˛k_íabÀ_≥rùhîÆ_˛ock
(
uöt32_t
 
ul_id
)

342 
pmc_íabÀ_≥rùh_˛k
(
ul_id
);

350 
ölöe
 
sys˛k_dißbÀ_≥rùhîÆ_˛ock
(
uöt32_t
 
ul_id
)

352 
pmc_dißbÀ_≥rùh_˛k
(
ul_id
);

360 
sys˛k_£t_¥esˇÀrs
(
uöt32_t
 
ul_¥es
);

361 
sys˛k_£t_sour˚
(
uöt32_t
 
ul_§c
);

365 
sys˛k_íabÀ_usb
();

366 
sys˛k_dißbÀ_usb
();

368 
sys˛k_öô
();

374 #ifde‡
__˝lu•lus


	@/home/vaje/Documents/vaja9/asf/common/services/clock/sysclk.h

46 #i‚de‡
SYSCLK_H_INCLUDED


47 
	#SYSCLK_H_INCLUDED


	)

49 
	~"∑πs.h
"

50 
	~"c⁄f_˛ock.h
"

52 #i‡
SAM3S


53 
	~"ßm3s/sys˛k.h
"

54 #ñi‡
SAM3U


55 
	~"ßm3u/sys˛k.h
"

56 #ñi‡
SAM3N


57 
	~"ßm3n/sys˛k.h
"

58 #ñi‡
SAM3XA


59 
	~"ßm3x/sys˛k.h
"

60 #ñi‡
SAM4S


61 
	~"ßm4s/sys˛k.h
"

62 #ñi‡
SAM4E


63 
	~"ßm4e/sys˛k.h
"

64 #ñi‡
SAM4C


65 
	~"ßm4c/sys˛k.h
"

66 #ñi‡
SAM4CM


67 
	~"ßm4cm/sys˛k.h
"

68 #ñi‡
SAM4CP


69 
	~"ßm4˝/sys˛k.h
"

70 #ñi‡
SAM4L


71 
	~"ßm4l/sys˛k.h
"

72 #ñi‡
SAM4N


73 
	~"ßm4n/sys˛k.h
"

74 #ñi‡
SAMG


75 
	~"ßmg/sys˛k.h
"

76 #ñi‡
SAMV71


77 
	~"ßmv71/sys˛k.h
"

78 #ñi‡
SAMV70


79 
	~"ßmv70/sys˛k.h
"

80 #ñi‡
SAME70


81 
	~"ßme70/sys˛k.h
"

82 #ñi‡
SAMS70


83 
	~"ßms70/sys˛k.h
"

84 #ñi‡(
UC3A0
 || 
UC3A1
)

85 
	~"uc3a0_a1/sys˛k.h
"

86 #ñi‡
UC3A3


87 
	~"uc3a3_a4/sys˛k.h
"

88 #ñi‡
UC3B


89 
	~"uc3b0_b1/sys˛k.h
"

90 #ñi‡
UC3C


91 
	~"uc3c/sys˛k.h
"

92 #ñi‡
UC3D


93 
	~"uc3d/sys˛k.h
"

94 #ñi‡
UC3L


95 
	~"uc3l/sys˛k.h
"

96 #ñi‡
XMEGA


97 
	~"xmega/sys˛k.h
"

98 #ñi‡
MEGA


99 
	~"mega/sys˛k.h
"

101 #îr‹ 
Unsuµ‹ãd
 
chù
 
ty≥


	@/home/vaje/Documents/vaja9/asf/common/services/delay/delay.h

46 #i‚de‡
_DELAY_H_


47 
	#_DELAY_H_


	)

49 #ifde‡
__˝lu•lus


53 
	~<sys˛k.h
>

55 #i‡
UC3


56 
	~<cy˛e_cou¡î.h
>

57 #ñi‡
XMEGA


58 
	~"xmega/cy˛e_cou¡î.h
"

59 #ñi‡
MEGA


60 
	~"mega/cy˛e_cou¡î.h
"

61 #ñi‡
SAM


62 
	~"ßm/cy˛e_cou¡î.h
"

89 #i‚de‡
F_CPU


90 
	#F_CPU
 
	`sys˛k_gë_˝u_hz
()

	)

108 
	#dñay_öô
(
f˝u_hz
)

	)

115 
	#dñay_s
(
dñay
Ë((dñayË? 
	`˝u_dñay_ms
(1000 * dñay, 
F_CPU
Ë: 
	`˝u_dñay_us
(1, F_CPU))

	)

122 
	#dñay_ms
(
dñay
Ë((dñayË? 
	`˝u_dñay_ms
(dñay, 
F_CPU
Ë: 
	`˝u_dñay_us
(1, F_CPU))

	)

129 
	#dñay_us
(
dñay
Ë((dñayË? 
	`˝u_dñay_us
(dñay, 
F_CPU
Ë: cpu_dñay_us(1, F_CPU))

	)

131 #ifde‡
__˝lu•lus


	@/home/vaje/Documents/vaja9/asf/common/services/delay/doxygen/common.services.delay_sam/doxygen_module_mainpage.h

	@/home/vaje/Documents/vaja9/asf/common/services/delay/sam/cycle_counter.c

47 
	~"cy˛e_cou¡î.h
"

50 
OPTIMIZE_HIGH


51 
RAMFUNC


52 
	$p‹èbÀ_dñay_cy˛es
(
n
)

54 
	`UNUSED
(
n
);

56 
	`__asm
 (

61 
	}
}

	@/home/vaje/Documents/vaja9/asf/common/services/delay/sam/cycle_counter.h

46 #i‚de‡
_cy˛e_cou¡î_h_


47 
	#_cy˛e_cou¡î_h_


	)

49 #ifde‡
__˝lu•lus


54 
	~<compûî.h
>

96 
p‹èbÀ_dñay_cy˛es
(
n
);

99 #ifde‡
__CM7_REV


101 
	#˝u_ms_2_cy
(
ms
, 
f_˝u
) \

102 (((
uöt64_t
)(
ms
Ë* (
f_˝u
Ë+ (uöt64_t)(5.932e3 - 1ul)Ë/ (uöt64_t)5.932e3)

	)

103 
	#˝u_us_2_cy
(
us
, 
f_˝u
) \

104 (((
uöt64_t
)(
us
Ë* (
f_˝u
Ë+ (uöt64_t)(5.932e6 - 1ul)Ë/ (uöt64_t)5.932e6)

	)

108 
	#˝u_ms_2_cy
(
ms
, 
f_˝u
) \

109 (((
uöt64_t
)(
ms
Ë* (
f_˝u
Ë+ (uöt64_t)(14e3 - 1ul)Ë/ (uöt64_t)14e3)

	)

110 
	#˝u_us_2_cy
(
us
, 
f_˝u
) \

111 (((
uöt64_t
)(
us
Ë* (
f_˝u
Ë+ (uöt64_t)(14e6 - 1ul)Ë/ (uöt64_t)14e6)

	)

115 
	#dñay_cy˛es
 
p‹èbÀ_dñay_cy˛es


	)

117 
	#˝u_dñay_ms
(
dñay
, 
f_˝u
Ë
	`dñay_cy˛es
(
	`˝u_ms_2_cy
(dñay, f_˝u))

	)

118 
	#˝u_dñay_us
(
dñay
, 
f_˝u
Ë
	`dñay_cy˛es
(
	`˝u_us_2_cy
(dñay, f_˝u))

	)

122 #ifde‡
__˝lu•lus


	@/home/vaje/Documents/vaja9/asf/common/services/gpio/gpio.h

46 #i‚de‡
_GPIO_H_


47 
	#_GPIO_H_


	)

49 
	~<∑πs.h
>

51 #i‡(
SAM3S
 || 
SAM3U
 || 
SAM3N
 || 
SAM3XA
 || 
SAM4S
 || 
SAM4E
 || 
SAM4N
 || 
SAM4C
 || 
SAMG
 || 
SAM4CP
 || 
SAM4CM
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

52 
	~"ßm_gpio/ßm_gpio.h
"

53 #ñi‡
XMEGA


54 
	~"xmega_gpio/xmega_gpio.h
"

55 #ñi‡
MEGA
 || 
MEGA_RF


56 
	~"mega_gpio/mega_gpio.h
"

58 #îr‹ 
Unsuµ‹ãd
 
chù
 
ty≥


	@/home/vaje/Documents/vaja9/asf/common/services/gpio/sam_gpio/sam_gpio.h

47 #i‚de‡
SAM_GPIO_H_INCLUDED


48 
	#SAM_GPIO_H_INCLUDED


	)

50 
	~"compûî.h
"

51 
	~"pio.h
"

53 
	#gpio_pö_is_low
(
io_id
) \

54 (
	`pio_gë_pö_vÆue
(
io_id
Ë? 0 : 1)

	)

56 
	#gpio_pö_is_high
(
io_id
) \

57 (
	`pio_gë_pö_vÆue
(
io_id
Ë? 1 : 0)

	)

59 
	#gpio_£t_pö_high
(
io_id
) \

60 
	`pio_£t_pö_high
(
io_id
)

	)

62 
	#gpio_£t_pö_low
(
io_id
) \

63 
	`pio_£t_pö_low
(
io_id
)

	)

65 
	#gpio_toggÀ_pö
(
io_id
) \

66 
	`pio_toggÀ_pö
(
io_id
)

	)

68 
	#gpio_c⁄figuª_pö
(
io_id
,
io_Êags
) \

69 
	`pio_c⁄figuª_pö
(
io_id
,
io_Êags
)

	)

71 
	#gpio_c⁄figuª_group
(
p‹t_id
,
p‹t_mask
,
io_Êags
) \

72 
	`pio_c⁄figuª_pö_group
(
p‹t_id
,
p‹t_mask
,
io_Êags
)

	)

74 
	#gpio_£t_pö_group_high
(
p‹t_id
,
mask
) \

75 
	`pio_£t_pö_group_high
(
p‹t_id
,
mask
)

	)

77 
	#gpio_£t_pö_group_low
(
p‹t_id
,
mask
) \

78 
	`pio_£t_pö_group_low
(
p‹t_id
,
mask
)

	)

80 
	#gpio_toggÀ_pö_group
(
p‹t_id
,
mask
) \

81 
	`pio_toggÀ_pö_group
(
p‹t_id
,
mask
)

	)

	@/home/vaje/Documents/vaja9/asf/common/services/ioport/ioport.h

47 #i‚de‡
IOPORT_H


48 
	#IOPORT_H


	)

50 #ifde‡
__˝lu•lus


54 
	~<∑πs.h
>

55 
	~<compûî.h
>

86 
	ei›‹t_dúe˘i⁄
 {

87 
IOPORT_DIR_INPUT
,

88 
IOPORT_DIR_OUTPUT
,

92 
	ei›‹t_vÆue
 {

93 
IOPORT_PIN_LEVEL_LOW
,

94 
IOPORT_PIN_LEVEL_HIGH
,

97 #i‡
MEGA_RF


99 
	ei›‹t_£n£
 {

100 
IOPORT_SENSE_LEVEL
,

101 
IOPORT_SENSE_BOTHEDGES
,

102 
IOPORT_SENSE_FALLING
,

103 
IOPORT_SENSE_RISING
,

105 #ñi‡
SAM
 && !
SAM4L


107 
	ei›‹t_£n£
 {

108 
IOPORT_SENSE_BOTHEDGES
,

109 
IOPORT_SENSE_FALLING
,

110 
IOPORT_SENSE_RISING
,

111 
IOPORT_SENSE_LEVEL_LOW
,

112 
IOPORT_SENSE_LEVEL_HIGH
,

115 
	ei›‹t_£n£
 {

116 
IOPORT_SENSE_BOTHEDGES
,

117 
IOPORT_SENSE_RISING
,

118 
IOPORT_SENSE_FALLING
,

123 #i‡
XMEGA


124 
	~"xmega/i›‹t.h
"

125 #i‡
deföed
(
IOPORT_XMEGA_COMPAT
)

126 
	~"xmega/i›‹t_com∑t.h
"

128 #ñi‡
MEGA


129 
	~"mega/i›‹t.h
"

130 #ñi‡
UC3


131 
	~"uc3/i›‹t.h
"

132 #ñi‡
SAM


133 #i‡
SAM4L


134 
	~"ßm/i›‹t_gpio.h
"

135 #ñi‡(
SAMD20
 | 
SAMD21
 | 
SAML21
)

136 
	~"ßm0/i›‹t.h
"

138 
	~"ßm/i›‹t_pio.h
"

148 
ölöe
 
i›‹t_öô
()

150 
¨ch_i›‹t_öô
();

159 
ölöe
 
i›‹t_íabÀ_pö
(
i›‹t_pö_t
 
pö
)

161 
¨ch_i›‹t_íabÀ_pö
(
pö
);

170 
ölöe
 
i›‹t_íabÀ_p‹t
(
i›‹t_p‹t_t
 
p‹t
,

171 
i›‹t_p‹t_mask_t
 
mask
)

173 
¨ch_i›‹t_íabÀ_p‹t
(
p‹t
, 
mask
);

182 
ölöe
 
i›‹t_dißbÀ_pö
(
i›‹t_pö_t
 
pö
)

184 
¨ch_i›‹t_dißbÀ_pö
(
pö
);

193 
ölöe
 
i›‹t_dißbÀ_p‹t
(
i›‹t_p‹t_t
 
p‹t
,

194 
i›‹t_p‹t_mask_t
 
mask
)

196 
¨ch_i›‹t_dißbÀ_p‹t
(
p‹t
, 
mask
);

208 
ölöe
 
i›‹t_£t_p‹t_mode
(
i›‹t_p‹t_t
 
p‹t
,

209 
i›‹t_p‹t_mask_t
 
mask
, 
i›‹t_mode_t
 
mode
)

211 
¨ch_i›‹t_£t_p‹t_mode
(
p‹t
, 
mask
, 
mode
);

220 
ölöe
 
i›‹t_£t_pö_mode
(
i›‹t_pö_t
 
pö
, 
i›‹t_mode_t
 
mode
)

222 
¨ch_i›‹t_£t_pö_mode
(
pö
, 
mode
);

231 
ölöe
 
i›‹t_ª£t_p‹t_mode
(
i›‹t_p‹t_t
 
p‹t
,

232 
i›‹t_p‹t_mask_t
 
mask
)

234 
¨ch_i›‹t_£t_p‹t_mode
(
p‹t
, 
mask
, 0);

242 
ölöe
 
i›‹t_ª£t_pö_mode
(
i›‹t_pö_t
 
pö
)

244 
¨ch_i›‹t_£t_pö_mode
(
pö
, 0);

254 
ölöe
 
i›‹t_£t_p‹t_dú
(
i›‹t_p‹t_t
 
p‹t
,

255 
i›‹t_p‹t_mask_t
 
mask
, 
i›‹t_dúe˘i⁄
 
dú
)

257 
¨ch_i›‹t_£t_p‹t_dú
(
p‹t
, 
mask
, 
dú
);

266 
ölöe
 
i›‹t_£t_pö_dú
(
i›‹t_pö_t
 
pö
,

267 
i›‹t_dúe˘i⁄
 
dú
)

269 
¨ch_i›‹t_£t_pö_dú
(
pö
, 
dú
);

278 
ölöe
 
i›‹t_£t_pö_Àvñ
(
i›‹t_pö_t
 
pö
, 
boﬁ
 
Àvñ
)

280 
¨ch_i›‹t_£t_pö_Àvñ
(
pö
, 
Àvñ
);

291 
ölöe
 
i›‹t_£t_p‹t_Àvñ
(
i›‹t_p‹t_t
 
p‹t
,

292 
i›‹t_p‹t_mask_t
 
mask
, i›‹t_p‹t_mask_à
Àvñ
)

294 
¨ch_i›‹t_£t_p‹t_Àvñ
(
p‹t
, 
mask
, 
Àvñ
);

304 
ölöe
 
boﬁ
 
i›‹t_gë_pö_Àvñ
(
i›‹t_pö_t
 
pö
)

306  
¨ch_i›‹t_gë_pö_Àvñ
(
pö
);

318 
ölöe
 
i›‹t_p‹t_mask_t
 
i›‹t_gë_p‹t_Àvñ
(
i›‹t_pö_t
 
p‹t
,

319 
i›‹t_p‹t_mask_t
 
mask
)

321  
¨ch_i›‹t_gë_p‹t_Àvñ
(
p‹t
, 
mask
);

330 
ölöe
 
i›‹t_toggÀ_pö_Àvñ
(
i›‹t_pö_t
 
pö
)

332 
¨ch_i›‹t_toggÀ_pö_Àvñ
(
pö
);

341 
ölöe
 
i›‹t_toggÀ_p‹t_Àvñ
(
i›‹t_p‹t_t
 
p‹t
,

342 
i›‹t_p‹t_mask_t
 
mask
)

344 
¨ch_i›‹t_toggÀ_p‹t_Àvñ
(
p‹t
, 
mask
);

353 
ölöe
 
i›‹t_£t_pö_£n£_mode
(
i›‹t_pö_t
 
pö
,

354 
i›‹t_£n£
 
pö_£n£
)

356 
¨ch_i›‹t_£t_pö_£n£_mode
(
pö
, 
pö_£n£
);

366 
ölöe
 
i›‹t_£t_p‹t_£n£_mode
(
i›‹t_p‹t_t
 
p‹t
,

367 
i›‹t_p‹t_mask_t
 
mask
,

368 
i›‹t_£n£
 
pö_£n£
)

370 
¨ch_i›‹t_£t_p‹t_£n£_mode
(
p‹t
, 
mask
, 
pö_£n£
);

379 
ölöe
 
i›‹t_p‹t_t
 
i›‹t_pö_to_p‹t_id
(
i›‹t_pö_t
 
pö
)

381  
¨ch_i›‹t_pö_to_p‹t_id
(
pö
);

390 
ölöe
 
i›‹t_p‹t_mask_t
 
i›‹t_pö_to_mask
(
i›‹t_pö_t
 
pö
)

392  
¨ch_i›‹t_pö_to_mask
(
pö
);

537 #ifde‡
__˝lu•lus


	@/home/vaje/Documents/vaja9/asf/common/services/ioport/sam/ioport_gpio.h

46 #i‚de‡
IOPORT_SAM_H


47 
	#IOPORT_SAM_H


	)

49 
	~<sys˛k.h
>

51 
	#IOPORT_CREATE_PIN
(
p‹t
, 
pö
Ë(’‹tË* 32 + (pö))

	)

54 
	#IOPORT_GPIOA
 0

	)

55 
	#IOPORT_GPIOB
 1

	)

56 
	#IOPORT_GPIOC
 2

	)

57 
	#IOPORT_GPIOD
 3

	)

58 
	#IOPORT_GPIOE
 4

	)

59 
	#IOPORT_GPIOF
 5

	)

72 
	#IOPORT_MODE_MUX_MASK
 (7 << 0Ë

	)

73 
	#IOPORT_MODE_MUX_BIT0
 (1 << 0Ë

	)

74 
	#IOPORT_MODE_MUX_BIT1
 (1 << 1Ë

	)

75 
	#IOPORT_MODE_MUX_A
 (0 << 0Ë

	)

76 
	#IOPORT_MODE_MUX_B
 (1 << 0Ë

	)

77 
	#IOPORT_MODE_MUX_C
 (2 << 0Ë

	)

78 
	#IOPORT_MODE_MUX_D
 (3 << 0Ë

	)

80 
	#IOPORT_MODE_MUX_BIT2
 (1 << 2Ë

	)

81 
	#IOPORT_MODE_MUX_E
 (4 << 0Ë

	)

82 
	#IOPORT_MODE_MUX_F
 (5 << 0Ë

	)

83 
	#IOPORT_MODE_MUX_G
 (6 << 0Ë

	)

84 
	#IOPORT_MODE_MUX_H
 (7 << 0Ë

	)

86 
	#IOPORT_MODE_PULLUP
 (1 << 3Ë

	)

87 
	#IOPORT_MODE_PULLDOWN
 (1 << 4Ë

	)

88 
	#IOPORT_MODE_GLITCH_FILTER
 (1 << 6Ë

	)

89 
	#IOPORT_MODE_DRIVE_STRENGTH
 (1 << 7Ë

	)

94 
uöt32_t
 
	ti›‹t_mode_t
;

95 
uöt32_t
 
	ti›‹t_pö_t
;

96 
uöt32_t
 
	ti›‹t_p‹t_t
;

97 
uöt32_t
 
	ti›‹t_p‹t_mask_t
;

99 
__Æways_ölöe
 
i›‹t_p‹t_t
 
	$¨ch_i›‹t_pö_to_p‹t_id
(
i›‹t_pö_t
 
pö
)

101  
pö
 >> 5;

102 
	}
}

104 
__Æways_ölöe
 vﬁ©ûê
GpioP‹t
 *
	$¨ch_i›‹t_p‹t_to_ba£
(

105 
i›‹t_p‹t_t
 
p‹t
)

107  (vﬁ©ûê
GpioP‹t
 *)(
GPIO_ADDR


108 + 
p‹t
 * (
GpioP‹t
));

109 
	}
}

111 
__Æways_ölöe
 vﬁ©ûê
GpioP‹t
 *
	$¨ch_i›‹t_pö_to_ba£
(
i›‹t_pö_t
 
pö
)

113  
	`¨ch_i›‹t_p‹t_to_ba£
(
	`¨ch_i›‹t_pö_to_p‹t_id
(
pö
));

114 
	}
}

116 
__Æways_ölöe
 
i›‹t_p‹t_mask_t
 
	$¨ch_i›‹t_pö_to_mask
(
i›‹t_pö_t
 
pö
)

118  1U << (
pö
 & 0x1F);

119 
	}
}

121 
__Æways_ölöe
 
	$¨ch_i›‹t_öô
()

123 
	`sys˛k_íabÀ_≥rùhîÆ_˛ock
(
GPIO
);

124 
	}
}

126 
__Æways_ölöe
 
	$¨ch_i›‹t_íabÀ_p‹t
(
i›‹t_p‹t_t
 
p‹t
,

127 
i›‹t_p‹t_mask_t
 
mask
)

129 
	`¨ch_i›‹t_p‹t_to_ba£
(
p‹t
)->
GPIO_GPERS
 = 
mask
;

130 
	}
}

132 
__Æways_ölöe
 
	$¨ch_i›‹t_dißbÀ_p‹t
(
i›‹t_p‹t_t
 
p‹t
,

133 
i›‹t_p‹t_mask_t
 
mask
)

135 
	`¨ch_i›‹t_p‹t_to_ba£
(
p‹t
)->
GPIO_GPERC
 = 
mask
;

136 
	}
}

138 
__Æways_ölöe
 
	$¨ch_i›‹t_íabÀ_pö
(
i›‹t_pö_t
 
pö
)

140 
	`¨ch_i›‹t_íabÀ_p‹t
(
	`¨ch_i›‹t_pö_to_p‹t_id
(
pö
),

141 
	`¨ch_i›‹t_pö_to_mask
(
pö
));

142 
	}
}

144 
__Æways_ölöe
 
	$¨ch_i›‹t_dißbÀ_pö
(
i›‹t_pö_t
 
pö
)

146 
	`¨ch_i›‹t_dißbÀ_p‹t
(
	`¨ch_i›‹t_pö_to_p‹t_id
(
pö
),

147 
	`¨ch_i›‹t_pö_to_mask
(
pö
));

148 
	}
}

150 
__Æways_ölöe
 
	$¨ch_i›‹t_£t_p‹t_mode
(
i›‹t_p‹t_t
 
p‹t
,

151 
i›‹t_p‹t_mask_t
 
mask
, 
i›‹t_mode_t
 
mode
)

153 vﬁ©ûê
GpioP‹t
 *
ba£
 = 
	`¨ch_i›‹t_p‹t_to_ba£
(
p‹t
);

155 i‡(
mode
 & 
IOPORT_MODE_PULLUP
) {

156 
ba£
->
GPIO_PUERS
 = 
mask
;

158 
ba£
->
GPIO_PUERC
 = 
mask
;

161 #ifde‡
IOPORT_MODE_PULLDOWN


162 i‡(
mode
 & 
IOPORT_MODE_PULLDOWN
) {

163 
ba£
->
GPIO_PDERS
 = 
mask
;

165 
ba£
->
GPIO_PDERC
 = 
mask
;

169 i‡(
mode
 & 
IOPORT_MODE_GLITCH_FILTER
) {

170 
ba£
->
GPIO_GFERS
 = 
mask
;

172 
ba£
->
GPIO_GFERC
 = 
mask
;

175 #ifde‡
IOPORT_MODE_DRIVE_STRENGTH


176 i‡(
mode
 & 
IOPORT_MODE_DRIVE_STRENGTH
) {

177 
ba£
->
GPIO_ODCR0S
 = 
mask
;

179 
ba£
->
GPIO_ODCR0C
 = 
mask
;

183 i‡(
mode
 & 
IOPORT_MODE_MUX_BIT0
) {

184 
ba£
->
GPIO_PMR0S
 = 
mask
;

186 
ba£
->
GPIO_PMR0C
 = 
mask
;

189 i‡(
mode
 & 
IOPORT_MODE_MUX_BIT1
) {

190 
ba£
->
GPIO_PMR1S
 = 
mask
;

192 
ba£
->
GPIO_PMR1C
 = 
mask
;

195 #ifde‡
IOPORT_MODE_MUX_BIT2


196 i‡(
mode
 & 
IOPORT_MODE_MUX_BIT2
) {

197 
ba£
->
GPIO_PMR2S
 = 
mask
;

199 
ba£
->
GPIO_PMR2C
 = 
mask
;

202 
	}
}

204 
__Æways_ölöe
 
	$¨ch_i›‹t_£t_pö_mode
(
i›‹t_pö_t
 
pö
,

205 
i›‹t_mode_t
 
mode
)

207 
	`¨ch_i›‹t_£t_p‹t_mode
(
	`¨ch_i›‹t_pö_to_p‹t_id
(
pö
),

208 
	`¨ch_i›‹t_pö_to_mask
(
pö
), 
mode
);

209 
	}
}

211 
__Æways_ölöe
 
	$¨ch_i›‹t_£t_p‹t_dú
(
i›‹t_p‹t_t
 
p‹t
,

212 
i›‹t_p‹t_mask_t
 
mask
, 
group_dúe˘i⁄
)

214 i‡(
group_dúe˘i⁄
 =
IOPORT_DIR_OUTPUT
) {

215 
	`¨ch_i›‹t_p‹t_to_ba£
(
p‹t
)->
GPIO_ODERS
 = 
mask
;

217 
	`¨ch_i›‹t_p‹t_to_ba£
(
p‹t
)->
GPIO_STERC
 = 
mask
;

218 } i‡(
group_dúe˘i⁄
 =
IOPORT_DIR_INPUT
) {

219 
	`¨ch_i›‹t_p‹t_to_ba£
(
p‹t
)->
GPIO_ODERC
 = 
mask
;

221 
	`¨ch_i›‹t_p‹t_to_ba£
(
p‹t
)->
GPIO_STERS
 = 
mask
;

223 
	}
}

225 
__Æways_ölöe
 
	$¨ch_i›‹t_£t_pö_dú
(
i›‹t_pö_t
 
pö
,

226 
i›‹t_dúe˘i⁄
 
dú
)

228 i‡(
dú
 =
IOPORT_DIR_OUTPUT
) {

229 
	`¨ch_i›‹t_pö_to_ba£
(
pö
)->
GPIO_ODERS
 = 
	`¨ch_i›‹t_pö_to_mask
(pin);

231 
	`¨ch_i›‹t_pö_to_ba£
(
pö
)->
GPIO_STERC
 = 
	`¨ch_i›‹t_pö_to_mask
(pin);

232 } i‡(
dú
 =
IOPORT_DIR_INPUT
) {

233 
	`¨ch_i›‹t_pö_to_ba£
(
pö
)->
GPIO_ODERC
 = 
	`¨ch_i›‹t_pö_to_mask
(pin);

235 
	`¨ch_i›‹t_pö_to_ba£
(
pö
)->
GPIO_STERS
 = 
	`¨ch_i›‹t_pö_to_mask
(pin);

237 
	}
}

239 
__Æways_ölöe
 
	$¨ch_i›‹t_£t_pö_Àvñ
(
i›‹t_pö_t
 
pö
,

240 
boﬁ
 
Àvñ
)

242 i‡(
Àvñ
) {

243 
	`¨ch_i›‹t_pö_to_ba£
(
pö
)->
GPIO_OVRS
 = 
	`¨ch_i›‹t_pö_to_mask
(pin);

245 
	`¨ch_i›‹t_pö_to_ba£
(
pö
)->
GPIO_OVRC
 = 
	`¨ch_i›‹t_pö_to_mask
(pin);

247 
	}
}

249 
__Æways_ölöe
 
	$¨ch_i›‹t_£t_p‹t_Àvñ
(
i›‹t_p‹t_t
 
p‹t
,

250 
i›‹t_p‹t_mask_t
 
mask
, i›‹t_p‹t_mask_à
Àvñ
)

252 vﬁ©ûê
GpioP‹t
 *
ba£
 = 
	`¨ch_i›‹t_p‹t_to_ba£
(
p‹t
);

253 i‡(
Àvñ
){

254 
ba£
->
GPIO_OVRS
 = 
mask
;

257 
ba£
->
GPIO_OVRC
 = 
mask
;

259 
	}
}

261 
__Æways_ölöe
 
boﬁ
 
	$¨ch_i›‹t_gë_pö_Àvñ
(
i›‹t_pö_t
 
pö
)

263  
	`¨ch_i›‹t_pö_to_ba£
(
pö
)->
GPIO_PVR
 & 
	`¨ch_i›‹t_pö_to_mask
(pin);

264 
	}
}

266 
__Æways_ölöe
 
i›‹t_p‹t_mask_t
 
	$¨ch_i›‹t_gë_p‹t_Àvñ
(

267 
i›‹t_p‹t_t
 
p‹t
, 
i›‹t_p‹t_mask_t
 
mask
)

269  
	`¨ch_i›‹t_p‹t_to_ba£
(
p‹t
)->
GPIO_PVR
 & 
mask
;

270 
	}
}

272 
__Æways_ölöe
 
	$¨ch_i›‹t_toggÀ_pö_Àvñ
(
i›‹t_pö_t
 
pö
)

274 
	`¨ch_i›‹t_pö_to_ba£
(
pö
)->
GPIO_OVRT
 = 
	`¨ch_i›‹t_pö_to_mask
(pin);

275 
	}
}

277 
__Æways_ölöe
 
	$¨ch_i›‹t_toggÀ_p‹t_Àvñ
(
i›‹t_p‹t_t
 
p‹t
,

278 
i›‹t_p‹t_mask_t
 
mask
)

280 
	`¨ch_i›‹t_p‹t_to_ba£
(
p‹t
)->
GPIO_OVRT
 = 
mask
;

281 
	}
}

283 
__Æways_ölöe
 
	$¨ch_i›‹t_£t_p‹t_£n£_mode
(
i›‹t_p‹t_t
 
p‹t
,

284 
i›‹t_p‹t_mask_t
 
mask
, 
i›‹t_£n£
 
pö_£n£
)

286 vﬁ©ûê
GpioP‹t
 *
ba£
 = 
	`¨ch_i›‹t_p‹t_to_ba£
(
p‹t
);

288 i‡(
pö_£n£
 & 0x01) {

289 
ba£
->
GPIO_IMR0S
 = 
mask
;

291 
ba£
->
GPIO_IMR0C
 = 
mask
;

294 i‡(
pö_£n£
 & 0x02) {

295 
ba£
->
GPIO_IMR1S
 = 
mask
;

297 
ba£
->
GPIO_IMR1C
 = 
mask
;

299 
	}
}

301 
__Æways_ölöe
 
	$¨ch_i›‹t_£t_pö_£n£_mode
(
i›‹t_pö_t
 
pö
,

302 
i›‹t_£n£
 
pö_£n£
)

304 
	`¨ch_i›‹t_£t_p‹t_£n£_mode
(
	`¨ch_i›‹t_pö_to_p‹t_id
(
pö
),

305 
	`¨ch_i›‹t_pö_to_mask
(
pö
), 
pö_£n£
);

306 
	}
}

	@/home/vaje/Documents/vaja9/asf/common/services/ioport/sam/ioport_pio.h

46 #i‚de‡
IOPORT_SAM_H


47 
	#IOPORT_SAM_H


	)

49 
	~<sys˛k.h
>

51 
	#IOPORT_CREATE_PIN
(
p‹t
, 
pö
Ë((
IOPORT_
 ##Ö‹tË* 32 + (pö))

	)

52 
	#IOPORT_BASE_ADDRESS
 (
uöçå_t
)
PIOA


	)

53 
	#IOPORT_PIO_OFFSET
 ((
uöçå_t
)
PIOB
 - (uöçå_t)
PIOA
)

	)

55 
	#IOPORT_PIOA
 0

	)

56 
	#IOPORT_PIOB
 1

	)

57 
	#IOPORT_PIOC
 2

	)

58 
	#IOPORT_PIOD
 3

	)

59 
	#IOPORT_PIOE
 4

	)

60 
	#IOPORT_PIOF
 5

	)

73 
	#IOPORT_MODE_MUX_MASK
 (0x7 << 0Ë

	)

74 
	#IOPORT_MODE_MUX_BIT0
 ( 1 << 0Ë

	)

76 #i‡
SAM3N
 || 
SAM3S
 || 
SAM4S
 || 
SAM4E
 || 
SAM4N
 || 
SAM4C
 || 
SAM4CM
 || 
SAMG
 || 
SAM4CP
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70


77 
	#IOPORT_MODE_MUX_BIT1
 ( 1 << 1Ë

	)

80 
	#IOPORT_MODE_MUX_A
 ( 0 << 0Ë

	)

81 
	#IOPORT_MODE_MUX_B
 ( 1 << 0Ë

	)

83 #i‡
SAM3N
 || 
SAM3S
 || 
SAM4S
 || 
SAM4E
 || 
SAM4N
 || 
SAM4C
 || 
SAM4CM
 || 
SAMG
 || 
SAM4CP
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70


84 
	#IOPORT_MODE_MUX_C
 ( 2 << 0Ë

	)

85 
	#IOPORT_MODE_MUX_D
 ( 3 << 0Ë

	)

88 
	#IOPORT_MODE_PULLUP
 ( 1 << 3Ë

	)

90 #i‡
SAM3N
 || 
SAM3S
 || 
SAM4S
 || 
SAM4E
 || 
SAM4N
 || 
SAM4C
 || 
SAM4CM
 || 
SAMG
 || 
SAM4CP
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70


91 
	#IOPORT_MODE_PULLDOWN
 ( 1 << 4Ë

	)

94 
	#IOPORT_MODE_OPEN_DRAIN
 ( 1 << 5Ë

	)

96 
	#IOPORT_MODE_GLITCH_FILTER
 ( 1 << 6Ë

	)

97 
	#IOPORT_MODE_DEBOUNCE
 ( 1 << 7Ë

	)

102 
uöt32_t
 
	ti›‹t_mode_t
;

103 
uöt32_t
 
	ti›‹t_pö_t
;

104 
uöt32_t
 
	ti›‹t_p‹t_t
;

105 
uöt32_t
 
	ti›‹t_p‹t_mask_t
;

107 
__Æways_ölöe
 
i›‹t_p‹t_t
 
	$¨ch_i›‹t_pö_to_p‹t_id
(
i›‹t_pö_t
 
pö
)

109  
pö
 >> 5;

110 
	}
}

112 
__Æways_ölöe
 
Pio
 *
	$¨ch_i›‹t_p‹t_to_ba£
(
i›‹t_p‹t_t
 
p‹t
)

114 #i‡(
SAM4C
 || 
SAM4CM
 || 
SAM4CP
)

115 i‡(
p‹t
 =
IOPORT_PIOC
) {

116  (
Pio
 *)(
uöçå_t
)
PIOC
;

117 #ifde‡
ID_PIOD


118 } i‡(
p‹t
 =
IOPORT_PIOD
) {

119  (
Pio
 *)(
uöçå_t
)
PIOD
;

122  (
Pio
 *)((
uöçå_t
)
IOPORT_BASE_ADDRESS
 +

123 (
IOPORT_PIO_OFFSET
 * 
p‹t
));

126  (
Pio
 *)((
uöçå_t
)
IOPORT_BASE_ADDRESS
 +

127 (
IOPORT_PIO_OFFSET
 * 
p‹t
));

129 
	}
}

131 
__Æways_ölöe
 
Pio
 *
	$¨ch_i›‹t_pö_to_ba£
(
i›‹t_pö_t
 
pö
)

133  
	`¨ch_i›‹t_p‹t_to_ba£
(
	`¨ch_i›‹t_pö_to_p‹t_id
(
pö
));

134 
	}
}

136 
__Æways_ölöe
 
i›‹t_p‹t_mask_t
 
	$¨ch_i›‹t_pö_to_mask
(
i›‹t_pö_t
 
pö
)

138  1U << (
pö
 & 0x1F);

139 
	}
}

141 
__Æways_ölöe
 
	$¨ch_i›‹t_öô
()

143 #ifde‡
ID_PIOA


144 
	`sys˛k_íabÀ_≥rùhîÆ_˛ock
(
ID_PIOA
);

146 #ifde‡
ID_PIOB


147 
	`sys˛k_íabÀ_≥rùhîÆ_˛ock
(
ID_PIOB
);

149 #ifde‡
ID_PIOC


150 
	`sys˛k_íabÀ_≥rùhîÆ_˛ock
(
ID_PIOC
);

152 #ifde‡
ID_PIOD


153 
	`sys˛k_íabÀ_≥rùhîÆ_˛ock
(
ID_PIOD
);

155 #ifde‡
ID_PIOE


156 
	`sys˛k_íabÀ_≥rùhîÆ_˛ock
(
ID_PIOE
);

158 #ifde‡
ID_PIOF


159 
	`sys˛k_íabÀ_≥rùhîÆ_˛ock
(
ID_PIOF
);

161 
	}
}

163 
__Æways_ölöe
 
	$¨ch_i›‹t_íabÀ_p‹t
(
i›‹t_p‹t_t
 
p‹t
,

164 
i›‹t_p‹t_mask_t
 
mask
)

166 
	`¨ch_i›‹t_p‹t_to_ba£
(
p‹t
)->
PIO_PER
 = 
mask
;

167 
	}
}

169 
__Æways_ölöe
 
	$¨ch_i›‹t_dißbÀ_p‹t
(
i›‹t_p‹t_t
 
p‹t
,

170 
i›‹t_p‹t_mask_t
 
mask
)

172 
	`¨ch_i›‹t_p‹t_to_ba£
(
p‹t
)->
PIO_PDR
 = 
mask
;

173 
	}
}

175 
__Æways_ölöe
 
	$¨ch_i›‹t_íabÀ_pö
(
i›‹t_pö_t
 
pö
)

177 
	`¨ch_i›‹t_íabÀ_p‹t
(
	`¨ch_i›‹t_pö_to_p‹t_id
(
pö
),

178 
	`¨ch_i›‹t_pö_to_mask
(
pö
));

179 
	}
}

181 
__Æways_ölöe
 
	$¨ch_i›‹t_dißbÀ_pö
(
i›‹t_pö_t
 
pö
)

183 
	`¨ch_i›‹t_dißbÀ_p‹t
(
	`¨ch_i›‹t_pö_to_p‹t_id
(
pö
),

184 
	`¨ch_i›‹t_pö_to_mask
(
pö
));

185 
	}
}

187 
__Æways_ölöe
 
	$¨ch_i›‹t_£t_p‹t_mode
(
i›‹t_p‹t_t
 
p‹t
,

188 
i›‹t_p‹t_mask_t
 
mask
, 
i›‹t_mode_t
 
mode
)

190 
Pio
 *
ba£
 = 
	`¨ch_i›‹t_p‹t_to_ba£
(
p‹t
);

192 i‡(
mode
 & 
IOPORT_MODE_PULLUP
) {

193 
ba£
->
PIO_PUER
 = 
mask
;

195 
ba£
->
PIO_PUDR
 = 
mask
;

198 #i‡
	`deföed
(
IOPORT_MODE_PULLDOWN
)

199 i‡(
mode
 & 
IOPORT_MODE_PULLDOWN
) {

200 
ba£
->
PIO_PPDER
 = 
mask
;

202 
ba£
->
PIO_PPDDR
 = 
mask
;

206 i‡(
mode
 & 
IOPORT_MODE_OPEN_DRAIN
) {

207 
ba£
->
PIO_MDER
 = 
mask
;

209 
ba£
->
PIO_MDDR
 = 
mask
;

212 i‡(
mode
 & (
IOPORT_MODE_GLITCH_FILTER
 | 
IOPORT_MODE_DEBOUNCE
)) {

213 
ba£
->
PIO_IFER
 = 
mask
;

215 
ba£
->
PIO_IFDR
 = 
mask
;

218 i‡(
mode
 & 
IOPORT_MODE_DEBOUNCE
) {

219 #i‡
SAM3U
 || 
SAM3XA


220 
ba£
->
PIO_DIFSR
 = 
mask
;

222 
ba£
->
PIO_IFSCER
 = 
mask
;

225 #i‡
SAM3U
 || 
SAM3XA


226 
ba£
->
PIO_SCIFSR
 = 
mask
;

228 
ba£
->
PIO_IFSCDR
 = 
mask
;

232 #i‡!
	`deföed
(
IOPORT_MODE_MUX_BIT1
)

233 i‡(
mode
 & 
IOPORT_MODE_MUX_BIT0
) {

234 
ba£
->
PIO_ABSR
 |
mask
;

236 
ba£
->
PIO_ABSR
 &~
mask
;

239 i‡(
mode
 & 
IOPORT_MODE_MUX_BIT0
) {

240 
ba£
->
PIO_ABCDSR
[0] |
mask
;

242 
ba£
->
PIO_ABCDSR
[0] &~
mask
;

245 i‡(
mode
 & 
IOPORT_MODE_MUX_BIT1
) {

246 
ba£
->
PIO_ABCDSR
[1] |
mask
;

248 
ba£
->
PIO_ABCDSR
[1] &~
mask
;

251 
	}
}

253 
__Æways_ölöe
 
	$¨ch_i›‹t_£t_pö_mode
(
i›‹t_pö_t
 
pö
,

254 
i›‹t_mode_t
 
mode
)

256 
	`¨ch_i›‹t_£t_p‹t_mode
(
	`¨ch_i›‹t_pö_to_p‹t_id
(
pö
),

257 
	`¨ch_i›‹t_pö_to_mask
(
pö
), 
mode
);

258 
	}
}

260 
__Æways_ölöe
 
	$¨ch_i›‹t_£t_p‹t_dú
(
i›‹t_p‹t_t
 
p‹t
,

261 
i›‹t_p‹t_mask_t
 
mask
, 
i›‹t_dúe˘i⁄
 
group_dúe˘i⁄
)

263 
Pio
 *
ba£
 = 
	`¨ch_i›‹t_p‹t_to_ba£
(
p‹t
);

265 i‡(
group_dúe˘i⁄
 =
IOPORT_DIR_OUTPUT
) {

266 
ba£
->
PIO_OER
 = 
mask
;

267 } i‡(
group_dúe˘i⁄
 =
IOPORT_DIR_INPUT
) {

268 
ba£
->
PIO_ODR
 = 
mask
;

271 
ba£
->
PIO_OWER
 = 
mask
;

272 
	}
}

274 
__Æways_ölöe
 
	$¨ch_i›‹t_£t_pö_dú
(
i›‹t_pö_t
 
pö
,

275 
i›‹t_dúe˘i⁄
 
dú
)

277 
Pio
 *
ba£
 = 
	`¨ch_i›‹t_pö_to_ba£
(
pö
);

279 i‡(
dú
 =
IOPORT_DIR_OUTPUT
) {

280 
ba£
->
PIO_OER
 = 
	`¨ch_i›‹t_pö_to_mask
(
pö
);

281 } i‡(
dú
 =
IOPORT_DIR_INPUT
) {

282 
ba£
->
PIO_ODR
 = 
	`¨ch_i›‹t_pö_to_mask
(
pö
);

285 
ba£
->
PIO_OWER
 = 
	`¨ch_i›‹t_pö_to_mask
(
pö
);

286 
	}
}

288 
__Æways_ölöe
 
	$¨ch_i›‹t_£t_pö_Àvñ
(
i›‹t_pö_t
 
pö
,

289 
boﬁ
 
Àvñ
)

291 
Pio
 *
ba£
 = 
	`¨ch_i›‹t_pö_to_ba£
(
pö
);

293 i‡(
Àvñ
) {

294 
ba£
->
PIO_SODR
 = 
	`¨ch_i›‹t_pö_to_mask
(
pö
);

296 
ba£
->
PIO_CODR
 = 
	`¨ch_i›‹t_pö_to_mask
(
pö
);

298 
	}
}

300 
__Æways_ölöe
 
	$¨ch_i›‹t_£t_p‹t_Àvñ
(
i›‹t_p‹t_t
 
p‹t
,

301 
i›‹t_p‹t_mask_t
 
mask
, i›‹t_p‹t_mask_à
Àvñ
)

303 
Pio
 *
ba£
 = 
	`¨ch_i›‹t_p‹t_to_ba£
(
p‹t
);

305 
ba£
->
PIO_SODR
 = 
mask
 & 
Àvñ
;

306 
ba£
->
PIO_CODR
 = 
mask
 & ~
Àvñ
;

307 
	}
}

309 
__Æways_ölöe
 
boﬁ
 
	$¨ch_i›‹t_gë_pö_Àvñ
(
i›‹t_pö_t
 
pö
)

311  
	`¨ch_i›‹t_pö_to_ba£
(
pö
)->
PIO_PDSR
 & 
	`¨ch_i›‹t_pö_to_mask
(pin);

312 
	}
}

314 
__Æways_ölöe
 
i›‹t_p‹t_mask_t
 
	$¨ch_i›‹t_gë_p‹t_Àvñ
(

315 
i›‹t_p‹t_t
 
p‹t
, 
i›‹t_p‹t_mask_t
 
mask
)

317  
	`¨ch_i›‹t_p‹t_to_ba£
(
p‹t
)->
PIO_PDSR
 & 
mask
;

318 
	}
}

320 
__Æways_ölöe
 
	$¨ch_i›‹t_toggÀ_pö_Àvñ
(
i›‹t_pö_t
 
pö
)

322 
Pio
 *
p‹t
 = 
	`¨ch_i›‹t_pö_to_ba£
(
pö
);

323 
i›‹t_p‹t_mask_t
 
mask
 = 
	`¨ch_i›‹t_pö_to_mask
(
pö
);

325 i‡(
p‹t
->
PIO_PDSR
 & 
	`¨ch_i›‹t_pö_to_mask
(
pö
)) {

326 
p‹t
->
PIO_CODR
 = 
mask
;

328 
p‹t
->
PIO_SODR
 = 
mask
;

330 
	}
}

332 
__Æways_ölöe
 
	$¨ch_i›‹t_toggÀ_p‹t_Àvñ
(
i›‹t_p‹t_t
 
p‹t
,

333 
i›‹t_p‹t_mask_t
 
mask
)

335 
	`¨ch_i›‹t_p‹t_to_ba£
(
p‹t
)->
PIO_ODSR
 ^
mask
;

336 
	}
}

338 
__Æways_ölöe
 
	$¨ch_i›‹t_£t_p‹t_£n£_mode
(
i›‹t_p‹t_t
 
p‹t
,

339 
i›‹t_p‹t_mask_t
 
mask
, 
i›‹t_£n£
 
pö_£n£
)

341 
Pio
 *
ba£
 = 
	`¨ch_i›‹t_p‹t_to_ba£
(
p‹t
);

349 
pö_£n£
) {

350 
IOPORT_SENSE_LEVEL_LOW
:

351 
ba£
->
PIO_LSR
 = 
mask
;

352 
ba£
->
PIO_FELLSR
 = 
mask
;

354 
IOPORT_SENSE_LEVEL_HIGH
:

355 
ba£
->
PIO_LSR
 = 
mask
;

356 
ba£
->
PIO_REHLSR
 = 
mask
;

358 
IOPORT_SENSE_FALLING
:

359 
ba£
->
PIO_ESR
 = 
mask
;

360 
ba£
->
PIO_FELLSR
 = 
mask
;

362 
IOPORT_SENSE_RISING
:

363 
ba£
->
PIO_ESR
 = 
mask
;

364 
ba£
->
PIO_REHLSR
 = 
mask
;

367 
ba£
->
PIO_AIMDR
 = 
mask
;

370 
ba£
->
PIO_AIMER
 = 
mask
;

371 
	}
}

373 
__Æways_ölöe
 
	$¨ch_i›‹t_£t_pö_£n£_mode
(
i›‹t_pö_t
 
pö
,

374 
i›‹t_£n£
 
pö_£n£
)

376 
	`¨ch_i›‹t_£t_p‹t_£n£_mode
(
	`¨ch_i›‹t_pö_to_p‹t_id
(
pö
),

377 
	`¨ch_i›‹t_pö_to_mask
(
pö
), 
pö_£n£
);

378 
	}
}

	@/home/vaje/Documents/vaja9/asf/common/services/ioport/uc3/ioport.h

46 #i‚de‡
IOPORT_UC3_H


47 
	#IOPORT_UC3_H


	)

49 
	~<sys˛k.h
>

51 
	#IOPORT_CREATE_PIN
(
p‹t
, 
pö
Ë(’‹tË* 32 + (pö))

	)

64 
	#IOPORT_MODE_MUX_MASK
 (7 << 0Ë

	)

65 
	#IOPORT_MODE_MUX_BIT0
 (1 << 0Ë

	)

66 
	#IOPORT_MODE_MUX_BIT1
 (1 << 1Ë

	)

67 
	#IOPORT_MODE_MUX_A
 (0 << 0Ë

	)

68 
	#IOPORT_MODE_MUX_B
 (1 << 0Ë

	)

69 
	#IOPORT_MODE_MUX_C
 (2 << 0Ë

	)

70 
	#IOPORT_MODE_MUX_D
 (3 << 0Ë

	)

72 #i‡
UC3C
 || 
UC3D
 || 
UC3L


73 
	#IOPORT_MODE_MUX_BIT2
 (1 << 2Ë

	)

74 
	#IOPORT_MODE_MUX_E
 (4 << 0Ë

	)

75 
	#IOPORT_MODE_MUX_F
 (5 << 0Ë

	)

76 
	#IOPORT_MODE_MUX_G
 (6 << 0Ë

	)

77 
	#IOPORT_MODE_MUX_H
 (7 << 0Ë

	)

80 
	#IOPORT_MODE_PULLUP
 (1 << 3Ë

	)

82 #i‡
UC3C


83 
	#IOPORT_MODE_PULLDOWN
 (1 << 4Ë

	)

88 
	#IOPORT_MODE_OPEN_DRAIN
 (1 << 5Ë

	)

91 
	#IOPORT_MODE_GLITCH_FILTER
 (1 << 6Ë

	)

93 #i‡
UC3C


94 
	#IOPORT_MODE_DRIVE_STRENGTH
 (1 << 7Ë

	)

100 
uöt32_t
 
	ti›‹t_mode_t
;

101 
uöt32_t
 
	ti›‹t_pö_t
;

102 
uöt32_t
 
	ti›‹t_p‹t_t
;

103 
uöt32_t
 
	ti›‹t_p‹t_mask_t
;

105 
__Æways_ölöe
 
i›‹t_p‹t_t
 
	$¨ch_i›‹t_pö_to_p‹t_id
(
i›‹t_pö_t
 
pö
)

107  
pö
 >> 5;

108 
	}
}

110 
__Æways_ölöe
 vﬁ©ûê
avr32_gpio_p‹t_t
 *
	$¨ch_i›‹t_p‹t_to_ba£
(

111 
i›‹t_p‹t_t
 
p‹t
)

113  (vﬁ©ûê
avr32_gpio_p‹t_t
 *)(
AVR32_GPIO_ADDRESS


114 + 
p‹t
 * (
avr32_gpio_p‹t_t
));

115 
	}
}

117 
__Æways_ölöe
 vﬁ©ûê
avr32_gpio_p‹t_t
 *
	$¨ch_i›‹t_pö_to_ba£
(

118 
i›‹t_pö_t
 
pö
)

120  
	`¨ch_i›‹t_p‹t_to_ba£
(
	`¨ch_i›‹t_pö_to_p‹t_id
(
pö
));

121 
	}
}

123 
__Æways_ölöe
 
i›‹t_p‹t_mask_t
 
	$¨ch_i›‹t_pö_to_mask
(

124 
i›‹t_pö_t
 
pö
)

126  1U << (
pö
 & 0x1F);

127 
	}
}

129 
__Æways_ölöe
 
	$¨ch_i›‹t_öô
()

131 
	`sys˛k_íabÀ_pba_moduÀ
(
SYSCLK_GPIO
);

132 
	}
}

134 
__Æways_ölöe
 
	$¨ch_i›‹t_íabÀ_p‹t
(
i›‹t_p‹t_t
 
p‹t
,

135 
i›‹t_p‹t_mask_t
 
mask
)

137 
	`¨ch_i›‹t_p‹t_to_ba£
(
p‹t
)->
g≥rs
 = 
mask
;

138 
	}
}

140 
__Æways_ölöe
 
	$¨ch_i›‹t_dißbÀ_p‹t
(
i›‹t_p‹t_t
 
p‹t
,

141 
i›‹t_p‹t_mask_t
 
mask
)

143 
	`¨ch_i›‹t_p‹t_to_ba£
(
p‹t
)->
g≥rc
 = 
mask
;

144 
	}
}

146 
__Æways_ölöe
 
	$¨ch_i›‹t_íabÀ_pö
(
i›‹t_pö_t
 
pö
)

148 
	`¨ch_i›‹t_íabÀ_p‹t
(
	`¨ch_i›‹t_pö_to_p‹t_id
(
pö
),

149 
	`¨ch_i›‹t_pö_to_mask
(
pö
));

150 
	}
}

152 
__Æways_ölöe
 
	$¨ch_i›‹t_dißbÀ_pö
(
i›‹t_pö_t
 
pö
)

154 
	`¨ch_i›‹t_dißbÀ_p‹t
(
	`¨ch_i›‹t_pö_to_p‹t_id
(
pö
),

155 
	`¨ch_i›‹t_pö_to_mask
(
pö
));

156 
	}
}

158 
__Æways_ölöe
 
	$¨ch_i›‹t_£t_p‹t_mode
(
i›‹t_p‹t_t
 
p‹t
,

159 
i›‹t_p‹t_mask_t
 
mask
, 
i›‹t_mode_t
 
mode
)

161 vﬁ©ûê
avr32_gpio_p‹t_t
 *
ba£
 = 
	`¨ch_i›‹t_p‹t_to_ba£
(
p‹t
);

163 i‡(
mode
 & 
IOPORT_MODE_PULLUP
) {

164 
ba£
->
puîs
 = 
mask
;

166 
ba£
->
puîc
 = 
mask
;

169 #ifde‡
IOPORT_MODE_PULLDOWN


170 i‡(
mode
 & 
IOPORT_MODE_PULLDOWN
) {

171 
ba£
->
pdîs
 = 
mask
;

173 
ba£
->
pdîc
 = 
mask
;

178 #ifde‡
IOPORT_MODE_OPEN_DRAIN


179 i‡(
mode
 & 
IOPORT_MODE_OPEN_DRAIN
) {

180 
ba£
->
odmîs
 = 
mask
;

182 
ba£
->
odmîc
 = 
mask
;

187 i‡(
mode
 & 
IOPORT_MODE_GLITCH_FILTER
) {

188 
ba£
->
g„rs
 = 
mask
;

190 
ba£
->
g„rc
 = 
mask
;

193 #ifde‡
IOPORT_MODE_DRIVE_STRENGTH


194 i‡(
mode
 & 
IOPORT_MODE_DRIVE_STRENGTH
) {

195 
ba£
->
od¸0s
 = 
mask
;

197 
ba£
->
od¸0c
 = 
mask
;

202 i‡(
mode
 & 
IOPORT_MODE_MUX_BIT0
) {

203 
ba£
->
pmr0s
 = 
mask
;

205 
ba£
->
pmr0c
 = 
mask
;

208 i‡(
mode
 & 
IOPORT_MODE_MUX_BIT1
) {

209 
ba£
->
pmr1s
 = 
mask
;

211 
ba£
->
pmr1c
 = 
mask
;

214 #ifde‡
IOPORT_MODE_MUX_BIT2


215 i‡(
mode
 & 
IOPORT_MODE_MUX_BIT2
) {

216 
ba£
->
pmr2s
 = 
mask
;

218 
ba£
->
pmr2c
 = 
mask
;

222 
	}
}

224 
__Æways_ölöe
 
	$¨ch_i›‹t_£t_pö_mode
(
i›‹t_pö_t
 
pö
,

225 
i›‹t_mode_t
 
mode
)

227 
	`¨ch_i›‹t_£t_p‹t_mode
(
	`¨ch_i›‹t_pö_to_p‹t_id
(
pö
),

228 
	`¨ch_i›‹t_pö_to_mask
(
pö
), 
mode
);

229 
	}
}

231 
__Æways_ölöe
 
	$¨ch_i›‹t_£t_p‹t_dú
(
i›‹t_p‹t_t
 
p‹t
,

232 
i›‹t_p‹t_mask_t
 
mask
, 
group_dúe˘i⁄
)

234 i‡(
group_dúe˘i⁄
 =
IOPORT_DIR_OUTPUT
) {

235 
	`¨ch_i›‹t_p‹t_to_ba£
(
p‹t
)->
odîs
 = 
mask
;

236 } i‡(
group_dúe˘i⁄
 =
IOPORT_DIR_INPUT
) {

237 
	`¨ch_i›‹t_p‹t_to_ba£
(
p‹t
)->
odîc
 = 
mask
;

239 
	}
}

241 
__Æways_ölöe
 
	$¨ch_i›‹t_£t_pö_dú
(
i›‹t_pö_t
 
pö
,

242 
i›‹t_dúe˘i⁄
 
dú
)

244 i‡(
dú
 =
IOPORT_DIR_OUTPUT
) {

245 
	`¨ch_i›‹t_pö_to_ba£
(
pö
)->
odîs
 = 
	`¨ch_i›‹t_pö_to_mask
(

246 
pö
);

247 } i‡(
dú
 =
IOPORT_DIR_INPUT
) {

248 
	`¨ch_i›‹t_pö_to_ba£
(
pö
)->
odîc
 = 
	`¨ch_i›‹t_pö_to_mask
(

249 
pö
);

251 
	}
}

253 
__Æways_ölöe
 
	$¨ch_i›‹t_£t_pö_Àvñ
(
i›‹t_pö_t
 
pö
,

254 
boﬁ
 
Àvñ
)

256 i‡(
Àvñ
) {

257 
	`¨ch_i›‹t_pö_to_ba£
(
pö
)->
ovrs


258 
	`¨ch_i›‹t_pö_to_mask
(
pö
);

260 
	`¨ch_i›‹t_pö_to_ba£
(
pö
)->
ovrc


261 
	`¨ch_i›‹t_pö_to_mask
(
pö
);

263 
	}
}

265 
__Æways_ölöe
 
	$¨ch_i›‹t_£t_p‹t_Àvñ
(
i›‹t_p‹t_t
 
p‹t
,

266 
i›‹t_p‹t_mask_t
 
mask
, i›‹t_p‹t_mask_à
Àvñ
)

268 vﬁ©ûê
avr32_gpio_p‹t_t
 *
ba£
 = 
	`¨ch_i›‹t_p‹t_to_ba£
(
p‹t
);

269 i‡(
Àvñ
) {

270 
ba£
->
ovrs
 |
mask
;

271 
ba£
->
ovrc
 &~
mask
;

273 
ba£
->
ovrs
 &~
mask
;

274 
ba£
->
ovrc
 |
mask
;

276 
	}
}

278 
__Æways_ölöe
 
boﬁ
 
	$¨ch_i›‹t_gë_pö_Àvñ
(
i›‹t_pö_t
 
pö
)

280  
	`¨ch_i›‹t_pö_to_ba£
(
pö
)->
pvr
 & 
	`¨ch_i›‹t_pö_to_mask
(pin);

281 
	}
}

283 
__Æways_ölöe
 
i›‹t_p‹t_mask_t
 
	$¨ch_i›‹t_gë_p‹t_Àvñ
(

284 
i›‹t_p‹t_t
 
p‹t
, 
i›‹t_p‹t_mask_t
 
mask
)

286  
	`¨ch_i›‹t_p‹t_to_ba£
(
p‹t
)->
pvr
 & 
mask
;

287 
	}
}

289 
__Æways_ölöe
 
	$¨ch_i›‹t_toggÀ_pö_Àvñ
(
i›‹t_pö_t
 
pö
)

291 
	`¨ch_i›‹t_pö_to_ba£
(
pö
)->
ovπ
 = 
	`¨ch_i›‹t_pö_to_mask
(pin);

292 
	}
}

294 
__Æways_ölöe
 
	$¨ch_i›‹t_toggÀ_p‹t_Àvñ
(
i›‹t_p‹t_t
 
p‹t
,

295 
i›‹t_p‹t_mask_t
 
mask
)

297 
	`¨ch_i›‹t_p‹t_to_ba£
(
p‹t
)->
ovπ
 = 
mask
;

298 
	}
}

300 
__Æways_ölöe
 
	$¨ch_i›‹t_£t_p‹t_£n£_mode
(
i›‹t_p‹t_t
 
p‹t
,

301 
i›‹t_p‹t_mask_t
 
mask
, 
i›‹t_£n£
 
pö_£n£
)

303 vﬁ©ûê
avr32_gpio_p‹t_t
 *
ba£
 = 
	`¨ch_i›‹t_p‹t_to_ba£
(
p‹t
);

305 i‡(
pö_£n£
 & 0x01) {

306 
ba£
->
imr0s
 = 
mask
;

308 
ba£
->
imr0c
 = 
mask
;

311 i‡(
pö_£n£
 & 0x02) {

312 
ba£
->
imr1s
 = 
mask
;

314 
ba£
->
imr1c
 = 
mask
;

316 
	}
}

318 
__Æways_ölöe
 
	$¨ch_i›‹t_£t_pö_£n£_mode
(
i›‹t_pö_t
 
pö
,

319 
i›‹t_£n£
 
pö_£n£
)

321 
	`¨ch_i›‹t_£t_p‹t_£n£_mode
(
	`¨ch_i›‹t_pö_to_p‹t_id
(
pö
),

322 
	`¨ch_i›‹t_pö_to_mask
(
pö
), 
pö_£n£
);

323 
	}
}

	@/home/vaje/Documents/vaja9/asf/common/services/ioport/unit_tests/unit_tests.c

47 
	~<asf.h
>

48 
	~<c⁄f_ã°.h
>

98 
	$run_i›‹t_pö_ã°
(c⁄° 
ã°_ˇ£
 *
ã°
)

100 vﬁ©ûê
pö_mask_t
 
pö_vÆ
;

103 
	`i›‹t_£t_pö_dú
(
CONF_OUT_PIN
, 
IOPORT_DIR_OUTPUT
);

106 
	`i›‹t_£t_pö_dú
(
CONF_IN_PIN
, 
IOPORT_DIR_INPUT
);

107 
	`i›‹t_£t_pö_mode
(
CONF_IN_PIN
, 
IOPORT_MODE_PULLUP
);

110 
	`i›‹t_£t_pö_Àvñ
(
CONF_OUT_PIN
, 
IOPORT_PIN_LEVEL_HIGH
);

111 
	`dñay_ms
(10);

112 
pö_vÆ
 = 
	`i›‹t_gë_pö_Àvñ
(
CONF_IN_PIN
);

113 
	`ã°_as£π_åue
(
ã°
, 
pö_vÆ
 == 1,

117 
	`i›‹t_£t_pö_Àvñ
(
CONF_OUT_PIN
, 
IOPORT_PIN_LEVEL_LOW
);

118 
	`dñay_ms
(10);

119 
pö_vÆ
 = 
	`i›‹t_gë_pö_Àvñ
(
CONF_IN_PIN
);

120 
	`ã°_as£π_åue
(
ã°
, 
pö_vÆ
 == 0,

124 
	`i›‹t_toggÀ_pö_Àvñ
(
CONF_OUT_PIN
);

125 
	`dñay_ms
(10);

126 
pö_vÆ
 = 
	`i›‹t_gë_pö_Àvñ
(
CONF_IN_PIN
);

127 
	`ã°_as£π_åue
(
ã°
, 
pö_vÆ
 == 1,

129 
	}
}

142 
	$run_i›‹t_p‹t_ã°
(c⁄° 
ã°_ˇ£
 *
ã°
)

144 vﬁ©ûê
pö_mask_t
 
p‹t_vÆ
;

147 
	`i›‹t_£t_p‹t_dú
(
CONF_PORT
, 
CONF_PORT_IN_PIN_MASK
, 
IOPORT_DIR_INPUT
);

148 
	`i›‹t_£t_p‹t_mode
(
CONF_PORT
, 
CONF_PORT_IN_PIN_MASK
,

149 
IOPORT_MODE_PULLUP
);

152 
	`i›‹t_£t_p‹t_dú
(
CONF_PORT
, 
CONF_PORT_OUT_PIN_MASK
,

153 
IOPORT_DIR_OUTPUT
);

156 
	`i›‹t_£t_p‹t_Àvñ
(
CONF_PORT
, 
CONF_PORT_OUT_PIN_MASK
,

157 
IOPORT_PIN_LEVEL_HIGH
);

158 
	`dñay_ms
(10);

159 
p‹t_vÆ
 = 
	`i›‹t_gë_p‹t_Àvñ
(
CONF_PORT
, 
CONF_PORT_IN_PIN_MASK
);

160 
	`ã°_as£π_åue
(
ã°
, 
p‹t_vÆ
 =
CONF_PORT_IN_PIN_MASK
,

164 
	`i›‹t_£t_p‹t_Àvñ
(
CONF_PORT
, 
CONF_PORT_OUT_PIN_MASK
,

165 
IOPORT_PIN_LEVEL_LOW
);

166 
	`dñay_ms
(10);

167 
p‹t_vÆ
 = 
	`i›‹t_gë_p‹t_Àvñ
(
CONF_PORT
, 
CONF_PORT_IN_PIN_MASK
);

168 
	`ã°_as£π_åue
(
ã°
, 
p‹t_vÆ
 == 0,

172 
	`i›‹t_toggÀ_p‹t_Àvñ
(
CONF_PORT
, 
CONF_PORT_OUT_PIN_MASK
);

173 
	`dñay_ms
(10);

174 
p‹t_vÆ
 = 
	`i›‹t_gë_p‹t_Àvñ
(
CONF_PORT
, 
CONF_PORT_IN_PIN_MASK
);

175 
	`ã°_as£π_åue
(
ã°
, 
p‹t_vÆ
 =
CONF_PORT_IN_PIN_MASK
,

177 
	}
}

185 
	$maö
()

187 c⁄° 
ußπ_£rül_›ti⁄s_t
 
ußπ_£rül_›ti⁄s
 = {

188 .
baudøã
 = 
CONF_TEST_BAUDRATE
,

189 .
ch¨Àngth
 = 
CONF_TEST_CHARLENGTH
,

190 .
∑rôyty≥
 = 
CONF_TEST_PARITY
,

191 .
°›bôs
 = 
CONF_TEST_STOPBITS
,

194 
	`bﬂrd_öô
();

195 
	`sys˛k_öô
();

196 
	`°dio_£rül_öô
(
CONF_TEST_USART
, &
ußπ_£rül_›ti⁄s
);

198 
	`DEFINE_TEST_CASE
(
i›‹t_p‹t_ã°
, 
NULL
, 
run_i›‹t_p‹t_ã°
, NULL,

200 
	`DEFINE_TEST_CASE
(
i›‹t_pö_ã°
, 
NULL
, 
run_i›‹t_pö_ã°
, NULL,

204 
	`DEFINE_TEST_ARRAY
(
i›‹t_ã°
) = {

205 &
i›‹t_p‹t_ã°
,

206 &
i›‹t_pö_ã°
,

210 
	`DEFINE_TEST_SUITE
(
i›‹t_suôe
, 
i›‹t_ã°
,

214 
	`ã°_suôe_run
(&
i›‹t_suôe
);

219 
	}
}

	@/home/vaje/Documents/vaja9/asf/common/utils/interrupt.h

46 #i‚de‡
UTILS_INTERRUPT_H


47 
	#UTILS_INTERRUPT_H


	)

49 
	~<∑πs.h
>

51 #i‡
XMEGA
 || 
MEGA


52 
	~"öãºu±/öãºu±_avr8.h
"

53 #ñi‡
UC3


54 
	~"öãºu±/öãºu±_avr32.h
"

55 #ñi‡
SAM
 || 
SAMB


56 
	~"öãºu±/öãºu±_ßm_nvic.h
"

58 #îr‹ 
Unsuµ‹ãd
 
devi˚
.

69 #i‡
deföed
(
__DOXYGEN__
)

78 
	#CONFIG_INTERRUPT_FORCE_INTC


	)

	@/home/vaje/Documents/vaja9/asf/common/utils/interrupt/interrupt_sam_nvic.c

47 
	~"öãºu±_ßm_nvic.h
"

49 #i‡!
deföed
(
__DOXYGEN__
)

54 vﬁ©ûê
boﬁ
 
	gg_öãºu±_íabÀd
 = 
åue
;

57 
	$˝u_úq_íãr_¸ôiˇl
()

59 i‡(
˝u_úq_¸ôiˇl_£˘i⁄_cou¡î
 == 0) {

60 i‡(
	`˝u_úq_is_íabÀd
()) {

61 
	`˝u_úq_dißbÀ
();

62 
˝u_úq_¥ev_öãºu±_°©e
 = 
åue
;

65 
˝u_úq_¥ev_öãºu±_°©e
 = 
Ál£
;

70 
˝u_úq_¸ôiˇl_£˘i⁄_cou¡î
++;

71 
	}
}

73 
	$˝u_úq_Àave_¸ôiˇl
()

76 
	`As£π
(
˝u_úq_¸ôiˇl_£˘i⁄_cou¡î
 > 0);

78 
˝u_úq_¸ôiˇl_£˘i⁄_cou¡î
--;

82 i‡((
˝u_úq_¸ôiˇl_£˘i⁄_cou¡î
 =0Ë&& (
˝u_úq_¥ev_öãºu±_°©e
)) {

83 
	`˝u_úq_íabÀ
();

85 
	}
}

	@/home/vaje/Documents/vaja9/asf/common/utils/interrupt/interrupt_sam_nvic.h

47 #i‚de‡
UTILS_INTERRUPT_INTERRUPT_H


48 
	#UTILS_INTERRUPT_INTERRUPT_H


	)

50 
	~<compûî.h
>

51 
	~<∑πs.h
>

53 #ifde‡
__˝lu•lus


87 
	#ISR
(
func
) \

88 
	`func
 ()

	)

99 
	#úq_öôülize_ve˘‹s
() \

101 } 0)

	)

120 
	#úq_ªgi°î_h™dÀr
(
öt_num
, 
öt_¥io
) \

121 
	`NVIC_CÀ¨PídögIRQ
–(
IRQn_Ty≥
)
öt_num
); \

122 
	`NVIC_SëPri‹ôy
–(
IRQn_Ty≥
)
öt_num
, 
öt_¥io
); \

123 
	`NVIC_E«bÀIRQ
–(
IRQn_Ty≥
)
öt_num
); \

124 

	)

127 
	#˝u_úq_íabÀ
() \

129 
g_öãºu±_íabÀd
 = 
åue
; \

130 
	`__DMB
(); \

131 
	`__íabÀ_úq
(); \

132 } 0)

	)

133 
	#˝u_úq_dißbÀ
() \

135 
	`__dißbÀ_úq
(); \

136 
	`__DMB
(); \

137 
g_öãºu±_íabÀd
 = 
Ál£
; \

138 } 0)

	)

140 
uöt32_t
 
	túqÊags_t
;

142 #i‡!
deföed
(
__DOXYGEN__
)

143 vﬁ©ûê
boﬁ
 
g_öãºu±_íabÀd
;

146 
	#˝u_úq_is_íabÀd
(Ë(
	`__gë_PRIMASK
(Ë=0)

	)

148 vﬁ©ûê
uöt32_t
 
	g˝u_úq_¸ôiˇl_£˘i⁄_cou¡î
;

149 vﬁ©ûê
boﬁ
 
	g˝u_úq_¥ev_öãºu±_°©e
;

151 
ölöe
 
úqÊags_t
 
˝u_úq_ßve
()

153 vﬁ©ûê
úqÊags_t
 
	gÊags
 = 
˝u_úq_is_íabÀd
();

154 
˝u_úq_dißbÀ
();

155  
	gÊags
;

158 
ölöe
 
boﬁ
 
˝u_úq_is_íabÀd_Êags
(
úqÊags_t
 
Êags
)

160  (
	gÊags
);

163 
ölöe
 
˝u_úq_ª°‹e
(
úqÊags_t
 
Êags
)

165 i‡(
˝u_úq_is_íabÀd_Êags
(
Êags
))

166 
˝u_úq_íabÀ
();

169 
˝u_úq_íãr_¸ôiˇl
();

170 
˝u_úq_Àave_¸ôiˇl
();

177 
	#E«bÀ_globÆ_öãºu±
(Ë
	`˝u_úq_íabÀ
()

	)

178 
	#DißbÀ_globÆ_öãºu±
(Ë
	`˝u_úq_dißbÀ
()

	)

179 
	#Is_globÆ_öãºu±_íabÀd
(Ë
	`˝u_úq_is_íabÀd
()

	)

185 #ifde‡
__˝lu•lus


	@/home/vaje/Documents/vaja9/asf/common/utils/parts.h

47 #i‚de‡
ATMEL_PARTS_H


48 
	#ATMEL_PARTS_H


	)

65 
	#AVR8_PART_IS_DEFINED
(
∑π
) \

66 (
	`deföed
(
__
 ## 
∑π
 ## __Ë|| deföed(
__AVR_
 ##Ö¨à## __))

	)

69 
	#AVR32_PART_IS_DEFINED
(
∑π
) \

70 (
	`deföed
(
__AT32
 ## 
∑π
 ## 
__
Ë|| deföed(
__AVR32_
 ##Ö¨à## __))

	)

73 
	#SAM_PART_IS_DEFINED
(
∑π
Ë(
	`deföed
(
__
 ##Ö¨à## __))

	)

85 
	#UC3A0
 ( \

86 
	`AVR32_PART_IS_DEFINED
(
UC3A0128
) || \

87 
	`AVR32_PART_IS_DEFINED
(
UC3A0256
) || \

88 
	`AVR32_PART_IS_DEFINED
(
UC3A0512
) \

89 )

	)

91 
	#UC3A1
 ( \

92 
	`AVR32_PART_IS_DEFINED
(
UC3A1128
) || \

93 
	`AVR32_PART_IS_DEFINED
(
UC3A1256
) || \

94 
	`AVR32_PART_IS_DEFINED
(
UC3A1512
) \

95 )

	)

97 
	#UC3A3
 ( \

98 
	`AVR32_PART_IS_DEFINED
(
UC3A364
) || \

99 
	`AVR32_PART_IS_DEFINED
(
UC3A364S
) || \

100 
	`AVR32_PART_IS_DEFINED
(
UC3A3128
) || \

101 
	`AVR32_PART_IS_DEFINED
(
UC3A3128S
) || \

102 
	`AVR32_PART_IS_DEFINED
(
UC3A3256
) || \

103 
	`AVR32_PART_IS_DEFINED
(
UC3A3256S
) \

104 )

	)

106 
	#UC3A4
 ( \

107 
	`AVR32_PART_IS_DEFINED
(
UC3A464
) || \

108 
	`AVR32_PART_IS_DEFINED
(
UC3A464S
) || \

109 
	`AVR32_PART_IS_DEFINED
(
UC3A4128
) || \

110 
	`AVR32_PART_IS_DEFINED
(
UC3A4128S
) || \

111 
	`AVR32_PART_IS_DEFINED
(
UC3A4256
) || \

112 
	`AVR32_PART_IS_DEFINED
(
UC3A4256S
) \

113 )

	)

120 
	#UC3B0
 ( \

121 
	`AVR32_PART_IS_DEFINED
(
UC3B064
) || \

122 
	`AVR32_PART_IS_DEFINED
(
UC3B0128
) || \

123 
	`AVR32_PART_IS_DEFINED
(
UC3B0256
) || \

124 
	`AVR32_PART_IS_DEFINED
(
UC3B0512
) \

125 )

	)

127 
	#UC3B1
 ( \

128 
	`AVR32_PART_IS_DEFINED
(
UC3B164
) || \

129 
	`AVR32_PART_IS_DEFINED
(
UC3B1128
) || \

130 
	`AVR32_PART_IS_DEFINED
(
UC3B1256
) || \

131 
	`AVR32_PART_IS_DEFINED
(
UC3B1512
) \

132 )

	)

139 
	#UC3C0
 ( \

140 
	`AVR32_PART_IS_DEFINED
(
UC3C064C
) || \

141 
	`AVR32_PART_IS_DEFINED
(
UC3C0128C
) || \

142 
	`AVR32_PART_IS_DEFINED
(
UC3C0256C
) || \

143 
	`AVR32_PART_IS_DEFINED
(
UC3C0512C
) \

144 )

	)

146 
	#UC3C1
 ( \

147 
	`AVR32_PART_IS_DEFINED
(
UC3C164C
) || \

148 
	`AVR32_PART_IS_DEFINED
(
UC3C1128C
) || \

149 
	`AVR32_PART_IS_DEFINED
(
UC3C1256C
) || \

150 
	`AVR32_PART_IS_DEFINED
(
UC3C1512C
) \

151 )

	)

153 
	#UC3C2
 ( \

154 
	`AVR32_PART_IS_DEFINED
(
UC3C264C
) || \

155 
	`AVR32_PART_IS_DEFINED
(
UC3C2128C
) || \

156 
	`AVR32_PART_IS_DEFINED
(
UC3C2256C
) || \

157 
	`AVR32_PART_IS_DEFINED
(
UC3C2512C
) \

158 )

	)

165 
	#UC3D3
 ( \

166 
	`AVR32_PART_IS_DEFINED
(
UC64D3
) || \

167 
	`AVR32_PART_IS_DEFINED
(
UC128D3
) \

168 )

	)

170 
	#UC3D4
 ( \

171 
	`AVR32_PART_IS_DEFINED
(
UC64D4
) || \

172 
	`AVR32_PART_IS_DEFINED
(
UC128D4
) \

173 )

	)

180 
	#UC3L0
 ( \

181 
	`AVR32_PART_IS_DEFINED
(
UC3L016
) || \

182 
	`AVR32_PART_IS_DEFINED
(
UC3L032
) || \

183 
	`AVR32_PART_IS_DEFINED
(
UC3L064
) \

184 )

	)

186 
	#UC3L0128
 ( \

187 
	`AVR32_PART_IS_DEFINED
(
UC3L0128
) \

188 )

	)

190 
	#UC3L0256
 ( \

191 
	`AVR32_PART_IS_DEFINED
(
UC3L0256
) \

192 )

	)

194 
	#UC3L3
 ( \

195 
	`AVR32_PART_IS_DEFINED
(
UC64L3U
) || \

196 
	`AVR32_PART_IS_DEFINED
(
UC128L3U
) || \

197 
	`AVR32_PART_IS_DEFINED
(
UC256L3U
) \

198 )

	)

200 
	#UC3L4
 ( \

201 
	`AVR32_PART_IS_DEFINED
(
UC64L4U
) || \

202 
	`AVR32_PART_IS_DEFINED
(
UC128L4U
) || \

203 
	`AVR32_PART_IS_DEFINED
(
UC256L4U
) \

204 )

	)

206 
	#UC3L3_L4
 (
UC3L3
 || 
UC3L4
)

	)

214 
	#UC3A
 (
UC3A0
 || 
UC3A1
 || 
UC3A3
 || 
UC3A4
)

	)

217 
	#UC3B
 (
UC3B0
 || 
UC3B1
)

	)

220 
	#UC3C
 (
UC3C0
 || 
UC3C1
 || 
UC3C2
)

	)

223 
	#UC3D
 (
UC3D3
 || 
UC3D4
)

	)

226 
	#UC3L
 (
UC3L0
 || 
UC3L0128
 || 
UC3L0256
 || 
UC3L3_L4
)

	)

230 
	#UC3
 (
UC3A
 || 
UC3B
 || 
UC3C
 || 
UC3D
 || 
UC3L
)

	)

243 
	#XMEGA_A1
 ( \

244 
	`AVR8_PART_IS_DEFINED
(
ATxmega64A1
) || \

245 
	`AVR8_PART_IS_DEFINED
(
ATxmega128A1
) \

246 )

	)

248 
	#XMEGA_A3
 ( \

249 
	`AVR8_PART_IS_DEFINED
(
ATxmega64A3
) || \

250 
	`AVR8_PART_IS_DEFINED
(
ATxmega128A3
) || \

251 
	`AVR8_PART_IS_DEFINED
(
ATxmega192A3
) || \

252 
	`AVR8_PART_IS_DEFINED
(
ATxmega256A3
) \

253 )

	)

255 
	#XMEGA_A3B
 ( \

256 
	`AVR8_PART_IS_DEFINED
(
ATxmega256A3B
) \

257 )

	)

259 
	#XMEGA_A4
 ( \

260 
	`AVR8_PART_IS_DEFINED
(
ATxmega16A4
) || \

261 
	`AVR8_PART_IS_DEFINED
(
ATxmega32A4
) \

262 )

	)

269 
	#XMEGA_A1U
 ( \

270 
	`AVR8_PART_IS_DEFINED
(
ATxmega64A1U
) || \

271 
	`AVR8_PART_IS_DEFINED
(
ATxmega128A1U
) \

272 )

	)

274 
	#XMEGA_A3U
 ( \

275 
	`AVR8_PART_IS_DEFINED
(
ATxmega64A3U
) || \

276 
	`AVR8_PART_IS_DEFINED
(
ATxmega128A3U
) || \

277 
	`AVR8_PART_IS_DEFINED
(
ATxmega192A3U
) || \

278 
	`AVR8_PART_IS_DEFINED
(
ATxmega256A3U
) \

279 )

	)

281 
	#XMEGA_A3BU
 ( \

282 
	`AVR8_PART_IS_DEFINED
(
ATxmega256A3BU
) \

283 )

	)

285 
	#XMEGA_A4U
 ( \

286 
	`AVR8_PART_IS_DEFINED
(
ATxmega16A4U
) || \

287 
	`AVR8_PART_IS_DEFINED
(
ATxmega32A4U
) || \

288 
	`AVR8_PART_IS_DEFINED
(
ATxmega64A4U
) || \

289 
	`AVR8_PART_IS_DEFINED
(
ATxmega128A4U
) \

290 )

	)

297 
	#XMEGA_B1
 ( \

298 
	`AVR8_PART_IS_DEFINED
(
ATxmega64B1
) || \

299 
	`AVR8_PART_IS_DEFINED
(
ATxmega128B1
) \

300 )

	)

302 
	#XMEGA_B3
 ( \

303 
	`AVR8_PART_IS_DEFINED
(
ATxmega64B3
) || \

304 
	`AVR8_PART_IS_DEFINED
(
ATxmega128B3
) \

305 )

	)

312 
	#XMEGA_C3
 ( \

313 
	`AVR8_PART_IS_DEFINED
(
ATxmega384C3
) || \

314 
	`AVR8_PART_IS_DEFINED
(
ATxmega256C3
) || \

315 
	`AVR8_PART_IS_DEFINED
(
ATxmega192C3
) || \

316 
	`AVR8_PART_IS_DEFINED
(
ATxmega128C3
) || \

317 
	`AVR8_PART_IS_DEFINED
(
ATxmega64C3
) || \

318 
	`AVR8_PART_IS_DEFINED
(
ATxmega32C3
) \

319 )

	)

321 
	#XMEGA_C4
 ( \

322 
	`AVR8_PART_IS_DEFINED
(
ATxmega32C4
) || \

323 
	`AVR8_PART_IS_DEFINED
(
ATxmega16C4
) \

324 )

	)

331 
	#XMEGA_D3
 ( \

332 
	`AVR8_PART_IS_DEFINED
(
ATxmega32D3
) || \

333 
	`AVR8_PART_IS_DEFINED
(
ATxmega64D3
) || \

334 
	`AVR8_PART_IS_DEFINED
(
ATxmega128D3
) || \

335 
	`AVR8_PART_IS_DEFINED
(
ATxmega192D3
) || \

336 
	`AVR8_PART_IS_DEFINED
(
ATxmega256D3
) || \

337 
	`AVR8_PART_IS_DEFINED
(
ATxmega384D3
) \

338 )

	)

340 
	#XMEGA_D4
 ( \

341 
	`AVR8_PART_IS_DEFINED
(
ATxmega16D4
) || \

342 
	`AVR8_PART_IS_DEFINED
(
ATxmega32D4
) || \

343 
	`AVR8_PART_IS_DEFINED
(
ATxmega64D4
) || \

344 
	`AVR8_PART_IS_DEFINED
(
ATxmega128D4
) \

345 )

	)

352 
	#XMEGA_E5
 ( \

353 
	`AVR8_PART_IS_DEFINED
(
ATxmega8E5
) || \

354 
	`AVR8_PART_IS_DEFINED
(
ATxmega16E5
) || \

355 
	`AVR8_PART_IS_DEFINED
(
ATxmega32E5
) \

356 )

	)

365 
	#XMEGA_A
 (
XMEGA_A1
 || 
XMEGA_A3
 || 
XMEGA_A3B
 || 
XMEGA_A4
)

	)

368 
	#XMEGA_AU
 (
XMEGA_A1U
 || 
XMEGA_A3U
 || 
XMEGA_A3BU
 || 
XMEGA_A4U
)

	)

371 
	#XMEGA_B
 (
XMEGA_B1
 || 
XMEGA_B3
)

	)

374 
	#XMEGA_C
 (
XMEGA_C3
 || 
XMEGA_C4
)

	)

377 
	#XMEGA_D
 (
XMEGA_D3
 || 
XMEGA_D4
)

	)

380 
	#XMEGA_E
 (
XMEGA_E5
)

	)

385 
	#XMEGA
 (
XMEGA_A
 || 
XMEGA_AU
 || 
XMEGA_B
 || 
XMEGA_C
 || 
XMEGA_D
 || 
XMEGA_E
)

	)

403 
	#MEGA_XX0
 ( \

404 
	`AVR8_PART_IS_DEFINED
(
ATmega640
) || \

405 
	`AVR8_PART_IS_DEFINED
(
ATmega1280
) || \

406 
	`AVR8_PART_IS_DEFINED
(
ATmega2560
) \

407 )

	)

409 
	#MEGA_XX1
 ( \

410 
	`AVR8_PART_IS_DEFINED
(
ATmega1281
) || \

411 
	`AVR8_PART_IS_DEFINED
(
ATmega2561
) \

412 )

	)

420 
	#MEGA_XX0_1
 (
MEGA_XX0
 || 
MEGA_XX1
)

	)

423 
	#MEGA_XX4
 ( \

424 
	`AVR8_PART_IS_DEFINED
(
ATmega164A
) || \

425 
	`AVR8_PART_IS_DEFINED
(
ATmega164PA
) || \

426 
	`AVR8_PART_IS_DEFINED
(
ATmega324A
) || \

427 
	`AVR8_PART_IS_DEFINED
(
ATmega324PA
) || \

428 
	`AVR8_PART_IS_DEFINED
(
ATmega324PB
) || \

429 
	`AVR8_PART_IS_DEFINED
(
ATmega644
) || \

430 
	`AVR8_PART_IS_DEFINED
(
ATmega644A
) || \

431 
	`AVR8_PART_IS_DEFINED
(
ATmega644PA
) || \

432 
	`AVR8_PART_IS_DEFINED
(
ATmega1284P
) || \

433 
	`AVR8_PART_IS_DEFINED
(
ATmega128RFA1
) \

434 )

	)

437 
	#MEGA_XX4_A
 ( \

438 
	`AVR8_PART_IS_DEFINED
(
ATmega164A
) || \

439 
	`AVR8_PART_IS_DEFINED
(
ATmega164PA
) || \

440 
	`AVR8_PART_IS_DEFINED
(
ATmega324A
) || \

441 
	`AVR8_PART_IS_DEFINED
(
ATmega324PA
) || \

442 
	`AVR8_PART_IS_DEFINED
(
ATmega644A
) || \

443 
	`AVR8_PART_IS_DEFINED
(
ATmega644PA
) || \

444 
	`AVR8_PART_IS_DEFINED
(
ATmega1284P
) \

445 )

	)

448 
	#MEGA_XX8
 ( \

449 
	`AVR8_PART_IS_DEFINED
(
ATmega48
) || \

450 
	`AVR8_PART_IS_DEFINED
(
ATmega48A
) || \

451 
	`AVR8_PART_IS_DEFINED
(
ATmega48PA
) || \

452 
	`AVR8_PART_IS_DEFINED
(
ATmega48PB
) || \

453 
	`AVR8_PART_IS_DEFINED
(
ATmega88
) || \

454 
	`AVR8_PART_IS_DEFINED
(
ATmega88A
) || \

455 
	`AVR8_PART_IS_DEFINED
(
ATmega88PA
) || \

456 
	`AVR8_PART_IS_DEFINED
(
ATmega88PB
) || \

457 
	`AVR8_PART_IS_DEFINED
(
ATmega168
) || \

458 
	`AVR8_PART_IS_DEFINED
(
ATmega168A
) || \

459 
	`AVR8_PART_IS_DEFINED
(
ATmega168PA
) || \

460 
	`AVR8_PART_IS_DEFINED
(
ATmega168PB
) || \

461 
	`AVR8_PART_IS_DEFINED
(
ATmega328
) || \

462 
	`AVR8_PART_IS_DEFINED
(
ATmega328P
) || \

463 
	`AVR8_PART_IS_DEFINED
(
ATmega328PB
) \

464 )

	)

467 
	#MEGA_XX8_A
 ( \

468 
	`AVR8_PART_IS_DEFINED
(
ATmega48A
) || \

469 
	`AVR8_PART_IS_DEFINED
(
ATmega48PA
) || \

470 
	`AVR8_PART_IS_DEFINED
(
ATmega88A
) || \

471 
	`AVR8_PART_IS_DEFINED
(
ATmega88PA
) || \

472 
	`AVR8_PART_IS_DEFINED
(
ATmega168A
) || \

473 
	`AVR8_PART_IS_DEFINED
(
ATmega168PA
) || \

474 
	`AVR8_PART_IS_DEFINED
(
ATmega328P
) \

475 )

	)

478 
	#MEGA_XX
 ( \

479 
	`AVR8_PART_IS_DEFINED
(
ATmega16
) || \

480 
	`AVR8_PART_IS_DEFINED
(
ATmega16A
) || \

481 
	`AVR8_PART_IS_DEFINED
(
ATmega32
) || \

482 
	`AVR8_PART_IS_DEFINED
(
ATmega32A
) || \

483 
	`AVR8_PART_IS_DEFINED
(
ATmega64
) || \

484 
	`AVR8_PART_IS_DEFINED
(
ATmega64A
) || \

485 
	`AVR8_PART_IS_DEFINED
(
ATmega128
) || \

486 
	`AVR8_PART_IS_DEFINED
(
ATmega128A
) \

487 )

	)

490 
	#MEGA_XX_A
 ( \

491 
	`AVR8_PART_IS_DEFINED
(
ATmega16A
) || \

492 
	`AVR8_PART_IS_DEFINED
(
ATmega32A
) || \

493 
	`AVR8_PART_IS_DEFINED
(
ATmega64A
) || \

494 
	`AVR8_PART_IS_DEFINED
(
ATmega128A
) \

495 )

	)

497 
	#MEGA_RFA1
 ( \

498 
	`AVR8_PART_IS_DEFINED
(
ATmega128RFA1
) \

499 )

	)

502 
	#MEGA_RFR2
 ( \

503 
	`AVR8_PART_IS_DEFINED
(
ATmega64RFR2
) || \

504 
	`AVR8_PART_IS_DEFINED
(
ATmega128RFR2
) || \

505 
	`AVR8_PART_IS_DEFINED
(
ATmega256RFR2
) || \

506 
	`AVR8_PART_IS_DEFINED
(
ATmega644RFR2
) || \

507 
	`AVR8_PART_IS_DEFINED
(
ATmega1284RFR2
) || \

508 
	`AVR8_PART_IS_DEFINED
(
ATmega2564RFR2
) \

509 )

	)

513 
	#MEGA_RF
 (
MEGA_RFA1
 || 
MEGA_RFR2
)

	)

519 
	#MEGA_XX_UN0
 ( \

520 
	`AVR8_PART_IS_DEFINED
(
ATmega16
) || \

521 
	`AVR8_PART_IS_DEFINED
(
ATmega16A
) || \

522 
	`AVR8_PART_IS_DEFINED
(
ATmega32
) || \

523 
	`AVR8_PART_IS_DEFINED
(
ATmega32A
) \

524 )

	)

529 
	#MEGA_XX_UN1
 ( \

530 
	`AVR8_PART_IS_DEFINED
(
ATmega64
) || \

531 
	`AVR8_PART_IS_DEFINED
(
ATmega64A
) || \

532 
	`AVR8_PART_IS_DEFINED
(
ATmega128
) || \

533 
	`AVR8_PART_IS_DEFINED
(
ATmega128A
) \

534 )

	)

539 
	#MEGA_XX_UN2
 ( \

540 
	`AVR8_PART_IS_DEFINED
(
ATmega169P
) || \

541 
	`AVR8_PART_IS_DEFINED
(
ATmega169PA
) || \

542 
	`AVR8_PART_IS_DEFINED
(
ATmega329P
) || \

543 
	`AVR8_PART_IS_DEFINED
(
ATmega329PA
) \

544 )

	)

550 
	#MEGA_UNCATEGORIZED
 ( \

551 
	`AVR8_PART_IS_DEFINED
(
AT90CAN128
) || \

552 
	`AVR8_PART_IS_DEFINED
(
AT90CAN32
) || \

553 
	`AVR8_PART_IS_DEFINED
(
AT90CAN64
) || \

554 
	`AVR8_PART_IS_DEFINED
(
AT90PWM1
) || \

555 
	`AVR8_PART_IS_DEFINED
(
AT90PWM216
) || \

556 
	`AVR8_PART_IS_DEFINED
(
AT90PWM2B
) || \

557 
	`AVR8_PART_IS_DEFINED
(
AT90PWM316
) || \

558 
	`AVR8_PART_IS_DEFINED
(
AT90PWM3B
) || \

559 
	`AVR8_PART_IS_DEFINED
(
AT90PWM81
) || \

560 
	`AVR8_PART_IS_DEFINED
(
AT90USB1286
) || \

561 
	`AVR8_PART_IS_DEFINED
(
AT90USB1287
) || \

562 
	`AVR8_PART_IS_DEFINED
(
AT90USB162
) || \

563 
	`AVR8_PART_IS_DEFINED
(
AT90USB646
) || \

564 
	`AVR8_PART_IS_DEFINED
(
AT90USB647
) || \

565 
	`AVR8_PART_IS_DEFINED
(
AT90USB82
) || \

566 
	`AVR8_PART_IS_DEFINED
(
ATmega1284
) || \

567 
	`AVR8_PART_IS_DEFINED
(
ATmega162
) || \

568 
	`AVR8_PART_IS_DEFINED
(
ATmega164P
) || \

569 
	`AVR8_PART_IS_DEFINED
(
ATmega165A
) || \

570 
	`AVR8_PART_IS_DEFINED
(
ATmega165P
) || \

571 
	`AVR8_PART_IS_DEFINED
(
ATmega165PA
) || \

572 
	`AVR8_PART_IS_DEFINED
(
ATmega168P
) || \

573 
	`AVR8_PART_IS_DEFINED
(
ATmega169A
) || \

574 
	`AVR8_PART_IS_DEFINED
(
ATmega16M1
) || \

575 
	`AVR8_PART_IS_DEFINED
(
ATmega16U2
) || \

576 
	`AVR8_PART_IS_DEFINED
(
ATmega16U4
) || \

577 
	`AVR8_PART_IS_DEFINED
(
ATmega256RFA2
) || \

578 
	`AVR8_PART_IS_DEFINED
(
ATmega324P
) || \

579 
	`AVR8_PART_IS_DEFINED
(
ATmega325
) || \

580 
	`AVR8_PART_IS_DEFINED
(
ATmega3250
) || \

581 
	`AVR8_PART_IS_DEFINED
(
ATmega3250A
) || \

582 
	`AVR8_PART_IS_DEFINED
(
ATmega3250P
) || \

583 
	`AVR8_PART_IS_DEFINED
(
ATmega3250PA
) || \

584 
	`AVR8_PART_IS_DEFINED
(
ATmega325A
) || \

585 
	`AVR8_PART_IS_DEFINED
(
ATmega325P
) || \

586 
	`AVR8_PART_IS_DEFINED
(
ATmega325PA
) || \

587 
	`AVR8_PART_IS_DEFINED
(
ATmega329
) || \

588 
	`AVR8_PART_IS_DEFINED
(
ATmega3290
) || \

589 
	`AVR8_PART_IS_DEFINED
(
ATmega3290A
) || \

590 
	`AVR8_PART_IS_DEFINED
(
ATmega3290P
) || \

591 
	`AVR8_PART_IS_DEFINED
(
ATmega3290PA
) || \

592 
	`AVR8_PART_IS_DEFINED
(
ATmega329A
) || \

593 
	`AVR8_PART_IS_DEFINED
(
ATmega32M1
) || \

594 
	`AVR8_PART_IS_DEFINED
(
ATmega32U2
) || \

595 
	`AVR8_PART_IS_DEFINED
(
ATmega32U4
) || \

596 
	`AVR8_PART_IS_DEFINED
(
ATmega48P
) || \

597 
	`AVR8_PART_IS_DEFINED
(
ATmega644P
) || \

598 
	`AVR8_PART_IS_DEFINED
(
ATmega645
) || \

599 
	`AVR8_PART_IS_DEFINED
(
ATmega6450
) || \

600 
	`AVR8_PART_IS_DEFINED
(
ATmega6450A
) || \

601 
	`AVR8_PART_IS_DEFINED
(
ATmega6450P
) || \

602 
	`AVR8_PART_IS_DEFINED
(
ATmega645A
) || \

603 
	`AVR8_PART_IS_DEFINED
(
ATmega645P
) || \

604 
	`AVR8_PART_IS_DEFINED
(
ATmega649
) || \

605 
	`AVR8_PART_IS_DEFINED
(
ATmega6490
) || \

606 
	`AVR8_PART_IS_DEFINED
(
ATmega6490A
) || \

607 
	`AVR8_PART_IS_DEFINED
(
ATmega6490P
) || \

608 
	`AVR8_PART_IS_DEFINED
(
ATmega649A
) || \

609 
	`AVR8_PART_IS_DEFINED
(
ATmega649P
) || \

610 
	`AVR8_PART_IS_DEFINED
(
ATmega64M1
) || \

611 
	`AVR8_PART_IS_DEFINED
(
ATmega64RFA2
) || \

612 
	`AVR8_PART_IS_DEFINED
(
ATmega8
) || \

613 
	`AVR8_PART_IS_DEFINED
(
ATmega8515
) || \

614 
	`AVR8_PART_IS_DEFINED
(
ATmega8535
) || \

615 
	`AVR8_PART_IS_DEFINED
(
ATmega88P
) || \

616 
	`AVR8_PART_IS_DEFINED
(
ATmega8A
) || \

617 
	`AVR8_PART_IS_DEFINED
(
ATmega8U2
) \

618 )

	)

621 
	#MEGA_UNSPECIFIED
 (
MEGA_XX_UN0
 || 
MEGA_XX_UN1
 || 
MEGA_XX_UN2
 || \

622 
MEGA_UNCATEGORIZED
)

	)

627 
	#MEGA
 (
MEGA_XX0_1
 || 
MEGA_XX4
 || 
MEGA_XX8
 || 
MEGA_XX
 || 
MEGA_RF
 || \

628 
MEGA_UNSPECIFIED
)

	)

641 
	#SAM3S1
 ( \

642 
	`SAM_PART_IS_DEFINED
(
SAM3S1A
) || \

643 
	`SAM_PART_IS_DEFINED
(
SAM3S1B
) || \

644 
	`SAM_PART_IS_DEFINED
(
SAM3S1C
) \

645 )

	)

647 
	#SAM3S2
 ( \

648 
	`SAM_PART_IS_DEFINED
(
SAM3S2A
) || \

649 
	`SAM_PART_IS_DEFINED
(
SAM3S2B
) || \

650 
	`SAM_PART_IS_DEFINED
(
SAM3S2C
) \

651 )

	)

653 
	#SAM3S4
 ( \

654 
	`SAM_PART_IS_DEFINED
(
SAM3S4A
) || \

655 
	`SAM_PART_IS_DEFINED
(
SAM3S4B
) || \

656 
	`SAM_PART_IS_DEFINED
(
SAM3S4C
) \

657 )

	)

659 
	#SAM3S8
 ( \

660 
	`SAM_PART_IS_DEFINED
(
SAM3S8B
) || \

661 
	`SAM_PART_IS_DEFINED
(
SAM3S8C
) \

662 )

	)

664 
	#SAM3SD8
 ( \

665 
	`SAM_PART_IS_DEFINED
(
SAM3SD8B
) || \

666 
	`SAM_PART_IS_DEFINED
(
SAM3SD8C
) \

667 )

	)

674 
	#SAM3U1
 ( \

675 
	`SAM_PART_IS_DEFINED
(
SAM3U1C
) || \

676 
	`SAM_PART_IS_DEFINED
(
SAM3U1E
) \

677 )

	)

679 
	#SAM3U2
 ( \

680 
	`SAM_PART_IS_DEFINED
(
SAM3U2C
) || \

681 
	`SAM_PART_IS_DEFINED
(
SAM3U2E
) \

682 )

	)

684 
	#SAM3U4
 ( \

685 
	`SAM_PART_IS_DEFINED
(
SAM3U4C
) || \

686 
	`SAM_PART_IS_DEFINED
(
SAM3U4E
) \

687 )

	)

694 
	#SAM3N00
 ( \

695 
	`SAM_PART_IS_DEFINED
(
SAM3N00A
) || \

696 
	`SAM_PART_IS_DEFINED
(
SAM3N00B
) \

697 )

	)

699 
	#SAM3N0
 ( \

700 
	`SAM_PART_IS_DEFINED
(
SAM3N0A
) || \

701 
	`SAM_PART_IS_DEFINED
(
SAM3N0B
) || \

702 
	`SAM_PART_IS_DEFINED
(
SAM3N0C
) \

703 )

	)

705 
	#SAM3N1
 ( \

706 
	`SAM_PART_IS_DEFINED
(
SAM3N1A
) || \

707 
	`SAM_PART_IS_DEFINED
(
SAM3N1B
) || \

708 
	`SAM_PART_IS_DEFINED
(
SAM3N1C
) \

709 )

	)

711 
	#SAM3N2
 ( \

712 
	`SAM_PART_IS_DEFINED
(
SAM3N2A
) || \

713 
	`SAM_PART_IS_DEFINED
(
SAM3N2B
) || \

714 
	`SAM_PART_IS_DEFINED
(
SAM3N2C
) \

715 )

	)

717 
	#SAM3N4
 ( \

718 
	`SAM_PART_IS_DEFINED
(
SAM3N4A
) || \

719 
	`SAM_PART_IS_DEFINED
(
SAM3N4B
) || \

720 
	`SAM_PART_IS_DEFINED
(
SAM3N4C
) \

721 )

	)

728 
	#SAM3X4
 ( \

729 
	`SAM_PART_IS_DEFINED
(
SAM3X4C
) || \

730 
	`SAM_PART_IS_DEFINED
(
SAM3X4E
) \

731 )

	)

733 
	#SAM3X8
 ( \

734 
	`SAM_PART_IS_DEFINED
(
SAM3X8C
) || \

735 
	`SAM_PART_IS_DEFINED
(
SAM3X8E
) || \

736 
	`SAM_PART_IS_DEFINED
(
SAM3X8H
) \

737 )

	)

744 
	#SAM3A4
 ( \

745 
	`SAM_PART_IS_DEFINED
(
SAM3A4C
) \

746 )

	)

748 
	#SAM3A8
 ( \

749 
	`SAM_PART_IS_DEFINED
(
SAM3A8C
) \

750 )

	)

757 
	#SAM4S2
 ( \

758 
	`SAM_PART_IS_DEFINED
(
SAM4S2A
) || \

759 
	`SAM_PART_IS_DEFINED
(
SAM4S2B
) || \

760 
	`SAM_PART_IS_DEFINED
(
SAM4S2C
) \

761 )

	)

763 
	#SAM4S4
 ( \

764 
	`SAM_PART_IS_DEFINED
(
SAM4S4A
) || \

765 
	`SAM_PART_IS_DEFINED
(
SAM4S4B
) || \

766 
	`SAM_PART_IS_DEFINED
(
SAM4S4C
) \

767 )

	)

769 
	#SAM4S8
 ( \

770 
	`SAM_PART_IS_DEFINED
(
SAM4S8B
) || \

771 
	`SAM_PART_IS_DEFINED
(
SAM4S8C
) \

772 )

	)

774 
	#SAM4S16
 ( \

775 
	`SAM_PART_IS_DEFINED
(
SAM4S16B
) || \

776 
	`SAM_PART_IS_DEFINED
(
SAM4S16C
) \

777 )

	)

779 
	#SAM4SA16
 ( \

780 
	`SAM_PART_IS_DEFINED
(
SAM4SA16B
) || \

781 
	`SAM_PART_IS_DEFINED
(
SAM4SA16C
) \

782 )

	)

784 
	#SAM4SD16
 ( \

785 
	`SAM_PART_IS_DEFINED
(
SAM4SD16B
) || \

786 
	`SAM_PART_IS_DEFINED
(
SAM4SD16C
) \

787 )

	)

789 
	#SAM4SD32
 ( \

790 
	`SAM_PART_IS_DEFINED
(
SAM4SD32B
) || \

791 
	`SAM_PART_IS_DEFINED
(
SAM4SD32C
) \

792 )

	)

799 
	#SAM4LS
 ( \

800 
	`SAM_PART_IS_DEFINED
(
SAM4LS2A
) || \

801 
	`SAM_PART_IS_DEFINED
(
SAM4LS2B
) || \

802 
	`SAM_PART_IS_DEFINED
(
SAM4LS2C
) || \

803 
	`SAM_PART_IS_DEFINED
(
SAM4LS4A
) || \

804 
	`SAM_PART_IS_DEFINED
(
SAM4LS4B
) || \

805 
	`SAM_PART_IS_DEFINED
(
SAM4LS4C
) || \

806 
	`SAM_PART_IS_DEFINED
(
SAM4LS8A
) || \

807 
	`SAM_PART_IS_DEFINED
(
SAM4LS8B
) || \

808 
	`SAM_PART_IS_DEFINED
(
SAM4LS8C
) \

809 )

	)

811 
	#SAM4LC
 ( \

812 
	`SAM_PART_IS_DEFINED
(
SAM4LC2A
) || \

813 
	`SAM_PART_IS_DEFINED
(
SAM4LC2B
) || \

814 
	`SAM_PART_IS_DEFINED
(
SAM4LC2C
) || \

815 
	`SAM_PART_IS_DEFINED
(
SAM4LC4A
) || \

816 
	`SAM_PART_IS_DEFINED
(
SAM4LC4B
) || \

817 
	`SAM_PART_IS_DEFINED
(
SAM4LC4C
) || \

818 
	`SAM_PART_IS_DEFINED
(
SAM4LC8A
) || \

819 
	`SAM_PART_IS_DEFINED
(
SAM4LC8B
) || \

820 
	`SAM_PART_IS_DEFINED
(
SAM4LC8C
) \

821 )

	)

828 
	#SAMD20J
 ( \

829 
	`SAM_PART_IS_DEFINED
(
SAMD20J14
) || \

830 
	`SAM_PART_IS_DEFINED
(
SAMD20J15
) || \

831 
	`SAM_PART_IS_DEFINED
(
SAMD20J16
) || \

832 
	`SAM_PART_IS_DEFINED
(
SAMD20J17
) || \

833 
	`SAM_PART_IS_DEFINED
(
SAMD20J18
) \

834 )

	)

836 
	#SAMD20G
 ( \

837 
	`SAM_PART_IS_DEFINED
(
SAMD20G14
) || \

838 
	`SAM_PART_IS_DEFINED
(
SAMD20G15
) || \

839 
	`SAM_PART_IS_DEFINED
(
SAMD20G16
) || \

840 
	`SAM_PART_IS_DEFINED
(
SAMD20G17
) || \

841 
	`SAM_PART_IS_DEFINED
(
SAMD20G17U
) || \

842 
	`SAM_PART_IS_DEFINED
(
SAMD20G18
) || \

843 
	`SAM_PART_IS_DEFINED
(
SAMD20G18U
) \

844 )

	)

846 
	#SAMD20E
 ( \

847 
	`SAM_PART_IS_DEFINED
(
SAMD20E14
) || \

848 
	`SAM_PART_IS_DEFINED
(
SAMD20E15
) || \

849 
	`SAM_PART_IS_DEFINED
(
SAMD20E16
) || \

850 
	`SAM_PART_IS_DEFINED
(
SAMD20E17
) || \

851 
	`SAM_PART_IS_DEFINED
(
SAMD20E18
) \

852 )

	)

859 
	#SAMD21J
 ( \

860 
	`SAM_PART_IS_DEFINED
(
SAMD21J15A
) || \

861 
	`SAM_PART_IS_DEFINED
(
SAMD21J16A
) || \

862 
	`SAM_PART_IS_DEFINED
(
SAMD21J17A
) || \

863 
	`SAM_PART_IS_DEFINED
(
SAMD21J18A
) || \

864 
	`SAM_PART_IS_DEFINED
(
SAMD21J15B
) || \

865 
	`SAM_PART_IS_DEFINED
(
SAMD21J16B
) \

866 )

	)

868 
	#SAMD21G
 ( \

869 
	`SAM_PART_IS_DEFINED
(
SAMD21G15A
) || \

870 
	`SAM_PART_IS_DEFINED
(
SAMD21G16A
) || \

871 
	`SAM_PART_IS_DEFINED
(
SAMD21G17A
) || \

872 
	`SAM_PART_IS_DEFINED
(
SAMD21G17AU
) || \

873 
	`SAM_PART_IS_DEFINED
(
SAMD21G18A
) || \

874 
	`SAM_PART_IS_DEFINED
(
SAMD21G18AU
) || \

875 
	`SAM_PART_IS_DEFINED
(
SAMD21G15B
) || \

876 
	`SAM_PART_IS_DEFINED
(
SAMD21G16B
) || \

877 
	`SAM_PART_IS_DEFINED
(
SAMD21G15L
) || \

878 
	`SAM_PART_IS_DEFINED
(
SAMD21G16L
) \

879 )

	)

881 
	#SAMD21GXXL
 ( \

882 
	`SAM_PART_IS_DEFINED
(
SAMD21G15L
) || \

883 
	`SAM_PART_IS_DEFINED
(
SAMD21G16L
) \

884 )

	)

886 
	#SAMD21E
 ( \

887 
	`SAM_PART_IS_DEFINED
(
SAMD21E15A
) || \

888 
	`SAM_PART_IS_DEFINED
(
SAMD21E16A
) || \

889 
	`SAM_PART_IS_DEFINED
(
SAMD21E17A
) || \

890 
	`SAM_PART_IS_DEFINED
(
SAMD21E18A
) || \

891 
	`SAM_PART_IS_DEFINED
(
SAMD21E15B
) || \

892 
	`SAM_PART_IS_DEFINED
(
SAMD21E15BU
) || \

893 
	`SAM_PART_IS_DEFINED
(
SAMD21E16B
) || \

894 
	`SAM_PART_IS_DEFINED
(
SAMD21E16BU
) || \

895 
	`SAM_PART_IS_DEFINED
(
SAMD21E15L
) || \

896 
	`SAM_PART_IS_DEFINED
(
SAMD21E16L
) \

897 )

	)

899 
	#SAMD21EXXL
 ( \

900 
	`SAM_PART_IS_DEFINED
(
SAMD21E15L
) || \

901 
	`SAM_PART_IS_DEFINED
(
SAMD21E16L
) \

902 )

	)

910 
	#SAMR21G
 ( \

911 
	`SAM_PART_IS_DEFINED
(
SAMR21G16A
) || \

912 
	`SAM_PART_IS_DEFINED
(
SAMR21G17A
) || \

913 
	`SAM_PART_IS_DEFINED
(
SAMR21G18A
) \

914 )

	)

916 
	#SAMR21E
 ( \

917 
	`SAM_PART_IS_DEFINED
(
SAMR21E16A
) || \

918 
	`SAM_PART_IS_DEFINED
(
SAMR21E17A
) || \

919 
	`SAM_PART_IS_DEFINED
(
SAMR21E18A
) || \

920 
	`SAM_PART_IS_DEFINED
(
SAMR21E19A
) \

921 )

	)

928 
	#SAMR30G
 ( \

929 
	`SAM_PART_IS_DEFINED
(
SAMR30G18A
) \

930 )

	)

932 
	#SAMR30E
 ( \

933 
	`SAM_PART_IS_DEFINED
(
SAMR30E18A
) \

934 )

	)

941 
	#SAMB11G
 ( \

942 
	`SAM_PART_IS_DEFINED
(
SAMB11G18A
) || \

943 
	`SAM_PART_IS_DEFINED
(
SAMB11ZR
) \

944 )

	)

945 
	#BTLC1000
 ( \

946 
	`SAM_PART_IS_DEFINED
(
BTLC1000WLCSP
) \

947 )

	)

955 
	#SAMD09C
 ( \

956 
	`SAM_PART_IS_DEFINED
(
SAMD09C13A
) \

957 )

	)

959 
	#SAMD09D
 ( \

960 
	`SAM_PART_IS_DEFINED
(
SAMD09D14A
) \

961 )

	)

968 
	#SAMD10C
 ( \

969 
	`SAM_PART_IS_DEFINED
(
SAMD10C12A
) || \

970 
	`SAM_PART_IS_DEFINED
(
SAMD10C13A
) || \

971 
	`SAM_PART_IS_DEFINED
(
SAMD10C14A
) \

972 )

	)

974 
	#SAMD10DS
 ( \

975 
	`SAM_PART_IS_DEFINED
(
SAMD10D12AS
) || \

976 
	`SAM_PART_IS_DEFINED
(
SAMD10D13AS
) || \

977 
	`SAM_PART_IS_DEFINED
(
SAMD10D14AS
) \

978 )

	)

980 
	#SAMD10DM
 ( \

981 
	`SAM_PART_IS_DEFINED
(
SAMD10D12AM
) || \

982 
	`SAM_PART_IS_DEFINED
(
SAMD10D13AM
) || \

983 
	`SAM_PART_IS_DEFINED
(
SAMD10D14AM
) \

984 )

	)

986 
	#SAMD10DU
 ( \

987 
	`SAM_PART_IS_DEFINED
(
SAMD10D14AU
) \

988 )

	)

995 
	#SAMD11C
 ( \

996 
	`SAM_PART_IS_DEFINED
(
SAMD11C14A
) \

997 )

	)

999 
	#SAMD11DS
 ( \

1000 
	`SAM_PART_IS_DEFINED
(
SAMD11D14AS
) \

1001 )

	)

1003 
	#SAMD11DM
 ( \

1004 
	`SAM_PART_IS_DEFINED
(
SAMD11D14AM
) \

1005 )

	)

1007 
	#SAMD11DU
 ( \

1008 
	`SAM_PART_IS_DEFINED
(
SAMD11D14AU
) \

1009 )

	)

1016 
	#SAML21E
 ( \

1017 
	`SAM_PART_IS_DEFINED
(
SAML21E18A
) || \

1018 
	`SAM_PART_IS_DEFINED
(
SAML21E15B
) || \

1019 
	`SAM_PART_IS_DEFINED
(
SAML21E16B
) || \

1020 
	`SAM_PART_IS_DEFINED
(
SAML21E17B
) || \

1021 
	`SAM_PART_IS_DEFINED
(
SAML21E18B
) \

1022 )

	)

1024 
	#SAML21G
 ( \

1025 
	`SAM_PART_IS_DEFINED
(
SAML21G18A
) || \

1026 
	`SAM_PART_IS_DEFINED
(
SAML21G16B
) || \

1027 
	`SAM_PART_IS_DEFINED
(
SAML21G17B
) || \

1028 
	`SAM_PART_IS_DEFINED
(
SAML21G18B
) \

1029 )

	)

1031 
	#SAML21J
 ( \

1032 
	`SAM_PART_IS_DEFINED
(
SAML21J18A
) || \

1033 
	`SAM_PART_IS_DEFINED
(
SAML21J16B
) || \

1034 
	`SAM_PART_IS_DEFINED
(
SAML21J17B
) || \

1035 
	`SAM_PART_IS_DEFINED
(
SAML21J18B
) \

1036 )

	)

1039 
	#SAML21XXXA
 ( \

1040 
	`SAM_PART_IS_DEFINED
(
SAML21E18A
) || \

1041 
	`SAM_PART_IS_DEFINED
(
SAML21G18A
) || \

1042 
	`SAM_PART_IS_DEFINED
(
SAML21J18A
) \

1043 )

	)

1046 
	#SAML21XXXB
 ( \

1047 
	`SAM_PART_IS_DEFINED
(
SAML21E15B
) || \

1048 
	`SAM_PART_IS_DEFINED
(
SAML21E16B
) || \

1049 
	`SAM_PART_IS_DEFINED
(
SAML21E17B
) || \

1050 
	`SAM_PART_IS_DEFINED
(
SAML21E18B
) || \

1051 
	`SAM_PART_IS_DEFINED
(
SAML21G16B
) || \

1052 
	`SAM_PART_IS_DEFINED
(
SAML21G17B
) || \

1053 
	`SAM_PART_IS_DEFINED
(
SAML21G18B
) || \

1054 
	`SAM_PART_IS_DEFINED
(
SAML21J16B
) || \

1055 
	`SAM_PART_IS_DEFINED
(
SAML21J17B
) || \

1056 
	`SAM_PART_IS_DEFINED
(
SAML21J18B
) \

1057 )

	)

1065 
	#SAML22N
 ( \

1066 
	`SAM_PART_IS_DEFINED
(
SAML22N16A
) || \

1067 
	`SAM_PART_IS_DEFINED
(
SAML22N17A
) || \

1068 
	`SAM_PART_IS_DEFINED
(
SAML22N18A
) \

1069 )

	)

1071 
	#SAML22G
 ( \

1072 
	`SAM_PART_IS_DEFINED
(
SAML22G16A
) || \

1073 
	`SAM_PART_IS_DEFINED
(
SAML22G17A
) || \

1074 
	`SAM_PART_IS_DEFINED
(
SAML22G18A
) \

1075 )

	)

1077 
	#SAML22J
 ( \

1078 
	`SAM_PART_IS_DEFINED
(
SAML22J16A
) || \

1079 
	`SAM_PART_IS_DEFINED
(
SAML22J17A
) || \

1080 
	`SAM_PART_IS_DEFINED
(
SAML22J18A
) \

1081 )

	)

1088 
	#SAMDA0J
 ( \

1089 
	`SAM_PART_IS_DEFINED
(
SAMDA0J14A
) || \

1090 
	`SAM_PART_IS_DEFINED
(
SAMDA0J15A
) || \

1091 
	`SAM_PART_IS_DEFINED
(
SAMDA0J16A
) \

1092 )

	)

1094 
	#SAMDA0G
 ( \

1095 
	`SAM_PART_IS_DEFINED
(
SAMDA0G14A
) || \

1096 
	`SAM_PART_IS_DEFINED
(
SAMDA0G15A
) || \

1097 
	`SAM_PART_IS_DEFINED
(
SAMDA0G16A
) \

1098 )

	)

1100 
	#SAMDA0E
 ( \

1101 
	`SAM_PART_IS_DEFINED
(
SAMDA0E14A
) || \

1102 
	`SAM_PART_IS_DEFINED
(
SAMDA0E15A
) || \

1103 
	`SAM_PART_IS_DEFINED
(
SAMDA0E16A
) \

1104 )

	)

1111 
	#SAMDA1J
 ( \

1112 
	`SAM_PART_IS_DEFINED
(
SAMDA1J14A
) || \

1113 
	`SAM_PART_IS_DEFINED
(
SAMDA1J15A
) || \

1114 
	`SAM_PART_IS_DEFINED
(
SAMDA1J16A
) \

1115 )

	)

1117 
	#SAMDA1G
 ( \

1118 
	`SAM_PART_IS_DEFINED
(
SAMDA1G14A
) || \

1119 
	`SAM_PART_IS_DEFINED
(
SAMDA1G15A
) || \

1120 
	`SAM_PART_IS_DEFINED
(
SAMDA1G16A
) \

1121 )

	)

1123 
	#SAMDA1E
 ( \

1124 
	`SAM_PART_IS_DEFINED
(
SAMDA1E14A
) || \

1125 
	`SAM_PART_IS_DEFINED
(
SAMDA1E15A
) || \

1126 
	`SAM_PART_IS_DEFINED
(
SAMDA1E16A
) \

1127 )

	)

1134 
	#SAMC20E
 ( \

1135 
	`SAM_PART_IS_DEFINED
(
SAMC20E15A
) || \

1136 
	`SAM_PART_IS_DEFINED
(
SAMC20E16A
) || \

1137 
	`SAM_PART_IS_DEFINED
(
SAMC20E17A
) || \

1138 
	`SAM_PART_IS_DEFINED
(
SAMC20E18A
) \

1139 )

	)

1141 
	#SAMC20G
 ( \

1142 
	`SAM_PART_IS_DEFINED
(
SAMC20G15A
) || \

1143 
	`SAM_PART_IS_DEFINED
(
SAMC20G16A
) || \

1144 
	`SAM_PART_IS_DEFINED
(
SAMC20G17A
) || \

1145 
	`SAM_PART_IS_DEFINED
(
SAMC20G18A
) \

1146 )

	)

1148 
	#SAMC20J
 ( \

1149 
	`SAM_PART_IS_DEFINED
(
SAMC20J15A
) || \

1150 
	`SAM_PART_IS_DEFINED
(
SAMC20J16A
) || \

1151 
	`SAM_PART_IS_DEFINED
(
SAMC20J17A
) || \

1152 
	`SAM_PART_IS_DEFINED
(
SAMC20J18A
) \

1153 )

	)

1160 
	#SAMC21E
 ( \

1161 
	`SAM_PART_IS_DEFINED
(
SAMC21E15A
) || \

1162 
	`SAM_PART_IS_DEFINED
(
SAMC21E16A
) || \

1163 
	`SAM_PART_IS_DEFINED
(
SAMC21E17A
) || \

1164 
	`SAM_PART_IS_DEFINED
(
SAMC21E18A
) \

1165 )

	)

1167 
	#SAMC21G
 ( \

1168 
	`SAM_PART_IS_DEFINED
(
SAMC21G15A
) || \

1169 
	`SAM_PART_IS_DEFINED
(
SAMC21G16A
) || \

1170 
	`SAM_PART_IS_DEFINED
(
SAMC21G17A
) || \

1171 
	`SAM_PART_IS_DEFINED
(
SAMC21G18A
) \

1172 )

	)

1174 
	#SAMC21J
 ( \

1175 
	`SAM_PART_IS_DEFINED
(
SAMC21J15A
) || \

1176 
	`SAM_PART_IS_DEFINED
(
SAMC21J16A
) || \

1177 
	`SAM_PART_IS_DEFINED
(
SAMC21J17A
) || \

1178 
	`SAM_PART_IS_DEFINED
(
SAMC21J18A
) \

1179 )

	)

1186 
	#SAM4E8
 ( \

1187 
	`SAM_PART_IS_DEFINED
(
SAM4E8C
) || \

1188 
	`SAM_PART_IS_DEFINED
(
SAM4E8CB
) || \

1189 
	`SAM_PART_IS_DEFINED
(
SAM4E8E
) \

1190 )

	)

1192 
	#SAM4E16
 ( \

1193 
	`SAM_PART_IS_DEFINED
(
SAM4E16C
) || \

1194 
	`SAM_PART_IS_DEFINED
(
SAM4E16CB
) || \

1195 
	`SAM_PART_IS_DEFINED
(
SAM4E16E
) \

1196 )

	)

1203 
	#SAM4N8
 ( \

1204 
	`SAM_PART_IS_DEFINED
(
SAM4N8A
) || \

1205 
	`SAM_PART_IS_DEFINED
(
SAM4N8B
) || \

1206 
	`SAM_PART_IS_DEFINED
(
SAM4N8C
) \

1207 )

	)

1209 
	#SAM4N16
 ( \

1210 
	`SAM_PART_IS_DEFINED
(
SAM4N16B
) || \

1211 
	`SAM_PART_IS_DEFINED
(
SAM4N16C
) \

1212 )

	)

1219 
	#SAM4C4_0
 ( \

1220 
	`SAM_PART_IS_DEFINED
(
SAM4C4C_0
) \

1221 )

	)

1223 
	#SAM4C4_1
 ( \

1224 
	`SAM_PART_IS_DEFINED
(
SAM4C4C_1
) \

1225 )

	)

1227 
	#SAM4C4
 (
SAM4C4_0
 || 
SAM4C4_1
)

	)

1229 
	#SAM4C8_0
 ( \

1230 
	`SAM_PART_IS_DEFINED
(
SAM4C8C_0
) \

1231 )

	)

1233 
	#SAM4C8_1
 ( \

1234 
	`SAM_PART_IS_DEFINED
(
SAM4C8C_1
) \

1235 )

	)

1237 
	#SAM4C8
 (
SAM4C8_0
 || 
SAM4C8_1
)

	)

1239 
	#SAM4C16_0
 ( \

1240 
	`SAM_PART_IS_DEFINED
(
SAM4C16C_0
) \

1241 )

	)

1243 
	#SAM4C16_1
 ( \

1244 
	`SAM_PART_IS_DEFINED
(
SAM4C16C_1
) \

1245 )

	)

1247 
	#SAM4C16
 (
SAM4C16_0
 || 
SAM4C16_1
)

	)

1249 
	#SAM4C32_0
 ( \

1250 
	`SAM_PART_IS_DEFINED
(
SAM4C32C_0
) ||\

1251 
	`SAM_PART_IS_DEFINED
(
SAM4C32E_0
) \

1252 )

	)

1254 
	#SAM4C32_1
 ( \

1255 
	`SAM_PART_IS_DEFINED
(
SAM4C32C_1
) ||\

1256 
	`SAM_PART_IS_DEFINED
(
SAM4C32E_1
) \

1257 )

	)

1260 
	#SAM4C32
 (
SAM4C32_0
 || 
SAM4C32_1
)

	)

1268 
	#SAM4CMP8_0
 ( \

1269 
	`SAM_PART_IS_DEFINED
(
SAM4CMP8C_0
) \

1270 )

	)

1272 
	#SAM4CMP8_1
 ( \

1273 
	`SAM_PART_IS_DEFINED
(
SAM4CMP8C_1
) \

1274 )

	)

1276 
	#SAM4CMP8
 (
SAM4CMP8_0
 || 
SAM4CMP8_1
)

	)

1278 
	#SAM4CMP16_0
 ( \

1279 
	`SAM_PART_IS_DEFINED
(
SAM4CMP16C_0
) \

1280 )

	)

1282 
	#SAM4CMP16_1
 ( \

1283 
	`SAM_PART_IS_DEFINED
(
SAM4CMP16C_1
) \

1284 )

	)

1286 
	#SAM4CMP16
 (
SAM4CMP16_0
 || 
SAM4CMP16_1
)

	)

1288 
	#SAM4CMP32_0
 ( \

1289 
	`SAM_PART_IS_DEFINED
(
SAM4CMP32C_0
) \

1290 )

	)

1292 
	#SAM4CMP32_1
 ( \

1293 
	`SAM_PART_IS_DEFINED
(
SAM4CMP32C_1
) \

1294 )

	)

1296 
	#SAM4CMP32
 (
SAM4CMP32_0
 || 
SAM4CMP32_1
)

	)

1298 
	#SAM4CMS4_0
 ( \

1299 
	`SAM_PART_IS_DEFINED
(
SAM4CMS4C_0
) \

1300 )

	)

1302 
	#SAM4CMS4_1
 ( \

1303 
	`SAM_PART_IS_DEFINED
(
SAM4CMS4C_1
) \

1304 )

	)

1306 
	#SAM4CMS4
 (
SAM4CMS4_0
 || 
SAM4CMS4_1
)

	)

1308 
	#SAM4CMS8_0
 ( \

1309 
	`SAM_PART_IS_DEFINED
(
SAM4CMS8C_0
) \

1310 )

	)

1312 
	#SAM4CMS8_1
 ( \

1313 
	`SAM_PART_IS_DEFINED
(
SAM4CMS8C_1
) \

1314 )

	)

1316 
	#SAM4CMS8
 (
SAM4CMS8_0
 || 
SAM4CMS8_1
)

	)

1318 
	#SAM4CMS16_0
 ( \

1319 
	`SAM_PART_IS_DEFINED
(
SAM4CMS16C_0
) \

1320 )

	)

1322 
	#SAM4CMS16_1
 ( \

1323 
	`SAM_PART_IS_DEFINED
(
SAM4CMS16C_1
) \

1324 )

	)

1326 
	#SAM4CMS16
 (
SAM4CMS16_0
 || 
SAM4CMS16_1
)

	)

1328 
	#SAM4CMS32_0
 ( \

1329 
	`SAM_PART_IS_DEFINED
(
SAM4CMS32C_0
) \

1330 )

	)

1332 
	#SAM4CMS32_1
 ( \

1333 
	`SAM_PART_IS_DEFINED
(
SAM4CMS32C_1
) \

1334 )

	)

1336 
	#SAM4CMS32
 (
SAM4CMS32_0
 || 
SAM4CMS32_1
)

	)

1344 
	#SAM4CP16_0
 ( \

1345 
	`SAM_PART_IS_DEFINED
(
SAM4CP16B_0
) \

1346 )

	)

1348 
	#SAM4CP16_1
 ( \

1349 
	`SAM_PART_IS_DEFINED
(
SAM4CP16B_1
) \

1350 )

	)

1352 
	#SAM4CP16
 (
SAM4CP16_0
 || 
SAM4CP16_1
)

	)

1359 
	#SAMG51
 ( \

1360 
	`SAM_PART_IS_DEFINED
(
SAMG51G18
) \

1361 )

	)

1363 
	#SAMG53
 ( \

1364 
	`SAM_PART_IS_DEFINED
(
SAMG53G19
) ||\

1365 
	`SAM_PART_IS_DEFINED
(
SAMG53N19
) \

1366 )

	)

1368 
	#SAMG54
 ( \

1369 
	`SAM_PART_IS_DEFINED
(
SAMG54G19
) ||\

1370 
	`SAM_PART_IS_DEFINED
(
SAMG54J19
) ||\

1371 
	`SAM_PART_IS_DEFINED
(
SAMG54N19
) \

1372 )

	)

1374 
	#SAMG55
 ( \

1375 
	`SAM_PART_IS_DEFINED
(
SAMG55G18
) ||\

1376 
	`SAM_PART_IS_DEFINED
(
SAMG55G19
) ||\

1377 
	`SAM_PART_IS_DEFINED
(
SAMG55J18
) ||\

1378 
	`SAM_PART_IS_DEFINED
(
SAMG55J19
) ||\

1379 
	`SAM_PART_IS_DEFINED
(
SAMG55N19
) \

1380 )

	)

1387 
	#SAMV71J
 ( \

1388 
	`SAM_PART_IS_DEFINED
(
SAMV71J19
) || \

1389 
	`SAM_PART_IS_DEFINED
(
SAMV71J20
) || \

1390 
	`SAM_PART_IS_DEFINED
(
SAMV71J21
) \

1391 )

	)

1393 
	#SAMV71N
 ( \

1394 
	`SAM_PART_IS_DEFINED
(
SAMV71N19
) || \

1395 
	`SAM_PART_IS_DEFINED
(
SAMV71N20
) || \

1396 
	`SAM_PART_IS_DEFINED
(
SAMV71N21
) \

1397 )

	)

1399 
	#SAMV71Q
 ( \

1400 
	`SAM_PART_IS_DEFINED
(
SAMV71Q19
) || \

1401 
	`SAM_PART_IS_DEFINED
(
SAMV71Q20
) || \

1402 
	`SAM_PART_IS_DEFINED
(
SAMV71Q21
) \

1403 )

	)

1410 
	#SAMV70J
 ( \

1411 
	`SAM_PART_IS_DEFINED
(
SAMV70J19
) || \

1412 
	`SAM_PART_IS_DEFINED
(
SAMV70J20
) \

1413 )

	)

1415 
	#SAMV70N
 ( \

1416 
	`SAM_PART_IS_DEFINED
(
SAMV70N19
) || \

1417 
	`SAM_PART_IS_DEFINED
(
SAMV70N20
) \

1418 )

	)

1420 
	#SAMV70Q
 ( \

1421 
	`SAM_PART_IS_DEFINED
(
SAMV70Q19
) || \

1422 
	`SAM_PART_IS_DEFINED
(
SAMV70Q20
) \

1423 )

	)

1430 
	#SAMS70J
 ( \

1431 
	`SAM_PART_IS_DEFINED
(
SAMS70J19
) || \

1432 
	`SAM_PART_IS_DEFINED
(
SAMS70J20
) || \

1433 
	`SAM_PART_IS_DEFINED
(
SAMS70J21
) \

1434 )

	)

1436 
	#SAMS70N
 ( \

1437 
	`SAM_PART_IS_DEFINED
(
SAMS70N19
) || \

1438 
	`SAM_PART_IS_DEFINED
(
SAMS70N20
) || \

1439 
	`SAM_PART_IS_DEFINED
(
SAMS70N21
) \

1440 )

	)

1442 
	#SAMS70Q
 ( \

1443 
	`SAM_PART_IS_DEFINED
(
SAMS70Q19
) || \

1444 
	`SAM_PART_IS_DEFINED
(
SAMS70Q20
) || \

1445 
	`SAM_PART_IS_DEFINED
(
SAMS70Q21
) \

1446 )

	)

1453 
	#SAME70J
 ( \

1454 
	`SAM_PART_IS_DEFINED
(
SAME70J19
) || \

1455 
	`SAM_PART_IS_DEFINED
(
SAME70J20
) || \

1456 
	`SAM_PART_IS_DEFINED
(
SAME70J21
) \

1457 )

	)

1459 
	#SAME70N
 ( \

1460 
	`SAM_PART_IS_DEFINED
(
SAME70N19
) || \

1461 
	`SAM_PART_IS_DEFINED
(
SAME70N20
) || \

1462 
	`SAM_PART_IS_DEFINED
(
SAME70N21
) \

1463 )

	)

1465 
	#SAME70Q
 ( \

1466 
	`SAM_PART_IS_DEFINED
(
SAME70Q19
) || \

1467 
	`SAM_PART_IS_DEFINED
(
SAME70Q20
) || \

1468 
	`SAM_PART_IS_DEFINED
(
SAME70Q21
) \

1469 )

	)

1477 
	#SAM3S
 (
SAM3S1
 || 
SAM3S2
 || 
SAM3S4
 || 
SAM3S8
 || 
SAM3SD8
)

	)

1480 
	#SAM3U
 (
SAM3U1
 || 
SAM3U2
 || 
SAM3U4
)

	)

1483 
	#SAM3N
 (
SAM3N00
 || 
SAM3N0
 || 
SAM3N1
 || 
SAM3N2
 || 
SAM3N4
)

	)

1486 
	#SAM3XA
 (
SAM3X4
 || 
SAM3X8
 || 
SAM3A4
 || 
SAM3A8
)

	)

1489 
	#SAM4S
 (
SAM4S2
 || 
SAM4S4
 || 
SAM4S8
 || 
SAM4S16
 || 
SAM4SA16
 || 
SAM4SD16
 || 
SAM4SD32
)

	)

1492 
	#SAM4L
 (
SAM4LS
 || 
SAM4LC
)

	)

1495 
	#SAMD20
 (
SAMD20J
 || 
SAMD20G
 || 
SAMD20E
)

	)

1498 
	#SAMD21
 (
SAMD21J
 || 
SAMD21G
 || 
SAMD21E
)

	)

1501 
	#SAMD09
 (
SAMD09C
 || 
SAMD09D
)

	)

1504 
	#SAMD10
 (
SAMD10C
 || 
SAMD10DS
 || 
SAMD10DM
 || 
SAMD10DU
)

	)

1507 
	#SAMD11
 (
SAMD11C
 || 
SAMD11DS
 || 
SAMD11DM
 || 
SAMD11DU
)

	)

1510 
	#SAMDA1
 (
SAMDA1J
 || 
SAMDA1G
 || 
SAMDA1E
)

	)

1513 
	#SAMD
 (
SAMD20
 || 
SAMD21
 || 
SAMD09
 || 
SAMD10
 || 
SAMD11
 || 
SAMDA1
)

	)

1516 
	#SAMR21
 (
SAMR21G
 || 
SAMR21E
)

	)

1519 
	#SAMR30
 (
SAMR30G
 || 
SAMR30E
)

	)

1522 
	#SAMB11
 (
SAMB11G
 || 
BTLC1000
)

	)

1525 
	#SAML21
 (
SAML21J
 || 
SAML21G
 || 
SAML21E
)

	)

1528 
	#SAML22
 (
SAML22J
 || 
SAML22G
 || 
SAML22N
)

	)

1530 
	#SAMC20
 (
SAMC20J
 || 
SAMC20G
 || 
SAMC20E
)

	)

1533 
	#SAMC21
 (
SAMC21J
 || 
SAMC21G
 || 
SAMC21E
)

	)

1536 
	#SAM4E
 (
SAM4E8
 || 
SAM4E16
)

	)

1539 
	#SAM4N
 (
SAM4N8
 || 
SAM4N16
)

	)

1542 
	#SAM4C_0
 (
SAM4C4_0
 || 
SAM4C8_0
 || 
SAM4C16_0
 || 
SAM4C32_0
)

	)

1543 
	#SAM4C_1
 (
SAM4C4_1
 || 
SAM4C8_1
 || 
SAM4C16_1
 || 
SAM4C32_1
)

	)

1544 
	#SAM4C
 (
SAM4C4
 || 
SAM4C8
 || 
SAM4C16
 || 
SAM4C32
)

	)

1547 
	#SAM4CM_0
 (
SAM4CMP8_0
 || 
SAM4CMP16_0
 || 
SAM4CMP32_0
 || \

1548 
SAM4CMS4_0
 || 
SAM4CMS8_0
 || 
SAM4CMS16_0
 || 
SAM4CMS32_0
)

	)

1549 
	#SAM4CM_1
 (
SAM4CMP8_1
 || 
SAM4CMP16_1
 || 
SAM4CMP32_1
 || \

1550 
SAM4CMS4_1
 || 
SAM4CMS8_1
 || 
SAM4CMS16_1
 || 
SAM4CMS32_1
)

	)

1551 
	#SAM4CM
 (
SAM4CMP8
 || 
SAM4CMP16
 || 
SAM4CMP32
 || \

1552 
SAM4CMS4
 || 
SAM4CMS8
 || 
SAM4CMS16
 || 
SAM4CMS32
)

	)

1555 
	#SAM4CP_0
 (
SAM4CP16_0
)

	)

1556 
	#SAM4CP_1
 (
SAM4CP16_1
)

	)

1557 
	#SAM4CP
 (
SAM4CP16
)

	)

1560 
	#SAMG
 (
SAMG51
 || 
SAMG53
 || 
SAMG54
 || 
SAMG55
)

	)

1563 
	#SAMB
 (
SAMB11
)

	)

1566 
	#SAMV71
 (
SAMV71J
 || 
SAMV71N
 || 
SAMV71Q
)

	)

1569 
	#SAMV70
 (
SAMV70J
 || 
SAMV70N
 || 
SAMV70Q
)

	)

1572 
	#SAME70
 (
SAME70J
 || 
SAME70N
 || 
SAME70Q
)

	)

1575 
	#SAMS70
 (
SAMS70J
 || 
SAMS70N
 || 
SAMS70Q
)

	)

1578 
	#SAM0
 (
SAMD20
 || 
SAMD21
 || 
SAMR21
 || 
SAMD10
 || 
SAMD11
 || 
SAML21
 ||\

1579 
SAMDA1
 || 
SAMC20
 || 
SAMC21
 || 
SAML22
 || 
SAMD09
 || 
SAMR30
)

	)

1584 
	#SAM
 (
SAM3S
 || 
SAM3U
 || 
SAM3N
 || 
SAM3XA
 || 
SAM4S
 || 
SAM4L
 || 
SAM4E
 || \

1585 
SAM0
 || 
SAM4N
 || 
SAM4C
 || 
SAM4CM
 || 
SAM4CP
 || 
SAMG
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

	)

	@/home/vaje/Documents/vaja9/asf/sam/boards/arduino_due_x/arduino_due_x.h

47 #i‚de‡
ARDUINO_DUE_X_H_INCLUDED


48 
	#ARDUINO_DUE_X_H_INCLUDED


	)

50 
	~"compûî.h
"

51 
	~"sy°em_ßm3x.h
"

52 
	~"ex˚±i⁄s.h
"

66 
	#BOARD_FREQ_SLCK_XTAL
 (32768U)

	)

67 
	#BOARD_FREQ_SLCK_BYPASS
 (32768U)

	)

68 
	#BOARD_FREQ_MAINCK_XTAL
 (12000000U)

	)

69 
	#BOARD_FREQ_MAINCK_BYPASS
 (12000000U)

	)

72 
	#BOARD_MCK
 
CHIP_FREQ_CPU_MAX


	)

73 
	#BOARD_NO_32K_XTAL


	)

76 
	#BOARD_OSC_STARTUP_US
 15625

	)

89 
	#BOARD_NAME
 "ArduöÿDue/X"

	)

91 
	#¨duöoduex


	)

93 
	#ßm3x


	)

95 
	#c‹ãxm3


	)

124 
	#PIN_ADC0_AD1
 {
PIO_PA3X1_AD1
, 
PIOA
, 
ID_PIOA
, 
PIO_INPUT
, 
PIO_DEFAULT
}

	)

125 
	#PINS_ADC_TRIG
 
PIO_PA11_IDX


	)

126 
	#PINS_ADC_TRIG_FLAG
 (
PIO_PERIPH_B
 | 
PIO_DEFAULT
)

	)

128 
	#PINS_ADC
 
PIN_ADC0_AD1


	)

155 
	#PIN_POWER_LED
 {
PIO_PB27
, 
PIOB
, 
ID_PIOB
, 
PIO_OUTPUT_1
, 
PIO_DEFAULT
}

	)

157 
	#PIN_USER_LED1
 {
PIO_PC21
, 
PIOC
, 
ID_PIOC
, 
PIO_OUTPUT_1
, 
PIO_DEFAULT
}

	)

159 
	#PIN_USER_LED2
 {
PIO_PC22
, 
PIOC
, 
ID_PIOC
, 
PIO_OUTPUT_1
, 
PIO_DEFAULT
}

	)

161 
	#PIN_USER_LED3
 {
PIO_PC23
, 
PIOC
, 
ID_PIOC
, 
PIO_OUTPUT_1
, 
PIO_DEFAULT
}

	)

164 
	#PINS_LEDS
 
PIN_USER_LED1
, 
PIN_USER_LED2
, 
PIN_USER_LED3
, 
PIN_POWER_LED


	)

167 
	#LED_0_NAME
 "Oønge_LED"

	)

168 
	#LED0_GPIO
 (
PIO_PB27_IDX
)

	)

169 
	#LED0_FLAGS
 (
PIO_TYPE_PIO_OUTPUT_1
 | 
PIO_DEFAULT
)

	)

170 
	#LED0_ACTIVE_LEVEL
 0

	)

172 
	#PIN_LED_0
 {1 << 27, 
PIOB
, 
ID_PIOB
, 
PIO_OUTPUT_0
, 
PIO_DEFAULT
}

	)

173 
	#PIN_LED_0_MASK
 (1 << 27)

	)

174 
	#PIN_LED_0_PIO
 
PIOB


	)

175 
	#PIN_LED_0_ID
 
ID_PIOB


	)

176 
	#PIN_LED_0_TYPE
 
PIO_OUTPUT_0


	)

177 
	#PIN_LED_0_ATTR
 
PIO_DEFAULT


	)

180 
	#LED_1_NAME
 "Exã∫Æ_LED_⁄_PWM9_c⁄√˘‹_ouçut"

	)

181 
	#LED1_GPIO
 (
PIO_PC21_IDX
)

	)

182 
	#LED1_FLAGS
 (
PIO_TYPE_PIO_OUTPUT_1
 | 
PIO_DEFAULT
)

	)

183 
	#LED1_ACTIVE_LEVEL
 0

	)

185 
	#PIN_LED_1
 {1 << 21, 
PIOC
, 
ID_PIOC
, 
PIO_OUTPUT_1
, 
PIO_DEFAULT
}

	)

186 
	#PIN_LED_1_MASK
 (1 << 21)

	)

187 
	#PIN_LED_1_PIO
 
PIOC


	)

188 
	#PIN_LED_1_ID
 
ID_PIOC


	)

189 
	#PIN_LED_1_TYPE
 
PIO_OUTPUT_1


	)

190 
	#PIN_LED_1_ATTR
 
PIO_DEFAULT


	)

193 
	#LED2_GPIO
 (
PIO_PC22_IDX
)

	)

194 
	#LED2_FLAGS
 (
PIO_TYPE_PIO_OUTPUT_1
 | 
PIO_DEFAULT
)

	)

195 
	#LED2_ACTIVE_LEVEL
 0

	)

197 
	#PIN_LED_2
 {1 << 22, 
PIOC
, 
ID_PIOC
, 
PIO_OUTPUT_1
, 
PIO_DEFAULT
}

	)

198 
	#PIN_LED_2_MASK
 (1 << 22)

	)

199 
	#PIN_LED_2_PIO
 
PIOC


	)

200 
	#PIN_LED_2_ID
 
ID_PIOC


	)

201 
	#PIN_LED_2_TYPE
 
PIO_OUTPUT_1


	)

202 
	#PIN_LED_2_ATTR
 
PIO_DEFAULT


	)

205 
	#LED3_GPIO
 (
PIO_PC23_IDX
)

	)

206 
	#LED3_FLAGS
 (
PIO_TYPE_PIO_OUTPUT_1
 | 
PIO_DEFAULT
)

	)

207 
	#LED3_ACTIVE_LEVEL
 1

	)

209 
	#BOARD_NUM_OF_LED
 4

	)

210 
	#PIN_LED_3
 {1 << 23, 
PIOC
, 
ID_PIOC
, 
PIO_OUTPUT_1
, 
PIO_DEFAULT
}

	)

211 
	#PIN_LED_3_MASK
 (1 << 23)

	)

212 
	#PIN_LED_3_PIO
 
PIOC


	)

213 
	#PIN_LED_3_ID
 
ID_PIOC


	)

214 
	#PIN_LED_3_TYPE
 
PIO_OUTPUT_1


	)

215 
	#PIN_LED_3_ATTR
 
PIO_DEFAULT


	)

236 
	#PIN_PB_LEFT_CLICK
 {
PIO_PD8
, 
PIOD
, 
ID_PIOD
, 
PIO_INPUT
,\

237 
PIO_PULLUP
 | 
PIO_DEBOUNCE
 | 
PIO_IT_FALL_EDGE
}

	)

241 
	#PIN_PB_RIGHT_CLICK
 {
PIO_PC28
, 
PIOC
, 
ID_PIOC
, 
PIO_INPUT
,\

242 
PIO_PULLUP
 | 
PIO_DEBOUNCE
 | 
PIO_IT_FALL_EDGE
}

	)

245 
	#PINS_PUSHBUTTONS
 
PIN_PB_LEFT_CLICK
, 
PIN_PB_RIGHT_CLICK


	)

248 
	#PUSHBUTTON_BP1
 0

	)

250 
	#PUSHBUTTON_BP2
 1

	)

253 
	#PUSHBUTTON_LEFT
 0

	)

255 
	#PUSHBUTTON_RIGHT
 1

	)

259 
	#PUSHBUTTON_1_NAME
 "Exã∫Æ_PB1_⁄_PWM12_c⁄√˘‹_ouçut"

	)

261 
	#GPIO_PUSH_BUTTON_1
 (
PIO_PD8_IDX
)

	)

262 
	#GPIO_PUSH_BUTTON_1_FLAGS
\

263 (
PIO_INPUT
 | 
PIO_PULLUP
 | 
PIO_DEBOUNCE
 | 
PIO_IT_RISE_EDGE
)

	)

265 
	#PIN_PUSHBUTTON_1
 {
PIO_PD8
, 
PIOD
, 
ID_PIOD
, 
PIO_INPUT
,\

266 
PIO_PULLUP
 }

	)

267 
	#PIN_PUSHBUTTON_1_MASK
 
PIO_PD8


	)

268 
	#PIN_PUSHBUTTON_1_PIO
 
PIOD


	)

269 
	#PIN_PUSHBUTTON_1_ID
 
ID_PIOD


	)

270 
	#PIN_PUSHBUTTON_1_TYPE
 
PIO_INPUT


	)

271 
	#PIN_PUSHBUTTON_1_ATTR
 (
PIO_PULLUP
 | 
PIO_DEBOUNCE
 | 
PIO_IT_RISE_EDGE
)

	)

275 
	#PUSHBUTTON_2_NAME
 "Exã∫Æ_PB2_⁄_PWM3_c⁄√˘‹_ouçut"

	)

276 
	#GPIO_PUSH_BUTTON_2
 (
PIO_PC28_IDX
)

	)

277 
	#GPIO_PUSH_BUTTON_2_FLAGS
\

278 (
PIO_INPUT
 | 
PIO_PULLUP
)

	)

280 
	#PIN_PUSHBUTTON_2
 {
PIO_PC28
, 
PIOC
, 
ID_PIOC
, 
PIO_INPUT
,\

281 
PIO_PULLUP
 | 
PIO_DEBOUNCE
 | 
PIO_IT_FALL_EDGE
}

	)

282 
	#PIN_PUSHBUTTON_2_MASK
 
PIO_PC28


	)

283 
	#PIN_PUSHBUTTON_2_PIO
 
PIOC


	)

284 
	#PIN_PUSHBUTTON_2_ID
 
ID_PIOC


	)

285 
	#PIN_PUSHBUTTON_2_TYPE
 
PIO_INPUT


	)

286 
	#PIN_PUSHBUTTON_2_ATTR
 (
PIO_PULLUP
 | 
PIO_DEBOUNCE
 | 
PIO_IT_FALL_EDGE
)

	)

289 
	#PIN_TC0_TIOA1
 (
PIO_PA2_IDX
)

	)

290 
	#PIN_TC0_TIOA1_MUX
 (
IOPORT_MODE_MUX_A
)

	)

291 
	#PIN_TC0_TIOA1_FLAGS
 (
PIO_PERIPH_A
 | 
PIO_DEFAULT
)

	)

293 
	#PIN_TC0_TIOA1_PIO
 
PIOA


	)

294 
	#PIN_TC0_TIOA1_MASK
 
PIO_PA2


	)

295 
	#PIN_TC0_TIOA1_ID
 
ID_PIOA


	)

296 
	#PIN_TC0_TIOA1_TYPE
 
PIO_PERIPH_A


	)

297 
	#PIN_TC0_TIOA1_ATTR
 
PIO_DEFAULT


	)

300 
	#PIN_TC0_TIOA0
 (
PIO_PB25_IDX
)

	)

301 
	#PIN_TC0_TIOA0_MUX
 (
IOPORT_MODE_MUX_B
)

	)

302 
	#PIN_TC0_TIOA0_FLAGS
 (
PIO_INPUT
 | 
PIO_DEFAULT
)

	)

304 
	#PIN_TC0_TIOA0_PIO
 
PIOB


	)

305 
	#PIN_TC0_TIOA0_MASK
 
PIO_PB25


	)

306 
	#PIN_TC0_TIOA0_ID
 
ID_PIOB


	)

307 
	#PIN_TC0_TIOA0_TYPE
 
PIO_INPUT


	)

308 
	#PIN_TC0_TIOA0_ATTR
 
PIO_DEFAULT


	)

327 
	#PIN_PWMC_PWMH0_TRIG
 
PIO_PB12_IDX


	)

328 
	#PIN_PWMC_PWMH0_TRIG_FLAG
 
PIO_PERIPH_B
 | 
PIO_DEFAULT


	)

331 
	#PIN_PWMC_PWML4
\

332 {
PIO_PC21B_PWML4
, 
PIOC
, 
ID_PIOC
, 
PIO_PERIPH_B
, 
PIO_DEFAULT
}

	)

334 
	#PIN_PWMC_PWML5
\

335 {
PIO_PC22B_PWML5
, 
PIOC
, 
ID_PIOC
, 
PIO_PERIPH_B
, 
PIO_DEFAULT
}

	)

337 
	#PIN_PWMC_PWML6
\

338 {
PIO_PC23B_PWML6
, 
PIOC
, 
ID_PIOC
, 
PIO_PERIPH_B
, 
PIO_DEFAULT
}

	)

341 
	#PIN_PWM_LED0
 
PIN_PWMC_PWML4


	)

343 
	#PIN_PWM_LED1
 
PIN_PWMC_PWML5


	)

345 
	#PIN_PWM_LED2
 
PIN_PWMC_PWML6


	)

349 
	#CHANNEL_PWM_LED0
 
PWM_CHANNEL_4


	)

351 
	#CHANNEL_PWM_LED1
 
PWM_CHANNEL_5


	)

353 
	#CHANNEL_PWM_LED2
 
PWM_CHANNEL_6


	)

356 
	#PIN_PWM_LED0_GPIO
 
PIO_PC21_IDX


	)

357 
	#PIN_PWM_LED0_FLAGS
 (
PIO_PERIPH_B
 | 
PIO_DEFAULT
)

	)

358 
	#PIN_PWM_LED0_CHANNEL
 
PWM_CHANNEL_4


	)

361 
	#PIN_PWM_LED1_GPIO
 
PIO_PC22_IDX


	)

362 
	#PIN_PWM_LED1_FLAGS
 (
PIO_PERIPH_B
 | 
PIO_DEFAULT
)

	)

363 
	#PIN_PWM_LED1_CHANNEL
 
PWM_CHANNEL_5


	)

366 
	#PIN_PWM_LED2_GPIO
 
PIO_PC23_IDX


	)

367 
	#PIN_PWM_LED2_FLAGS
 (
PIO_PERIPH_B
 | 
PIO_DEFAULT
)

	)

368 
	#PIN_PWM_LED2_CHANNEL
 
PWM_CHANNEL_6


	)

380 
	#SPI0_MISO_GPIO
 (
PIO_PA25_IDX
)

	)

381 
	#SPI0_MISO_FLAGS
 (
PIO_PERIPH_A
 | 
PIO_DEFAULT
)

	)

383 
	#SPI0_MOSI_GPIO
 (
PIO_PA26_IDX
)

	)

384 
	#SPI0_MOSI_FLAGS
 (
PIO_PERIPH_A
 | 
PIO_DEFAULT
)

	)

386 
	#SPI0_SPCK_GPIO
 (
PIO_PA27_IDX
)

	)

387 
	#SPI0_SPCK_FLAGS
 (
PIO_PERIPH_A
 | 
PIO_DEFAULT
)

	)

390 
	#SPI0_NPCS0_GPIO
 (
PIO_PA28_IDX
)

	)

391 
	#SPI0_NPCS0_FLAGS
 (
PIO_PERIPH_A
 | 
PIO_DEFAULT
)

	)

393 
	#SPI0_NPCS1_PA29_GPIO
 (
PIO_PA29_IDX
)

	)

394 
	#SPI0_NPCS1_PA29_FLAGS
 (
PIO_PERIPH_A
 | 
PIO_DEFAULT
)

	)

395 
	#SPI0_NPCS1_PB20_GPIO
 (
PIO_PB20_IDX
)

	)

396 
	#SPI0_NPCS1_PB20_FLAGS
 (
PIO_PERIPH_B
 | 
PIO_DEFAULT
)

	)

398 
	#SPI0_NPCS2_PA30_GPIO
 (
PIO_PA30_IDX
)

	)

399 
	#SPI0_NPCS2_PA30_FLAGS
 (
PIO_PERIPH_A
 | 
PIO_DEFAULT
)

	)

400 
	#SPI0_NPCS2_PB21_GPIO
 (
PIO_PB21_IDX
)

	)

401 
	#SPI0_NPCS2_PB21_FLAGS
 (
PIO_PERIPH_B
 | 
PIO_DEFAULT
)

	)

403 
	#SPI0_NPCS3_PA31_GPIO
 (
PIO_PA31_IDX
)

	)

404 
	#SPI0_NPCS3_PA31_FLAGS
 (
PIO_PERIPH_A
 | 
PIO_DEFAULT
)

	)

405 
	#SPI0_NPCS3_PB23_GPIO
 (
PIO_PB23_IDX
)

	)

406 
	#SPI0_NPCS3_PB23_FLAGS
 (
PIO_PERIPH_B
 | 
PIO_DEFAULT
)

	)

409 
	#SPI1_MISO_GPIO
 (
PIO_PE28_IDX
)

	)

410 
	#SPI1_MISO_FLAGS
 (
PIO_PERIPH_A
 | 
PIO_DEFAULT
)

	)

412 
	#SPI1_MOSI_GPIO
 (
PIO_PE29_IDX
)

	)

413 
	#SPI1_MOSI_FLAGS
 (
PIO_PERIPH_A
 | 
PIO_DEFAULT
)

	)

415 
	#SPI1_SPCK_GPIO
 (
PIO_PE30_IDX
)

	)

416 
	#SPI1_SPCK_FLAGS
 (
PIO_PERIPH_A
 | 
PIO_DEFAULT
)

	)

418 
	#SPI1_NPCS0_GPIO
 (
PIO_PE31_IDX
)

	)

419 
	#SPI1_NPCS0_FLAGS
 (
PIO_PERIPH_A
 | 
PIO_DEFAULT
)

	)

421 
	#SPI1_NPCS1_GPIO
 (
PIO_PF0_IDX
)

	)

422 
	#SPI1_NPCS1_FLAGS
 (
PIO_PERIPH_A
 | 
PIO_DEFAULT
)

	)

424 
	#SPI1_NPCS2_GPIO
 (
PIO_PF1_IDX
)

	)

425 
	#SPI1_NPCS2_FLAGS
 (
PIO_PERIPH_A
 | 
PIO_DEFAULT
)

	)

427 
	#SPI1_NPCS3_GPIO
 (
PIO_PF2_IDX
)

	)

428 
	#SPI1_NPCS3_FLAGS
 (
PIO_PERIPH_A
 | 
PIO_DEFAULT
)

	)

445 
	#PIN_SSC_TD
 (
PIO_PA16_IDX
)

	)

446 
	#PIN_SSC_TD_FLAGS
 (
PIO_PERIPH_B
 | 
PIO_DEFAULT
)

	)

448 
	#PIN_SSC_TK
 (
PIO_PA14_IDX
)

	)

449 
	#PIN_SSC_TK_FLAGS
 (
PIO_PERIPH_B
 | 
PIO_DEFAULT
)

	)

451 
	#PIN_SSC_TF
 (
PIO_PA15_IDX
)

	)

452 
	#PIN_SSC_TF_FLAGS
 (
PIO_PERIPH_B
 | 
PIO_DEFAULT
)

	)

454 
	#PIN_SSC_RD
 (
PIO_PB18_IDX
)

	)

455 
	#PIN_SSC_RD_FLAGS
 (
PIO_PERIPH_A
 | 
PIO_DEFAULT
)

	)

457 
	#PIN_SSC_RK
 (
PIO_PB19_IDX
)

	)

458 
	#PIN_SSC_RK_FLAGS
 (
PIO_PERIPH_A
 | 
PIO_DEFAULT
)

	)

460 
	#PIN_SSC_RF
 (
PIO_PB17_IDX
)

	)

461 
	#PIN_SSC_RF_FLAGS
 (
PIO_PERIPH_A
 | 
PIO_DEFAULT
)

	)

474 
	#PIN_PCK0
 (
PIO_PA1_IDX
)

	)

475 
	#PIN_PCK0_MUX
 (
IOPORT_MODE_MUX_B
)

	)

476 
	#PIN_PCK0_FLAGS
 (
PIO_PERIPH_B
 | 
PIO_DEFAULT
)

	)

478 
	#PIN_PCK_0_MASK
 
PIO_PA1


	)

479 
	#PIN_PCK_0_PIO
 
PIOA


	)

480 
	#PIN_PCK_0_ID
 
ID_PIOA


	)

481 
	#PIN_PCK_0_TYPE
 
PIO_PERIPH_B


	)

482 
	#PIN_PCK_0_ATTR
 
PIO_DEFAULT


	)

494 
	#PINS_UART
 (
PIO_PA8A_URXD
 | 
PIO_PA9A_UTXD
)

	)

495 
	#PINS_UART_FLAGS
 (
PIO_PERIPH_A
 | 
PIO_DEFAULT
 | 
PIO_PULLUP
)

	)

497 
	#PINS_UART_MASK
 (
PIO_PA8A_URXD
 | 
PIO_PA9A_UTXD
)

	)

498 
	#PINS_UART_PIO
 
PIOA


	)

499 
	#PINS_UART_ID
 
ID_PIOA


	)

500 
	#PINS_UART_TYPE
 
PIO_PERIPH_A


	)

501 
	#PINS_UART_ATTR
 
PIO_DEFAULT


	)

513 
	#PIN_USART0_RXD
\

514 {
PIO_PA10A_RXD0
, 
PIOA
, 
ID_PIOA
, 
PIO_PERIPH_A
, 
PIO_DEFAULT
}

	)

515 
	#PIN_USART0_RXD_IDX
 (
PIO_PA10_IDX
)

	)

516 
	#PIN_USART0_RXD_FLAGS
 (
PIO_PERIPH_A
 | 
PIO_DEFAULT
)

	)

519 
	#PIN_USART0_TXD
\

520 {
PIO_PA11A_TXD0
, 
PIOA
, 
ID_PIOA
, 
PIO_PERIPH_A
, 
PIO_DEFAULT
}

	)

521 
	#PIN_USART0_TXD_IDX
 (
PIO_PA11_IDX
)

	)

522 
	#PIN_USART0_TXD_FLAGS
 (
PIO_PERIPH_A
 | 
PIO_DEFAULT
)

	)

534 
	#PIN_USART1_RXD
\

535 {
PIO_PA12A_RXD1
, 
PIOA
, 
ID_PIOA
, 
PIO_PERIPH_A
, 
PIO_DEFAULT
}

	)

536 
	#PIN_USART1_RXD_IDX
 (
PIO_PA12_IDX
)

	)

537 
	#PIN_USART1_RXD_FLAGS
 (
PIO_PERIPH_A
 | 
PIO_DEFAULT
)

	)

539 
	#PIN_USART1_TXD
\

540 {
PIO_PA13A_TXD1
, 
PIOA
, 
ID_PIOA
, 
PIO_PERIPH_A
, 
PIO_DEFAULT
}

	)

541 
	#PIN_USART1_TXD_IDX
 (
PIO_PA13_IDX
)

	)

542 
	#PIN_USART1_TXD_FLAGS
 (
PIO_PERIPH_A
 | 
PIO_DEFAULT
)

	)

554 
	#PIN_USART3_RXD
\

555 {
PIO_PD5B_RXD3
, 
PIOD
, 
ID_PIOD
, 
PIO_PERIPH_B
, 
PIO_DEFAULT
}

	)

556 
	#PIN_USART3_RXD_IDX
 (
PIO_PD5_IDX
)

	)

557 
	#PIN_USART3_RXD_FLAGS
 (
PIO_PERIPH_B
 | 
PIO_DEFAULT
)

	)

559 
	#PIN_USART3_TXD
\

560 {
PIO_PD4B_TXD3
, 
PIOD
, 
ID_PIOD
, 
PIO_PERIPH_B
, 
PIO_DEFAULT
}

	)

561 
	#PIN_USART3_TXD_IDX
 (
PIO_PD4_IDX
)

	)

562 
	#PIN_USART3_TXD_FLAGS
 (
PIO_PERIPH_B
 | 
PIO_DEFAULT
)

	)

575 
	#PIN_UOTGHS_VBOF
 { 
PIO_PB10
, 
PIOB
, 
ID_PIOB
, 
PIO_PERIPH_A
, 
PIO_PULLUP
 }

	)

577 
	#PIN_UOTGHS_ID
 { 
PIO_PB11
, 
PIOB
, 
ID_PIOB
, 
PIO_PERIPH_A
, 
PIO_PULLUP
 }

	)

580 
	#USB_ID
 
PIO_PB11_IDX


	)

581 
	#USB_ID_GPIO
 (
PIO_PB11_IDX
)

	)

582 
	#USB_ID_FLAGS
 (
PIO_PERIPH_A
 | 
PIO_DEFAULT
)

	)

584 
	#USB_VBOF
 
PIO_PB10_IDX


	)

585 
	#USB_VBOF_GPIO
 (
PIO_PB10_IDX
)

	)

586 
	#USB_VBOF_FLAGS
 (
PIO_PERIPH_A
 | 
PIO_DEFAULT
)

	)

588 
	#USB_VBOF_ACTIVE_LEVEL
 
LOW


	)

598 
	#TWI0_DATA_GPIO
 
PIO_PA17_IDX


	)

599 
	#TWI0_DATA_FLAGS
 (
PIO_PERIPH_A
 | 
PIO_DEFAULT
)

	)

600 
	#TWI0_CLK_GPIO
 
PIO_PA18_IDX


	)

601 
	#TWI0_CLK_FLAGS
 (
PIO_PERIPH_A
 | 
PIO_DEFAULT
)

	)

604 
	#TWI1_DATA_GPIO
 
PIO_PB12_IDX


	)

605 
	#TWI1_DATA_FLAGS
 (
PIO_PERIPH_A
 | 
PIO_DEFAULT
)

	)

606 
	#TWI1_CLK_GPIO
 
PIO_PB13_IDX


	)

607 
	#TWI1_CLK_FLAGS
 (
PIO_PERIPH_A
 | 
PIO_DEFAULT
)

	)

637 
	#PIN_TSC_IRQ
 {
PIO_PA31
, 
PIOA
, 
ID_PIOA
, 
PIO_INPUT
, 
PIO_PULLUP
}

	)

639 
	#PIN_TSC_BUSY
 {
PIO_PA30
, 
PIOA
, 
ID_PIOA
, 
PIO_INPUT
, 
PIO_PULLUP
}

	)

643 
	#BOARD_TSC_NPCS_PIN
\

644 {
PIO_PA28A_SPI0_NPCS0
, 
PIOA
, 
ID_PIOA
, 
PIO_OUTPUT_1
, 
PIO_PULLUP
}

	)

653 
	#PIN_EEMAC_EREFCK
 
PIO_PB0_IDX


	)

654 
	#PIN_EMAC_ETXEN
 
PIO_PB1_IDX


	)

655 
	#PIN_EMAC_ETX0
 
PIO_PB2_IDX


	)

656 
	#PIN_EMAC_ETX1
 
PIO_PB3_IDX


	)

657 
	#PIN_EMAC_ECRSDV
 
PIO_PB4_IDX


	)

658 
	#PIN_EMAC_ERX0
 
PIO_PB5_IDX


	)

659 
	#PIN_EMAC_ERX1
 
PIO_PB6_IDX


	)

660 
	#PIN_EMAC_ERXER
 
PIO_PB7_IDX


	)

661 
	#PIN_EMAC_EMDC
 
PIO_PB8_IDX


	)

662 
	#PIN_EMAC_EMDIO
 
PIO_PB9_IDX


	)

663 
	#PIN_EMAC_FLAGS
 
PIO_PERIPH_A
 | 
PIO_DEFAULT


	)

666 
	#BOARD_EMAC_PHY_ADDR
 0

	)

668 
	#BOARD_EMAC_MODE_RMII
 1

	)

674 
	#BOARD_NAND_CS
 0

	)

677 
	#BOARD_NF_COMMAND_ADDR
 0x60400000

	)

679 
	#BOARD_NF_ADDRESS_ADDR
 0x60200000

	)

681 
	#BOARD_NF_DATA_ADDR
 0x60000000

	)

683 
	#CONF_NF_BUSWIDTH
 8

	)

685 
	#CONF_NF_NEED_FIVE_ADDRESS_CYCLES
 1

	)

687 
	#CONF_NF_SETUP_TIMING
 (
	`SMC_SETUP_NWE_SETUP
(0) \

688 | 
	`SMC_SETUP_NCS_WR_SETUP
(0) \

689 | 
	`SMC_SETUP_NRD_SETUP
(0) \

690 | 
	`SMC_SETUP_NCS_RD_SETUP
(0))

	)

691 
	#CONF_NF_PULSE_TIMING
 (
	`SMC_PULSE_NWE_PULSE
(2) \

692 | 
	`SMC_PULSE_NCS_WR_PULSE
(3) \

693 | 
	`SMC_PULSE_NRD_PULSE
(2) \

694 | 
	`SMC_PULSE_NCS_RD_PULSE
(3))

	)

695 
	#CONF_NF_CYCLE_TIMING
 (
	`SMC_CYCLE_NWE_CYCLE
(3) \

696 | 
	`SMC_CYCLE_NRD_CYCLE
(3))

	)

697 
	#CONF_NF_TIMING
 (
	`SMC_TIMINGS_TCLR
(1) \

698 | 
	`SMC_TIMINGS_TADL
(6) \

699 | 
	`SMC_TIMINGS_TAR
(4) \

700 | 
	`SMC_TIMINGS_TRR
(2) \

701 | 
	`SMC_TIMINGS_TWB
(9) \

702 | 
	`SMC_TIMINGS_RBNSEL
(7) \

703 | (
SMC_TIMINGS_NFSEL
))

	)

705 
	#CONF_NF_USE_DMA


	)

706 #ifde‡
CONF_NF_USE_DMA


708 
	#CONF_NF_DMA_CHANNEL
 0

	)

715 
	#BOARD_SDRAM_SIZE
 (32 * 1024 * 1024Ë

	)

718 
	#PIO_SDRAM_SDCKE
 
PIO_PD13


	)

719 
	#PIO_SDRAM_SDCS
 
PIO_PD12


	)

720 
	#PIO_SDRAM_RAS
 
PIO_PD15


	)

721 
	#PIO_SDRAM_CAS
 
PIO_PD16


	)

722 
	#PIO_SDRAM_BA0
 
PIO_PD6


	)

723 
	#PIO_SDRAM_BA1
 
PIO_PD7


	)

724 
	#PIO_SDRAM_SDWE
 
PIO_PD14


	)

726 
	#PIO_SDRAM_NBS1
 
PIO_PD10


	)

727 
	#PIO_SDRAM_DATA
 (0xfff‡<< 2Ë

	)

729 
	#PIO_SDRAM_SDA8
 
PIO_PD22


	)

730 
	#PIO_SDRAM_SDA9
 
PIO_PD23


	)

731 
	#PIO_SDRAM_SDA11
 
PIO_PD25


	)

732 
	#PIO_SDRAM_SDA12
 
PIO_PD4


	)

733 
	#PIO_SDRAM_SDA10
 
PIO_PD11


	)

736 
	#PINS_SDRAM_PIOC
\

737 { 
PIO_SDRAM_DATA
 | 
PIO_SDRAM_NBS0
 | 
PIO_SDRAM_SDA0_A7
,\

738 
PIOC
, 
ID_PIOC
, 
PIO_PERIPH_A
, 
PIO_PULLUP
 }

	)

740 
	#PINS_SDRAM_PIOD
\

741 { 
PIO_SDRAM_SDCKE
 | 
PIO_SDRAM_SDCS
 |\

742 
PIO_SDRAM_RAS
 | 
PIO_SDRAM_CAS
 |\

743 
PIO_SDRAM_BA0
 | 
PIO_SDRAM_BA1
 |\

744 
PIO_SDRAM_SDWE
 | 
PIO_SDRAM_NBS1
 |\

745 
PIO_SDRAM_SDA10
 |\

746 
PIO_SDRAM_SDA8
 | 
PIO_SDRAM_SDA9
 |\

747 
PIO_SDRAM_SDA11
 | 
PIO_SDRAM_SDA12
,\

748 
PIOD
, 
ID_PIOD
, 
PIO_PERIPH_A
, 
PIO_PULLUP
 }

	)

751 
	#PINS_SDRAM_EN
\

752 { (1 << 18), 
PIOD
, 
ID_PIOD
, 
PIO_OUTPUT_1
, 
PIO_DEFAULT
 }

	)

754 
	#PINS_SDRAM
 
PINS_SDRAM_PIOC
, 
PINS_SDRAM_PIOD
, 
PINS_SDRAM_EN


	)

757 
	#BOARD_SDRAM_BUSWIDTH
 16

	)

760 
	#SDRAMC_CLK
 (
BOARD_MCK
)

	)

773 
	#BOARD_NORFLASH_ADDR
 0x60000000

	)

776 
	#BOARD_ID_TWI_EEPROM
 
ID_TWI0


	)

778 
	#BOARD_BASE_TWI_EEPROM
 
TWI0


	)

781 
	#BOARD_PIN_USART_RXD
 
PIN_USART0_RXD


	)

783 
	#BOARD_PIN_USART_TXD
 
PIN_USART0_TXD


	)

785 
	#BOARD_USART_BASE
 
USART0


	)

787 
	#BOARD_ID_USART
 
ID_USART0


	)

789 
	#BOARD_USART1_BASE
 
USART1


	)

791 
	#BOARD_ID_USART1
 
ID_USART1


	)

793 
	#BOARD_USART3_BASE
 
USART3


	)

795 
	#BOARD_ID_USART3
 
ID_USART3


	)

797 
	#CONSOLE_UART
 
UART


	)

798 
	#CONSOLE_UART_ID
 
ID_UART


	)

	@/home/vaje/Documents/vaja9/asf/sam/boards/arduino_due_x/debug_scripts/gcc/arduino_due_x_flash.gdb

2 #
#C⁄√˘ 
to
 
J
-
Lök
 
™d
 
debug
 
≠∂iˇti⁄
 
ö
 
Êash
 
⁄
 
SAM3X
.

6 #Deföê'ª£t' 
comm™d


7 
deföe
 
	gª£t


9 #C⁄√˘ 
to
 
the
 
J
-
Lök
 
gdb
 
£rvî


10 
èrgë
 
ªmŸe
 
	gloˇlho°
:2331

12 #Re£à
the
 
chù
 
to
 
gë
Åÿ
a
 
known
 
°©e


13 
m⁄ô‹
 
ª£t


15 #Sñe˘ 
Êash
 
devi˚


16 
m⁄ô‹
 
Êash
 
devi˚
 = 
AT91SAM3X8E


18 #E«bÀ 
Êash
 
dow∆ﬂd
 
™d
 fœsh 
bªakpoöts


19 
m⁄ô‹
 
Êash
 
dow∆ﬂd
 = 1

21 #Lﬂd 
the
 
¥ogøm


22 
lﬂd


24 #Re£à
≥rùhîÆ
 (
RSTC_CR
)

25 
£t
 *0x400e1a00 = 0xA5000004

27 #Inôülizê
PC
 
™d
 
°ack
 
poöãr


28 
m⁄
 
ªg
 
•
=(0x80000)

30 
m⁄
 
ªg
 
pc
=(0x80004)

32 
öfo
 
ªg


34 #End 
of
 'ª£t' 
comm™d


35 
íd


	@/home/vaje/Documents/vaja9/asf/sam/boards/arduino_due_x/debug_scripts/gcc/arduino_due_x_sram.gdb

2 #
#C⁄√˘ 
to
 
J
-
Lök
 
™d
 
debug
 
≠∂iˇti⁄
 
ö
 
§am
 
⁄
 
SAM3X
.

6 #Deföê'ª£t' 
comm™d


7 
deföe
 
	gª£t


9 #C⁄√˘ 
to
 
the
 
J
-
Lök
 
gdb
 
£rvî


10 
èrgë
 
ªmŸe
 
	gloˇlho°
:2331

12 #Re£à
the
 
chù
 
to
 
gë
Åÿ
a
 
known
 
°©e


13 
m⁄ô‹
 
ª£t


15 #Sñe˘ 
Êash
 
devi˚


16 
m⁄ô‹
 
Êash
 
devi˚
 = 
AT91SAM3X8E


18 #E«bÀ 
Êash
 
dow∆ﬂd
 
™d
 fœsh 
bªakpoöts


19 
m⁄ô‹
 
Êash
 
dow∆ﬂd
 = 1

21 #Lﬂd 
the
 
¥ogøm


22 
lﬂd


24 #Re£à
≥rùhîÆ
 (
RSTC_CR
)

25 
£t
 *0x400e1a00 = 0xA5000004

27 #Inôülizê
PC
 
™d
 
°ack
 
poöãr


28 
m⁄
 
ªg
 
•
=(0x20000000)

30 
m⁄
 
ªg
 
pc
=(0x20000004)

32 
öfo
 
ªg


34 #End 
of
 'ª£t' 
comm™d


35 
íd


	@/home/vaje/Documents/vaja9/asf/sam/boards/arduino_due_x/init.c

47 
	~"compûî.h
"

48 
	~"bﬂrd.h
"

49 
	~"c⁄f_bﬂrd.h
"

50 
	~"gpio.h
"

51 
	~"i›‹t.h
"

53 
	$bﬂrd_öô
()

55 #i‚de‡
CONF_BOARD_KEEP_WATCHDOG_AT_INIT


57 
WDT
->
WDT_MR
 = 
WDT_MR_WDDIS
;

64 
	`i›‹t_öô
();

66 
	`gpio_c⁄figuª_pö
(
LED0_GPIO
, 
LED0_FLAGS
);

67 
	`gpio_c⁄figuª_pö
(
LED1_GPIO
, 
LED1_FLAGS
);

68 
	`gpio_c⁄figuª_pö
(
LED2_GPIO
, 
LED2_FLAGS
);

71 
	`gpio_c⁄figuª_pö
(
GPIO_PUSH_BUTTON_1
, 
GPIO_PUSH_BUTTON_1_FLAGS
);

72 
	`gpio_c⁄figuª_pö
(
GPIO_PUSH_BUTTON_2
, 
GPIO_PUSH_BUTTON_2_FLAGS
);

74 #ifde‡
CONF_BOARD_UART_CONSOLE


76 
	`gpio_c⁄figuª_group
(
PINS_UART_PIO
, 
PINS_UART
, 
PINS_UART_FLAGS
);

80 #ifde‡
CONF_BOARD_ADC


82 
	`gpio_c⁄figuª_pö
(
PIN_TC0_TIOA0
,
PIN_TC0_TIOA0_FLAGS
);

85 
	`gpio_c⁄figuª_pö
(
PINS_ADC_TRIG
, 
PINS_ADC_TRIG_FLAG
);

88 
	`gpio_c⁄figuª_pö
(
PIN_PWMC_PWMH0_TRIG
, 
PIN_PWMC_PWMH0_TRIG_FLAG
);

91 #ifde‡
CONF_BOARD_PWM_LED0


93 
	`gpio_c⁄figuª_pö
(
PIN_PWM_LED0_GPIO
, 
PIN_PWM_LED0_FLAGS
);

96 #ifde‡
CONF_BOARD_PWM_LED1


98 
	`gpio_c⁄figuª_pö
(
PIN_PWM_LED1_GPIO
, 
PIN_PWM_LED1_FLAGS
);

101 #ifde‡
CONF_BOARD_PWM_LED2


103 
	`gpio_c⁄figuª_pö
(
PIN_PWM_LED2_GPIO
, 
PIN_PWM_LED2_FLAGS
);

107 #ifde‡
CONF_BOARD_SPI0


108 
	`gpio_c⁄figuª_pö
(
SPI0_MISO_GPIO
, 
SPI0_MISO_FLAGS
);

109 
	`gpio_c⁄figuª_pö
(
SPI0_MOSI_GPIO
, 
SPI0_MOSI_FLAGS
);

110 
	`gpio_c⁄figuª_pö
(
SPI0_SPCK_GPIO
, 
SPI0_SPCK_FLAGS
);

122 #ifde‡
CONF_BOARD_SPI0_NPCS0


123 
	`gpio_c⁄figuª_pö
(
SPI0_NPCS0_GPIO
, 
SPI0_NPCS0_FLAGS
);

126 #ifde‡
CONF_BOARD_SPI0_NPCS1


127 
	`gpio_c⁄figuª_pö
(
SPI0_NPCS1_PA29_GPIO
,
SPI0_NPCS1_PA29_FLAGS
);

132 #ifde‡
CONF_BOARD_SPI1


133 
	`gpio_c⁄figuª_pö
(
SPI1_MISO_GPIO
, 
SPI1_MISO_FLAGS
);

134 
	`gpio_c⁄figuª_pö
(
SPI1_MOSI_GPIO
, 
SPI1_MOSI_FLAGS
);

135 
	`gpio_c⁄figuª_pö
(
SPI1_SPCK_GPIO
, 
SPI1_SPCK_FLAGS
);

137 #ifde‡
CONF_BOARD_SPI1_NPCS0


138 
	`gpio_c⁄figuª_pö
(
SPI1_NPCS0_GPIO
, 
SPI1_NPCS0_FLAGS
);

141 #ifde‡
CONF_BOARD_SPI1_NPCS1


142 
	`gpio_c⁄figuª_pö
(
SPI1_NPCS1_GPIO
, 
SPI1_NPCS1_FLAGS
);

145 #ifde‡
CONF_BOARD_SPI1_NPCS2


146 
	`gpio_c⁄figuª_pö
(
SPI1_NPCS2_GPIO
, 
SPI1_NPCS2_FLAGS
);

149 #ifde‡
CONF_BOARD_SPI1_NPCS3


150 
	`gpio_c⁄figuª_pö
(
SPI1_NPCS3_GPIO
, 
SPI1_NPCS3_FLAGS
);

154 #ifde‡
CONF_BOARD_TWI0


155 
	`gpio_c⁄figuª_pö
(
TWI0_DATA_GPIO
, 
TWI0_DATA_FLAGS
);

156 
	`gpio_c⁄figuª_pö
(
TWI0_CLK_GPIO
, 
TWI0_CLK_FLAGS
);

159 #ifde‡
CONF_BOARD_TWI1


160 
	`gpio_c⁄figuª_pö
(
TWI1_DATA_GPIO
, 
TWI1_DATA_FLAGS
);

161 
	`gpio_c⁄figuª_pö
(
TWI1_CLK_GPIO
, 
TWI1_CLK_FLAGS
);

164 #ifde‡
CONF_BOARD_USART_RXD


166 
	`gpio_c⁄figuª_pö
(
PIN_USART0_RXD_IDX
, 
PIN_USART0_RXD_FLAGS
);

169 #ifde‡
CONF_BOARD_USART_TXD


171 
	`gpio_c⁄figuª_pö
(
PIN_USART0_TXD_IDX
, 
PIN_USART0_TXD_FLAGS
);

174 #ifde‡
CONF_BOARD_USB_PORT


176 
	`gpio_c⁄figuª_pö
(
USB_ID_GPIO
, 
USB_ID_FLAGS
);

178 
	`gpio_c⁄figuª_pö
(
USB_VBOF_GPIO
, 
USB_VBOF_FLAGS
);

181 #ifde‡
CONF_BOARD_MMA7341L


183 
	`gpio_c⁄figuª_pö
(
PIN_MMA7341L_MODE
, 
PIN_MMA7341L_MODE_FLAG
);

185 
	`gpio_c⁄figuª_pö
(
PIN_MMA7341L_X_AXIS
, 
PIN_MMA7341L_X_AXIS_FLAG
);

186 
	`gpio_c⁄figuª_pö
(
PIN_MMA7341L_Y_AXIS
, 
PIN_MMA7341L_Y_AXIS_FLAG
);

187 
	`gpio_c⁄figuª_pö
(
PIN_MMA7341L_Z_AXIS
, 
PIN_MMA7341L_Z_AXIS_FLAG
);

190 #ifde‡
CONF_BOARD_ADS7843


192 
	`gpio_c⁄figuª_pö
(
BOARD_ADS7843_IRQ_GPIO
,
BOARD_ADS7843_IRQ_FLAGS
);

193 
	`gpio_c⁄figuª_pö
(
BOARD_ADS7843_BUSY_GPIO
, 
BOARD_ADS7843_BUSY_FLAGS
);

194 
	`gpio_c⁄figuª_pö
(
SPI0_MISO_GPIO
, 
SPI0_MISO_FLAGS
);

195 
	`gpio_c⁄figuª_pö
(
SPI0_MOSI_GPIO
, 
SPI0_MOSI_FLAGS
);

196 
	`gpio_c⁄figuª_pö
(
SPI0_SPCK_GPIO
, 
SPI0_SPCK_FLAGS
);

197 
	`gpio_c⁄figuª_pö
(
SPI0_NPCS0_GPIO
, 
SPI0_NPCS0_FLAGS
);

199 
	}
}

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc.c

47 
	~"adc.h
"

48 
	~<°©us_codes.h
>

51 #ifde‡
__˝lu•lus


68 #i‡
SAM3S
 || 
SAM4S
 || 
SAM3N
 || 
SAM3XA
 || 
SAM4C
 || 
SAM4CP
 || 
SAM4CM


80 
uöt32_t
 
	$adc_öô
(
Adc
 *
p_adc
, c⁄° 
uöt32_t
 
ul_mck
,

81 c⁄° 
uöt32_t
 
ul_adc_˛ock
, c⁄° 
adc_°¨tup_time
 
°¨tup
)

83 
uöt32_t
 
ul_¥esˇl
;

86 
p_adc
->
ADC_CR
 = 
ADC_CR_SWRST
;

89 
p_adc
->
ADC_MR
 = 0;

92 
p_adc
->
ADC_PTCR
 = (
ADC_PTCR_RXTDIS
 | 
ADC_PTCR_TXTDIS
);

93 
p_adc
->
ADC_RCR
 = 0;

94 
p_adc
->
ADC_RNCR
 = 0;

96 
ul_¥esˇl
 = 
ul_mck
 / (2 * 
ul_adc_˛ock
) - 1;

97 
p_adc
->
ADC_MR
 |
	`ADC_MR_PRESCAL
(
ul_¥esˇl
Ë| 
°¨tup
;

99 
	}
}

100 #ñi‡
SAM3U


114 
uöt32_t
 
	$adc_öô
(
Adc
 *
p_adc
, c⁄° 
uöt32_t
 
ul_mck
, c⁄° uöt32_à
ul_adc_˛ock
,

115 c⁄° 
uöt32_t
 
ul_°¨tu±ime
)

117 
uöt32_t
 
ul_¥esˇl
, 
ul_°¨tup
;

118 
p_adc
->
ADC_CR
 = 
ADC_CR_SWRST
;

121 
p_adc
->
ADC_MR
 = 0;

124 
p_adc
->
ADC_PTCR
 = (
ADC_PTCR_RXTDIS
 | 
ADC_PTCR_TXTDIS
);

125 
p_adc
->
ADC_RCR
 = 0;

126 
p_adc
->
ADC_RNCR
 = 0;

127 
ul_¥esˇl
 = 
ul_mck
 / (2 * 
ul_adc_˛ock
) - 1;

128 
ul_°¨tup
 = ((
ul_adc_˛ock
 / 1000000Ë* 
ul_°¨tu±ime
 / 8) - 1;

129 
p_adc
->
ADC_MR
 |
	`ADC_MR_PRESCAL
(
ul_¥esˇl
) |

130 ((
ul_°¨tup
 << 
ADC_MR_STARTUP_Pos
) &

131 
ADC_MR_STARTUP_Msk
);

133 
	}
}

144 
adc_£t_ªsﬁuti⁄
(
Adc
 *
p_adc
, c⁄° 
adc_ªsﬁuti⁄_t
 
ªsﬁuti⁄
)

146 #i‡
SAM4C
 || 
SAM4CP
 || 
SAM4CM


147 
p_adc
->
ADC_EMR
 &~
ADC_EMR_OSR_Msk
;

148 
ªsﬁuti⁄
) {

149 
ADC_8_BITS
:

150 
p_adc
->
ADC_MR
 |
ADC_MR_LOWRES
;

152 
ADC_10_BITS
:

153 
p_adc
->
ADC_MR
 &~
ADC_MR_LOWRES
;

155 
ADC_11_BITS
:

156 
ADC_12_BITS
:

157 
p_adc
->
ADC_MR
 &~
ADC_MR_LOWRES
;

158 
p_adc
->
ADC_EMR
 |
ªsﬁuti⁄
;

162 
p_adc
->
ADC_MR
 &~
ADC_MR_LOWRES
;

163 
p_adc
->
ADC_MR
 |
ªsﬁuti⁄
;

168 #i‡
SAM3S
 || 
SAM4S
 || 
SAM3N
 || 
SAM3XA
 || 
SAM4C
 || 
SAM4CP
 || 
SAM4CM


178 
adc_c⁄figuª_åiggî
(
Adc
 *
p_adc
, c⁄° 
adc_åiggî_t
 
åiggî
,

179 
uöt8_t
 
uc_‰ìrun
)

181 
p_adc
->
ADC_MR
 |
åiggî
 | ((
uc_‰ìrun
 << 7Ë& 
ADC_MR_FREERUN
);

183 #ñi‡
SAM3U


190 
adc_c⁄figuª_åiggî
(
Adc
 *
p_adc
, c⁄° 
adc_åiggî_t
 
åiggî
)

192 
p_adc
->
ADC_MR
 |
åiggî
;

196 #i‡
SAM3S8
 || 
SAM4S
 || 
SAM3N
 || 
SAM3SD8


208 
adc_c⁄figuª_powî_ßve
(
Adc
 *
p_adc
, c⁄° 
uöt8_t
 
uc_¶ìp
, c⁄° uöt8_à
uc_fwup
)

210 
p_adc
->
ADC_MR
 |(((
uc_¶ìp
 << 5Ë& 
ADC_MR_SLEEP
) |

211 ((
uc_fwup
 << 6Ë& 
ADC_MR_FWUP
));

213 #ñi‡
SAM3U
 || 
SAM4C
 || 
SAM4CP
 || 
SAM4CM


224 
adc_c⁄figuª_powî_ßve
(
Adc
 *
p_adc
, c⁄° 
uöt8_t
 
uc_¶ìp
)

226 
p_adc
->
ADC_MR
 |((
uc_¶ìp
 << 5Ë& 
ADC_MR_SLEEP
);

230 #i‡
SAM3S
 || 
SAM4S
 || 
SAM3N
 || 
SAM3XA
 || 
SAM4C
 || 
SAM4CP
 || 
SAM4CM


238 
adc_c⁄figuª_£quí˚
(
Adc
 *
p_adc
, c⁄° 
adc_ch™√l_num_t
 
ch_li°
[],

239 
uöt8_t
 
uc_num
)

241 
uöt8_t
 
uc_cou¡î
;

242 vﬁ©ûê
uöt32_t
 *
adc_£qr
 = &
p_adc
->
ADC_SEQR1
;

244 i‡(
uc_num
 <= 8) {

245 
uc_cou¡î
 = 0; uc_cou¡î < 
uc_num
; uc_counter++) {

246 
adc_£qr
[0] |=

247 
ch_li°
[
uc_cou¡î
] << (4 * uc_counter);

250 
uc_cou¡î
 = 0; uc_counter < 8; uc_counter++) {

251 
adc_£qr
[0] |=

252 
ch_li°
[
uc_cou¡î
] << (4 * uc_counter);

254 
uc_cou¡î
 = 0; uc_cou¡î < 
uc_num
 - 8; uc_counter++) {

255 
adc_£qr
[1] |=

256 
ch_li°
[8 + 
uc_cou¡î
] << (4 * uc_counter);

262 #i‡
SAM3S
 || 
SAM4S
 || 
SAM3XA


271 
adc_c⁄figuª_timög
(
Adc
 *
p_adc
, c⁄° 
uöt8_t
 
uc_åackög
,

272 c⁄° 
adc_£âlög_time_t
 
£âlög
,c⁄° 
uöt8_t
 
uc_å™s„r
)

274 
p_adc
->
ADC_MR
 |
ADC_MR_TRANSFER
(
uc_å™s„r
)

275 | 
£âlög
 | 
ADC_MR_TRACKTIM
(
uc_åackög
);

277 #ñi‡
SAM3N
 || 
SAM4C
 || 
SAM4CP
 || 
SAM4CM


284 
adc_c⁄figuª_timög
(
Adc
 *
p_adc
, c⁄° 
uöt8_t
 
uc_åackög
)

286 
p_adc
->
ADC_MR
 |
ADC_MR_TRACKTIM
(
uc_åackög
);

288 #ñi‡
SAM3U


295 
adc_c⁄figuª_timög
(
Adc
 *
p_adc
, c⁄° 
uöt32_t
 
ul_sh
)

297 
p_adc
->
ADC_MR
 |
ADC_MR_SHTIM
(
ul_sh
);

301 #i‡
SAM3S
 || 
SAM4S
 || 
SAM3XA


309 
adc_íabÀ_™ch
(
Adc
 *
p_adc
)

311 
p_adc
->
ADC_MR
 |
ADC_MR_ANACH
;

321 
adc_dißbÀ_™ch
(
Adc
 *
p_adc
)

323 
p_adc
->
ADC_MR
 &~
ADC_MR_ANACH
;

336 
adc_°¨t
(
Adc
 *
p_adc
)

338 
p_adc
->
ADC_CR
 = 
ADC_CR_START
;

346 
adc_ª£t
(
Adc
 *
p_adc
)

348 
p_adc
->
ADC_CR
 = 
ADC_CR_SWRST
;

357 
adc_íabÀ_ch™√l
(
Adc
 *
p_adc
, c⁄° 
adc_ch™√l_num_t
 
adc_ch
)

359 
p_adc
->
ADC_CHER
 = 1 << 
adc_ch
;

367 
adc_íabÀ_Æl_ch™√l
(
Adc
 *
p_adc
)

369 #i‡
SAM3S
 || 
SAM4S
 || 
SAM3N
 || 
SAM3XA


370 
p_adc
->
ADC_CHER
 = 0xFFFF;

371 #ñi‡
SAM3U
 || 
SAM4C
 || 
SAM4CP
 || 
SAM4CM


372 
p_adc
->
ADC_CHER
 = 0xFF;

382 
adc_dißbÀ_ch™√l
(
Adc
 *
p_adc
, c⁄° 
adc_ch™√l_num_t
 
adc_ch
)

384 
p_adc
->
ADC_CHDR
 = 1 << 
adc_ch
;

392 
adc_dißbÀ_Æl_ch™√l
(
Adc
 *
p_adc
)

394 #i‡
SAM3S
 || 
SAM4S
 || 
SAM3N
 || 
SAM3XA


395 
p_adc
->
ADC_CHDR
 = 0xFFFF;

396 #ñi‡
SAM3U
 || 
SAM4C
 || 
SAM4CP
 || 
SAM4CM


397 
p_adc
->
ADC_CHDR
 = 0xFF;

410 
uöt32_t
 
adc_gë_ch™√l_°©us
(c⁄° 
Adc
 *
p_adc
, c⁄° 
adc_ch™√l_num_t
 
adc_ch
)

412  
p_adc
->
ADC_CHSR
 & (1 << 
adc_ch
);

423 
uöt32_t
 
adc_gë_ch™√l_vÆue
(c⁄° 
Adc
 *
p_adc
, c⁄° 
adc_ch™√l_num_t
 
adc_ch
)

425 
uöt32_t
 
ul_d©a
 = 0;

427 i‡(15 >
adc_ch
) {

428 
ul_d©a
 = *(
p_adc
->
ADC_CDR
 + 
adc_ch
);

431  
ul_d©a
;

441 
uöt32_t
 
adc_gë_œã°_vÆue
(c⁄° 
Adc
 *
p_adc
)

443  
p_adc
->
ADC_LCDR
;

446 #i‡
SAM3S
 || 
SAM4S
 || 
SAM3N
 || 
SAM3XA
 || 
SAM4C
 || 
SAM4CP
 || 
SAM4CM


453 
adc_íabÀ_èg
(
Adc
 *
p_adc
)

455 
p_adc
->
ADC_EMR
 |
ADC_EMR_TAG
;

463 
adc_dißbÀ_èg
(
Adc
 *
p_adc
)

465 
p_adc
->
ADC_EMR
 &~
ADC_EMR_TAG
;

478 
adc_ch™√l_num_t
 
adc_gë_èg
(c⁄° 
Adc
 *
p_adc
)

480  (
adc_ch™√l_num_t
)

481 ((
p_adc
->
ADC_LCDR
 & 
ADC_LCDR_CHNB_Msk
Ë>> 
ADC_LCDR_CHNB_Pos
);

489 
adc_°¨t_£quí˚r
(
Adc
 *
p_adc
)

491 
p_adc
->
ADC_MR
 |
ADC_MR_USEQ
;

499 
adc_°›_£quí˚r
(
Adc
 *
p_adc
)

501 
p_adc
->
ADC_MR
 &~
ADC_MR_USEQ
;

510 
adc_£t_com∑ris⁄_mode
(
Adc
 *
p_adc
, c⁄° 
uöt8_t
 
uc_mode
)

512 
p_adc
->
ADC_EMR
 &(
uöt32_t
Ë~ (
ADC_EMR_CMPMODE_Msk
);

513 
p_adc
->
ADC_EMR
 |(
uc_mode
 & 
ADC_EMR_CMPMODE_Msk
);

523 
uöt32_t
 
adc_gë_com∑ris⁄_mode
(c⁄° 
Adc
 *
p_adc
)

525  
p_adc
->
ADC_EMR
 & 
ADC_EMR_CMPMODE_Msk
;

535 
adc_£t_com∑ris⁄_wödow
(
Adc
 *
p_adc
, c⁄° 
uöt16_t
 
us_low_thªshﬁd
,

536 c⁄° 
uöt16_t
 
us_high_thªshﬁd
)

538 
p_adc
->
ADC_CWR
 = 
ADC_CWR_LOWTHRES
(
us_low_thªshﬁd
) |

539 
ADC_CWR_HIGHTHRES
(
us_high_thªshﬁd
);

548 
adc_£t_com∑ris⁄_ch™√l
(
Adc
 *
p_adc
, c⁄° 
adc_ch™√l_num_t
 
ch™√l
)

550 i‡(
ch™√l
 < 16) {

551 
p_adc
->
ADC_EMR
 &(
uöt32_t
Ë~ (
ADC_EMR_CMPALL
);

552 
p_adc
->
ADC_EMR
 &(
uöt32_t
Ë~ (
ADC_EMR_CMPSEL_Msk
);

553 
p_adc
->
ADC_EMR
 |(
ch™√l
 << 
ADC_EMR_CMPSEL_Pos
);

555 
p_adc
->
ADC_EMR
 |
ADC_EMR_CMPALL
;

560 #i‡
SAM3S
 || 
SAM4S
 || 
SAM3XA


567 
adc_íabÀ_ch™√l_dif„ª¡ül_öput
(
Adc
 *
p_adc
, c⁄° 
adc_ch™√l_num_t
 
ch™√l
)

569 
p_adc
->
ADC_COR
 |0x01u << (16 + 
ch™√l
);

578 
adc_dißbÀ_ch™√l_dif„ª¡ül_öput
(
Adc
 *
p_adc
, c⁄° 
adc_ch™√l_num_t
 
ch™√l
)

580 
uöt32_t
 
ul_ãmp
;

581 
ul_ãmp
 = 
p_adc
->
ADC_COR
;

582 
p_adc
->
ADC_COR
 &0xff„ffffu << 
ch™√l
;

583 
p_adc
->
ADC_COR
 |
ul_ãmp
;

592 
adc_íabÀ_ch™√l_öput_off£t
(
Adc
 *
p_adc
, c⁄° 
adc_ch™√l_num_t
 
ch™√l
)

594 
p_adc
->
ADC_COR
 |0x01u << 
ch™√l
;

603 
adc_dißbÀ_ch™√l_öput_off£t
(
Adc
 *
p_adc
, c⁄° 
adc_ch™√l_num_t
 
ch™√l
)

605 
uöt32_t
 
ul_ãmp
;

606 
ul_ãmp
 = 
p_adc
->
ADC_COR
;

607 
p_adc
->
ADC_COR
 &(0xffffff„u << 
ch™√l
);

608 
p_adc
->
ADC_COR
 |
ul_ãmp
;

618 
adc_£t_ch™√l_öput_gaö
(
Adc
 *
p_adc
, c⁄° 
adc_ch™√l_num_t
 
ch™√l
,

619 c⁄° 
adc_gaövÆue_t
 
gaö
)

621 
p_adc
->
ADC_CGR
 |(0x03u << (2 * 
ch™√l
)Ë& (
gaö
 << (2 * channel));

625 #i‡
SAM3S8
 || 
SAM3SD8
 || 
SAM4S


631 
adc_£t_ˇlibmode
(
Adc
 * 
p_adc
)

633 
p_adc
->
ADC_CR
 |
ADC_CR_AUTOCAL
;

645 
uöt32_t
 
adc_gë_a˘uÆ_adc_˛ock
(c⁄° 
Adc
 *
p_adc
, c⁄° uöt32_à
ul_mck
)

647 
uöt32_t
 
ul_adc‰eq
;

648 
uöt32_t
 
ul_¥esˇl
;

651 
ul_¥esˇl
 = ((
p_adc
->
ADC_MR
 & 
ADC_MR_PRESCAL_Msk
Ë>> 
ADC_MR_PRESCAL_Pos
);

652 
ul_adc‰eq
 = 
ul_mck
 / ((
ul_¥esˇl
 + 1) * 2);

653  
ul_adc‰eq
;

662 
adc_íabÀ_öãºu±
(
Adc
 *
p_adc
, c⁄° 
uöt32_t
 
ul_sour˚
)

664 
p_adc
->
ADC_IER
 = 
ul_sour˚
;

673 
adc_dißbÀ_öãºu±
(
Adc
 *
p_adc
, c⁄° 
uöt32_t
 
ul_sour˚
)

675 
p_adc
->
ADC_IDR
 = 
ul_sour˚
;

678 #i‡
SAM3S
 || 
SAM4S
 || 
SAM3N
 || 
SAM3XA
 || 
SAM4C
 || 
SAM4CP
 || 
SAM4CM


686 
uöt32_t
 
adc_gë_°©us
(c⁄° 
Adc
 *
p_adc
)

688  
p_adc
->
ADC_ISR
;

698 
uöt32_t
 
adc_gë_ovîrun_°©us
(c⁄° 
Adc
 *
p_adc
)

700  
p_adc
->
ADC_OVER
;

702 #ñi‡
SAM3U


710 
uöt32_t
 
adc_gë_°©us
(c⁄° 
Adc
 *
p_adc
)

712  
p_adc
->
ADC_SR
;

723 
uöt32_t
 
adc_gë_öãºu±_mask
(c⁄° 
Adc
 *
p_adc
)

725  
p_adc
->
ADC_IMR
;

728 #i‡
SAM3S
 || 
SAM4S
 || 
SAM3XA


738 
adc_£t_büs_cuºít
(
Adc
 *
p_adc
, c⁄° 
uöt8_t
 
uc_ib˘l
)

740 
p_adc
->
ADC_ACR
 |
ADC_ACR_IBCTL
(
uc_ib˘l
);

748 
adc_íabÀ_ts
(
Adc
 *
p_adc
)

750 
p_adc
->
ADC_ACR
 |
ADC_ACR_TSON
;

758 
adc_dißbÀ_ts
(
Adc
 *
p_adc
)

760 
p_adc
->
ADC_ACR
 &~
ADC_ACR_TSON
;

764 #i‡
SAM3S
 || 
SAM4S
 || 
SAM3N
 || 
SAM3XA
 || 
SAM4C
 || 
SAM4CP
 || 
SAM4CM


765 #i‚de‡
ADC_WPMR_WPKEY_PASSWD


766 
	#ADC_WPMR_WPKEY_PASSWD
 
	`ADC_WPMR_WPKEY
(0x414443u)

	)

774 
adc_£t_wrôïrŸe˘
(
Adc
 *
p_adc
, c⁄° 
uöt32_t
 
ul_íabÀ
)

776 
p_adc
->
ADC_WPMR
 = 
ADC_WPMR_WPKEY_PASSWD
 | (
ul_íabÀ
 & 
ADC_WPMR_WPEN
);

787 
uöt32_t
 
adc_gë_wrôïrŸe˘_°©us
(c⁄° 
Adc
 *
p_adc
)

789 
uöt32_t
 
ªg_vÆue
;

791 
ªg_vÆue
 = 
p_adc
->
ADC_WPSR
;

792 i‡(
ªg_vÆue
 & 
ADC_WPSR_WPVS
) {

793  (
ªg_vÆue
 & 
ADC_WPSR_WPVSRC_Msk
Ë>> 
ADC_WPSR_WPVSRC_Pos
;

802 
uöt32_t
 
ˇlcul_°¨tup
(c⁄° uöt32_à
ul_°¨tup
)

804 
uöt32_t
 
ul_°¨tup_vÆue
 = 0;

806 i‡(
ul_°¨tup
 == 0)

807 
ul_°¨tup_vÆue
 = 0;

808 i‡(
ul_°¨tup
 == 1)

809 
ul_°¨tup_vÆue
 = 8;

810 i‡(
ul_°¨tup
 == 2)

811 
ul_°¨tup_vÆue
 = 16;

812 i‡(
ul_°¨tup
 == 3)

813 
ul_°¨tup_vÆue
 = 24;

814 i‡(
ul_°¨tup
 == 4)

815 
ul_°¨tup_vÆue
 = 64;

816 i‡(
ul_°¨tup
 == 5)

817 
ul_°¨tup_vÆue
 = 80;

818 i‡(
ul_°¨tup
 == 6)

819 
ul_°¨tup_vÆue
 = 96;

820 i‡(
ul_°¨tup
 == 7)

821 
ul_°¨tup_vÆue
 = 112;

822 i‡(
ul_°¨tup
 == 8)

823 
ul_°¨tup_vÆue
 = 512;

824 i‡(
ul_°¨tup
 == 9)

825 
ul_°¨tup_vÆue
 = 576;

826 i‡(
ul_°¨tup
 == 10)

827 
ul_°¨tup_vÆue
 = 640;

828 i‡(
ul_°¨tup
 == 11)

829 
ul_°¨tup_vÆue
 = 704;

830 i‡(
ul_°¨tup
 == 12)

831 
ul_°¨tup_vÆue
 = 768;

832 i‡(
ul_°¨tup
 == 13)

833 
ul_°¨tup_vÆue
 = 832;

834 i‡(
ul_°¨tup
 == 14)

835 
ul_°¨tup_vÆue
 = 896;

836 i‡(
ul_°¨tup
 == 15)

837 
ul_°¨tup_vÆue
 = 960;

839  
ul_°¨tup_vÆue
;

848 
adc_check
(
Adc
 *
p_adc
, c⁄° 
uöt32_t
 
ul_mck
)

850 
uöt32_t
 
ul_adc‰eq
;

851 
uöt32_t
 
ul_¥esˇl
;

852 
uöt32_t
 
ul_°¨tup
;

855 
ul_¥esˇl
 = ((
p_adc
->
ADC_MR
 & 
ADC_MR_PRESCAL_Msk
) >>

856 
ADC_MR_PRESCAL_Pos
);

857 
ul_adc‰eq
 = 
ul_mck
 / ((
ul_¥esˇl
 + 1) * 2);

858 
¥ötf
("ADC clock fªquícy = %d Hz\r\n", ()
ul_adc‰eq
);

860 i‡(
ul_adc‰eq
 < 
ADC_FREQ_MIN
) {

861 
¥ötf
("adc frequencyÅooÜow (out of specification: %d Hz)\r\n",

862 ()
ADC_FREQ_MIN
);

864 i‡(
ul_adc‰eq
 > 
ADC_FREQ_MAX
) {

865 
¥ötf
("adc frequencyÅoo high (out of specification: %d Hz)\r\n",

866 ()
ADC_FREQ_MAX
);

869 
ul_°¨tup
 = ((
p_adc
->
ADC_MR
 & 
ADC_MR_STARTUP_Msk
) >>

870 
ADC_MR_STARTUP_Pos
);

871 i‡(!(
p_adc
->
ADC_MR
 & 
ADC_MR_SLEEP_SLEEP
)) {

873 i‡(
ADC_STARTUP_NORM
 * 
ul_adc‰eq
 / 1000000 >

874 
ˇlcul_°¨tup
(
ul_°¨tup
)) {

875 
¥ötf
("StartupÅimeÅoo small: %d,Örogrammed: %d\r\n",

876 ()(
ADC_STARTUP_NORM
 * 
ul_adc‰eq
 /

878 ()
ˇlcul_°¨tup
(
ul_°¨tup
));

881 i‡(
p_adc
->
ADC_MR
 & 
ADC_MR_FREERUN_ON
) {

882 
puts
("FreeRun forbidden in sleep mode\r");

884 #i‡!
SAM4C
 && !
SAM4CP
 && !
SAM4CM


885 i‡(!(
p_adc
->
ADC_MR
 & 
ADC_MR_FWUP_ON
)) {

887 i‡(
ADC_STARTUP_NORM
 * 
ul_adc‰eq
 / 1000000 >

888 
ˇlcul_°¨tup
(
ul_°¨tup
)) {

889 
¥ötf
("StartupÅimeÅoo small: %d,Örogrammed: %d\r\n",

890 ()(
ADC_STARTUP_NORM
 * 
ul_adc‰eq
 / 1000000),

891 ()(
ˇlcul_°¨tup
(
ul_°¨tup
)));

894 i‡(
p_adc
->
ADC_MR
 & 
ADC_MR_FWUP_ON
) {

896 i‡(
ADC_STARTUP_FAST
 * 
ul_adc‰eq
 / 1000000 >

897 
ˇlcul_°¨tup
(
ul_°¨tup
)) {

898 
¥ötf
("StartupÅimeÅoo small: %d,Örogrammed: %d\r\n",

899 ()(
ADC_STARTUP_NORM
 * 
ul_adc‰eq
 / 1000000),

900 ()(
ˇlcul_°¨tup
(
ul_°¨tup
)));

916 
Pdc
 *
adc_gë_pdc_ba£
(c⁄° 
Adc
 *
p_adc
)

918 
UNUSED
(
p_adc
);

919  
PDC_ADC
;

922 #i‡
SAM4C
 || 
SAM4CP
 || 
SAM4CM


930 
adc_£t_avîagög_åiggî
(
Adc
 *
p_adc
, 
boﬁ
 
mu…i
)

932 i‡(
mu…i
) {

933 
p_adc
->
ADC_EMR
 &~
ADC_EMR_ASTE
;

935 
p_adc
->
ADC_EMR
 |
ADC_EMR_ASTE
;

946 
adc_£t_com∑ris⁄_fûãr
(
Adc
 *
p_adc
, 
uöt8_t
 
fûãr
)

948 
p_adc
->
ADC_EMR
 &~
ADC_EMR_CMPFILTER_Msk
;

949 
p_adc
->
ADC_EMR
 |
ADC_EMR_CMPFILTER
(
fûãr
);

957 
adc_íabÀ_ts
(
Adc
 *
p_adc
)

959 
p_adc
->
ADC_TEMPMR
 |
ADC_TEMPMR_TEMPON
;

967 
adc_dißbÀ_ts
(
Adc
 *
p_adc
)

969 
p_adc
->
ADC_TEMPMR
 &~
ADC_TEMPMR_TEMPON
;

980 
adc_c⁄figuª_ts_com∑ris⁄
(
Adc
 *
p_adc
, 
adc_ãmp_cmp_mode
 
mode
,

981 
uöt16_t
 
low_thªshﬁd
, uöt16_à
high_thªshﬁd
)

983 
uöt32_t
 
tmp
 = 
p_adc
->
ADC_TEMPMR
;

984 
tmp
 &~
ADC_TEMPMR_TEMPCMPMOD_Msk
;

985 
tmp
 |
mode
;

987 
p_adc
->
ADC_TEMPCWR
 = 
ADC_TEMPCWR_TLOWTHRES
(
low_thªshﬁd
) |

988 
ADC_TEMPCWR_THIGHTHRES
(
high_thªshﬁd
);

989 
p_adc
->
ADC_TEMPMR
 = 
tmp
;

1000 
°©us_code
 
adc_£t_öã∫Æ_ª„ªn˚_vﬁège
(
Adc
 *
p_adc
,

1001 
adc_öã∫Æ_ªf
 *
ªf
)

1003 
uöt32_t
 
tmp
 = 0;

1005 i‡(
ªf
->
adc_f‹˚_öã∫Æ_ªf
 &&Ñef->
adc_öã∫Æ_ªf_⁄
) {

1006  
ERR_INVALID_ARG
;

1008 
tmp
 = (
ªf
->
adc_öã∫Æ_ªf_ch™ge_íabÀ
 ? 
ADC_ACR_IRVCE_SELECTION
 : 0) |

1009 
ADC_ACR_IRVS
(
ªf
->
vﬁt
) |

1010 (
ªf
->
adc_f‹˚_öã∫Æ_ªf
 ? 
ADC_ACR_FORCEREF
 : 0) |

1011 (
ªf
->
adc_öã∫Æ_ªf_⁄
 ? 
ADC_ACR_ONREF
 : 0);

1012 
p_adc
->
ADC_ACR
 = 
tmp
;

1013  
STATUS_OK
;

1021 #ifde‡
__˝lu•lus


	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc.h

47 #i‚de‡
ADC_H_INCLUDED


48 
	#ADC_H_INCLUDED


	)

50 
	~"compûî.h
"

54 #ifde‡
__˝lu•lus


61 #i‡!
SAM4C
 && !
SAM4CP
 && !
SAM4CM


62 
	#ADC_FREQ_MAX
 20000000

	)

64 
	#ADC_FREQ_MAX
 16000000

	)

67 
	#ADC_FREQ_MIN
 1000000

	)

69 
	#ADC_STARTUP_NORM
 40

	)

71 
	#ADC_STARTUP_FAST
 12

	)

74 #i‡
SAM3S
 || 
SAM4S
 || 
SAM3XA


75 
	eadc_ªsﬁuti⁄_t
 {

76 
ADC_10_BITS
 = 
ADC_MR_LOWRES_BITS_10
,

77 
ADC_12_BITS
 = 
ADC_MR_LOWRES_BITS_12


79 #ñi‡
SAM3N


80 
	eadc_ªsﬁuti⁄_t
 {

81 
ADC_8_BITS
 = 
ADC_MR_LOWRES_BITS_8
,

82 
ADC_10_BITS
 = 
ADC_MR_LOWRES_BITS_10


84 #ñi‡
SAM3U


85 
	eadc_ªsﬁuti⁄_t
 {

86 
ADC_8_BITS
 = 
ADC_MR_LOWRES_BITS_8
,

87 
ADC_10_BITS
 = 
ADC12B_MR_LOWRES_BITS_10
,

88 
ADC_12_BITS
 = 
ADC12B_MR_LOWRES_BITS_12


90 #ñi‡
SAM4C
 || 
SAM4CP
 || 
SAM4CM


91 
	eadc_ªsﬁuti⁄_t
 {

92 
ADC_8_BITS
 = 
ADC_MR_LOWRES_BITS_8
,

93 
ADC_10_BITS
 = 
ADC_MR_LOWRES_BITS_10
,

94 
ADC_11_BITS
 = 
ADC_EMR_OSR_OSR4
,

95 
ADC_12_BITS
 = 
ADC_EMR_OSR_OSR16


100 
	eadc_åiggî_t
 {

102 
ADC_TRIG_SW
 = 
ADC_MR_TRGEN_DIS
,

104 
ADC_TRIG_EXT
 = 
ADC_MR_TRGSEL_ADC_TRIG0
 | 
ADC_MR_TRGEN
,

106 
ADC_TRIG_TIO_CH_0
 = 
ADC_MR_TRGSEL_ADC_TRIG1
 | 
ADC_MR_TRGEN
,

108 
ADC_TRIG_TIO_CH_1
 = 
ADC_MR_TRGSEL_ADC_TRIG2
 | 
ADC_MR_TRGEN
,

110 
ADC_TRIG_TIO_CH_2
 = 
ADC_MR_TRGSEL_ADC_TRIG3
 | 
ADC_MR_TRGEN
,

111 #i‡
SAM4C
 || 
SAM4CP
 || 
SAM4CM


113 
ADC_TRIG_TIO_CH_3
 = 
ADC_MR_TRGSEL_ADC_TRIG3
 | 
ADC_MR_TRGEN
,

115 
ADC_TRIG_TIO_CH_4
 = 
ADC_MR_TRGSEL_ADC_TRIG4
 | 
ADC_MR_TRGEN
,

117 
ADC_TRIG_TIO_CH_5
 = 
ADC_MR_TRGSEL_ADC_TRIG5
 | 
ADC_MR_TRGEN
,

119 
ADC_TRIG_TIO_CH_6
 = 
ADC_MR_TRGSEL_ADC_TRIG6
 | 
ADC_MR_TRGEN
,

121 #i‡
SAM3S
 || 
SAM4S
 || 
SAM3XA
 || 
SAM3U


123 
ADC_TRIG_PWM_EVENT_LINE_0
 = 
ADC_MR_TRGSEL_ADC_TRIG4
 | 
ADC_MR_TRGEN
,

125 
ADC_TRIG_PWM_EVENT_LINE_1
 = 
ADC_MR_TRGSEL_ADC_TRIG5
 | 
ADC_MR_TRGEN


129 #i‡
SAM3U


131 
	eadc12b_åiggî_t
 {

133 
ADC12B_TRIG_SW
 = 
ADC12B_MR_TRGEN_DIS
,

135 
ADC12B_TRIG_EXT
 = 
ADC12B_MR_TRGSEL_ADC_TRIG0
 | 
ADC12B_MR_TRGEN
,

137 
ADC12B_TRIG_TIO_CH_0
 = 
ADC12B_MR_TRGSEL_ADC_TRIG1
 | 
ADC12B_MR_TRGEN
,

139 
ADC12B_TRIG_TIO_CH_1
 = 
ADC12B_MR_TRGSEL_ADC_TRIG2
 | 
ADC12B_MR_TRGEN
,

141 
ADC12B_TRIG_TIO_CH_2
 = 
ADC12B_MR_TRGSEL_ADC_TRIG3
 | 
ADC12B_MR_TRGEN
,

143 
ADC12B_TRIG_PWM_EVENT_LINE_0
 = 
ADC12B_MR_TRGSEL_ADC_TRIG4
 | 
ADC12B_MR_TRGEN
,

145 
ADC12B_TRIG_PWM_EVENT_LINE_1
 = 
ADC12B_MR_TRGSEL_ADC_TRIG5
 | 
ADC12B_MR_TRGEN


149 #i‡
SAM3S
 || 
SAM4S
 || 
SAM3N
 || 
SAM3XA
 || 
SAM4C
 || 
SAM4CP
 || 
SAM4CM


151 
	eadc_ch™√l_num_t
 {

152 
ADC_CHANNEL_0
 = 0,

153 
ADC_CHANNEL_1
 = 1,

154 
ADC_CHANNEL_2
 = 2,

155 
ADC_CHANNEL_3
 = 3,

156 
ADC_CHANNEL_4
 = 4,

157 
ADC_CHANNEL_5
 = 5,

158 
ADC_CHANNEL_6
 = 6,

159 #i‡
SAM4C
 || 
SAM4CP
 || 
SAM4CM


160 
ADC_TEMPERATURE_SENSOR
 = 7,

162 
ADC_CHANNEL_7
 = 7,

163 
ADC_CHANNEL_8
 = 8,

164 
ADC_CHANNEL_9
 = 9,

165 
ADC_CHANNEL_10
 = 10,

166 
ADC_CHANNEL_11
 = 11,

167 
ADC_CHANNEL_12
 = 12,

168 
ADC_CHANNEL_13
 = 13,

169 
ADC_CHANNEL_14
 = 14,

170 
ADC_TEMPERATURE_SENSOR
 = 15,

173 #ñi‡
SAM3U


175 
	eadc_ch™√l_num_t
 {

176 
ADC_CHANNEL_0
 = 0,

177 
ADC_CHANNEL_1
 = 1,

178 
ADC_CHANNEL_2
 = 2,

179 
ADC_CHANNEL_3
 = 3,

180 
ADC_CHANNEL_4
 = 4,

181 
ADC_CHANNEL_5
 = 5,

182 
ADC_CHANNEL_6
 = 6,

183 
ADC_CHANNEL_7
 = 7,

186 #i‡!
SAM4C
 && !
SAM4CP
 && !
SAM4CM


188 
	eadc_gaövÆue_t
 {

189 
ADC_GAINVALUE_0
 = 0,

190 
ADC_GAINVALUE_1
 = 1,

191 
ADC_GAINVALUE_2
 = 2,

192 
ADC_GAINVALUE_3
 = 3

196 #i‡
SAM3S
 || 
SAM4S
 || 
SAM3XA


197 
	eadc_£âlög_time_t
 {

198 
ADC_SETTLING_TIME_0
 = 
ADC_MR_SETTLING_AST3
,

199 
ADC_SETTLING_TIME_1
 = 
ADC_MR_SETTLING_AST5
,

200 
ADC_SETTLING_TIME_2
 = 
ADC_MR_SETTLING_AST9
,

201 
ADC_SETTLING_TIME_3
 = 
ADC_MR_SETTLING_AST17


205 #i‡
SAM3S
 || 
SAM4S
 || 
SAM3N
 || 
SAM3XA
 || 
SAM4C
 || 
SAM4CP
 || 
SAM4CM


207 
	eadc_°¨tup_time
 {

208 
ADC_STARTUP_TIME_0
 = 
ADC_MR_STARTUP_SUT0
,

209 
ADC_STARTUP_TIME_1
 = 
ADC_MR_STARTUP_SUT8
,

210 
ADC_STARTUP_TIME_2
 = 
ADC_MR_STARTUP_SUT16
,

211 
ADC_STARTUP_TIME_3
 = 
ADC_MR_STARTUP_SUT24
,

212 
ADC_STARTUP_TIME_4
 = 
ADC_MR_STARTUP_SUT64
,

213 
ADC_STARTUP_TIME_5
 = 
ADC_MR_STARTUP_SUT80
,

214 
ADC_STARTUP_TIME_6
 = 
ADC_MR_STARTUP_SUT96
,

215 
ADC_STARTUP_TIME_7
 = 
ADC_MR_STARTUP_SUT112
,

216 
ADC_STARTUP_TIME_8
 = 
ADC_MR_STARTUP_SUT512
,

217 
ADC_STARTUP_TIME_9
 = 
ADC_MR_STARTUP_SUT576
,

218 
ADC_STARTUP_TIME_10
 = 
ADC_MR_STARTUP_SUT640
,

219 
ADC_STARTUP_TIME_11
 = 
ADC_MR_STARTUP_SUT704
,

220 
ADC_STARTUP_TIME_12
 = 
ADC_MR_STARTUP_SUT768
,

221 
ADC_STARTUP_TIME_13
 = 
ADC_MR_STARTUP_SUT832
,

222 
ADC_STARTUP_TIME_14
 = 
ADC_MR_STARTUP_SUT896
,

223 
ADC_STARTUP_TIME_15
 = 
ADC_MR_STARTUP_SUT960


227 #i‡
SAM3S
 || 
SAM4S
 || 
SAM3N
 || 
SAM3XA
 || 
SAM4C
 || 
SAM4CP
 || 
SAM4CM


228 
uöt32_t
 
adc_öô
(
Adc
 *
p_adc
, c⁄° uöt32_à
ul_mck
,

229 c⁄° 
uöt32_t
 
ul_adc_˛ock
, c⁄° 
adc_°¨tup_time
 
°¨tup
);

230 
adc_c⁄figuª_åiggî
(
Adc
 *
p_adc
, c⁄° 
adc_åiggî_t
 
åiggî
,

231 c⁄° 
uöt8_t
 
uc_‰ìrun
);

232 
adc_c⁄figuª_£quí˚
(
Adc
 *
p_adc
, c⁄° 
adc_ch™√l_num_t
 
ch_li°
[],

233 c⁄° 
uöt8_t
 
uc_num
);

234 
adc_íabÀ_èg
(
Adc
 *
p_adc
);

235 
adc_dißbÀ_èg
(
Adc
 *
p_adc
);

236 
adc_ch™√l_num_t
 
adc_gë_èg
(c⁄° 
Adc
 *
p_adc
);

237 
adc_°¨t_£quí˚r
(
Adc
 *
p_adc
);

238 
adc_°›_£quí˚r
(
Adc
 *
p_adc
);

239 
adc_£t_com∑ris⁄_mode
(
Adc
 *
p_adc
, c⁄° 
uöt8_t
 
uc_mode
);

240 #i‡
SAM4C
 || 
SAM4CP
 || 
SAM4CM


241 
adc_£t_com∑ris⁄_fûãr
(
Adc
 *
p_adc
, 
uöt8_t
 
fûãr
);

243 
uöt32_t
 
adc_gë_com∑ris⁄_mode
(c⁄° 
Adc
 *
p_adc
);

244 
adc_£t_com∑ris⁄_wödow
(
Adc
 *
p_adc
, c⁄° 
uöt16_t
 
us_low_thªshﬁd
,

245 c⁄° 
uöt16_t
 
us_high_thªshﬁd
);

246 
adc_£t_com∑ris⁄_ch™√l
(
Adc
 *
p_adc
,

247 c⁄° 
adc_ch™√l_num_t
 
ch™√l
);

248 
adc_£t_wrôïrŸe˘
(
Adc
 *
p_adc
, c⁄° 
uöt32_t
 
ul_íabÀ
);

249 
uöt32_t
 
adc_gë_wrôïrŸe˘_°©us
(c⁄° 
Adc
 *
p_adc
);

250 
adc_check
(
Adc
* 
p_adc
, c⁄° 
uöt32_t
 
ul_mck
);

251 
uöt32_t
 
adc_gë_ovîrun_°©us
(c⁄° 
Adc
 *
p_adc
);

252 #ñi‡
SAM3U


253 
uöt32_t
 
adc_öô
(
Adc
 * 
p_adc
, c⁄° uöt32_à
ul_mck
, c⁄° uöt32_à
ul_adc_˛ock
,

254 c⁄° 
uöt32_t
 
ul_°¨tu±ime
);

255 
adc_c⁄figuª_åiggî
(
Adc
 *
p_adc
, c⁄° 
adc_åiggî_t
 
åiggî
);

256 
adc_c⁄figuª_powî_ßve
(
Adc
 *
p_adc
, c⁄° 
uöt8_t
 
uc_¶ìp
);

259 #i‡
SAM3S8
 || 
SAM4S
 || 
SAM3N
 || 
SAM3SD8


260 
adc_c⁄figuª_powî_ßve
(
Adc
 *
p_adc
, c⁄° 
uöt8_t
 
uc_¶ìp
,

261 c⁄° 
uöt8_t
 
uc_fwup
);

262 #ñi‡
SAM3U
 || 
SAM4C
 || 
SAM4CP
 || 
SAM4CM


263 
adc_c⁄figuª_powî_ßve
(
Adc
 *
p_adc
, c⁄° 
uöt8_t
 
uc_¶ìp
);

265 
adc_£t_ªsﬁuti⁄
(
Adc
 *
p_adc
, c⁄° 
adc_ªsﬁuti⁄_t
 
ªsﬁuti⁄
);

266 
adc_°¨t
(
Adc
 *
p_adc
);

267 
adc_ª£t
(
Adc
 *
p_adc
);

268 
adc_íabÀ_ch™√l
(
Adc
 *
p_adc
, c⁄° 
adc_ch™√l_num_t
 
adc_ch
);

269 
adc_dißbÀ_ch™√l
(
Adc
 *
p_adc
, c⁄° 
adc_ch™√l_num_t
 
adc_ch
);

270 
adc_íabÀ_Æl_ch™√l
(
Adc
 *
p_adc
);

271 
adc_dißbÀ_Æl_ch™√l
(
Adc
 *
p_adc
);

272 
uöt32_t
 
adc_gë_ch™√l_°©us
(c⁄° 
Adc
 *
p_adc
, c⁄° 
adc_ch™√l_num_t
 
adc_ch
);

273 
uöt32_t
 
adc_gë_ch™√l_vÆue
(c⁄° 
Adc
 *
p_adc
,c⁄° 
adc_ch™√l_num_t
 
adc_ch
);

274 
uöt32_t
 
adc_gë_œã°_vÆue
(c⁄° 
Adc
 *
p_adc
);

275 
uöt32_t
 
adc_gë_a˘uÆ_adc_˛ock
(c⁄° 
Adc
 *
p_adc
, c⁄° uöt32_à
ul_mck
);

276 
adc_íabÀ_öãºu±
(
Adc
 *
p_adc
, c⁄° 
uöt32_t
 
ul_sour˚
);

277 
adc_dißbÀ_öãºu±
(
Adc
 *
p_adc
, c⁄° 
uöt32_t
 
ul_sour˚
);

278 
uöt32_t
 
adc_gë_°©us
(c⁄° 
Adc
 *
p_adc
);

279 
uöt32_t
 
adc_gë_öãºu±_mask
(c⁄° 
Adc
 *
p_adc
);

280 
Pdc
 *
adc_gë_pdc_ba£
(c⁄° 
Adc
 *
p_adc
);

282 #i‡
SAM3S
 || 
SAM4S
 || 
SAM3XA


283 
adc_c⁄figuª_timög
(
Adc
 *
p_adc
, c⁄° 
uöt8_t
 
uc_åackög
,

284 c⁄° 
adc_£âlög_time_t
 
£âlög
, c⁄° 
uöt8_t
 
uc_å™s„r
);

285 
adc_íabÀ_™ch
–
Adc
 *
p_adc
 );

286 
adc_dißbÀ_™ch
–
Adc
 *
p_adc
 );

287 
adc_íabÀ_ch™√l_dif„ª¡ül_öput
(
Adc
 *
p_adc
, c⁄° 
adc_ch™√l_num_t
 
ch™√l
);

288 
adc_dißbÀ_ch™√l_dif„ª¡ül_öput
(
Adc
 *
p_adc
, c⁄° 
adc_ch™√l_num_t
 
ch™√l
);

289 
adc_íabÀ_ch™√l_öput_off£t
(
Adc
 *
p_adc
, c⁄° 
adc_ch™√l_num_t
 
ch™√l
);

290 
adc_dißbÀ_ch™√l_öput_off£t
(
Adc
 *
p_adc
, c⁄° 
adc_ch™√l_num_t
 
ch™√l
);

291 
adc_£t_ch™√l_öput_gaö
(
Adc
 *
p_adc
, c⁄° 
adc_ch™√l_num_t
 
ch™√l
,

292 c⁄° 
adc_gaövÆue_t
 
uc_gaö
);

293 
adc_£t_büs_cuºít
(
Adc
 *
p_adc
, c⁄° 
uöt8_t
 
uc_ib˘l
);

294 #ñi‡
SAM3N
 || 
SAM4C
 || 
SAM4CP
 || 
SAM4CM


295 
adc_c⁄figuª_timög
(
Adc
 *
p_adc
, c⁄° 
uöt8_t
 
uc_åackög
);

296 #ñi‡
SAM3U


297 
adc_c⁄figuª_timög
(
Adc
 *
p_adc
, c⁄° 
uöt32_t
 
ul_sh
);

300 #i‡
SAM3S
 || 
SAM4S
 || 
SAM3XA
 || 
SAM4C
 || 
SAM4CP
 || 
SAM4CM


301 
adc_íabÀ_ts
(
Adc
 *
p_adc
);

302 
adc_dißbÀ_ts
(
Adc
 *
p_adc
);

303 #i‡
SAM4C
 || 
SAM4CP
 || 
SAM4CM


305 
	eadc_ãmp_cmp_mode
 {

306 
ADC_TEMP_CMP_MODE_0
 = 
ADC_TEMPMR_TEMPCMPMOD_LOW
,

307 
ADC_TEMP_CMP_MODE_1
 = 
ADC_TEMPMR_TEMPCMPMOD_HIGH
,

308 
ADC_TEMP_CMP_MODE_2
 = 
ADC_TEMPMR_TEMPCMPMOD_IN
,

309 
ADC_TEMP_CMP_MODE_3
 = 
ADC_TEMPMR_TEMPCMPMOD_OUT


311 
adc_c⁄figuª_ts_com∑ris⁄
(
Adc
 *
p_adc
, 
adc_ãmp_cmp_mode
 
mode
,

312 
uöt16_t
 
low_thªshﬁd
, uöt16_à
high_thªshﬁd
);

316 #i‡ 
SAM3S8
 || 
SAM3SD8
 || 
SAM4S


317 
adc_£t_ˇlibmode
(
Adc
 *
p_adc
);

320 #i‡
SAM4C
 || 
SAM4CP
 | 
SAM4CM


321 
adc_£t_avîagög_åiggî
(
Adc
 *
p_adc
, 
boﬁ
 
mu…i
);

322 
	eadc_öã∫Æ_ªf_vﬁège
 {

323 
ADC_INTERNAL_REF_2426MV
 = 0,

324 
ADC_INTERNAL_REF_2305MV
,

325 
ADC_INTERNAL_REF_2184MV
,

326 
ADC_INTERNAL_REF_2063MV
,

327 
ADC_INTERNAL_REF_1941MV
,

328 
ADC_INTERNAL_REF_1820MV
,

329 
ADC_INTERNAL_REF_1699MV
,

330 
ADC_INTERNAL_REF_1578MV
,

331 
ADC_INTERNAL_REF_3396MV
,

332 
ADC_INTERNAL_REF_3275MV
,

333 
ADC_INTERNAL_REF_3154MV
,

334 
ADC_INTERNAL_REF_3032MV
,

335 
ADC_INTERNAL_REF_2911MV
,

336 
ADC_INTERNAL_REF_2790MV
,

337 
ADC_INTERNAL_REF_2699MV
,

338 
ADC_INTERNAL_REF_2547MV
,

340 
	sadc_öã∫Æ_ªf
 {

341 
boﬁ
 
adc_öã∫Æ_ªf_ch™ge_íabÀ
;

342 
adc_öã∫Æ_ªf_vﬁège
 
vﬁt
;

343 
boﬁ
 
adc_f‹˚_öã∫Æ_ªf
;

344 
boﬁ
 
adc_öã∫Æ_ªf_⁄
;

346 
°©us_code
 
adc_£t_öã∫Æ_ª„ªn˚_vﬁège
(
Adc
 *
p_adc
,

347 
adc_öã∫Æ_ªf
 *
ªf
);

350 #i‡
SAM3U


351 
uöt32_t
 
adc12b_öô
(
Adc12b
 *
p_adc
, c⁄° uöt32_à
ul_mck
, c⁄° uöt32_à
ul_adc_˛ock
,

352 c⁄° 
uöt32_t
 
ul_°¨tu±ime
, c⁄° uöt32_à
ul_offmode_°¨tu±ime
);

353 
adc12b_£t_ªsﬁuti⁄
(
Adc12b
 *
p_adc
, c⁄° 
adc_ªsﬁuti⁄_t
 
ªsﬁuti⁄
);

354 
adc12b_c⁄figuª_åiggî
(
Adc12b
 *
p_adc
, c⁄° 
adc12b_åiggî_t
 
åiggî
);

355 
adc12b_c⁄figuª_powî_ßve
(
Adc12b
 *
p_adc
, c⁄° 
uöt8_t
 
uc_¶ìp
,

356 c⁄° 
uöt8_t
 
uc_offmode
);

357 
adc12b_c⁄figuª_timög
(
Adc12b
 *
p_adc
, c⁄° 
uöt32_t
 
ul_sh
);

358 
adc12b_°¨t
(
Adc12b
 *
p_adc
);

359 
adc12b_ª£t
(
Adc12b
 *
p_adc
);

360 
adc12b_íabÀ_ch™√l
(
Adc12b
 *
p_adc
, c⁄° 
adc_ch™√l_num_t
 
adc_ch
);

361 
adc12b_dißbÀ_ch™√l
(
Adc12b
 *
p_adc
, c⁄° 
adc_ch™√l_num_t
 
adc_ch
);

362 
adc12b_íabÀ_Æl_ch™√l
(
Adc12b
 *
p_adc
);

363 
adc12b_dißbÀ_Æl_ch™√l
(
Adc12b
 *
p_adc
);

364 
uöt32_t
 
adc12b_gë_ch™√l_°©us
(c⁄° 
Adc12b
 *
p_adc
,c⁄° 
adc_ch™√l_num_t
 
adc_ch
);

365 
uöt32_t
 
adc12b_gë_ch™√l_vÆue
(c⁄° 
Adc12b
 *
p_adc
, c⁄° 
adc_ch™√l_num_t
 
adc_ch
);

366 
uöt32_t
 
adc12b_gë_œã°_vÆue
(c⁄° 
Adc12b
 *
p_adc
);

367 
adc12b_íabÀ_dif„ª¡ül_öput
(
Adc12b
 *
p_adc
);

368 
adc12b_dißbÀ_dif„ª¡ül_öput
(
Adc12b
 *
p_adc
);

369 
adc12b_íabÀ_öput_off£t
(
Adc12b
 *
p_adc
);

370 
adc12b_dißbÀ_öput_off£t
(
Adc12b
 *
p_adc
);

371 
adc12b_£t_öput_gaö
(
Adc12b
 *
p_adc
, c⁄° 
adc_gaövÆue_t
 
uc_gaö
);

372 
uöt32_t
 
adc12b_gë_a˘uÆ_adc_˛ock
(c⁄° 
Adc12b
 *
p_adc
, c⁄° uöt32_à
ul_mck
);

373 
adc12b_íabÀ_öãºu±
(
Adc12b
 *
p_adc
, c⁄° 
uöt32_t
 
ul_sour˚
);

374 
adc12b_dißbÀ_öãºu±
(
Adc12b
 *
p_adc
, c⁄° 
uöt32_t
 
ul_sour˚
);

375 
uöt32_t
 
adc12b_gë_öãºu±_mask
(c⁄° 
Adc12b
 *
p_adc
);

376 
uöt32_t
 
adc12b_gë_°©us
(c⁄° 
Adc12b
 *
p_adc
);

377 
adc12b_£t_büs_cuºít
(
Adc12b
 *
p_adc
, c⁄° 
uöt8_t
 
uc_ib˘l
);

378 
Pdc
 *
adc12b_gë_pdc_ba£
(c⁄° 
Adc12b
 *
p_adc
);

383 #ifde‡
__˝lu•lus


	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc2.c

47 
	~"adc2.h
"

48 
	~"¶ìpmgr.h
"

49 
	~"°©us_codes.h
"

50 
	~"sys˛k.h
"

51 
	~"pmc.h
"

65 
	#ADC_SEQ1_CHANNEL_NUM
 (8UL)

	)

68 
	#ADC_NUM_OF_INTERRUPT_SOURCE
 (24UL)

	)

71 c⁄° 
uöt32_t
 
	gadc_öãºu±_mask
[
ADC_NUM_OF_INTERRUPT_SOURCE
] = {

72 
ADC_ISR_EOC0
, 
ADC_ISR_EOC1
, 
ADC_ISR_EOC2
, 
ADC_ISR_EOC3
,

73 
ADC_ISR_EOC4
, 
ADC_ISR_EOC5
, 
ADC_ISR_EOC6
, 
ADC_ISR_EOC7
,

74 #i‡(
SAM4N
)

75 
ADC_ISR_EOC8
, 
ADC_ISR_EOC9
, 
ADC_ISR_EOC10
, 
ADC_ISR_EOC11
,

76 
ADC_ISR_EOC12
, 
ADC_ISR_EOC13
, 
ADC_ISR_EOC14
, 
ADC_ISR_EOC15
,

77 
ADC_ISR_EOC16
,

79 #ifde‡
TEMP_SENSOR


80 
ADC_ISR_TEMPCHG
,

82 
ADC_ISR_EOCAL
, 
ADC_ISR_DRDY
,

83 
ADC_ISR_GOVRE
, 
ADC_ISR_COMPE
, 
ADC_ISR_ENDRX
, 
ADC_ISR_RXBUFF
,

86 
adc_ˇŒback_t
 
	gadc_ˇŒback_poöãr
[
ADC_NUM_OF_INTERRUPT_SOURCE
];

106 
	$adc_gë_c⁄fig_deÁu…s
(
adc_c⁄fig
 *c⁄° 
cfg
)

109 
	`As£π
(
cfg
);

111 #i‡
SAMG55


112 
cfg
->
ªsﬁuti⁄
 = 
ADC_12_BITS
;

114 
cfg
->
ªsﬁuti⁄
 = 
ADC_10_BITS
;

116 
cfg
->
mck
 = 
	`sys˛k_gë_˝u_hz
();

117 
cfg
->
adc_˛ock
 = 6000000UL;

118 
cfg
->
°¨tup_time
 = 
ADC_STARTUP_TIME_4
;

119 
cfg
->
åacktim
 = 2;

120 
cfg
->
å™s„r
 = 2;

121 
cfg
->
u£q
 = 
Ál£
;

122 
cfg
->
èg
 = 
Ál£
;

123 
cfg
->
a°e
 = 
Ál£
;

124 
	}
}

133 
	$adc_£t_c⁄fig
(
Adc
 *c⁄° 
adc
, 
adc_c⁄fig
 *
c⁄fig
)

135 
uöt32_t
 
ªg
 = 0;

137 
ªg
 = (
c⁄fig
->
u£q
 ? 
ADC_MR_USEQ_REG_ORDER
 : 0) |

138 
	`ADC_MR_PRESCAL
(
c⁄fig
->
mck
 /

139 (2 * 
c⁄fig
->
adc_˛ock
) - 1) |

140 
	`ADC_MR_TRACKTIM
(
c⁄fig
->
åacktim
) |

141 
	`ADC_MR_TRANSFER
(
c⁄fig
->
å™s„r
) |

142 (
c⁄fig
->
°¨tup_time
);

144 
adc
->
ADC_MR
 = 
ªg
;

146 
adc
->
ADC_EMR
 = (
c⁄fig
->
èg
 ? 
ADC_EMR_TAG
 : 0) |

147 (
c⁄fig
->
a°e
 ? 
ADC_EMR_ASTE_SINGLE_TRIG_AVERAGE
 : 0);

149 
	`adc_£t_ªsﬁuti⁄
(
adc
, 
c⁄fig
->
ªsﬁuti⁄
);

150 
	}
}

152 #ifde‡
TEMP_SENSOR


165 
	$adc_ãmp_£ns‹_gë_c⁄fig_deÁu…s
(

166 
adc_ãmp_£ns‹_c⁄fig
 *c⁄° 
cfg
)

169 
	`As£π
(
cfg
);

171 
cfg
->
ãmp⁄
 = 
åue
;

172 
cfg
->
mode
 = 
ADC_TEMP_CMP_MODE_2
;

173 
cfg
->
low_thªshﬁd
 = 0xFF;

174 
cfg
->
high_thªshﬁd
 = 0xFFF;

175 
	}
}

183 
	$adc_ãmp_£ns‹_£t_c⁄fig
(
Adc
 *c⁄° 
adc
,

184 
adc_ãmp_£ns‹_c⁄fig
 *
c⁄fig
)

186 
uöt32_t
 
ªg
 = 0;

188 
ªg
 = ((
c⁄fig
->
ãmp⁄
Ë? 
ADC_TEMPMR_TEMPON
 : 0Ë| (c⁄fig->
mode
);

189 
adc
->
ADC_TEMPMR
 = 
ªg
;

191 
adc
->
ADC_TEMPCWR
 = 
	`ADC_TEMPCWR_TLOWTHRES
(
c⁄fig
->
low_thªshﬁd
) |

192 
	`ADC_TEMPCWR_THIGHTHRES
(
c⁄fig
->
high_thªshﬁd
);

193 
	}
}

196 #i‡(
SAMG
)

209 
	$adc_œ°_ch™√l_gë_c⁄fig_deÁu…s
(

210 
adc_œ°_ch™√l_c⁄fig
 *c⁄° 
cfg
)

213 
	`As£π
(
cfg
);

215 
cfg
->
duÆ_åig_⁄
 = 
åue
;

216 
cfg
->
mode
 = 
ADC_LAST_CHANNEL_CMP_MODE_2
;

217 
cfg
->
low_thªshﬁd
 = 0xFF;

218 
cfg
->
high_thªshﬁd
 = 0xFFF;

219 
	}
}

227 
	$adc_œ°_ch™√l_£t_c⁄fig
(
Adc
 *c⁄° 
adc
,

228 
adc_œ°_ch™√l_c⁄fig
 *
c⁄fig
)

230 
uöt32_t
 
ªg
 = 0;

232 
ªg
 = ((
c⁄fig
->
duÆ_åig_⁄
Ë? 
ADC_LCTMR_DUALTRIG
 : 0Ë| (c⁄fig->
mode
);

233 
adc
->
ADC_LCTMR
 = 
ªg
;

235 
adc
->
ADC_LCCWR
 = 
	`ADC_LCCWR_LOWTHRES
(
c⁄fig
->
low_thªshﬁd
) |

236 
	`ADC_LCCWR_HIGHTHRES
(
c⁄fig
->
high_thªshﬁd
);

237 
	}
}

249 
°©us_code
 
	$adc_öô
(
Adc
 *c⁄° 
adc
, 
adc_c⁄fig
 *
c⁄fig
)

251 
	`As£π
(
adc
);

252 
	`As£π
(
c⁄fig
);

254 i‡((
	`adc_gë_öãºu±_°©us
(
adc
Ë& 
ADC_ISR_DRDY
) == ADC_ISR_DRDY) {

255  
STATUS_ERR_BUSY
;

259 
adc
->
ADC_CR
 = 
ADC_CR_SWRST
;

260 
	`adc_£t_c⁄fig
(
adc
, 
c⁄fig
);

262 
uöt32_t
 
i
;

263 
i
 = 0; i < 
ADC_NUM_OF_INTERRUPT_SOURCE
; i++) {

264 
adc_ˇŒback_poöãr
[
i
] = 0;

267  
STATUS_OK
;

268 
	}
}

277 
	$adc_£t_ªsﬁuti⁄
(
Adc
 *c⁄° 
adc
,

278 c⁄° 
adc_ªsﬁuti⁄
 
ªs
)

280 #i‡
SAMG55


281 
adc
->
ADC_EMR
 |
ªs
;

283 i‡(
ªs
 =
ADC_11_BITS
 ||Ñe†=
ADC_12_BITS
) {

284 
adc
->
ADC_MR
 &~
ADC_MR_LOWRES
;

285 
adc
->
ADC_EMR
 |
ªs
;

287 
adc
->
ADC_MR
 |
ªs
;

288 
adc
->
ADC_EMR
 &~
ADC_EMR_OSR_Msk
;

291 
	}
}

301 
	$adc_£t_com∑ris⁄_mode
(
Adc
 *c⁄° 
adc
,

302 c⁄° 
adc_cmp_mode
 
mode
,

303 c⁄° 
adc_ch™√l_num
 
ch™√l
, 
uöt8_t
 
cmp_fûãr
)

305 i‡(
ch™√l
 !
ADC_CHANNEL_ALL
) {

306 
	`adc_ch_ßnôy_check
(
adc
, 
ch™√l
);

309 
uöt32_t
 
ªg
;

311 
ªg
 = 
adc
->
ADC_EMR
;

313 
ªg
 &~(
ADC_EMR_CMPSEL_Msk
 |

314 
ADC_EMR_CMPMODE_Msk
 |

315 
ADC_EMR_CMPFILTER_Msk
);

316 
ªg
 |
mode
 |

317 ((
ch™√l
 =
ADC_CHANNEL_ALL
Ë? 
ADC_EMR_CMPALL


318 : 
	`ADC_EMR_CMPSEL
(
ch™√l
)) |

319 
	`ADC_EMR_CMPFILTER
(
cmp_fûãr
);

321 
adc
->
ADC_EMR
 = 
ªg
;

322 
	}
}

330 
	$adc_£t_powî_mode
(
Adc
 *c⁄° 
adc
,

331 c⁄° 
adc_powî_mode
 
mode
)

333 
uöt32_t
 
ªg
;

335 
ªg
 = 
adc
->
ADC_MR
;

337 
mode
) {

338 
ADC_POWER_MODE_0
:

339 
ªg
 |
ADC_MR_SLEEP_NORMAL
;

342 
ADC_POWER_MODE_1
:

343 
ªg
 |
ADC_MR_SLEEP_SLEEP
;

347 
adc
->
ADC_MR
 = 
ªg
;

348 
	}
}

358 
	$adc_£t_ˇŒback
(
Adc
 *c⁄° 
adc
, 
adc_öãºu±_sour˚
 
sour˚
,

359 
adc_ˇŒback_t
 
ˇŒback
, 
uöt8_t
 
úq_Àvñ
)

361 
	`As£π
(
adc
);

362 
	`As£π
(
ˇŒback
);

364 
adc_ˇŒback_poöãr
[
sour˚
] = 
ˇŒback
;

365 
	`úq_ªgi°î_h™dÀr
(
ADC_IRQn
, 
úq_Àvñ
);

368 
	`adc_íabÀ_öãºu±
(
adc
, 
sour˚
);

369 
	}
}

377 
	$adc_íabÀ_öãºu±
(
Adc
 *c⁄° 
adc
,

378 
adc_öãºu±_sour˚
 
öãºu±_sour˚
)

380 i‡(
öãºu±_sour˚
 =
ADC_INTERRUPT_ALL
) {

381 
adc
->
ADC_IER
 = 
ADC_INTERRUPT_ALL
;

384 
adc
->
ADC_IER
 = 
adc_öãºu±_mask
[
öãºu±_sour˚
];

386 
	}
}

394 
	$adc_dißbÀ_öãºu±
(
Adc
 *c⁄° 
adc
,

395 
adc_öãºu±_sour˚
 
öãºu±_sour˚
)

397 i‡(
öãºu±_sour˚
 =
ADC_INTERRUPT_ALL
) {

398 
adc
->
ADC_IDR
 = 
ADC_INTERRUPT_ALL
;

401 
adc
->
ADC_IDR
 = 
adc_öãºu±_mask
[
öãºu±_sour˚
];

403 
	}
}

415 
	$adc_öãºu±
(
adc_öãºu±_sour˚
 
sour˚
)

417 i‡(
adc_ˇŒback_poöãr
[
sour˚
]) {

418 
adc_ˇŒback_poöãr
[
sour˚
]();

420 
	}
}

428 
	$adc_¥o˚ss_ˇŒback
(
Adc
 *c⁄° 
adc
)

430 vﬁ©ûê
uöt32_t
 
°©us
;

431 
uöt32_t
 
˙t
;

433 
°©us
 = 
	`adc_gë_öãºu±_°©us
(
adc
);

435 
˙t
 = 0; c¡ < 
ADC_NUM_OF_INTERRUPT_SOURCE
; cnt++) {

436 i‡(
°©us
 & 
adc_öãºu±_mask
[
˙t
]) {

437 
	`adc_öãºu±
((
adc_öãºu±_sour˚
)
˙t
);

440 
	}
}

445 
	$ADC_H™dÀr
()

447 
	`adc_¥o˚ss_ˇŒback
(
ADC
);

448 
	}
}

454 
	$adc_íabÀ
()

457 
	`pmc_íabÀ_≥rùh_˛k
(
ID_ADC
);

458 
	`¶ìpmgr_lock_mode
(
SLEEP_MODE_ADC
);

459 
	}
}

465 
	$adc_dißbÀ
()

468 
	`pmc_dißbÀ_≥rùh_˛k
(
ID_ADC
);

469 
	`¶ìpmgr_u∆ock_mode
(
SLEEP_MODE_ADC
);

470 
	}
}

479 
	$adc_c⁄figuª_£quí˚
(
Adc
 *c⁄° 
adc
,

480 c⁄° 
adc_ch™√l_num
 
ch_li°
[], 
uöt8_t
 
uc_num
)

482 
uöt8_t
 
uc_cou¡î
;

485 
adc
->
ADC_MR
 |
ADC_MR_USEQ_REG_ORDER
;

486 #i‡(
SAM4N
)

487 
adc
->
ADC_SEQR1
 = 0;

488 
adc
->
ADC_SEQR2
 = 0;

490 #i‡(
SAMG
)

491 
adc
->
ADC_SEQR1
 = 0;

494 i‡(
uc_num
 <
ADC_SEQ1_CHANNEL_NUM
) {

495 
uc_cou¡î
 = 0; uc_cou¡î < 
uc_num
; uc_counter++) {

496 #i‡(
SAM4N
 || 
SAMG
)

497 
adc
->
ADC_SEQR1


499 |
ch_li°
[
uc_cou¡î
] << (4 * uc_counter);

502 
uc_cou¡î
 = 0; uc_cou¡î <
ADC_SEQ1_CHANNEL_NUM
;

503 
uc_cou¡î
++) {

504 #i‡(
SAM4N
 || 
SAMG
)

505 
adc
->
ADC_SEQR1


507 |
ch_li°
[
uc_cou¡î
] << (4 * uc_counter);

509 
uc_cou¡î
 = 0; uc_cou¡î < 
uc_num
 - 
ADC_SEQ1_CHANNEL_NUM
;

510 
uc_cou¡î
++) {

511 #i‡(
SAM4N
)

512 
adc
->
ADC_SEQR2
 |
ch_li°
[8 + 
uc_cou¡î
] << (4 * uc_counter);

516 
	}
}

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc2.h

47 #i‚de‡
ADC2_H_INCLUDED


48 
	#ADC2_H_INCLUDED


	)

50 
	~"compûî.h
"

51 
	~"°©us_codes.h
"

53 #i‡(
SAM4N
)

54 
	#TEMP_SENSOR


	)

55 
	#SLEEP_MODE_ADC
 
SLEEPMGR_SLEEP_WFI


	)

58 #i‡(
SAMG
)

59 
	#NO_TEMP_SENSOR


	)

60 
	#SLEEP_MODE_ADC
 
SLEEPMGR_ACTIVE


	)

64 #i‚de‡
ADC_WPMR_WPKEY_PASSWD


65 
	#ADC_WPMR_WPKEY_PASSWD
 (0x414443u << 8)

	)

69 
	eadc_ªsﬁuti⁄
 {

70 #i‡
SAMG55


71 
	mADC_12_BITS
 = 
ADC_EMR_OSR_NO_AVERAGE
,

72 
	mADC_13_BITS
 = 
ADC_EMR_OSR_OSR4
,

73 
	mADC_14_BITS
 = 
ADC_EMR_OSR_OSR16
,

74 
	mADC_15_BITS
 = 
ADC_EMR_OSR_OSR64
,

75 
	mADC_16_BITS
 = 
ADC_EMR_OSR_OSR256
,

77 
	mADC_8_BITS
 = 
ADC_MR_LOWRES_BITS_8
,

78 
	mADC_10_BITS
 = 
ADC_MR_LOWRES_BITS_10
,

79 
	mADC_11_BITS
 = 
ADC_EMR_OSR_OSR4
,

80 
	mADC_12_BITS
 = 
ADC_EMR_OSR_OSR16


85 
	eadc_powî_mode
 {

87 
	mADC_POWER_MODE_0
 = 0,

89 
	mADC_POWER_MODE_1


93 
	eadc_åiggî
 {

95 
	mADC_TRIG_SW
 = 
ADC_MR_TRGEN_DIS
,

97 
	mADC_TRIG_EXT
 = 
ADC_MR_TRGSEL_ADC_TRIG0
 | 
ADC_MR_TRGEN
,

99 
	mADC_TRIG_TIO_CH_0
 = 
ADC_MR_TRGSEL_ADC_TRIG1
 | 
ADC_MR_TRGEN
,

101 
	mADC_TRIG_TIO_CH_1
 = 
ADC_MR_TRGSEL_ADC_TRIG2
 | 
ADC_MR_TRGEN
,

103 
	mADC_TRIG_TIO_CH_2
 = 
ADC_MR_TRGSEL_ADC_TRIG3
 | 
ADC_MR_TRGEN
,

104 #i‡(
SAMG
)

106 
	mADC_TRIG_RTC_0
 = 
ADC_MR_TRGSEL_ADC_TRIG4
 | 
ADC_MR_TRGEN
,

108 
	mADC_TRIG_RTT
 = 
ADC_MR_TRGSEL_ADC_TRIG5
 | 
ADC_MR_TRGEN
,

111 
	mADC_TRIG_FREERUN
 = 0xFF

115 
	eadc_ch™√l_num
 {

116 
	mADC_CHANNEL_0
 = 0,

117 
	mADC_CHANNEL_1
,

118 
	mADC_CHANNEL_2
,

119 
	mADC_CHANNEL_3
,

120 
	mADC_CHANNEL_4
,

121 
	mADC_CHANNEL_5
,

122 
	mADC_CHANNEL_6
,

123 
	mADC_CHANNEL_7
,

124 #i‡(
SAM4N
)

125 
	mADC_CHANNEL_8
,

126 
	mADC_CHANNEL_9
,

127 
	mADC_CHANNEL_10
,

128 
	mADC_CHANNEL_11
,

129 
	mADC_CHANNEL_12
,

130 
	mADC_CHANNEL_13
,

131 
	mADC_CHANNEL_14
,

132 
	mADC_CHANNEL_15
,

134 #ifde‡
TEMP_SENSOR


135 
	mADC_TEMPERATURE_SENSOR
,

137 
	mADC_CHANNEL_ALL
 = 0xFFFF

141 
	eadc_°¨tup_time
 {

142 
	mADC_STARTUP_TIME_0
 = 
ADC_MR_STARTUP_SUT0
,

143 
	mADC_STARTUP_TIME_1
 = 
ADC_MR_STARTUP_SUT8
,

144 
	mADC_STARTUP_TIME_2
 = 
ADC_MR_STARTUP_SUT16
,

145 
	mADC_STARTUP_TIME_3
 = 
ADC_MR_STARTUP_SUT24
,

146 
	mADC_STARTUP_TIME_4
 = 
ADC_MR_STARTUP_SUT64
,

147 
	mADC_STARTUP_TIME_5
 = 
ADC_MR_STARTUP_SUT80
,

148 
	mADC_STARTUP_TIME_6
 = 
ADC_MR_STARTUP_SUT96
,

149 
	mADC_STARTUP_TIME_7
 = 
ADC_MR_STARTUP_SUT112
,

150 
	mADC_STARTUP_TIME_8
 = 
ADC_MR_STARTUP_SUT512
,

151 
	mADC_STARTUP_TIME_9
 = 
ADC_MR_STARTUP_SUT576
,

152 
	mADC_STARTUP_TIME_10
 = 
ADC_MR_STARTUP_SUT640
,

153 
	mADC_STARTUP_TIME_11
 = 
ADC_MR_STARTUP_SUT704
,

154 
	mADC_STARTUP_TIME_12
 = 
ADC_MR_STARTUP_SUT768
,

155 
	mADC_STARTUP_TIME_13
 = 
ADC_MR_STARTUP_SUT832
,

156 
	mADC_STARTUP_TIME_14
 = 
ADC_MR_STARTUP_SUT896
,

157 
	mADC_STARTUP_TIME_15
 = 
ADC_MR_STARTUP_SUT960


161 
	eadc_cmp_mode
 {

162 
	mADC_CMP_MODE_0
 = 
ADC_EMR_CMPMODE_LOW
,

163 
	mADC_CMP_MODE_1
 = 
ADC_EMR_CMPMODE_HIGH
,

164 
	mADC_CMP_MODE_2
 = 
ADC_EMR_CMPMODE_IN
,

165 
	mADC_CMP_MODE_3
 = 
ADC_EMR_CMPMODE_OUT


168 #ifde‡
TEMP_SENSOR


170 
	eadc_ãmp_cmp_mode
 {

171 
	mADC_TEMP_CMP_MODE_0
 = 
ADC_TEMPMR_TEMPCMPMOD_LOW
,

172 
	mADC_TEMP_CMP_MODE_1
 = 
ADC_TEMPMR_TEMPCMPMOD_HIGH
,

173 
	mADC_TEMP_CMP_MODE_2
 = 
ADC_TEMPMR_TEMPCMPMOD_IN
,

174 
	mADC_TEMP_CMP_MODE_3
 = 
ADC_TEMPMR_TEMPCMPMOD_OUT


177 #i‡(
SAMG
)

179 
	eadc_œ°_ch™√l_cmp_mode
 {

180 
	mADC_LAST_CHANNEL_CMP_MODE_0
 = 
ADC_LCTMR_CMPMOD_LOW
,

181 
	mADC_LAST_CHANNEL_CMP_MODE_1
 = 
ADC_LCTMR_CMPMOD_HIGH
,

182 
	mADC_LAST_CHANNEL_CMP_MODE_2
 = 
ADC_LCTMR_CMPMOD_IN
,

183 
	mADC_LAST_CHANNEL_CMP_MODE_3
 = 
ADC_LCTMR_CMPMOD_OUT


188 
	eadc_ª„r_vﬁège_sour˚
 {

189 
	mADC_REFER_VOL_EXTERNAL
 = 0,

190 
	mADC_REFER_VOL_STUCK_AT_MIN
,

191 
	mADC_REFER_VOL_VDDANA
,

192 
	mADC_REFER_VOL_IRVS


202 
	sadc_c⁄fig
 {

204 
adc_ªsﬁuti⁄
 
	mªsﬁuti⁄
;

206 
uöt32_t
 
	mmck
;

208 
uöt32_t
 
	madc_˛ock
;

210 
adc_°¨tup_time
 
	m°¨tup_time
;

212 
uöt8_t
 
	måacktim
;

214 
uöt8_t
 
	må™s„r
;

216 
boﬁ
 
	mu£q
;

218 
boﬁ
 
	mèg
;

220 
boﬁ
 
	ma°e
;

223 #ifde‡
TEMP_SENSOR


225 
	sadc_ãmp_£ns‹_c⁄fig
 {

227 
boﬁ
 
	mãmp⁄
;

229 
adc_ãmp_cmp_mode
 
	mmode
;

231 
uöt16_t
 
	mlow_thªshﬁd
;

233 
uöt16_t
 
	mhigh_thªshﬁd
;

237 #i‡(
SAMG
)

239 
	sadc_œ°_ch™√l_c⁄fig
 {

241 
boﬁ
 
	mduÆ_åig_⁄
;

243 
adc_œ°_ch™√l_cmp_mode
 
	mmode
;

245 
uöt16_t
 
	mlow_thªshﬁd
;

247 
uöt16_t
 
	mhigh_thªshﬁd
;

252 
	eadc_öãºu±_sour˚
 {

253 
	mADC_INTERRUPT_EOC_0
 = 0,

254 
	mADC_INTERRUPT_EOC_1
,

255 
	mADC_INTERRUPT_EOC_2
,

256 
	mADC_INTERRUPT_EOC_3
,

257 
	mADC_INTERRUPT_EOC_4
,

258 
	mADC_INTERRUPT_EOC_5
,

259 
	mADC_INTERRUPT_EOC_6
,

260 
	mADC_INTERRUPT_EOC_7
,

261 #i‡(
SAM4N
)

262 
	mADC_INTERRUPT_EOC_8
,

263 
	mADC_INTERRUPT_EOC_9
,

264 
	mADC_INTERRUPT_EOC_10
,

265 
	mADC_INTERRUPT_EOC_11
,

266 
	mADC_INTERRUPT_EOC_12
,

267 
	mADC_INTERRUPT_EOC_13
,

268 
	mADC_INTERRUPT_EOC_14
,

269 
	mADC_INTERRUPT_EOC_15
,

270 
	mADC_INTERRUPT_EOC_16
,

272 #ifde‡
TEMP_SENSOR


273 
	mADC_INTERRUPT_TEMP_CHANGE
,

275 
	mADC_INTERRUPT_END_CAL
,

276 
	mADC_INTERRUPT_DATA_READY
,

277 
	mADC_INTERRUPT_OVERRUN_ERROR
,

278 
	mADC_INTERRUPT_COMP_ERROR
,

279 
	mADC_INTERRUPT_END_RXBUF
,

280 
	mADC_INTERRUPT_RXBUF_FULL
,

281 
	mADC_INTERRUPT_ALL
 = 0xFFFFFFFF

284 (*
	tadc_ˇŒback_t
)();

286 
	`adc_gë_c⁄fig_deÁu…s
(
adc_c⁄fig
 *c⁄° 
cfg
);

287 
°©us_code
 
	`adc_öô
(
Adc
 *c⁄° 
adc
, 
adc_c⁄fig
 *c⁄° 
c⁄fig
);

289 #ifde‡
TEMP_SENSOR


290 
	`adc_ãmp_£ns‹_gë_c⁄fig_deÁu…s
(

291 
adc_ãmp_£ns‹_c⁄fig
 *c⁄° 
cfg
);

292 
	`adc_ãmp_£ns‹_£t_c⁄fig
(
Adc
 *c⁄° 
adc
,

293 
adc_ãmp_£ns‹_c⁄fig
 *
c⁄fig
);

295 #i‡(
SAMG
)

296 
	`adc_œ°_ch™√l_gë_c⁄fig_deÁu…s
(

297 
adc_œ°_ch™√l_c⁄fig
 *c⁄° 
cfg
);

298 
	`adc_œ°_ch™√l_£t_c⁄fig
(
Adc
 *c⁄° 
adc
,

299 
adc_œ°_ch™√l_c⁄fig
 *
c⁄fig
);

302 
	`adc_c⁄figuª_£quí˚
(
Adc
 *c⁄° 
adc
,

303 c⁄° 
adc_ch™√l_num
 
ch_li°
[], c⁄° 
uöt8_t
 
uc_num
);

304 
	`adc_íabÀ
();

305 
	`adc_dißbÀ
();

306 
	`adc_£t_ˇŒback
(
Adc
 *c⁄° 
adc
, 
adc_öãºu±_sour˚
 
sour˚
,

307 
adc_ˇŒback_t
 
ˇŒback
, 
uöt8_t
 
úq_Àvñ
);

317 
ölöe
 
	$adc_ch_ßnôy_check
(
Adc
 *c⁄° 
adc
,

318 c⁄° 
adc_ch™√l_num
 
ch™√l
)

320 i‡(
adc
 =
ADC
) {

321 
	`As£π
((
ch™√l
 < 
NB_CH_ADC
)

322 #ifde‡
TEMP_SENSOR


323 ||(
ch™√l
 =
ADC_TEMPERATURE_SENSOR
)

328 
	`UNUSED
(
ch™√l
);

329 
	}
}

331 #i‡(
SAMG
)

332 #i‡
SAMG55


339 
ölöe
 
	$adc_£À˘_˛ock_sour˚_mck
(
Adc
 *c⁄° 
adc
)

341 
uöt32_t
 
ªg
;

343 
ªg
 = 
adc
->
ADC_EMR
;

345 
ªg
 &~
ADC_EMR_SRCCLK_PMC_PCK
;

347 
adc
->
ADC_EMR
 = 
ªg
;

348 
	}
}

356 
ölöe
 
	$adc_£À˘_˛ock_sour˚_pck
(
Adc
 *c⁄° 
adc
)

358 
uöt32_t
 
ªg
;

360 
ªg
 = 
adc
->
ADC_EMR
;

362 
ªg
 |
ADC_EMR_SRCCLK_PMC_PCK
;

364 
adc
->
ADC_EMR
 = 
ªg
;

365 
	}
}

374 
ölöe
 
	$adc_£t_˛ock_mck
(
Adc
 *c⁄° 
adc
)

376 
uöt32_t
 
ªg
;

378 
ªg
 = 
adc
->
ADC_EMR
;

380 
ªg
 |
ADC_MR_DIV1
;

382 
adc
->
ADC_MR
 = 
ªg
;

383 
	}
}

391 
ölöe
 
	$adc_£t_˛ock_mck_div3
(
Adc
 *c⁄° 
adc
)

393 
uöt32_t
 
ªg
;

395 
ªg
 = 
adc
->
ADC_MR
;

397 
ªg
 &~
ADC_MR_DIV1
;

398 
ªg
 |
ADC_MR_DIV3
;

400 
adc
->
ADC_MR
 = 
ªg
;

401 
	}
}

412 
ölöe
 
	$adc_£t_åiggî
(
Adc
 *c⁄° 
adc
,

413 c⁄° 
adc_åiggî
 
åiggî
)

415 
uöt32_t
 
ªg
;

417 
ªg
 = 
adc
->
ADC_MR
;

419 i‡(
åiggî
 =
ADC_TRIG_FREERUN
) {

420 
ªg
 |
ADC_MR_FREERUN_ON
;

422 
ªg
 &~(
ADC_MR_TRGSEL_Msk
 | 
ADC_MR_TRGEN
 | 
ADC_MR_FREERUN_ON
);

423 
ªg
 |
åiggî
;

426 
adc
->
ADC_MR
 = 
ªg
;

427 
	}
}

429 
adc_£t_ªsﬁuti⁄
(
Adc
 *c⁄° 
adc
,

430 c⁄° 
adc_ªsﬁuti⁄
 
ªs
);

432 
adc_£t_com∑ris⁄_mode
(
Adc
 *c⁄° 
adc
,

433 c⁄° 
adc_cmp_mode
 
mode
,

434 c⁄° 
adc_ch™√l_num
 
ch™√l
,

435 
uöt8_t
 
cmp_fûãr
);

444 
ölöe
 
adc_cmp_mode
 
	$adc_gë_com∑ris⁄_mode
(
Adc
 *c⁄° 
adc
)

446  (
adc_cmp_mode
)(
adc
->
ADC_EMR
 & 
ADC_EMR_CMPMODE_Msk
);

447 
	}
}

456 
ölöe
 
	$adc_£t_com∑ris⁄_wödow
(
Adc
 *c⁄° 
adc
,

457 c⁄° 
uöt16_t
 
us_low_thªshﬁd
,

458 c⁄° 
uöt16_t
 
us_high_thªshﬁd
)

460 
adc
->
ADC_CWR
 = 
	`ADC_CWR_LOWTHRES
(
us_low_thªshﬁd
) |

461 
	`ADC_CWR_HIGHTHRES
(
us_high_thªshﬁd
);

462 
	}
}

470 
ölöe
 
	$adc_£t_wrôïrŸe˘
(
Adc
 *c⁄° 
adc
,

471 c⁄° 
boﬁ
 
is_íabÀ
)

473 i‡(
is_íabÀ
) {

474 
adc
->
ADC_WPMR
 = 
ADC_WPMR_WPEN
 | 
ADC_WPMR_WPKEY_PASSWD
;

476 
adc
->
ADC_WPMR
 = 
ADC_WPMR_WPKEY_PASSWD
;

478 
	}
}

488 
ölöe
 
uöt32_t
 
	$adc_gë_wrôïrŸe˘_°©us
(
Adc
 *c⁄° 
adc
)

490 
uöt32_t
 
ªg_vÆue
;

492 
ªg_vÆue
 = 
adc
->
ADC_WPSR
;

493 i‡(
ªg_vÆue
 & 
ADC_WPSR_WPVS
) {

494  (
ªg_vÆue
 & 
ADC_WPSR_WPVSRC_Msk
Ë>> 
ADC_WPSR_WPVSRC_Pos
;

498 
	}
}

507 
ölöe
 
uöt32_t
 
	$adc_gë_ovîrun_°©us
(
Adc
 *c⁄° 
adc
)

509  
adc
->
ADC_OVER
;

510 
	}
}

517 
ölöe
 
	$adc_avîage_⁄_sögÀ_åiggî
(
Adc
 *c⁄° 
adc
)

519 
adc
->
ADC_EMR
 |
ADC_EMR_ASTE_SINGLE_TRIG_AVERAGE
;

520 
	}
}

527 
ölöe
 
	$adc_avîage_⁄_mu…i_åiggî
(
Adc
 *c⁄° 
adc
)

529 
adc
->
ADC_EMR
 &~
ADC_EMR_ASTE_SINGLE_TRIG_AVERAGE
;

530 
	}
}

540 
ölöe
 
	$adc_°¨t_so·w¨e_c⁄vîsi⁄
(
Adc
 *c⁄° 
adc
)

542 
adc
->
ADC_CR
 = 
ADC_CR_START
;

543 
	}
}

545 
adc_£t_powî_mode
(
Adc
 *c⁄° 
adc
,

546 c⁄° 
adc_powî_mode
 
mode
);

554 
ölöe
 
	$adc_ch™√l_íabÀ
(
Adc
 *c⁄° 
adc
,

555 c⁄° 
adc_ch™√l_num
 
adc_ch
)

557 i‡(
adc_ch
 !
ADC_CHANNEL_ALL
) {

558 
	`adc_ch_ßnôy_check
(
adc
, 
adc_ch
);

561 
adc
->
ADC_CHER
 = (
adc_ch
 =
ADC_CHANNEL_ALL
) ?

562 
ADC_CHANNEL_ALL
 : 1 << 
adc_ch
;

563 
	}
}

571 
ölöe
 
	$adc_ch™√l_dißbÀ
(
Adc
 *c⁄° 
adc
,

572 c⁄° 
adc_ch™√l_num
 
adc_ch
)

574 i‡(
adc_ch
 !
ADC_CHANNEL_ALL
) {

575 
	`adc_ch_ßnôy_check
(
adc
, 
adc_ch
);

578 
adc
->
ADC_CHDR
 = (
adc_ch
 =
ADC_CHANNEL_ALL
) ?

579 
ADC_CHANNEL_ALL
 : 1 << 
adc_ch
;

580 
	}
}

591 
ölöe
 
uöt32_t
 
	$adc_ch™√l_gë_°©us
(
Adc
 *c⁄° 
adc
,

592 c⁄° 
adc_ch™√l_num
 
adc_ch
)

594 
	`adc_ch_ßnôy_check
(
adc
, 
adc_ch
);

596  
adc
->
ADC_CHSR
 & (1 << 
adc_ch
);

597 
	}
}

607 
ölöe
 
uöt32_t
 
	$adc_ch™√l_gë_vÆue
(
Adc
 *c⁄° 
adc
,

608 
adc_ch™√l_num
 
adc_ch
)

610 
	`adc_ch_ßnôy_check
(
adc
, 
adc_ch
);

612  
adc
->
ADC_CDR
[
adc_ch
];

613 
	}
}

622 
ölöe
 
uöt32_t
 
	$adc_gë_œã°_vÆue
(
Adc
 *c⁄° 
adc
)

624  
adc
->
ADC_LCDR
 & 
ADC_LCDR_LDATA_Msk
;

625 
	}
}

634 
ölöe
 
uöt32_t
 
	$adc_gë_œã°_ch™_num
(
Adc
 *c⁄° 
adc
)

636 #i‡
SAMG55


637  (
adc
->
ADC_LCDR
 & 
ADC_LCDR_CHNBOSR_Msk
Ë>> 
ADC_LCDR_CHNBOSR_Pos
;

639  (
adc
->
ADC_LCDR
 & 
ADC_LCDR_CHNB_Msk
Ë>> 
ADC_LCDR_CHNB_Pos
;

641 
	}
}

643 
adc_íabÀ_öãºu±
(
Adc
 *c⁄° 
adc
,

644 
adc_öãºu±_sour˚
 
öãºu±_sour˚
);

646 
adc_dißbÀ_öãºu±
(
Adc
 *c⁄° 
adc
,

647 
adc_öãºu±_sour˚
 
öãºu±_sour˚
);

656 
ölöe
 
uöt32_t
 
	$adc_gë_öãºu±_°©us
(
Adc
 *c⁄° 
adc
)

658  
adc
->
ADC_ISR
;

659 
	}
}

668 
ölöe
 
uöt32_t
 
	$adc_gë_öãºu±_mask
(
Adc
 *c⁄° 
adc
)

670  
adc
->
ADC_IMR
;

671 
	}
}

680 
ölöe
 
Pdc
 *
	$adc_gë_pdc_ba£
(
Adc
 *c⁄° 
adc
)

682 
Pdc
 *
p_pdc_ba£
 = 
NULL
;

684 i‡(
adc
 =
ADC
) {

685 
p_pdc_ba£
 = 
PDC_ADC
;

688  
p_pdc_ba£
;

689 
	}
}

700 
ölöe
 
°©us_code
 
	$adc_°¨t_ˇlibøti⁄
(
Adc
 *c⁄° 
adc
)

702 i‡((
adc
->
ADC_MR
 & 
ADC_MR_FREERUN
Ë=
ADC_MR_FREERUN_ON
) {

703  
STATUS_ERR_BUSY
;

706 
adc
->
ADC_CR
 = 
ADC_CR_AUTOCAL
;

707  
STATUS_OK
;

708 
	}
}

710 #i‡(
SAM4N
)

724 
ölöe
 
	$adc_ªf_vﬁ_£l
(
Adc
 *c⁄° 
adc
,

725 
adc_ª„r_vﬁège_sour˚
 
adc_ªf_§c
,

726 
uöt8_t
 
úvs
)

728 i‡(
ADC_REFER_VOL_EXTERNAL
 =
adc_ªf_§c
) {

729 
adc
->
ADC_ACR
 &~
ADC_ACR_ONREF_EN
;

730 } i‡(
ADC_REFER_VOL_STUCK_AT_MIN
 =
adc_ªf_§c
) {

731 
adc
->
ADC_ACR
 |
ADC_ACR_ONREF_EN
;

732 
adc
->
ADC_ACR
 &~(
ADC_ACR_IRVCE_EN
 | 
ADC_ACR_FORCEREF_EN
);

733 } i‡(
ADC_REFER_VOL_VDDANA
 =
adc_ªf_§c
) {

734 
adc
->
ADC_ACR
 |
ADC_ACR_ONREF_EN
 | 
ADC_ACR_FORCEREF_EN
;

735 } i‡(
ADC_REFER_VOL_IRVS
 =
adc_ªf_§c
) {

736 
adc
->
ADC_ACR
 &~
ADC_ACR_FORCEREF_EN
;

737 
adc
->
ADC_ACR
 |
ADC_ACR_ONREF_EN
 | 
ADC_ACR_IRVCE_EN
 |

738 (
úvs
 << 
ADC_ACR_IRVS_Pos
);

740 
	}
}

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_mode/example.c

93 
	~<°dio.h
>

94 
	~<°rög.h
>

95 
	~<as£π.h
>

96 
	~"asf.h
"

99 
	#TRACKING_TIME
 1

	)

101 
	#TRANSFER_PERIOD
 1

	)

103 
	#ADC_CHANNEL_POTENTIOMETER
 
ADC_CHANNEL_1


	)

106 
	#VOLT_REF
 (3300)

	)

109 
	#MAX_DIGITAL_10_BIT
 (1024UL)

	)

111 
	#STRING_EOL
 "\r"

	)

112 
	#STRING_HEADER
 "-- ADC Enhanced Mode Example --\r\n" \

113 "-- "
BOARD_NAME
" --\r\n" \

114 "-- Compûed: "
__DATE__
" "
__TIME__
" --"
STRING_EOL


	)

116 
	#MENU_HEADER
 "\n\r--Öressá keyÅo changeÅheÑesolution mode--\n\r" \

119 "-- q: Quô C⁄figuøti⁄--\n\r"

	)

123 
uöt32_t
 
	mvÆue
;

124 
boﬁ
 
	mis_d⁄e
;

125 } 
	gg_adc_ßm∂e_d©a
;

128 
uöt32_t
 
	gg_max_digôÆ
;

133 
	$c⁄figuª_c⁄sﬁe
()

135 c⁄° 
ußπ_£rül_›ti⁄s_t
 
u¨t_£rül_›ti⁄s
 = {

136 .
baudøã
 = 
CONF_UART_BAUDRATE
,

137 .
∑rôyty≥
 = 
CONF_UART_PARITY


141 
	`sys˛k_íabÀ_≥rùhîÆ_˛ock
(
CONSOLE_UART_ID
);

142 
	`°dio_£rül_öô
(
CONF_UART
, &
u¨t_£rül_›ti⁄s
);

143 
	}
}

148 
	$£t_adc_ªsﬁuti⁄
()

150 
uöt8_t
 
uc_key
;

151 
uöt8_t
 
uc_d⁄e
 = 0;

153 
	`puts
(
MENU_HEADER
);

155 !
uc_d⁄e
) {

156 
	`u¨t_ªad
(
CONF_UART
, &
uc_key
));

158 
uc_key
) {

161 
g_max_digôÆ
 = 
MAX_DIGITAL_10_BIT
;

162 
	`adc_£t_ªsﬁuti⁄
(
ADC
, 
ADC_10_BITS
);

163 
	`puts
(" Set ResolutionÅo Normal \n\r");

167 
g_max_digôÆ
 = 
MAX_DIGITAL_10_BIT
 * 4;

168 
	`adc_£t_ªsﬁuti⁄
(
ADC
, 
ADC_12_BITS
);

169 
	`puts
(" Set ResolutionÅo Enhanced \n\r");

173 
uc_d⁄e
 = 1;

174 
	`puts
(" Quit Configuration \n\r");

180 
	}
}

187 
	$maö
()

189 
uöt8_t
 
uc_key
;

192 
	`sys˛k_öô
();

193 
	`bﬂrd_öô
();

195 
	`c⁄figuª_c⁄sﬁe
();

198 
	`puts
(
STRING_HEADER
);

200 
g_adc_ßm∂e_d©a
.
vÆue
 = 0;

201 
g_adc_ßm∂e_d©a
.
is_d⁄e
 = 
Ál£
;

202 
g_max_digôÆ
 = 
MAX_DIGITAL_10_BIT
;

205 
	`sys˛k_íabÀ_≥rùhîÆ_˛ock
(
ID_ADC
);

208 
	`adc_öô
(
ADC
, 
	`sys˛k_gë_˝u_hz
(), 6400000, 
ADC_STARTUP_TIME_8
);

209 
	`adc_c⁄figuª_timög
(
ADC
, 
TRACKING_TIME
);

210 
	`adc_check
(
ADC
, 
	`sys˛k_gë_˝u_hz
());

213 
	`adc_c⁄figuª_åiggî
(
ADC
, 
ADC_TRIG_SW
, 0);

215 
	`adc_íabÀ_ch™√l
(
ADC
, 
ADC_CHANNEL_POTENTIOMETER
);

216 
	`adc_£t_avîagög_åiggî
(
ADC
, 
Ál£
);

219 
	`adc_íabÀ_öãºu±
(
ADC
, 
ADC_IER_DRDY
);

220 
	`NVIC_E«bÀIRQ
(
ADC_IRQn
);

223 
	`adc_°¨t
(
ADC
);

224 
	`dñay_ms
(1000);

227 i‡(
g_adc_ßm∂e_d©a
.
is_d⁄e
 =
åue
) {

228 
	`¥ötf
("Potentiometer Voltage: %4d mv.\r\n",

229 ()(
g_adc_ßm∂e_d©a
.
vÆue
 * 
VOLT_REF


230 / 
g_max_digôÆ
));

231 
	`¥ötf
("Raw ADCÑesu…: 0x%04x\r\n\r\n", ()
g_adc_ßm∂e_d©a
.
vÆue
);

232 
g_adc_ßm∂e_d©a
.
is_d⁄e
 = 
Ál£
;

236 i‡(!
	`u¨t_ªad
(
CONF_UART
, &
uc_key
)) {

238 
	`adc_dißbÀ_öãºu±
(
ADC
, 
ADC_IER_DRDY
);

239 
	`£t_adc_ªsﬁuti⁄
();

240 
	`adc_íabÀ_öãºu±
(
ADC
, 
ADC_IER_DRDY
);

243 
	}
}

245 
	$ADC_H™dÀr
()

247 i‡(
	`adc_gë_°©us
(
ADC
Ë& 
ADC_ISR_DRDY
) {

248 
g_adc_ßm∂e_d©a
.
vÆue
 = 
	`adc_gë_œã°_vÆue
(
ADC
);

249 
g_adc_ßm∂e_d©a
.
is_d⁄e
 = 
åue
;

251 
	}
}

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_mode/sam4c16c_sam4c_ek/conf_board.h

47 #i‚de‡
CONF_BOARD_H_INCLUDED


48 
	#CONF_BOARD_H_INCLUDED


	)

51 
	#CONF_BOARD_ADC


	)

54 
	#CONF_BOARD_UART_CONSOLE


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_mode/sam4c16c_sam4c_ek/conf_clock.h

47 #i‚de‡
CONF_CLOCK_H_INCLUDED


48 
	#CONF_CLOCK_H_INCLUDED


	)

60 
	#CONFIG_SYSCLK_SOURCE
 
SYSCLK_SRC_PLLBCK


	)

63 
	#CONFIG_SYSCLK_PRES
 
SYSCLK_PRES_1


	)

77 
	#CONFIG_PLL1_SOURCE
 
PLLB_SRC_MAINCK_XTAL


	)

78 
	#CONFIG_PLL1_MUL
 (240000000UL / 
BOARD_FREQ_MAINCK_XTAL
)

	)

79 
	#CONFIG_PLL1_DIV
 2

	)

86 
	#CONFIG_CPCLK_ENABLE


	)

93 
	#CONFIG_CPCLK_SOURCE
 
CPCLK_SRC_MCK


	)

96 
	#CONFIG_CPCLK_PRES
 1

	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_mode/sam4c16c_sam4c_ek/conf_uart_serial.h

47 #i‚de‡
CONF_USART_SERIAL_H_INCLUDED


48 
	#CONF_USART_SERIAL_H_INCLUDED


	)

51 
	#CONF_UART
 
CONSOLE_UART


	)

53 
	#CONF_UART_BAUDRATE
 115200UL

	)

55 
	#CONF_UART_PARITY
 
UART_MR_PAR_NO


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_mode/sam4c16c_sam4c_ek/gcc/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<dñay.h
>

66 
	~<bﬂrd.h
>

69 
	~<i›‹t.h
>

72 
	~<öãºu±.h
>

75 
	~<pmc.h
>

76 
	~<¶ìp.h
>

79 
	~<∑πs.h
>

82 
	~<Àd.h
>

85 
	~<°dio_£rül.h
>

88 
	~<sys˛k.h
>

91 
	~<u¨t.h
>

94 
	~<£rül.h
>

97 
	~<ußπ.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_mode/sam4c16c_sam4c_ek/iar/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<dñay.h
>

66 
	~<bﬂrd.h
>

69 
	~<i›‹t.h
>

72 
	~<öãºu±.h
>

75 
	~<pmc.h
>

76 
	~<¶ìp.h
>

79 
	~<∑πs.h
>

82 
	~<Àd.h
>

85 
	~<°dio_£rül.h
>

88 
	~<sys˛k.h
>

91 
	~<u¨t.h
>

94 
	~<£rül.h
>

97 
	~<ußπ.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_resolution_example/adc_enhanced_resolution_example.c

93 
	~<°dio.h
>

94 
	~<°rög.h
>

95 
	~<as£π.h
>

96 
	~"asf.h
"

99 
	#VOLT_REF
 (3300)

	)

102 
	#MAX_DIGITAL_8_BIT
 (255UL)

	)

103 
	#MAX_DIGITAL_10_BIT
 (1023UL)

	)

104 
	#MAX_DIGITAL_11_BIT
 (2046UL)

	)

105 
	#MAX_DIGITAL_12_BIT
 (4092UL)

	)

106 #i‡
SAMG55


107 
	#MAX_DIGITAL_13_BIT
 (8190UL)

	)

108 
	#MAX_DIGITAL_14_BIT
 (16382UL)

	)

109 
	#MAX_DIGITAL_15_BIT
 (32766UL)

	)

110 
	#MAX_DIGITAL_16_BIT
 (65534UL)

	)

113 
	#STRING_EOL
 "\r"

	)

115 
	#STRING_HEADER
 "\n-- ADC Enhanced Resolution Example --\r\n" \

116 "-- "
BOARD_NAME
 " --\r\n" \

117 "-- Compûed: "
__DATE__
 " "
__TIME__
 " --"
STRING_EOL


	)

120 vﬁ©ûê
boﬁ
 
	gis_c⁄vîsi⁄_d⁄e
 = 
Ál£
;

123 vﬁ©ûê
uöt32_t
 
	gg_ul_vÆue
 = 0;

126 
uöt32_t
 
	gg_max_digôÆ
;

131 
	$c⁄figuª_c⁄sﬁe
()

133 c⁄° 
ußπ_£rül_›ti⁄s_t
 
u¨t_£rül_›ti⁄s
 = {

134 .
baudøã
 = 
CONF_UART_BAUDRATE
,

135 #ifde‡
CONF_UART_CHAR_LENGTH


136 .
ch¨Àngth
 = 
CONF_UART_CHAR_LENGTH
,

138 .
∑rôyty≥
 = 
CONF_UART_PARITY
,

139 #ifde‡
CONF_UART_STOP_BITS


140 .
°›bôs
 = 
CONF_UART_STOP_BITS
,

145 
	`sys˛k_íabÀ_≥rùhîÆ_˛ock
(
CONSOLE_UART_ID
);

146 
	`°dio_£rül_öô
(
CONF_UART
, &
u¨t_£rül_›ti⁄s
);

147 
	}
}

152 
	$c⁄figuª_tc_åiggî
()

154 
uöt32_t
 
ul_div
 = 0;

155 
uöt32_t
 
ul_tc_˛ks
 = 0;

156 
uöt32_t
 
ul_sys˛k
 = 
	`sys˛k_gë_˝u_hz
();

159 
	`pmc_íabÀ_≥rùh_˛k
(
ID_TC0
);

160 #i‡
SAMG55


162 
	`pmc_dißbÀ_pck
(
PMC_PCK_3
);

163 
	`pmc_swôch_pck_to_s˛k
(
PMC_PCK_3
, 
	`PMC_PCK_PRES
(0));

164 
	`pmc_íabÀ_pck
(
PMC_PCK_3
);

168 
	`i›‹t_£t_pö_mode
(
PIN_TC0_TIOA0
, 
PIN_TC0_TIOA0_MUX
);

169 
	`i›‹t_dißbÀ_pö
(
PIN_TC0_TIOA0
);

172 
	`tc_föd_mck_divis‹
(1, 
ul_sys˛k
, &
ul_div
, &
ul_tc_˛ks
, ul_sysclk);

173 
	`tc_öô
(
TC0
, 0, 
ul_tc_˛ks
 | 
TC_CMR_CPCTRG
 | 
TC_CMR_WAVE
 |

174 
TC_CMR_ACPA_CLEAR
 | 
TC_CMR_ACPC_SET
);

175 
TC0
->
TC_CHANNEL
[0].
TC_RA
 = (
ul_sys˛k
 / 
ul_div
) / 2;

176 
TC0
->
TC_CHANNEL
[0].
TC_RC
 = (
ul_sys˛k
 / 
ul_div
) / 1;

179 
	`tc_°¨t
(
TC0
, 0);

180 
	}
}

185 
	$di•œy_míu
()

187 
	`¥ötf
("\n\r--Öressá keyÅo selectÅheÑesolution mode--\n\r"

188 #i‡
SAMG55


200 
	}
}

205 
	$£t_adc_ªsﬁuti⁄
()

207 
uöt8_t
 
uc_key
;

208 
uöt8_t
 
uc_d⁄e
 = 0;

210 
	`di•œy_míu
();

212 !
uc_d⁄e
) {

213 
	`sˇnf
("%c", (*)&
uc_key
);

215 
uc_key
) {

216 #i‡
SAMG55


218 
g_max_digôÆ
 = 
MAX_DIGITAL_12_BIT
;

219 
	`adc_£t_ªsﬁuti⁄
(
ADC
, 
ADC_12_BITS
);

220 
	`puts
(" Set ResolutionÅo Normal 12-bit \n\r");

221 
uc_d⁄e
 = 1;

222 
	`puts
(" Quit Configuration \n\r");

225 
g_max_digôÆ
 = 
MAX_DIGITAL_13_BIT
;

226 
	`adc_£t_ªsﬁuti⁄
(
ADC
, 
ADC_13_BITS
);

227 
	`adc_avîage_⁄_sögÀ_åiggî
(
ADC
);

228 
	`puts
(" Set ResolutionÅo Enhanced 13-bit \n\r");

229 
uc_d⁄e
 = 1;

230 
	`puts
(" Quit Configuration \n\r");

234 
g_max_digôÆ
 = 
MAX_DIGITAL_14_BIT
;

235 
	`adc_£t_ªsﬁuti⁄
(
ADC
, 
ADC_14_BITS
);

236 
	`adc_avîage_⁄_sögÀ_åiggî
(
ADC
);

237 
	`puts
(" Set ResolutionÅo Enhanced 14-bit \n\r");

238 
uc_d⁄e
 = 1;

239 
	`puts
(" Quit Configuration \n\r");

243 
g_max_digôÆ
 = 
MAX_DIGITAL_15_BIT
;

244 
	`adc_£t_ªsﬁuti⁄
(
ADC
, 
ADC_15_BITS
);

245 
	`adc_avîage_⁄_sögÀ_åiggî
(
ADC
);

246 
	`puts
(" Set ResolutionÅo Enhanced 15-bit \n\r");

247 
uc_d⁄e
 = 1;

248 
	`puts
(" Quit Configuration \n\r");

252 
g_max_digôÆ
 = 
MAX_DIGITAL_16_BIT
;

253 
	`adc_£t_ªsﬁuti⁄
(
ADC
, 
ADC_16_BITS
);

254 
	`adc_avîage_⁄_sögÀ_åiggî
(
ADC
);

255 
	`puts
(" Set ResolutionÅo Enhanced 16-bit \n\r");

256 
uc_d⁄e
 = 1;

257 
	`puts
(" Quit Configuration \n\r");

262 
g_max_digôÆ
 = 
MAX_DIGITAL_8_BIT
;

263 
	`adc_£t_ªsﬁuti⁄
(
ADC
, 
ADC_8_BITS
);

264 
	`puts
(" Set ResolutionÅo Normal 8-bit \n\r");

265 
uc_d⁄e
 = 1;

266 
	`puts
(" Quit Configuration \n\r");

269 
g_max_digôÆ
 = 
MAX_DIGITAL_10_BIT
;

270 
	`adc_£t_ªsﬁuti⁄
(
ADC
, 
ADC_10_BITS
);

271 
	`puts
(" Set ResolutionÅo Normal 10-bit \n\r");

272 
uc_d⁄e
 = 1;

273 
	`puts
(" Quit Configuration \n\r");

277 
g_max_digôÆ
 = 
MAX_DIGITAL_11_BIT
;

278 
	`adc_£t_ªsﬁuti⁄
(
ADC
, 
ADC_11_BITS
);

279 
	`adc_avîage_⁄_sögÀ_åiggî
(
ADC
);

280 
	`puts
(" Set ResolutionÅo Enhanced 11-bit \n\r");

281 
uc_d⁄e
 = 1;

282 
	`puts
(" Quit Configuration \n\r");

286 
g_max_digôÆ
 = 
MAX_DIGITAL_12_BIT
;

287 
	`adc_£t_ªsﬁuti⁄
(
ADC
, 
ADC_12_BITS
);

288 
	`adc_avîage_⁄_sögÀ_åiggî
(
ADC
);

289 
	`puts
(" Set ResolutionÅo Enhanced 12-bit \n\r");

290 
uc_d⁄e
 = 1;

291 
	`puts
(" Quit Configuration \n\r");

298 
	}
}

303 
	$adc_íd_c⁄vîsi⁄
()

305 
g_ul_vÆue
 = 
	`adc_ch™√l_gë_vÆue
(
ADC
, 
ADC_CHANNEL_1
);

306 
is_c⁄vîsi⁄_d⁄e
 = 
åue
;

307 
	}
}

314 
	$maö
()

316 
öt32_t
 
ul_vﬁ
;

319 
	`sys˛k_öô
();

320 
	`bﬂrd_öô
();

322 
	`c⁄figuª_c⁄sﬁe
();

325 
	`puts
(
STRING_HEADER
);

327 
	`adc_íabÀ
();

328 #i‡
SAMG55


329 
	`adc_£À˘_˛ock_sour˚_mck
(
ADC
);

332 
adc_c⁄fig
 
adc_cfg
;

334 
	`adc_gë_c⁄fig_deÁu…s
(&
adc_cfg
);

336 
	`adc_öô
(
ADC
, &
adc_cfg
);

337 
	`adc_ch™√l_íabÀ
(
ADC
, 
ADC_CHANNEL_1
);

339 
	`adc_£t_åiggî
(
ADC
, 
ADC_TRIG_TIO_CH_0
);

341 
	`adc_£t_ˇŒback
(
ADC
, 
ADC_INTERRUPT_EOC_1
,

342 
adc_íd_c⁄vîsi⁄
, 1);

344 
	`£t_adc_ªsﬁuti⁄
();

345 
	`adc_°¨t_ˇlibøti⁄
(
ADC
);

348 
	`c⁄figuª_tc_åiggî
();

352 i‡(
is_c⁄vîsi⁄_d⁄e
 =
åue
) {

353 
ul_vﬁ
 = 
g_ul_vÆue
 * 
VOLT_REF
 / 
g_max_digôÆ
;

354 
	`¥ötf
("-- Vﬁègêis: %4dmv\r\n", ()
ul_vﬁ
);

355 
is_c⁄vîsi⁄_d⁄e
 = 
Ál£
;

358 
	}
}

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_resolution_example/sam4n16c_sam4n_xplained_pro/conf_board.h

47 #i‚de‡
CONF_BOARD_H_INCLUDED


48 
	#CONF_BOARD_H_INCLUDED


	)

51 
	#CONF_BOARD_UART_CONSOLE


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_resolution_example/sam4n16c_sam4n_xplained_pro/conf_clock.h

47 #i‚de‡
CONF_CLOCK_H_INCLUDED


48 
	#CONF_CLOCK_H_INCLUDED


	)

59 
	#CONFIG_SYSCLK_SOURCE
 
SYSCLK_SRC_PLLACK


	)

63 
	#CONFIG_SYSCLK_PRES
 
SYSCLK_PRES_2


	)

73 
	#CONFIG_PLL0_SOURCE
 
PLL_SRC_MAINCK_8M_RC


	)

74 
	#CONFIG_PLL0_MUL
 25

	)

75 
	#CONFIG_PLL0_DIV
 1

	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_resolution_example/sam4n16c_sam4n_xplained_pro/conf_sleepmgr.h

46 #i‚de‡
CONF_SLEEPMGR_H


47 
	#CONF_SLEEPMGR_H


	)

50 
	#CONFIG_SLEEPMGR_ENABLE


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_resolution_example/sam4n16c_sam4n_xplained_pro/conf_uart_serial.h

47 #i‚de‡
CONF_USART_SERIAL_H


48 
	#CONF_USART_SERIAL_H


	)

51 
	#CONF_UART
 
CONSOLE_UART


	)

53 
	#CONF_UART_BAUDRATE
 115200

	)

55 
	#CONF_UART_PARITY
 
UART_MR_PAR_NO


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_resolution_example/sam4n16c_sam4n_xplained_pro/gcc/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc2.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<bﬂrd.h
>

66 
	~<i›‹t.h
>

69 
	~<öãºu±.h
>

72 
	~<pmc.h
>

73 
	~<¶ìp.h
>

76 
	~<∑πs.h
>

79 
	~<Àd.h
>

82 
	~<ex˚±i⁄s.h
>

85 
	~<ßm/¶ìpmgr.h
>

86 
	~<¶ìpmgr.h
>

89 
	~<°dio_£rül.h
>

92 
	~<sys˛k.h
>

95 
	~<tc.h
>

98 
	~<u¨t.h
>

101 
	~<£rül.h
>

104 
	~<ußπ.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_resolution_example/sam4n16c_sam4n_xplained_pro/iar/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc2.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<bﬂrd.h
>

66 
	~<i›‹t.h
>

69 
	~<öãºu±.h
>

72 
	~<pmc.h
>

73 
	~<¶ìp.h
>

76 
	~<∑πs.h
>

79 
	~<Àd.h
>

82 
	~<ex˚±i⁄s.h
>

85 
	~<ßm/¶ìpmgr.h
>

86 
	~<¶ìpmgr.h
>

89 
	~<°dio_£rül.h
>

92 
	~<sys˛k.h
>

95 
	~<tc.h
>

98 
	~<u¨t.h
>

101 
	~<£rül.h
>

104 
	~<ußπ.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_resolution_example/samg53n19_samg_xplained_pro/conf_board.h

47 #i‚de‡
CONF_BOARD_H_INCLUDED


48 
	#CONF_BOARD_H_INCLUDED


	)

51 
	#CONF_BOARD_UART_CONSOLE


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_resolution_example/samg53n19_samg_xplained_pro/conf_clock.h

47 #i‚de‡
CONF_CLOCK_H_INCLUDED


48 
	#CONF_CLOCK_H_INCLUDED


	)

59 
	#CONFIG_SYSCLK_SOURCE
 
SYSCLK_SRC_PLLACK


	)

62 
	#CONFIG_SYSCLK_PRES
 
SYSCLK_PRES_1


	)

73 
	#CONFIG_PLL0_SOURCE
 
PLL_SRC_SLCK_XTAL


	)

74 
	#CONFIG_PLL0_MUL
 1465

	)

75 
	#CONFIG_PLL0_DIV
 1

	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_resolution_example/samg53n19_samg_xplained_pro/conf_sleepmgr.h

46 #i‚de‡
CONF_SLEEPMGR_H


47 
	#CONF_SLEEPMGR_H


	)

50 
	#CONFIG_SLEEPMGR_ENABLE


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_resolution_example/samg53n19_samg_xplained_pro/conf_uart_serial.h

47 #i‚de‡
CONF_USART_SERIAL_H


48 
	#CONF_USART_SERIAL_H


	)

51 
	#CONF_UART
 
CONSOLE_UART


	)

53 
	#CONF_UART_BAUDRATE
 115200

	)

55 
	#CONF_UART_PARITY
 
UART_MR_PAR_NO


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_resolution_example/samg53n19_samg_xplained_pro/gcc/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc2.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<efc.h
>

66 
	~<bﬂrd.h
>

69 
	~<i›‹t.h
>

72 
	~<öãºu±.h
>

75 
	~<pmc.h
>

76 
	~<¶ìp.h
>

79 
	~<∑πs.h
>

82 
	~<Âu.h
>

85 
	~<Àd.h
>

88 
	~<ex˚±i⁄s.h
>

91 
	~<supc.h
>

94 
	~<ßm/¶ìpmgr.h
>

95 
	~<¶ìpmgr.h
>

98 
	~<°dio_£rül.h
>

101 
	~<sys˛k.h
>

104 
	~<tc.h
>

107 
	~<u¨t.h
>

110 
	~<£rül.h
>

113 
	~<ußπ.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_resolution_example/samg53n19_samg_xplained_pro/iar/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc2.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<efc.h
>

66 
	~<bﬂrd.h
>

69 
	~<i›‹t.h
>

72 
	~<öãºu±.h
>

75 
	~<pmc.h
>

76 
	~<¶ìp.h
>

79 
	~<∑πs.h
>

82 
	~<Âu.h
>

85 
	~<Àd.h
>

88 
	~<ex˚±i⁄s.h
>

91 
	~<supc.h
>

94 
	~<ßm/¶ìpmgr.h
>

95 
	~<¶ìpmgr.h
>

98 
	~<°dio_£rül.h
>

101 
	~<sys˛k.h
>

104 
	~<tc.h
>

107 
	~<u¨t.h
>

110 
	~<£rül.h
>

113 
	~<ußπ.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_resolution_example/samg55j19_samg_xplained_pro/conf_board.h

47 #i‚de‡
CONF_BOARD_H_INCLUDED


48 
	#CONF_BOARD_H_INCLUDED


	)

51 
	#CONF_BOARD_UART_CONSOLE


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_resolution_example/samg55j19_samg_xplained_pro/conf_clock.h

47 #i‚de‡
CONF_CLOCK_H_INCLUDED


48 
	#CONF_CLOCK_H_INCLUDED


	)

59 
	#CONFIG_SYSCLK_SOURCE
 
SYSCLK_SRC_PLLACK


	)

62 
	#CONFIG_SYSCLK_PRES
 
SYSCLK_PRES_1


	)

73 
	#CONFIG_PLL0_SOURCE
 
PLL_SRC_SLCK_XTAL


	)

74 
	#CONFIG_PLL0_MUL
 3662

	)

75 
	#CONFIG_PLL0_DIV
 1

	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_resolution_example/samg55j19_samg_xplained_pro/conf_sleepmgr.h

46 #i‚de‡
CONF_SLEEPMGR_H


47 
	#CONF_SLEEPMGR_H


	)

49 
	#CONFIG_SLEEPMGR_ENABLE


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_resolution_example/samg55j19_samg_xplained_pro/conf_uart_serial.h

47 #i‚de‡
CONF_USART_SERIAL_H_INCLUDED


48 
	#CONF_USART_SERIAL_H_INCLUDED


	)

51 
	#CONF_UART
 
CONSOLE_UART


	)

53 
	#CONF_UART_BAUDRATE
 (115200UL)

	)

55 
	#CONF_UART_CHAR_LENGTH
 
US_MR_CHRL_8_BIT


	)

57 
	#CONF_UART_PARITY
 
US_MR_PAR_NO


	)

59 
	#CONF_UART_STOP_BITS
 
US_MR_NBSTOP_1_BIT


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_resolution_example/samg55j19_samg_xplained_pro/gcc/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc2.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<efc.h
>

66 
	~<Êexcom.h
>

69 
	~<bﬂrd.h
>

72 
	~<i›‹t.h
>

75 
	~<öãºu±.h
>

78 
	~<pmc.h
>

79 
	~<¶ìp.h
>

82 
	~<∑πs.h
>

85 
	~<Âu.h
>

88 
	~<Àd.h
>

91 
	~<supc.h
>

94 
	~<ßm/¶ìpmgr.h
>

95 
	~<¶ìpmgr.h
>

98 
	~<°dio_£rül.h
>

101 
	~<sys˛k.h
>

104 
	~<tc.h
>

107 
	~<£rül.h
>

110 
	~<ußπ.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_resolution_example/samg55j19_samg_xplained_pro/iar/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc2.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<efc.h
>

66 
	~<Êexcom.h
>

69 
	~<bﬂrd.h
>

72 
	~<i›‹t.h
>

75 
	~<öãºu±.h
>

78 
	~<pmc.h
>

79 
	~<¶ìp.h
>

82 
	~<∑πs.h
>

85 
	~<Âu.h
>

88 
	~<Àd.h
>

91 
	~<supc.h
>

94 
	~<ßm/¶ìpmgr.h
>

95 
	~<¶ìpmgr.h
>

98 
	~<°dio_£rül.h
>

101 
	~<sys˛k.h
>

104 
	~<tc.h
>

107 
	~<£rül.h
>

110 
	~<ußπ.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_sam3u.c

47 
	~"adc.h
"

51 #ifde‡
__˝lu•lus


57 #i‡
SAM3U


72 
uöt32_t
 
adc12b_öô
(
Adc12b
 *
p_adc
, c⁄° uöt32_à
ul_mck
, c⁄° uöt32_à
ul_adc_˛ock
,

73 c⁄° 
uöt32_t
 
ul_°¨tu±ime
, c⁄° uöt32_à
ul_offmode_°¨tu±ime
)

75 
uöt32_t
 
ul_¥esˇl
, 
ul_°¨tup
, 
ul_offmode
;

76 
p_adc
->
ADC12B_CR
 = 
ADC12B_CR_SWRST
;

79 
p_adc
->
ADC12B_MR
 = 0;

82 
p_adc
->
ADC12B_PTCR
 = (
ADC12B_PTCR_RXTDIS
 | 
ADC12B_PTCR_TXTDIS
);

83 
p_adc
->
ADC12B_RCR
 = 0;

84 
p_adc
->
ADC12B_RNCR
 = 0;

85 
ul_¥esˇl
 = 
ul_mck
 / (2 * 
ul_adc_˛ock
) - 1;

86 
ul_°¨tup
 = ((
ul_adc_˛ock
 / 1000000Ë* 
ul_°¨tu±ime
 / 8) - 1;

87 
ul_offmode
 = ((
ul_adc_˛ock
 / 1000000Ë* 
ul_offmode_°¨tu±ime
 / 8) -

89 
p_adc
->
ADC12B_MR
 |=

90 
ADC12B_MR_PRESCAL
(
ul_¥esˇl
Ë| ((
ul_°¨tup
 <<

91 
ADC12B_MR_STARTUP_Pos
) &

92 
ADC12B_MR_STARTUP_Msk
);

93 
p_adc
->
ADC12B_EMR
 |(
ul_offmode
 << 16) & (0xffu << 16);

103 
adc12b_£t_ªsﬁuti⁄
(
Adc12b
 *
p_adc
, c⁄° 
adc_ªsﬁuti⁄_t
 
ªsﬁuti⁄
)

105 
p_adc
->
ADC12B_MR
 |(
ªsﬁuti⁄
 << 4Ë& 
ADC12B_MR_LOWRES
;

114 
adc12b_c⁄figuª_åiggî
(
Adc12b
 *
p_adc
, c⁄° 
adc12b_åiggî_t
 
åiggî
)

116 
p_adc
->
ADC12B_MR
 |
åiggî
;

129 
adc12b_c⁄figuª_powî_ßve
(
Adc12b
 *
p_adc
, c⁄° 
uöt8_t
 
uc_¶ìp
,

130 
uöt8_t
 
uc_offmode
)

132 
p_adc
->
ADC12B_MR
 |((
uc_¶ìp
 << 5Ë& 
ADC12B_MR_SLEEP
);

133 
p_adc
->
ADC12B_EMR
 |
uc_offmode
;

142 
adc12b_c⁄figuª_timög
(
Adc12b
 *
p_adc
, c⁄° 
uöt32_t
 
ul_sh
)

144 
p_adc
->
ADC12B_MR
 |
ADC12B_MR_SHTIM
(
ul_sh
);

155 
adc12b_°¨t
(
Adc12b
 *
p_adc
)

157 
p_adc
->
ADC12B_CR
 = 
ADC12B_CR_START
;

164 
adc12b_ª£t
(
Adc12b
 *
p_adc
)

166 
p_adc
->
ADC12B_CR
 = 
ADC12B_CR_SWRST
;

175 
adc12b_íabÀ_ch™√l
(
Adc12b
 *
p_adc
, c⁄° 
adc_ch™√l_num_t
 
adc_ch
)

177 
p_adc
->
ADC12B_CHER
 = 1 << 
adc_ch
;

185 
adc12b_íabÀ_Æl_ch™√l
(
Adc12b
 *
p_adc
)

187 
p_adc
->
ADC12B_CHER
 = 0xFF;

196 
adc12b_dißbÀ_ch™√l
(
Adc12b
 *
p_adc
, c⁄° 
adc_ch™√l_num_t
 
adc_ch
)

198 
p_adc
->
ADC12B_CHDR
 = 1 << 
adc_ch
;

206 
adc12b_dißbÀ_Æl_ch™√l
(
Adc12b
 *
p_adc
)

208 
p_adc
->
ADC12B_CHDR
 = 0xFF;

220 
uöt32_t
 
adc12b_gë_ch™√l_°©us
(c⁄° 
Adc12b
 *
p_adc
, c⁄° 
adc_ch™√l_num_t
 
adc_ch
)

222  
p_adc
->
ADC12B_CHSR
 & (1 << 
adc_ch
);

233 
uöt32_t
 
adc12b_gë_ch™√l_vÆue
(c⁄° 
Adc12b
 *
p_adc
,c⁄° 
adc_ch™√l_num_t
 
adc_ch
)

235 
uöt32_t
 
dwD©a
 = 0;

237 i‡(15 >
adc_ch
) {

238 
dwD©a
 = *(
p_adc
->
ADC12B_CDR
 + 
adc_ch
);

241  
dwD©a
;

251 
uöt32_t
 
adc12b_gë_œã°_vÆue
(c⁄° 
Adc12b
 *
p_adc
)

253  
p_adc
->
ADC12B_LCDR
;

261 
adc12b_íabÀ_dif„ª¡ül_öput
(
Adc12b
 *
p_adc
)

263 
p_adc
->
ADC12B_ACR
 |= (0x01u << 16);

271 
adc12b_dißbÀ_dif„ª¡ül_öput
(
Adc12b
 *
p_adc
)

273 
p_adc
->
ADC12B_ACR
 &= (0x01u << 16);

281 
adc12b_íabÀ_öput_off£t
(
Adc12b
 *
p_adc
)

283 
p_adc
->
ADC12B_ACR
 |= (0x01u << 17);

291 
adc12b_dißbÀ_öput_off£t
(
Adc12b
 *
p_adc
)

293 
p_adc
->
ADC12B_ACR
 &= (0x01u << 17);

302 
adc12b_£t_öput_gaö
(
Adc12b
 *
p_adc
, c⁄° 
adc_gaövÆue_t
 
gaö
)

304 
p_adc
->
ADC12B_ACR
 |(0x03u & 
gaö
);

315 
uöt32_t
 
adc12b_gë_a˘uÆ_adc_˛ock
(c⁄° 
Adc12b
 *
p_adc
, c⁄° uöt32_à
ul_mck
)

317 
uöt32_t
 
ul_adc‰eq
;

318 
uöt32_t
 
ul_¥esˇl
;

321 
ul_¥esˇl
 = ((
p_adc
->
ADC12B_MR
 & 
ADC12B_MR_PRESCAL_Msk
) >>

322 
ADC12B_MR_PRESCAL_Pos
);

323 
ul_adc‰eq
 = 
ul_mck
 / ((
ul_¥esˇl
 + 1) * 2);

324  
ul_adc‰eq
;

333 
adc12b_íabÀ_öãºu±
(
Adc12b
 *
p_adc
, c⁄° 
uöt32_t
 
ul_sour˚
)

335 
p_adc
->
ADC12B_IER
 = 
ul_sour˚
;

344 
adc12b_dißbÀ_öãºu±
(
Adc12b
 *
p_adc
, c⁄° 
uöt32_t
 
ul_sour˚
)

346 
p_adc
->
ADC12B_IDR
 = 
ul_sour˚
;

355 
uöt32_t
 
adc12b_gë_öãºu±_mask
(c⁄° 
Adc12b
 *
p_adc
)

357  
p_adc
->
ADC12B_IMR
;

367 
uöt32_t
 
adc12b_gë_°©us
(c⁄° 
Adc12b
 *
p_adc
)

369  
p_adc
->
ADC12B_SR
;

381 
adc12b_£t_büs_cuºít
(
Adc12b
 *
p_adc
, c⁄° 
uöt8_t
 
uc_ib˘l
)

383 
p_adc
->
ADC12B_ACR
 |
ADC12B_ACR_IBCTL
(
uc_ib˘l
);

393 
Pdc
 *
adc12b_gë_pdc_ba£
(c⁄° 
Adc12b
 *
p_adc
)

395 
UNUSED
(
p_adc
);

396  
PDC_ADC12B
;

402 #ifde‡
__˝lu•lus


	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/adc2_temp_sensor_example.c

90 
	~<°dio.h
>

91 
	~<as£π.h
>

92 
	~"asf.h
"

95 
	#VOLT_REF
 (3300)

	)

98 
	#MAX_DIGITAL
 (1023UL)

	)

100 
	#STRING_EOL
 "\r"

	)

101 
	#STRING_HEADER
 "\n-- ADC Temperature Sensor Example --\r\n" \

102 "-- "
BOARD_NAME
" --\r\n" \

103 "-- Compûed: "
__DATE__
" "
__TIME__
" --"
STRING_EOL


	)

106 vﬁ©ûê
boﬁ
 
	gis_c⁄vîsi⁄_d⁄e
 = 
Ál£
;

109 vﬁ©ûê
uöt32_t
 
	gg_ul_vÆue
 = 0;

114 
	$c⁄figuª_c⁄sﬁe
()

116 c⁄° 
ußπ_£rül_›ti⁄s_t
 
u¨t_£rül_›ti⁄s
 = {

117 .
baudøã
 = 
CONF_UART_BAUDRATE
,

118 .
∑rôyty≥
 = 
CONF_UART_PARITY


122 
	`°dio_£rül_öô
(
CONF_UART
, &
u¨t_£rül_›ti⁄s
);

123 
	}
}

128 
	$adc_ãmp_£ns‹_íd_c⁄vîsi⁄
()

130 
g_ul_vÆue
 = 
	`adc_ch™√l_gë_vÆue
(
ADC
, 
ADC_TEMPERATURE_SENSOR
);

131 
is_c⁄vîsi⁄_d⁄e
 = 
åue
;

132 
	}
}

139 
	$maö
()

141 
öt32_t
 
ul_vﬁ
;

142 
öt32_t
 
ul_ãmp
;

145 
	`sys˛k_öô
();

146 
	`bﬂrd_öô
();

148 
	`c⁄figuª_c⁄sﬁe
();

151 
	`puts
(
STRING_HEADER
);

153 
	`adc_íabÀ
();

155 
adc_c⁄fig
 
adc_cfg
;

157 
	`adc_gë_c⁄fig_deÁu…s
(&
adc_cfg
);

159 
	`adc_öô
(
ADC
, &
adc_cfg
);

160 
	`adc_ch™√l_íabÀ
(
ADC
,
ADC_TEMPERATURE_SENSOR
);

162 
	`adc_£t_åiggî
(
ADC
, 
ADC_TRIG_SW
);

164 
adc_ãmp_£ns‹_c⁄fig
 
adc_ãmp_£ns‹_cfg
;

166 
	`adc_ãmp_£ns‹_gë_c⁄fig_deÁu…s
(&
adc_ãmp_£ns‹_cfg
);

168 
	`adc_ãmp_£ns‹_£t_c⁄fig
(
ADC
, &
adc_ãmp_£ns‹_cfg
);

170 
	`adc_£t_ˇŒback
(
ADC
, 
ADC_INTERRUPT_EOC_16
,

171 
adc_ãmp_£ns‹_íd_c⁄vîsi⁄
, 1);

173 
	`adc_°¨t_so·w¨e_c⁄vîsi⁄
(
ADC
);

176 i‡(
is_c⁄vîsi⁄_d⁄e
 =
åue
) {

177 
is_c⁄vîsi⁄_d⁄e
 = 
Ál£
;

178 
ul_vﬁ
 = 
g_ul_vÆue
 * 
VOLT_REF
 / 
MAX_DIGITAL
;

183 
ul_ãmp
 = (
ul_vﬁ
 - 1440) * 100 / 470 + 27;

185 
	`¥ötf
("-- Tem≥øtuª is: %4d\r\n", ()
ul_ãmp
);

186 
	`dñay_ms
(1000);

187 
	`adc_°¨t_so·w¨e_c⁄vîsi⁄
(
ADC
);

190 
	}
}

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/adc_temp_sensor_example.c

102 
	~<°dio.h
>

103 
	~<°rög.h
>

104 
	~<as£π.h
>

105 
	~"asf.h
"

106 
	~"c⁄f_bﬂrd.h
"

109 
	#BUFFER_SIZE
 (100)

	)

112 
	#VOLT_REF
 (3300)

	)

114 #i‡
SAM3S
 || 
SAM4S
 || 
SAM3XA
 || 
SAM3N
 || 
SAM4C
 || 
SAM4CM


116 
	#TRACKING_TIME
 1

	)

118 
	#TRANSFER_PERIOD
 1

	)

120 #i‡
SAM4C
 || 
SAM4CM


121 
	#STARTUP_TIME
 
ADC_STARTUP_TIME_10


	)

123 
	#STARTUP_TIME
 
ADC_STARTUP_TIME_4


	)

127 #i‡
SAM3U


128 #ifde‡
ADC_12B


130 
	#STARTUP_TIME
 7

	)

132 
	#OFF_MODE_STARTUP_TIME
 7

	)

134 
	#STARTUP_TIME
 3

	)

137 
	#SAMPLE_HOLD_TIME
 6

	)

141 #i‡
SAM3S
 || 
SAM3XA
 || 
SAM4S


143 
	#MAX_DIGITAL
 (4095)

	)

144 #ñi‡
SAM3N
 || 
SAM4C
 || 
SAM4CM


145 
	#MAX_DIGITAL
 (1023)

	)

146 #ñi‡
SAM3U


147 #ifde‡
ADC_12B


148 
	#MAX_DIGITAL
 (4095)

	)

150 
	#MAX_DIGITAL
 (1023)

	)

154 
	#STRING_EOL
 "\r"

	)

155 
	#STRING_HEADER
 "-- ADC Temperature Sensor Example --\r\n" \

156 "-- "
BOARD_NAME
" --\r\n" \

157 "-- Compûed: "
__DATE__
" "
__TIME__
" --"
STRING_EOL


	)

160 
öt16_t
 
	ggs_s_adc_vÆues
[
BUFFER_SIZE
] = { 0 };

166 
	$¥öt_ãmp
(
ãmp
)

168 
öt16_t
 
s_öãgî1
 = 0;

169 
öt32_t
 
l_öãgî2
 = 0;

171 
	`As£π
(
INT16_MAX
 > (
ãmp
 * 100.0Ë&& 
INT16_MIN
 < (temp * 100.0));

174 
s_öãgî1
 = (
öt16_t
Ë(
ãmp
 * 100.0);

177 
l_öãgî2
 = 
s_öãgî1
 / 10;

178 i‡((
s_öãgî1
 - 
l_öãgî2
 * 10) > 4) {

179 
s_öãgî1
 = 
l_öãgî2
 + 1;

181 i‡((
s_öãgî1
 - 
l_öãgî2
 * 10) < -4) {

182 
s_öãgî1
 = 
l_öãgî2
 - 1;

184 
s_öãgî1
 = 
l_öãgî2
;

189 
l_öãgî2
 = 
s_öãgî1
 / 10;

191 
s_öãgî1
 = s_öãgî1 - 
l_öãgî2
 * 10;

193 i‡(
s_öãgî1
 < 0) {

194 
	`¥ötf
("Temp:-%d.%d \n\r", (
öt16_t
Ë((
l_öãgî2
) * (-1)),

195 (
öt16_t
Ë((
s_öãgî1
) * (-1)));

197 
	`¥ötf
("Temp:%d.%d \n\r", (
öt16_t
Ë
l_öãgî2
,

198 (
öt16_t
Ë
s_öãgî1
);

200 
	}
}

209 
uöt32_t
 
	$adc_ªad_buf„r
(
Adc
 * 
pADC
, 
öt16_t
 * 
pwBuf„r
, 
uöt32_t
 
dwSize
)

212 i‡((
pADC
->
ADC_RCR
 =0Ë&& (pADC->
ADC_RNCR
 == 0)) {

213 
pADC
->
ADC_RPR
 = (
uöt32_t
Ë
pwBuf„r
;

214 
pADC
->
ADC_RCR
 = 
dwSize
;

215 
pADC
->
ADC_PTCR
 = 
ADC_PTCR_RXTEN
;

219 i‡(
pADC
->
ADC_RNCR
 == 0) {

220 
pADC
->
ADC_RNPR
 = (
uöt32_t
Ë
pwBuf„r
;

221 
pADC
->
ADC_RNCR
 = 
dwSize
;

228 
	}
}

233 
	$c⁄figuª_c⁄sﬁe
()

235 c⁄° 
ußπ_£rül_›ti⁄s_t
 
u¨t_£rül_›ti⁄s
 = {

236 .
baudøã
 = 
CONF_UART_BAUDRATE
,

237 .
∑rôyty≥
 = 
CONF_UART_PARITY


241 
	`sys˛k_íabÀ_≥rùhîÆ_˛ock
(
CONSOLE_UART_ID
);

242 
	`°dio_£rül_öô
(
CONF_UART
, &
u¨t_£rül_›ti⁄s
);

243 
	}
}

248 
	$SysTick_H™dÀr
()

250 i‡(
	`adc_gë_°©us
(
ADC
Ë& (1 << 
ADC_TEMPERATURE_SENSOR
)) {

251 
	`adc_°¨t
(
ADC
);

253 
	}
}

258 
	$ADC_H™dÀr
()

260 
uöt32_t
 
ul_cou¡î
;

261 
öt32_t
 
l_vﬁ
;

262 
f_ãmp
;

263 
uöt32_t
 
ul_vÆue
 = 0;

264 
uöt32_t
 
ul_ãmp_vÆue
 = 0;

266 i‡((
	`adc_gë_°©us
(
ADC
Ë& 
ADC_ISR_RXBUFF
) == ADC_ISR_RXBUFF) {

269 
ul_cou¡î
 = 0; ul_cou¡î < 
BUFFER_SIZE
; ul_counter++) {

270 
ul_vÆue
 +
gs_s_adc_vÆues
[
ul_cou¡î
];

273 
ul_ãmp_vÆue
 = 
ul_vÆue
 / 10;

274 
ul_vÆue
 = ul_value / 100;

275 
ul_ãmp_vÆue
 -(
ul_vÆue
 * 10);

277 i‡(
ul_ãmp_vÆue
 > 4) {

278 
ul_vÆue
++;

281 
l_vﬁ
 = 
ul_vÆue
 * 
VOLT_REF
 / 
MAX_DIGITAL
;

282 #i‡
SAM3S
 || 
SAM3XA


284 
f_ãmp
 = ()(
l_vﬁ
 - 800) * 0.37736 + 27.0;

285 #ñi‡
SAM4N


287 
f_ãmp
 = ()(
l_vﬁ
 - 1440) * 0.21186 + 27.0;

290 
f_ãmp
 = ()(
l_vﬁ
 - 1440) * 0.21276 + 27.0;

292 
	`¥öt_ãmp
(
f_ãmp
);

294 
	`mem£t
(
gs_s_adc_vÆues
, 0x0, (gs_s_adc_values));

296 
	`adc_ªad_buf„r
(
ADC
, 
gs_s_adc_vÆues
, 
BUFFER_SIZE
);

299 
	}
}

310 
	$maö
()

313 
	`sys˛k_öô
();

314 
	`bﬂrd_öô
();

316 
	`c⁄figuª_c⁄sﬁe
();

319 
	`puts
(
STRING_HEADER
);

322 i‡(
	`SysTick_C⁄fig
(
	`sys˛k_gë_˝u_hz
() / 100)) {

323 
	`puts
("-F- Systick configurationÉrror\r");

328 
	`pmc_íabÀ_≥rùh_˛k
(
ID_ADC
);

339 
	`adc_öô
(
ADC
, 
	`sys˛k_gë_˝u_hz
(), 6400000, 
STARTUP_TIME
);

349 
	`adc_c⁄figuª_timög
(
ADC
, 
TRACKING_TIME


350 #i‡!
SAM4C
 && !
SAM4CM


351 , 
ADC_SETTLING_TIME_3
, 
TRANSFER_PERIOD


355 
	`adc_c⁄figuª_åiggî
(
ADC
, 
ADC_TRIG_SW
, 0);

357 
	`adc_check
(
ADC
, 
	`sys˛k_gë_˝u_hz
());

360 
	`adc_íabÀ_ch™√l
(
ADC
, 
ADC_TEMPERATURE_SENSOR
);

363 
	`adc_íabÀ_ts
(
ADC
);

366 
	`NVIC_E«bÀIRQ
(
ADC_IRQn
);

369 
	`adc_°¨t
(
ADC
);

371 
	`adc_ªad_buf„r
(
ADC
, 
gs_s_adc_vÆues
, 
BUFFER_SIZE
);

374 
	`adc_íabÀ_öãºu±
(
ADC
, 
ADC_ISR_RXBUFF
);

378 
	}
}

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam3s4c_sam3s_ek/conf_board.h

47 #i‚de‡
CONF_BOARD_H_INCLUDED


48 
	#CONF_BOARD_H_INCLUDED


	)

51 
	#CONSOLE_PINS
 {
PINS_UART
}

	)

54 
	#CONSOLE_UART_ID
 
ID_UART0


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam3s4c_sam3s_ek/conf_clock.h

47 #i‚de‡
CONF_CLOCK_H_INCLUDED


48 
	#CONF_CLOCK_H_INCLUDED


	)

59 
	#CONFIG_SYSCLK_SOURCE
 
SYSCLK_SRC_PLLACK


	)

64 
	#CONFIG_SYSCLK_PRES
 
SYSCLK_PRES_2


	)

74 
	#CONFIG_PLL0_SOURCE
 
PLL_SRC_MAINCK_XTAL


	)

75 
	#CONFIG_PLL0_MUL
 32

	)

76 
	#CONFIG_PLL0_DIV
 3

	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam3s4c_sam3s_ek/conf_uart_serial.h

47 #i‚de‡
CONF_USART_SERIAL_H


48 
	#CONF_USART_SERIAL_H


	)

51 
	#CONF_UART
 
CONSOLE_UART


	)

53 
	#CONF_UART_BAUDRATE
 115200

	)

55 
	#CONF_UART_PARITY
 
UART_MR_PAR_NO


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam3s4c_sam3s_ek/gcc/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<gpio.h
>

66 
	~<bﬂrd.h
>

69 
	~<i›‹t.h
>

72 
	~<öãºu±.h
>

75 
	~<pio.h
>

78 
	~<pmc.h
>

79 
	~<¶ìp.h
>

82 
	~<∑πs.h
>

85 
	~<Àd.h
>

88 
	~<ex˚±i⁄s.h
>

91 
	~<°dio_£rül.h
>

94 
	~<sys˛k.h
>

97 
	~<u¨t.h
>

100 
	~<£rül.h
>

103 
	~<ußπ.h
>

106 
	~<pio_h™dÀr.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam3s4c_sam3s_ek/iar/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<gpio.h
>

66 
	~<bﬂrd.h
>

69 
	~<i›‹t.h
>

72 
	~<öãºu±.h
>

75 
	~<pio.h
>

78 
	~<pmc.h
>

79 
	~<¶ìp.h
>

82 
	~<∑πs.h
>

85 
	~<Àd.h
>

88 
	~<ex˚±i⁄s.h
>

91 
	~<°dio_£rül.h
>

94 
	~<sys˛k.h
>

97 
	~<u¨t.h
>

100 
	~<£rül.h
>

103 
	~<ußπ.h
>

106 
	~<pio_h™dÀr.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam3sd8c_sam3s_ek2/conf_board.h

47 #i‚de‡
CONF_BOARD_H_INCLUDED


48 
	#CONF_BOARD_H_INCLUDED


	)

51 
	#CONF_BOARD_UART_CONSOLE


	)

54 
	#CONSOLE_PINS
 {
PINS_UART
}

	)

57 
	#CONSOLE_UART_ID
 
ID_UART0


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam3sd8c_sam3s_ek2/conf_clock.h

47 #i‚de‡
CONF_CLOCK_H_INCLUDED


48 
	#CONF_CLOCK_H_INCLUDED


	)

59 
	#CONFIG_SYSCLK_SOURCE
 
SYSCLK_SRC_PLLACK


	)

64 
	#CONFIG_SYSCLK_PRES
 
SYSCLK_PRES_2


	)

74 
	#CONFIG_PLL0_SOURCE
 
PLL_SRC_MAINCK_XTAL


	)

75 
	#CONFIG_PLL0_MUL
 32

	)

76 
	#CONFIG_PLL0_DIV
 3

	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam3sd8c_sam3s_ek2/conf_uart_serial.h

47 #i‚de‡
CONF_USART_SERIAL_H


48 
	#CONF_USART_SERIAL_H


	)

51 
	#CONF_UART
 
CONSOLE_UART


	)

53 
	#CONF_UART_BAUDRATE
 115200

	)

55 
	#CONF_UART_PARITY
 
UART_MR_PAR_NO


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam3sd8c_sam3s_ek2/gcc/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<gpio.h
>

66 
	~<bﬂrd.h
>

69 
	~<i›‹t.h
>

72 
	~<öãºu±.h
>

75 
	~<pio.h
>

78 
	~<pmc.h
>

79 
	~<¶ìp.h
>

82 
	~<∑πs.h
>

85 
	~<Àd.h
>

88 
	~<ex˚±i⁄s.h
>

91 
	~<°dio_£rül.h
>

94 
	~<sys˛k.h
>

97 
	~<u¨t.h
>

100 
	~<£rül.h
>

103 
	~<ußπ.h
>

106 
	~<pio_h™dÀr.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam3sd8c_sam3s_ek2/iar/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<gpio.h
>

66 
	~<bﬂrd.h
>

69 
	~<i›‹t.h
>

72 
	~<öãºu±.h
>

75 
	~<pio.h
>

78 
	~<pmc.h
>

79 
	~<¶ìp.h
>

82 
	~<∑πs.h
>

85 
	~<Àd.h
>

88 
	~<ex˚±i⁄s.h
>

91 
	~<°dio_£rül.h
>

94 
	~<sys˛k.h
>

97 
	~<u¨t.h
>

100 
	~<£rül.h
>

103 
	~<ußπ.h
>

106 
	~<pio_h™dÀr.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam3x8e_arduino_due_x/conf_board.h

47 #i‚de‡
CONF_BOARD_H_INCLUDED


48 
	#CONF_BOARD_H_INCLUDED


	)

51 
	#CONF_BOARD_UART_CONSOLE


	)

54 
	#CONSOLE_PINS
 {
PINS_UART
}

	)

57 
	#CONSOLE_UART_ID
 
ID_UART


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam3x8e_arduino_due_x/conf_clock.h

47 #i‚de‡
CONF_CLOCK_H_INCLUDED


48 
	#CONF_CLOCK_H_INCLUDED


	)

59 
	#CONFIG_SYSCLK_SOURCE
 
SYSCLK_SRC_PLLACK


	)

64 
	#CONFIG_SYSCLK_PRES
 
SYSCLK_PRES_2


	)

74 
	#CONFIG_PLL0_SOURCE
 
PLL_SRC_MAINCK_XTAL


	)

75 
	#CONFIG_PLL0_MUL
 14

	)

76 
	#CONFIG_PLL0_DIV
 1

	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam3x8e_arduino_due_x/conf_uart_serial.h

47 #i‚de‡
CONF_USART_SERIAL_H


48 
	#CONF_USART_SERIAL_H


	)

51 
	#CONF_UART
 
CONSOLE_UART


	)

53 
	#CONF_UART_BAUDRATE
 115200

	)

55 
	#CONF_UART_PARITY
 
UART_MR_PAR_NO


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam3x8e_arduino_due_x/gcc/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<gpio.h
>

66 
	~<bﬂrd.h
>

69 
	~<i›‹t.h
>

72 
	~<öãºu±.h
>

75 
	~<pio.h
>

78 
	~<pmc.h
>

79 
	~<¶ìp.h
>

82 
	~<∑πs.h
>

85 
	~<ex˚±i⁄s.h
>

88 
	~<°dio_£rül.h
>

91 
	~<sys˛k.h
>

94 
	~<u¨t.h
>

97 
	~<£rül.h
>

100 
	~<ußπ.h
>

103 
	~<pio_h™dÀr.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam3x8e_arduino_due_x/iar/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<gpio.h
>

66 
	~<bﬂrd.h
>

69 
	~<i›‹t.h
>

72 
	~<öãºu±.h
>

75 
	~<pio.h
>

78 
	~<pmc.h
>

79 
	~<¶ìp.h
>

82 
	~<∑πs.h
>

85 
	~<ex˚±i⁄s.h
>

88 
	~<°dio_£rül.h
>

91 
	~<sys˛k.h
>

94 
	~<u¨t.h
>

97 
	~<£rül.h
>

100 
	~<ußπ.h
>

103 
	~<pio_h™dÀr.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam3x8h_sam3x_ek/conf_board.h

47 #i‚de‡
CONF_BOARD_H_INCLUDED


48 
	#CONF_BOARD_H_INCLUDED


	)

51 
	#CONF_BOARD_UART_CONSOLE


	)

54 
	#CONSOLE_PINS
 {
PINS_UART
}

	)

57 
	#CONSOLE_UART_ID
 
ID_UART


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam3x8h_sam3x_ek/conf_clock.h

47 #i‚de‡
CONF_CLOCK_H_INCLUDED


48 
	#CONF_CLOCK_H_INCLUDED


	)

59 
	#CONFIG_SYSCLK_SOURCE
 
SYSCLK_SRC_PLLACK


	)

64 
	#CONFIG_SYSCLK_PRES
 
SYSCLK_PRES_2


	)

74 
	#CONFIG_PLL0_SOURCE
 
PLL_SRC_MAINCK_XTAL


	)

75 
	#CONFIG_PLL0_MUL
 14

	)

76 
	#CONFIG_PLL0_DIV
 1

	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam3x8h_sam3x_ek/conf_uart_serial.h

47 #i‚de‡
CONF_USART_SERIAL_H


48 
	#CONF_USART_SERIAL_H


	)

51 
	#CONF_UART
 
CONSOLE_UART


	)

53 
	#CONF_UART_BAUDRATE
 115200

	)

55 
	#CONF_UART_PARITY
 
UART_MR_PAR_NO


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam3x8h_sam3x_ek/gcc/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<gpio.h
>

66 
	~<bﬂrd.h
>

69 
	~<i›‹t.h
>

72 
	~<öãºu±.h
>

75 
	~<pio.h
>

78 
	~<pmc.h
>

79 
	~<¶ìp.h
>

82 
	~<∑πs.h
>

85 
	~<Àd.h
>

88 
	~<ex˚±i⁄s.h
>

91 
	~<°dio_£rül.h
>

94 
	~<sys˛k.h
>

97 
	~<u¨t.h
>

100 
	~<£rül.h
>

103 
	~<ußπ.h
>

106 
	~<pio_h™dÀr.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam3x8h_sam3x_ek/iar/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<gpio.h
>

66 
	~<bﬂrd.h
>

69 
	~<i›‹t.h
>

72 
	~<öãºu±.h
>

75 
	~<pio.h
>

78 
	~<pmc.h
>

79 
	~<¶ìp.h
>

82 
	~<∑πs.h
>

85 
	~<Àd.h
>

88 
	~<ex˚±i⁄s.h
>

91 
	~<°dio_£rül.h
>

94 
	~<sys˛k.h
>

97 
	~<u¨t.h
>

100 
	~<£rül.h
>

103 
	~<ußπ.h
>

106 
	~<pio_h™dÀr.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4c16c_sam4c_ek/conf_board.h

47 #i‚de‡
CONF_BOARD_H_INCLUDED


48 
	#CONF_BOARD_H_INCLUDED


	)

51 
	#CONF_BOARD_UART_CONSOLE


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4c16c_sam4c_ek/conf_clock.h

47 #i‚de‡
CONF_CLOCK_H_INCLUDED


48 
	#CONF_CLOCK_H_INCLUDED


	)

60 
	#CONFIG_SYSCLK_SOURCE
 
SYSCLK_SRC_PLLBCK


	)

63 
	#CONFIG_SYSCLK_PRES
 
SYSCLK_PRES_1


	)

77 
	#CONFIG_PLL1_SOURCE
 
PLLB_SRC_MAINCK_XTAL


	)

78 
	#CONFIG_PLL1_MUL
 (240000000UL / 
BOARD_FREQ_MAINCK_XTAL
)

	)

79 
	#CONFIG_PLL1_DIV
 2

	)

86 
	#CONFIG_CPCLK_ENABLE


	)

93 
	#CONFIG_CPCLK_SOURCE
 
CPCLK_SRC_MCK


	)

96 
	#CONFIG_CPCLK_PRES
 1

	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4c16c_sam4c_ek/conf_uart_serial.h

47 #i‚de‡
CONF_USART_SERIAL_H_INCLUDED


48 
	#CONF_USART_SERIAL_H_INCLUDED


	)

51 
	#CONF_UART
 
CONSOLE_UART


	)

53 
	#CONF_UART_BAUDRATE
 115200UL

	)

55 
	#CONF_UART_PARITY
 
UART_MR_PAR_NO


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4c16c_sam4c_ek/gcc/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<gpio.h
>

66 
	~<bﬂrd.h
>

69 
	~<i›‹t.h
>

72 
	~<öãºu±.h
>

75 
	~<pio.h
>

78 
	~<pmc.h
>

79 
	~<¶ìp.h
>

82 
	~<∑πs.h
>

85 
	~<Àd.h
>

88 
	~<°dio_£rül.h
>

91 
	~<sys˛k.h
>

94 
	~<u¨t.h
>

97 
	~<£rül.h
>

100 
	~<ußπ.h
>

103 
	~<pio_h™dÀr.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4c16c_sam4c_ek/iar/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<gpio.h
>

66 
	~<bﬂrd.h
>

69 
	~<i›‹t.h
>

72 
	~<öãºu±.h
>

75 
	~<pio.h
>

78 
	~<pmc.h
>

79 
	~<¶ìp.h
>

82 
	~<∑πs.h
>

85 
	~<Àd.h
>

88 
	~<°dio_£rül.h
>

91 
	~<sys˛k.h
>

94 
	~<u¨t.h
>

97 
	~<£rül.h
>

100 
	~<ußπ.h
>

103 
	~<pio_h™dÀr.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4cmp16c_sam4cmp_db/conf_board.h

47 #i‚de‡
CONF_BOARD_H_INCLUDED


48 
	#CONF_BOARD_H_INCLUDED


	)

51 
	#CONF_BOARD_UART_CONSOLE


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4cmp16c_sam4cmp_db/conf_clock.h

47 #i‚de‡
CONF_CLOCK_H_INCLUDED


48 
	#CONF_CLOCK_H_INCLUDED


	)

60 
	#CONFIG_SYSCLK_SOURCE
 
SYSCLK_SRC_PLLBCK


	)

63 
	#CONFIG_SYSCLK_PRES
 
SYSCLK_PRES_1


	)

77 
	#CONFIG_PLL1_SOURCE
 
PLLB_SRC_MAINCK_XTAL


	)

78 
	#CONFIG_PLL1_MUL
 (240000000UL / 
BOARD_FREQ_MAINCK_XTAL
)

	)

79 
	#CONFIG_PLL1_DIV
 2

	)

86 
	#CONFIG_CPCLK_ENABLE


	)

93 
	#CONFIG_CPCLK_SOURCE
 
CPCLK_SRC_MCK


	)

96 
	#CONFIG_CPCLK_PRES
 1

	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4cmp16c_sam4cmp_db/conf_uart_serial.h

47 #i‚de‡
CONF_USART_SERIAL_H


48 
	#CONF_USART_SERIAL_H


	)

51 
	#CONF_UART
 
CONSOLE_UART


	)

53 
	#CONF_UART_BAUDRATE
 115200

	)

55 
	#CONF_UART_PARITY
 
UART_MR_PAR_NO


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4cmp16c_sam4cmp_db/gcc/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<gpio.h
>

66 
	~<bﬂrd.h
>

69 
	~<i›‹t.h
>

72 
	~<öãºu±.h
>

75 
	~<pio.h
>

78 
	~<pmc.h
>

79 
	~<¶ìp.h
>

82 
	~<∑πs.h
>

85 
	~<Àd.h
>

88 
	~<°dio_£rül.h
>

91 
	~<sys˛k.h
>

94 
	~<u¨t.h
>

97 
	~<£rül.h
>

100 
	~<ußπ.h
>

103 
	~<pio_h™dÀr.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4cmp16c_sam4cmp_db/iar/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<gpio.h
>

66 
	~<bﬂrd.h
>

69 
	~<i›‹t.h
>

72 
	~<öãºu±.h
>

75 
	~<pio.h
>

78 
	~<pmc.h
>

79 
	~<¶ìp.h
>

82 
	~<∑πs.h
>

85 
	~<Àd.h
>

88 
	~<°dio_£rül.h
>

91 
	~<sys˛k.h
>

94 
	~<u¨t.h
>

97 
	~<£rül.h
>

100 
	~<ußπ.h
>

103 
	~<pio_h™dÀr.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4cms16c_sam4cms_db/conf_board.h

47 #i‚de‡
CONF_BOARD_H_INCLUDED


48 
	#CONF_BOARD_H_INCLUDED


	)

51 
	#CONF_BOARD_UART_CONSOLE


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4cms16c_sam4cms_db/conf_clock.h

47 #i‚de‡
CONF_CLOCK_H_INCLUDED


48 
	#CONF_CLOCK_H_INCLUDED


	)

60 
	#CONFIG_SYSCLK_SOURCE
 
SYSCLK_SRC_PLLBCK


	)

63 
	#CONFIG_SYSCLK_PRES
 
SYSCLK_PRES_1


	)

77 
	#CONFIG_PLL1_SOURCE
 
PLLB_SRC_MAINCK_XTAL


	)

78 
	#CONFIG_PLL1_MUL
 (240000000UL / 
BOARD_FREQ_MAINCK_XTAL
)

	)

79 
	#CONFIG_PLL1_DIV
 2

	)

86 
	#CONFIG_CPCLK_ENABLE


	)

93 
	#CONFIG_CPCLK_SOURCE
 
CPCLK_SRC_MCK


	)

96 
	#CONFIG_CPCLK_PRES
 1

	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4cms16c_sam4cms_db/conf_uart_serial.h

47 #i‚de‡
CONF_USART_SERIAL_H


48 
	#CONF_USART_SERIAL_H


	)

51 
	#CONF_UART
 
CONSOLE_UART


	)

53 
	#CONF_UART_BAUDRATE
 115200

	)

55 
	#CONF_UART_PARITY
 
UART_MR_PAR_NO


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4cms16c_sam4cms_db/gcc/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<gpio.h
>

66 
	~<bﬂrd.h
>

69 
	~<i›‹t.h
>

72 
	~<öãºu±.h
>

75 
	~<pio.h
>

78 
	~<pmc.h
>

79 
	~<¶ìp.h
>

82 
	~<∑πs.h
>

85 
	~<Àd.h
>

88 
	~<°dio_£rül.h
>

91 
	~<sys˛k.h
>

94 
	~<u¨t.h
>

97 
	~<£rül.h
>

100 
	~<ußπ.h
>

103 
	~<pio_h™dÀr.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4cms16c_sam4cms_db/iar/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<gpio.h
>

66 
	~<bﬂrd.h
>

69 
	~<i›‹t.h
>

72 
	~<öãºu±.h
>

75 
	~<pio.h
>

78 
	~<pmc.h
>

79 
	~<¶ìp.h
>

82 
	~<∑πs.h
>

85 
	~<Àd.h
>

88 
	~<°dio_£rül.h
>

91 
	~<sys˛k.h
>

94 
	~<u¨t.h
>

97 
	~<£rül.h
>

100 
	~<ußπ.h
>

103 
	~<pio_h™dÀr.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4n16c_sam4n_xplained_pro/conf_board.h

47 #i‚de‡
CONF_BOARD_H_INCLUDED


48 
	#CONF_BOARD_H_INCLUDED


	)

51 
	#CONF_BOARD_UART_CONSOLE


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4n16c_sam4n_xplained_pro/conf_clock.h

47 #i‚de‡
CONF_CLOCK_H_INCLUDED


48 
	#CONF_CLOCK_H_INCLUDED


	)

59 
	#CONFIG_SYSCLK_SOURCE
 
SYSCLK_SRC_PLLACK


	)

63 
	#CONFIG_SYSCLK_PRES
 
SYSCLK_PRES_2


	)

73 
	#CONFIG_PLL0_SOURCE
 
PLL_SRC_MAINCK_8M_RC


	)

74 
	#CONFIG_PLL0_MUL
 25

	)

75 
	#CONFIG_PLL0_DIV
 1

	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4n16c_sam4n_xplained_pro/conf_sleepmgr.h

46 #i‚de‡
CONF_SLEEPMGR_H


47 
	#CONF_SLEEPMGR_H


	)

50 
	#CONFIG_SLEEPMGR_ENABLE


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4n16c_sam4n_xplained_pro/conf_uart_serial.h

47 #i‚de‡
CONF_USART_SERIAL_H


48 
	#CONF_USART_SERIAL_H


	)

51 
	#CONF_UART
 
CONSOLE_UART


	)

53 
	#CONF_UART_BAUDRATE
 115200

	)

55 
	#CONF_UART_PARITY
 
UART_MR_PAR_NO


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4n16c_sam4n_xplained_pro/gcc/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc2.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<dñay.h
>

66 
	~<bﬂrd.h
>

69 
	~<i›‹t.h
>

72 
	~<öãºu±.h
>

75 
	~<pmc.h
>

76 
	~<¶ìp.h
>

79 
	~<∑πs.h
>

82 
	~<Àd.h
>

85 
	~<ex˚±i⁄s.h
>

88 
	~<ßm/¶ìpmgr.h
>

89 
	~<¶ìpmgr.h
>

92 
	~<°dio_£rül.h
>

95 
	~<sys˛k.h
>

98 
	~<u¨t.h
>

101 
	~<£rül.h
>

104 
	~<ußπ.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4n16c_sam4n_xplained_pro/iar/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc2.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<dñay.h
>

66 
	~<bﬂrd.h
>

69 
	~<i›‹t.h
>

72 
	~<öãºu±.h
>

75 
	~<pmc.h
>

76 
	~<¶ìp.h
>

79 
	~<∑πs.h
>

82 
	~<Àd.h
>

85 
	~<ex˚±i⁄s.h
>

88 
	~<ßm/¶ìpmgr.h
>

89 
	~<¶ìpmgr.h
>

92 
	~<°dio_£rül.h
>

95 
	~<sys˛k.h
>

98 
	~<u¨t.h
>

101 
	~<£rül.h
>

104 
	~<ußπ.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4s16c_sam4s_ek/conf_board.h

47 #i‚de‡
CONF_BOARD_H_INCLUDED


48 
	#CONF_BOARD_H_INCLUDED


	)

51 
	#CONF_BOARD_UART_CONSOLE


	)

54 
	#CONSOLE_UART_ID
 
ID_UART0


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4s16c_sam4s_ek/conf_clock.h

47 #i‚de‡
CONF_CLOCK_H_INCLUDED


48 
	#CONF_CLOCK_H_INCLUDED


	)

59 
	#CONFIG_SYSCLK_SOURCE
 
SYSCLK_SRC_PLLACK


	)

64 
	#CONFIG_SYSCLK_PRES
 
SYSCLK_PRES_2


	)

74 
	#CONFIG_PLL0_SOURCE
 
PLL_SRC_MAINCK_XTAL


	)

75 
	#CONFIG_PLL0_MUL
 20

	)

76 
	#CONFIG_PLL0_DIV
 1

	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4s16c_sam4s_ek/conf_uart_serial.h

47 #i‚de‡
CONF_USART_SERIAL_H


48 
	#CONF_USART_SERIAL_H


	)

51 
	#CONF_UART
 
CONSOLE_UART


	)

53 
	#CONF_UART_BAUDRATE
 115200

	)

55 
	#CONF_UART_PARITY
 
UART_MR_PAR_NO


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4s16c_sam4s_ek/gcc/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<gpio.h
>

66 
	~<bﬂrd.h
>

69 
	~<i›‹t.h
>

72 
	~<öãºu±.h
>

75 
	~<pio.h
>

78 
	~<pmc.h
>

79 
	~<¶ìp.h
>

82 
	~<∑πs.h
>

85 
	~<Àd.h
>

88 
	~<°dio_£rül.h
>

91 
	~<sys˛k.h
>

94 
	~<u¨t.h
>

97 
	~<£rül.h
>

100 
	~<ußπ.h
>

103 
	~<pio_h™dÀr.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4s16c_sam4s_ek/iar/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<gpio.h
>

66 
	~<bﬂrd.h
>

69 
	~<i›‹t.h
>

72 
	~<öãºu±.h
>

75 
	~<pio.h
>

78 
	~<pmc.h
>

79 
	~<¶ìp.h
>

82 
	~<∑πs.h
>

85 
	~<Àd.h
>

88 
	~<°dio_£rül.h
>

91 
	~<sys˛k.h
>

94 
	~<u¨t.h
>

97 
	~<£rül.h
>

100 
	~<ußπ.h
>

103 
	~<pio_h™dÀr.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4s16c_sam4s_xplained/conf_board.h

47 #i‚de‡
CONF_BOARD_H_INCLUDED


48 
	#CONF_BOARD_H_INCLUDED


	)

51 
	#CONF_BOARD_UART_CONSOLE


	)

54 
	#CONSOLE_UART_ID
 
ID_UART0


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4s16c_sam4s_xplained/conf_clock.h

47 #i‚de‡
CONF_CLOCK_H_INCLUDED


48 
	#CONF_CLOCK_H_INCLUDED


	)

59 
	#CONFIG_SYSCLK_SOURCE
 
SYSCLK_SRC_PLLACK


	)

64 
	#CONFIG_SYSCLK_PRES
 
SYSCLK_PRES_2


	)

74 
	#CONFIG_PLL0_SOURCE
 
PLL_SRC_MAINCK_XTAL


	)

75 
	#CONFIG_PLL0_MUL
 20

	)

76 
	#CONFIG_PLL0_DIV
 1

	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4s16c_sam4s_xplained/conf_uart_serial.h

47 #i‚de‡
CONF_USART_SERIAL_H


48 
	#CONF_USART_SERIAL_H


	)

51 
	#CONF_UART
 
CONSOLE_UART


	)

53 
	#CONF_UART_BAUDRATE
 115200

	)

55 
	#CONF_UART_PARITY
 
UART_MR_PAR_NO


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4s16c_sam4s_xplained/gcc/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<gpio.h
>

66 
	~<bﬂrd.h
>

69 
	~<i›‹t.h
>

72 
	~<öãºu±.h
>

75 
	~<pio.h
>

78 
	~<pmc.h
>

79 
	~<¶ìp.h
>

82 
	~<∑πs.h
>

85 
	~<Àd.h
>

88 
	~<°dio_£rül.h
>

91 
	~<sys˛k.h
>

94 
	~<u¨t.h
>

97 
	~<£rül.h
>

100 
	~<ußπ.h
>

103 
	~<pio_h™dÀr.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4s16c_sam4s_xplained/iar/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<gpio.h
>

66 
	~<bﬂrd.h
>

69 
	~<i›‹t.h
>

72 
	~<öãºu±.h
>

75 
	~<pio.h
>

78 
	~<pmc.h
>

79 
	~<¶ìp.h
>

82 
	~<∑πs.h
>

85 
	~<Àd.h
>

88 
	~<°dio_£rül.h
>

91 
	~<sys˛k.h
>

94 
	~<u¨t.h
>

97 
	~<£rül.h
>

100 
	~<ußπ.h
>

103 
	~<pio_h™dÀr.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4sd32c_sam4s_ek2/conf_board.h

47 #i‚de‡
CONF_BOARD_H_INCLUDED


48 
	#CONF_BOARD_H_INCLUDED


	)

51 
	#CONF_BOARD_UART_CONSOLE


	)

54 
	#CONSOLE_UART_ID
 
ID_UART0


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4sd32c_sam4s_ek2/conf_clock.h

47 #i‚de‡
CONF_CLOCK_H_INCLUDED


48 
	#CONF_CLOCK_H_INCLUDED


	)

59 
	#CONFIG_SYSCLK_SOURCE
 
SYSCLK_SRC_PLLACK


	)

64 
	#CONFIG_SYSCLK_PRES
 
SYSCLK_PRES_2


	)

74 
	#CONFIG_PLL0_SOURCE
 
PLL_SRC_MAINCK_XTAL


	)

75 
	#CONFIG_PLL0_MUL
 20

	)

76 
	#CONFIG_PLL0_DIV
 1

	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4sd32c_sam4s_ek2/conf_uart_serial.h

47 #i‚de‡
CONF_USART_SERIAL_H


48 
	#CONF_USART_SERIAL_H


	)

51 
	#CONF_UART
 
CONSOLE_UART


	)

53 
	#CONF_UART_BAUDRATE
 115200

	)

55 
	#CONF_UART_PARITY
 
UART_MR_PAR_NO


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4sd32c_sam4s_ek2/gcc/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<gpio.h
>

66 
	~<bﬂrd.h
>

69 
	~<i›‹t.h
>

72 
	~<öãºu±.h
>

75 
	~<pio.h
>

78 
	~<pmc.h
>

79 
	~<¶ìp.h
>

82 
	~<∑πs.h
>

85 
	~<Àd.h
>

88 
	~<°dio_£rül.h
>

91 
	~<sys˛k.h
>

94 
	~<u¨t.h
>

97 
	~<£rül.h
>

100 
	~<ußπ.h
>

103 
	~<pio_h™dÀr.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4sd32c_sam4s_ek2/iar/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<gpio.h
>

66 
	~<bﬂrd.h
>

69 
	~<i›‹t.h
>

72 
	~<öãºu±.h
>

75 
	~<pio.h
>

78 
	~<pmc.h
>

79 
	~<¶ìp.h
>

82 
	~<∑πs.h
>

85 
	~<Àd.h
>

88 
	~<°dio_£rül.h
>

91 
	~<sys˛k.h
>

94 
	~<u¨t.h
>

97 
	~<£rül.h
>

100 
	~<ußπ.h
>

103 
	~<pio_h™dÀr.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/adc_threshold_wakeup_example.c

123 
	~"asf.h
"

124 
	~"°dio_£rül.h
"

125 
	~"c⁄f_bﬂrd.h
"

128 #i‡
SAM3S
 || 
SAM3N
 || 
SAM4S


129 
	#ADC_CHANNEL_POTENTIOMETER
 
ADC_CHANNEL_5


	)

130 #ñi‡
SAM3XA
 || 
SAM4C


131 
	#ADC_CHANNEL_POTENTIOMETER
 
ADC_CHANNEL_1


	)

134 
	#BOARD_ADC_FREQ
 (6000000)

	)

137 
	#VOLT_REF
 (3300)

	)

140 #i‡
SAM3S
 || 
SAM3XA
 || 
SAM4S


142 
	#MAX_DIGITAL
 (4095)

	)

143 #ñi‡
SAM3N
 || 
SAM4C


144 
	#MAX_DIGITAL
 (1023)

	)

147 #i‡
SAM3S
 || 
SAM4S
 || 
SAM3XA
 || 
SAM3N
 || 
SAM4C


149 
	#TRACKING_TIME
 1

	)

151 
	#TRANSFER_PERIOD
 1

	)

153 #i‡
SAM4C


154 
	#STARTUP_TIME
 
ADC_STARTUP_TIME_10


	)

156 
	#STARTUP_TIME
 
ADC_STARTUP_TIME_4


	)

160 #i‡
SAM3U


161 #ifde‡
ADC_12B


163 
	#STARTUP_TIME
 7

	)

165 
	#OFF_MODE_STARTUP_TIME
 7

	)

167 
	#STARTUP_TIME
 3

	)

170 
	#SAMPLE_HOLD_TIME
 6

	)

173 
	#STRING_EOL
 "\r"

	)

174 
	#STRING_HEADER
 "-- ADC Threshold Wakeup Example --\r\n" \

175 "-- "
BOARD_NAME
" --\r\n" \

176 "-- Compûed: "
__DATE__
" "
__TIME__
" --"
STRING_EOL


	)

177 
	#MENU_HEADER
 "\n\r-- Menu Choices forÅhisÉxample--\n\r" \

184 "-- s: E¡î sÀï mode.--\n\r"

	)

187 
uöt16_t
 
	ggs_us_low_thªshﬁd
 = 0;

189 
uöt16_t
 
	ggs_us_high_thªshﬁd
 = 0;

191 
	$ADC_H™dÀr
()

193 
uöt32_t
 
ul_mode
;

194 
uöt16_t
 
us_adc
;

197 
	`adc_dißbÀ_öãºu±
(
ADC
, 
ADC_IDR_COMPE
);

199 i‡((
	`adc_gë_°©us
(
ADC
Ë& 
ADC_ISR_COMPE
) == ADC_ISR_COMPE) {

200 
ul_mode
 = 
	`adc_gë_com∑ris⁄_mode
(
ADC
);

201 
us_adc
 = 
	`adc_gë_ch™√l_vÆue
(
ADC
, 
ADC_CHANNEL_POTENTIOMETER
);

203 
ul_mode
) {

205 
	`¥ötf
("-ISR-:Potentiometer voltage %d mv is belowÅheÜow "

206 "thªshﬁd:%d mv!\n\r", 
us_adc
 * 
VOLT_REF
 / 
MAX_DIGITAL
,

207 
gs_us_low_thªshﬁd
 * 
VOLT_REF
 / 
MAX_DIGITAL
);

211 
	`¥ötf
("-ISR-:Potentiometer voltage %d mv isáboveÅhe high "

212 "thªshﬁd:%d mv!\n\r", 
us_adc
 * 
VOLT_REF
 / 
MAX_DIGITAL
,

213 
gs_us_high_thªshﬁd
 * 
VOLT_REF
 / 
MAX_DIGITAL
);

217 
	`¥ötf
("-ISR-:Potentiometer voltage %d mv is inÅhe comparison "

218 "wödow:%d-%d mv!\n\r", 
us_adc
 * 
VOLT_REF
 / 
MAX_DIGITAL
,

219 
gs_us_low_thªshﬁd
 * 
VOLT_REF
 / 
MAX_DIGITAL
,

220 
gs_us_high_thªshﬁd
 * 
VOLT_REF
 / 
MAX_DIGITAL
);

224 
	`¥ötf
("-ISR-:Potentiometer voltage %d mv is out ofÅhe comparison"

225 " wödow:%d-%d mv!\n\r", 
us_adc
 * 
VOLT_REF
 / 
MAX_DIGITAL
,

226 
gs_us_low_thªshﬁd
 * 
VOLT_REF
 / 
MAX_DIGITAL
,

227 
gs_us_high_thªshﬁd
 * 
VOLT_REF
 / 
MAX_DIGITAL
);

231 
	}
}

238 
	$c⁄figuª_tc0
()

241 
	`pmc_íabÀ_≥rùh_˛k
(
ID_TC0
);

244 
	`tc_öô
(
TC0
, 0, 0x4 | 
TC_CMR_ACPC_SET
 | 
TC_CMR_WAVE


245 | 
TC_CMR_ACPA_CLEAR
 | (0x2 << 13));

248 
TC0
->
TC_CHANNEL
[0].
TC_RA
 = 16384;

249 
TC0
->
TC_CHANNEL
[0].
TC_RC
 = 32768;

250 
	}
}

255 
	$di•œy_míu
()

257 
	`puts
(
MENU_HEADER
);

258 
	}
}

263 
uöt32_t
 
	$f_to_öt
(
x
)

265 
uöt32_t
 
j
 = (uöt32_t)
x
;

266 
k
 = ()
j
;

267 if(
k
 =
x
) {

268  
j
;

270  
j
+1;

272 
	}
}

277 
	$di•œy_öfo
()

279 
uöt32_t
 
ul_adc_vÆue
 = 
	`adc_gë_ch™√l_vÆue
(
ADC
,

280 
ADC_CHANNEL_POTENTIOMETER
);

281 
f_low_thªshﬁd
 = ()
gs_us_low_thªshﬁd
 *

282 
VOLT_REF
 / 
MAX_DIGITAL
;

283 
f_high_thªshﬁd
 = ()
gs_us_high_thªshﬁd
 *

284 
VOLT_REF
 / 
MAX_DIGITAL
;

285 
uöt32_t
 
ul_low_thªshﬁd
 = 
	`f_to_öt
(
f_low_thªshﬁd
);

286 
uöt32_t
 
ul_high_thªshﬁd
 = 
	`f_to_öt
(
f_high_thªshﬁd
);

288 
	`¥ötf
("-I- Thªshﬁds: %u mv - %u mv.\n\r", ()
ul_low_thªshﬁd
,

289 ()
ul_high_thªshﬁd
);

290 
	`¥ötf
("-I- Voltage onÖotentiometer: %u mv.\n\r",

291 ()(
ul_adc_vÆue
 * 
VOLT_REF
 / 
MAX_DIGITAL
));

292 
	`¥ötf
("-I- Comparison mode is %u\n\r.",

293 ()(
ADC
->
ADC_EMR
 & 
ADC_EMR_CMPMODE_Msk
));

294 
	}
}

300 
	$íãr_a¶ìp
()

303 
	`puts
("Now switchingÅhe device into sleep mode...\r");

306 
	`adc_gë_°©us
(
ADC
);

309 
	`adc_íabÀ_öãºu±
(
ADC
, 
ADC_IER_COMPE
);

311 
	`__WFI
();

316 
	}
}

321 
uöt8_t
 
	$gë_com∑ris⁄_mode
()

323 
uöt8_t
 
uc_mode
 = 
	`adc_gë_com∑ris⁄_mode
(
ADC
);

324 
uöt8_t
 
uc_ch¨
;

327 
	`u¨t_ªad
(
CONSOLE_UART
, &
uc_ch¨
));

328 
uc_ch¨
) {

331 
uc_mode
 = 0x0;

335 
uc_mode
 = 0x1;

339 
uc_mode
 = 0x2;

343 
uc_mode
 = 0x3;

351  
uc_mode
;

353 
	}
}

358 
öt16_t
 
	$gë_vﬁège
()

360 
uöt8_t
 
c_cou¡î
 = 0;

361 
uöt8_t
 
c_ch¨
 = 0;

362 
öt16_t
 
s_vÆue
 = 0;

363 
öt8_t
 
c_Àngth
 = 0;

364 
öt8_t
 
c_°r_ãmp
[5] = { 0 };

367 
	`u¨t_ªad
(
CONSOLE_UART
, &
c_ch¨
));

369 i‡(
c_ch¨
 == '\n' || c_char == '\r') {

370 
	`puts
("\r");

374 i‡('0' <
c_ch¨
 && '9' >= c_char) {

375 
	`¥ötf
("%c", 
c_ch¨
);

376 
c_°r_ãmp
[
c_cou¡î
++] = 
c_ch¨
;

377 #i‡
	`deföed
 ( 
__GNUC__
 )

378 
	`fÊush
(
°dout
);

381 i‡(
c_cou¡î
 >= 4) {

387 
c_°r_ãmp
[
c_cou¡î
] = '\0';

389 
c_Àngth
 = 
c_cou¡î
;

390 
s_vÆue
 = 0;

393 
c_cou¡î
 = 0; c_counter < 4; c_counter++) {

394 i‡(
c_°r_ãmp
[
c_cou¡î
] != '0') {

395 
c_Àngth
 - 
c_cou¡î
 - 1) {

397 
s_vÆue
 +(
c_°r_ãmp
[
c_cou¡î
] - '0');

401 
s_vÆue
 +(
c_°r_ãmp
[
c_cou¡î
] - '0') * 10;

405 
s_vÆue
 +(
c_°r_ãmp
[
c_cou¡î
] - '0') * 100;

409 
s_vÆue
 +(
c_°r_ãmp
[
c_cou¡î
] - '0') * 1000;

415 i‡(
s_vÆue
 > 
VOLT_REF
) {

416 
	`puts
("\n\r-F- Too bigÅhreshold!\r");

420  
s_vÆue
;

421 
	}
}

423 
	$c⁄figuª_c⁄sﬁe
()

425 c⁄° 
ußπ_£rül_›ti⁄s_t
 
u¨t_£rül_›ti⁄s
 = {

426 .
baudøã
 = 
CONF_UART_BAUDRATE
,

427 .
∑rôyty≥
 = 
CONF_UART_PARITY


431 
	`sys˛k_íabÀ_≥rùhîÆ_˛ock
(
CONSOLE_UART_ID
);

432 
	`°dio_£rül_öô
(
CONF_UART
, &
u¨t_£rül_›ti⁄s
);

433 
	}
}

443 
	$maö
()

445 
uöt8_t
 
c_choi˚
;

446 
öt16_t
 
s_adc_vÆue
;

447 
öt16_t
 
s_thªshﬁd
 = 0;

450 
	`sys˛k_öô
();

451 
	`bﬂrd_öô
();

453 
	`c⁄figuª_c⁄sﬁe
();

456 
	`puts
(
STRING_HEADER
);

459 
gs_us_low_thªshﬁd
 = 0x0;

460 
gs_us_high_thªshﬁd
 = 
MAX_DIGITAL
;

463 
	`pmc_íabÀ_≥rùh_˛k
(
ID_ADC
);

475 
	`adc_öô
(
ADC
, 
	`sys˛k_gë_˝u_hz
(), 6400000, 
STARTUP_TIME
);

486 #i‡
SAM3S
 || 
SAM3XA
 || 
SAM4S


487 
	`adc_c⁄figuª_timög
(
ADC
, 
TRACKING_TIME
, 
ADC_SETTLING_TIME_3
,

488 
TRANSFER_PERIOD
);

489 #ñi‡
SAM3N
 || 
SAM4C


490 
	`adc_c⁄figuª_timög
(
ADC
, 
TRACKING_TIME
);

492 
	`adc_check
(
ADC
, 
	`sys˛k_gë_˝u_hz
());

495 
	`adc_c⁄figuª_åiggî
(
ADC
, 
ADC_TRIG_TIO_CH_0
, 0);

497 
	`adc_íabÀ_ch™√l
(
ADC
, 
ADC_CHANNEL_POTENTIOMETER
);

500 
	`c⁄figuª_tc0
();

503 
	`adc_£t_com∑ris⁄_ch™√l
(
ADC
, 
ADC_CHANNEL_POTENTIOMETER
);

505 
	`adc_£t_com∑ris⁄_mode
(
ADC
, 
ADC_EMR_CMPMODE_IN
);

508 
	`adc_£t_com∑ris⁄_wödow
(
ADC
, 
gs_us_low_thªshﬁd
, 
gs_us_high_thªshﬁd
);

511 
	`NVIC_E«bÀIRQ
(
ADC_IRQn
);

514 
	`tc_°¨t
(
TC0
, 0);

517 
	`di•œy_míu
();

520 
	`u¨t_ªad
(
CONSOLE_UART
, &
c_choi˚
)) {

522 
	`¥ötf
("%c\r\n", 
c_choi˚
);

524 
c_choi˚
) {

526 
s_adc_vÆue
 = 
	`adc_gë_ch™√l_vÆue
(
ADC
,

527 
ADC_CHANNEL_POTENTIOMETER
);

528 
	`¥ötf
("-I- Current voltage is %d mv, %d%% of ADVREF\n\r",

529 (
s_adc_vÆue
 * 
VOLT_REF
 / 
MAX_DIGITAL
),

530 (
s_adc_vÆue
 * 100 / 
MAX_DIGITAL
));

534 
	`puts
("LowÅhreshold is setÅo(mv):");

535 
s_thªshﬁd
 = 
	`gë_vﬁège
();

536 
	`puts
("\r");

538 i‡(
s_thªshﬁd
 >= 0) {

539 
s_adc_vÆue
 = 
s_thªshﬁd
 * 
MAX_DIGITAL
 /

540 
VOLT_REF
;

541 
	`adc_£t_com∑ris⁄_wödow
(
ADC
, 
s_adc_vÆue
,

542 
gs_us_high_thªshﬁd
);

544 
gs_us_low_thªshﬁd
 = 
s_adc_vÆue
;

545 
f_low_thªshﬁd
 = ()
gs_us_low_thªshﬁd
 *

546 
VOLT_REF
 / 
MAX_DIGITAL
;

547 
uöt32_t
 
ul_low_thªshﬁd
 = 
	`f_to_öt
(
f_low_thªshﬁd
);

548 
	`¥ötf
("SettingÜowÅhresholdÅo %u mv (reg valueÅo 0x%x ~%d%%)\n\r",

549 ()
ul_low_thªshﬁd
,

550 
gs_us_low_thªshﬁd
,

551 
gs_us_low_thªshﬁd
 * 100 / 
MAX_DIGITAL
);

556 
	`puts
("HighÅhreshold is setÅo(mv):");

557 
s_thªshﬁd
 = 
	`gë_vﬁège
();

558 
	`puts
("\r");

560 i‡(
s_thªshﬁd
 >= 0) {

561 
s_adc_vÆue
 = 
s_thªshﬁd
 * 
MAX_DIGITAL
 /

562 
VOLT_REF
;

563 
	`adc_£t_com∑ris⁄_wödow
(
ADC
, 
gs_us_low_thªshﬁd
,

564 
s_adc_vÆue
);

566 
gs_us_high_thªshﬁd
 = 
s_adc_vÆue
;

567 
f_high_thªshﬁd
 = ()
gs_us_high_thªshﬁd
 *

568 
VOLT_REF
 / 
MAX_DIGITAL
;

569 
uöt32_t
 
ul_high_thªshﬁd
 = 
	`f_to_öt
(
f_high_thªshﬁd
);

570 
	`¥ötf
("Setting highÅhresholdÅo %u mv (reg valueÅo 0x%x ~%d%%)\n\r",

571 ()
ul_high_thªshﬁd
,

572 
gs_us_high_thªshﬁd
,

573 
gs_us_high_thªshﬁd
 * 100 / 
MAX_DIGITAL
);

577 
	`puts
("-a. BelowÜowÅhreshold.\n\r"

582 
c_choi˚
 = 
	`gë_com∑ris⁄_mode
();

583 
	`adc_£t_com∑ris⁄_mode
(
ADC
, 
c_choi˚
);

584 
	`¥ötf
("Com∑ris⁄ modêi†%c.\n\r", 'a' + 
c_choi˚
);

589 
	`di•œy_míu
();

594 
	`di•œy_öfo
();

599 
	`íãr_a¶ìp
();

602 
	`puts
("Press \'m\' or \'M\'Åo displayÅhe main menuágain!\r");

604 
	}
}

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3n4c_sam3n_ek/conf_board.h

47 #i‚de‡
CONF_BOARD_H_INCLUDED


48 
	#CONF_BOARD_H_INCLUDED


	)

51 
	#CONF_BOARD_UART_CONSOLE


	)

54 
	#CONSOLE_PINS
 {
PINS_UART
}

	)

57 
	#CONSOLE_UART_ID
 
ID_UART0


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3n4c_sam3n_ek/conf_clock.h

47 #i‚de‡
CONF_CLOCK_H_INCLUDED


48 
	#CONF_CLOCK_H_INCLUDED


	)

59 
	#CONFIG_SYSCLK_SOURCE
 
SYSCLK_SRC_PLLACK


	)

63 
	#CONFIG_SYSCLK_PRES
 
SYSCLK_PRES_2


	)

73 
	#CONFIG_PLL0_SOURCE
 
PLL_SRC_MAINCK_XTAL


	)

74 
	#CONFIG_PLL0_MUL
 8

	)

75 
	#CONFIG_PLL0_DIV
 1

	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3n4c_sam3n_ek/conf_uart_serial.h

47 #i‚de‡
CONF_USART_SERIAL_H


48 
	#CONF_USART_SERIAL_H


	)

51 
	#CONF_UART
 
CONSOLE_UART


	)

53 
	#CONF_UART_BAUDRATE
 115200

	)

55 
	#CONF_UART_PARITY
 
UART_MR_PAR_NO


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3n4c_sam3n_ek/gcc/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<gpio.h
>

66 
	~<bﬂrd.h
>

69 
	~<i›‹t.h
>

72 
	~<öãºu±.h
>

75 
	~<pio.h
>

78 
	~<pmc.h
>

79 
	~<¶ìp.h
>

82 
	~<∑πs.h
>

85 
	~<Àd.h
>

88 
	~<ex˚±i⁄s.h
>

91 
	~<°dio_£rül.h
>

94 
	~<sys˛k.h
>

97 
	~<tc.h
>

100 
	~<u¨t.h
>

103 
	~<£rül.h
>

106 
	~<ußπ.h
>

109 
	~<pio_h™dÀr.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3n4c_sam3n_ek/iar/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<gpio.h
>

66 
	~<bﬂrd.h
>

69 
	~<i›‹t.h
>

72 
	~<öãºu±.h
>

75 
	~<pio.h
>

78 
	~<pmc.h
>

79 
	~<¶ìp.h
>

82 
	~<∑πs.h
>

85 
	~<Àd.h
>

88 
	~<ex˚±i⁄s.h
>

91 
	~<°dio_£rül.h
>

94 
	~<sys˛k.h
>

97 
	~<tc.h
>

100 
	~<u¨t.h
>

103 
	~<£rül.h
>

106 
	~<ußπ.h
>

109 
	~<pio_h™dÀr.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3s4c_sam3s_ek/conf_board.h

47 #i‚de‡
CONF_BOARD_H_INCLUDED


48 
	#CONF_BOARD_H_INCLUDED


	)

51 
	#CONF_BOARD_UART_CONSOLE


	)

54 
	#CONSOLE_PINS
 {
PINS_UART
}

	)

57 
	#CONSOLE_UART_ID
 
ID_UART0


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3s4c_sam3s_ek/conf_clock.h

47 #i‚de‡
CONF_CLOCK_H_INCLUDED


48 
	#CONF_CLOCK_H_INCLUDED


	)

59 
	#CONFIG_SYSCLK_SOURCE
 
SYSCLK_SRC_PLLACK


	)

64 
	#CONFIG_SYSCLK_PRES
 
SYSCLK_PRES_2


	)

74 
	#CONFIG_PLL0_SOURCE
 
PLL_SRC_MAINCK_XTAL


	)

75 
	#CONFIG_PLL0_MUL
 32

	)

76 
	#CONFIG_PLL0_DIV
 3

	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3s4c_sam3s_ek/conf_uart_serial.h

47 #i‚de‡
CONF_USART_SERIAL_H


48 
	#CONF_USART_SERIAL_H


	)

51 
	#CONF_UART
 
CONSOLE_UART


	)

53 
	#CONF_UART_BAUDRATE
 115200

	)

55 
	#CONF_UART_PARITY
 
UART_MR_PAR_NO


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3s4c_sam3s_ek/gcc/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<gpio.h
>

66 
	~<bﬂrd.h
>

69 
	~<i›‹t.h
>

72 
	~<öãºu±.h
>

75 
	~<pio.h
>

78 
	~<pmc.h
>

79 
	~<¶ìp.h
>

82 
	~<∑πs.h
>

85 
	~<Àd.h
>

88 
	~<ex˚±i⁄s.h
>

91 
	~<°dio_£rül.h
>

94 
	~<sys˛k.h
>

97 
	~<tc.h
>

100 
	~<u¨t.h
>

103 
	~<£rül.h
>

106 
	~<ußπ.h
>

109 
	~<pio_h™dÀr.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3s4c_sam3s_ek/iar/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<gpio.h
>

66 
	~<bﬂrd.h
>

69 
	~<i›‹t.h
>

72 
	~<öãºu±.h
>

75 
	~<pio.h
>

78 
	~<pmc.h
>

79 
	~<¶ìp.h
>

82 
	~<∑πs.h
>

85 
	~<Àd.h
>

88 
	~<ex˚±i⁄s.h
>

91 
	~<°dio_£rül.h
>

94 
	~<sys˛k.h
>

97 
	~<tc.h
>

100 
	~<u¨t.h
>

103 
	~<£rül.h
>

106 
	~<ußπ.h
>

109 
	~<pio_h™dÀr.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3sd8c_sam3s_ek2/conf_board.h

47 #i‚de‡
CONF_BOARD_H_INCLUDED


48 
	#CONF_BOARD_H_INCLUDED


	)

51 
	#CONF_BOARD_UART_CONSOLE


	)

54 
	#CONSOLE_PINS
 {
PINS_UART
}

	)

57 
	#CONSOLE_UART_ID
 
ID_UART0


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3sd8c_sam3s_ek2/conf_clock.h

47 #i‚de‡
CONF_CLOCK_H_INCLUDED


48 
	#CONF_CLOCK_H_INCLUDED


	)

59 
	#CONFIG_SYSCLK_SOURCE
 
SYSCLK_SRC_PLLACK


	)

64 
	#CONFIG_SYSCLK_PRES
 
SYSCLK_PRES_2


	)

74 
	#CONFIG_PLL0_SOURCE
 
PLL_SRC_MAINCK_XTAL


	)

75 
	#CONFIG_PLL0_MUL
 32

	)

76 
	#CONFIG_PLL0_DIV
 3

	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3sd8c_sam3s_ek2/conf_uart_serial.h

47 #i‚de‡
CONF_USART_SERIAL_H


48 
	#CONF_USART_SERIAL_H


	)

51 
	#CONF_UART
 
CONSOLE_UART


	)

53 
	#CONF_UART_BAUDRATE
 115200

	)

55 
	#CONF_UART_PARITY
 
UART_MR_PAR_NO


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3sd8c_sam3s_ek2/gcc/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<gpio.h
>

66 
	~<bﬂrd.h
>

69 
	~<i›‹t.h
>

72 
	~<öãºu±.h
>

75 
	~<pio.h
>

78 
	~<pmc.h
>

79 
	~<¶ìp.h
>

82 
	~<∑πs.h
>

85 
	~<Àd.h
>

88 
	~<ex˚±i⁄s.h
>

91 
	~<°dio_£rül.h
>

94 
	~<sys˛k.h
>

97 
	~<tc.h
>

100 
	~<u¨t.h
>

103 
	~<£rül.h
>

106 
	~<ußπ.h
>

109 
	~<pio_h™dÀr.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3sd8c_sam3s_ek2/iar/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<gpio.h
>

66 
	~<bﬂrd.h
>

69 
	~<i›‹t.h
>

72 
	~<öãºu±.h
>

75 
	~<pio.h
>

78 
	~<pmc.h
>

79 
	~<¶ìp.h
>

82 
	~<∑πs.h
>

85 
	~<Àd.h
>

88 
	~<ex˚±i⁄s.h
>

91 
	~<°dio_£rül.h
>

94 
	~<sys˛k.h
>

97 
	~<tc.h
>

100 
	~<u¨t.h
>

103 
	~<£rül.h
>

106 
	~<ußπ.h
>

109 
	~<pio_h™dÀr.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3x8e_arduino_due_x/conf_board.h

47 #i‚de‡
CONF_BOARD_H_INCLUDED


48 
	#CONF_BOARD_H_INCLUDED


	)

51 
	#CONF_BOARD_UART_CONSOLE


	)

54 
	#CONSOLE_PINS
 {
PINS_UART
}

	)

57 
	#CONSOLE_UART_ID
 
ID_UART


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3x8e_arduino_due_x/conf_clock.h

47 #i‚de‡
CONF_CLOCK_H_INCLUDED


48 
	#CONF_CLOCK_H_INCLUDED


	)

59 
	#CONFIG_SYSCLK_SOURCE
 
SYSCLK_SRC_PLLACK


	)

64 
	#CONFIG_SYSCLK_PRES
 
SYSCLK_PRES_2


	)

74 
	#CONFIG_PLL0_SOURCE
 
PLL_SRC_MAINCK_XTAL


	)

75 
	#CONFIG_PLL0_MUL
 14

	)

76 
	#CONFIG_PLL0_DIV
 1

	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3x8e_arduino_due_x/conf_uart_serial.h

47 #i‚de‡
CONF_USART_SERIAL_H


48 
	#CONF_USART_SERIAL_H


	)

51 
	#CONF_UART
 
CONSOLE_UART


	)

53 
	#CONF_UART_BAUDRATE
 115200

	)

55 
	#CONF_UART_PARITY
 
UART_MR_PAR_NO


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3x8e_arduino_due_x/gcc/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<gpio.h
>

66 
	~<bﬂrd.h
>

69 
	~<i›‹t.h
>

72 
	~<öãºu±.h
>

75 
	~<pio.h
>

78 
	~<pmc.h
>

79 
	~<¶ìp.h
>

82 
	~<∑πs.h
>

85 
	~<ex˚±i⁄s.h
>

88 
	~<°dio_£rül.h
>

91 
	~<sys˛k.h
>

94 
	~<tc.h
>

97 
	~<u¨t.h
>

100 
	~<£rül.h
>

103 
	~<ußπ.h
>

106 
	~<pio_h™dÀr.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3x8e_arduino_due_x/iar/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<gpio.h
>

66 
	~<bﬂrd.h
>

69 
	~<i›‹t.h
>

72 
	~<öãºu±.h
>

75 
	~<pio.h
>

78 
	~<pmc.h
>

79 
	~<¶ìp.h
>

82 
	~<∑πs.h
>

85 
	~<ex˚±i⁄s.h
>

88 
	~<°dio_£rül.h
>

91 
	~<sys˛k.h
>

94 
	~<tc.h
>

97 
	~<u¨t.h
>

100 
	~<£rül.h
>

103 
	~<ußπ.h
>

106 
	~<pio_h™dÀr.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3x8h_sam3x_ek/conf_board.h

47 #i‚de‡
CONF_BOARD_H_INCLUDED


48 
	#CONF_BOARD_H_INCLUDED


	)

51 
	#CONF_BOARD_UART_CONSOLE


	)

54 
	#CONSOLE_PINS
 {
PINS_UART
}

	)

57 
	#CONSOLE_UART_ID
 
ID_UART


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3x8h_sam3x_ek/conf_clock.h

47 #i‚de‡
CONF_CLOCK_H_INCLUDED


48 
	#CONF_CLOCK_H_INCLUDED


	)

59 
	#CONFIG_SYSCLK_SOURCE
 
SYSCLK_SRC_PLLACK


	)

64 
	#CONFIG_SYSCLK_PRES
 
SYSCLK_PRES_2


	)

74 
	#CONFIG_PLL0_SOURCE
 
PLL_SRC_MAINCK_XTAL


	)

75 
	#CONFIG_PLL0_MUL
 14

	)

76 
	#CONFIG_PLL0_DIV
 1

	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3x8h_sam3x_ek/conf_uart_serial.h

47 #i‚de‡
CONF_USART_SERIAL_H


48 
	#CONF_USART_SERIAL_H


	)

51 
	#CONF_UART
 
CONSOLE_UART


	)

53 
	#CONF_UART_BAUDRATE
 115200

	)

55 
	#CONF_UART_PARITY
 
UART_MR_PAR_NO


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3x8h_sam3x_ek/gcc/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<gpio.h
>

66 
	~<bﬂrd.h
>

69 
	~<i›‹t.h
>

72 
	~<öãºu±.h
>

75 
	~<pio.h
>

78 
	~<pmc.h
>

79 
	~<¶ìp.h
>

82 
	~<∑πs.h
>

85 
	~<Àd.h
>

88 
	~<ex˚±i⁄s.h
>

91 
	~<°dio_£rül.h
>

94 
	~<sys˛k.h
>

97 
	~<tc.h
>

100 
	~<u¨t.h
>

103 
	~<£rül.h
>

106 
	~<ußπ.h
>

109 
	~<pio_h™dÀr.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3x8h_sam3x_ek/iar/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<gpio.h
>

66 
	~<bﬂrd.h
>

69 
	~<i›‹t.h
>

72 
	~<öãºu±.h
>

75 
	~<pio.h
>

78 
	~<pmc.h
>

79 
	~<¶ìp.h
>

82 
	~<∑πs.h
>

85 
	~<Àd.h
>

88 
	~<ex˚±i⁄s.h
>

91 
	~<°dio_£rül.h
>

94 
	~<sys˛k.h
>

97 
	~<tc.h
>

100 
	~<u¨t.h
>

103 
	~<£rül.h
>

106 
	~<ußπ.h
>

109 
	~<pio_h™dÀr.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam4c16c_sam4c_ek/conf_board.h

47 #i‚de‡
CONF_BOARD_H_INCLUDED


48 
	#CONF_BOARD_H_INCLUDED


	)

51 
	#CONF_BOARD_UART_CONSOLE


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam4c16c_sam4c_ek/conf_clock.h

47 #i‚de‡
CONF_CLOCK_H_INCLUDED


48 
	#CONF_CLOCK_H_INCLUDED


	)

60 
	#CONFIG_SYSCLK_SOURCE
 
SYSCLK_SRC_PLLBCK


	)

63 
	#CONFIG_SYSCLK_PRES
 
SYSCLK_PRES_1


	)

77 
	#CONFIG_PLL1_SOURCE
 
PLLB_SRC_MAINCK_XTAL


	)

78 
	#CONFIG_PLL1_MUL
 (240000000UL / 
BOARD_FREQ_MAINCK_XTAL
)

	)

79 
	#CONFIG_PLL1_DIV
 2

	)

86 
	#CONFIG_CPCLK_ENABLE


	)

93 
	#CONFIG_CPCLK_SOURCE
 
CPCLK_SRC_MCK


	)

96 
	#CONFIG_CPCLK_PRES
 1

	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam4c16c_sam4c_ek/conf_uart_serial.h

47 #i‚de‡
CONF_USART_SERIAL_H_INCLUDED


48 
	#CONF_USART_SERIAL_H_INCLUDED


	)

51 
	#CONF_UART
 
CONSOLE_UART


	)

53 
	#CONF_UART_BAUDRATE
 115200UL

	)

55 
	#CONF_UART_PARITY
 
UART_MR_PAR_NO


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam4c16c_sam4c_ek/gcc/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<gpio.h
>

66 
	~<bﬂrd.h
>

69 
	~<i›‹t.h
>

72 
	~<öãºu±.h
>

75 
	~<pio.h
>

78 
	~<pmc.h
>

79 
	~<¶ìp.h
>

82 
	~<∑πs.h
>

85 
	~<Àd.h
>

88 
	~<°dio_£rül.h
>

91 
	~<sys˛k.h
>

94 
	~<tc.h
>

97 
	~<u¨t.h
>

100 
	~<£rül.h
>

103 
	~<ußπ.h
>

106 
	~<pio_h™dÀr.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam4c16c_sam4c_ek/iar/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<gpio.h
>

66 
	~<bﬂrd.h
>

69 
	~<i›‹t.h
>

72 
	~<öãºu±.h
>

75 
	~<pio.h
>

78 
	~<pmc.h
>

79 
	~<¶ìp.h
>

82 
	~<∑πs.h
>

85 
	~<Àd.h
>

88 
	~<°dio_£rül.h
>

91 
	~<sys˛k.h
>

94 
	~<tc.h
>

97 
	~<u¨t.h
>

100 
	~<£rül.h
>

103 
	~<ußπ.h
>

106 
	~<pio_h™dÀr.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam4s16c_sam4s_ek/conf_board.h

47 #i‚de‡
CONF_BOARD_H_INCLUDED


48 
	#CONF_BOARD_H_INCLUDED


	)

51 
	#CONF_BOARD_UART_CONSOLE


	)

54 
	#CONSOLE_UART_ID
 
ID_UART0


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam4s16c_sam4s_ek/conf_clock.h

47 #i‚de‡
CONF_CLOCK_H_INCLUDED


48 
	#CONF_CLOCK_H_INCLUDED


	)

59 
	#CONFIG_SYSCLK_SOURCE
 
SYSCLK_SRC_PLLACK


	)

64 
	#CONFIG_SYSCLK_PRES
 
SYSCLK_PRES_2


	)

74 
	#CONFIG_PLL0_SOURCE
 
PLL_SRC_MAINCK_XTAL


	)

75 
	#CONFIG_PLL0_MUL
 20

	)

76 
	#CONFIG_PLL0_DIV
 1

	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam4s16c_sam4s_ek/conf_uart_serial.h

47 #i‚de‡
CONF_USART_SERIAL_H


48 
	#CONF_USART_SERIAL_H


	)

51 
	#CONF_UART
 
CONSOLE_UART


	)

53 
	#CONF_UART_BAUDRATE
 115200

	)

55 
	#CONF_UART_PARITY
 
UART_MR_PAR_NO


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam4s16c_sam4s_ek/gcc/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<gpio.h
>

66 
	~<bﬂrd.h
>

69 
	~<i›‹t.h
>

72 
	~<öãºu±.h
>

75 
	~<pio.h
>

78 
	~<pmc.h
>

79 
	~<¶ìp.h
>

82 
	~<∑πs.h
>

85 
	~<Àd.h
>

88 
	~<°dio_£rül.h
>

91 
	~<sys˛k.h
>

94 
	~<tc.h
>

97 
	~<u¨t.h
>

100 
	~<£rül.h
>

103 
	~<ußπ.h
>

106 
	~<pio_h™dÀr.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam4s16c_sam4s_ek/iar/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<gpio.h
>

66 
	~<bﬂrd.h
>

69 
	~<i›‹t.h
>

72 
	~<öãºu±.h
>

75 
	~<pio.h
>

78 
	~<pmc.h
>

79 
	~<¶ìp.h
>

82 
	~<∑πs.h
>

85 
	~<Àd.h
>

88 
	~<°dio_£rül.h
>

91 
	~<sys˛k.h
>

94 
	~<tc.h
>

97 
	~<u¨t.h
>

100 
	~<£rül.h
>

103 
	~<ußπ.h
>

106 
	~<pio_h™dÀr.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam4sd32c_sam4s_ek2/conf_board.h

47 #i‚de‡
CONF_BOARD_H_INCLUDED


48 
	#CONF_BOARD_H_INCLUDED


	)

51 
	#CONF_BOARD_UART_CONSOLE


	)

54 
	#CONSOLE_UART_ID
 
ID_UART0


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam4sd32c_sam4s_ek2/conf_clock.h

47 #i‚de‡
CONF_CLOCK_H_INCLUDED


48 
	#CONF_CLOCK_H_INCLUDED


	)

59 
	#CONFIG_SYSCLK_SOURCE
 
SYSCLK_SRC_PLLACK


	)

64 
	#CONFIG_SYSCLK_PRES
 
SYSCLK_PRES_2


	)

74 
	#CONFIG_PLL0_SOURCE
 
PLL_SRC_MAINCK_XTAL


	)

75 
	#CONFIG_PLL0_MUL
 20

	)

76 
	#CONFIG_PLL0_DIV
 1

	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam4sd32c_sam4s_ek2/conf_uart_serial.h

47 #i‚de‡
CONF_USART_SERIAL_H


48 
	#CONF_USART_SERIAL_H


	)

51 
	#CONF_UART
 
CONSOLE_UART


	)

53 
	#CONF_UART_BAUDRATE
 115200

	)

55 
	#CONF_UART_PARITY
 
UART_MR_PAR_NO


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam4sd32c_sam4s_ek2/gcc/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<gpio.h
>

66 
	~<bﬂrd.h
>

69 
	~<i›‹t.h
>

72 
	~<öãºu±.h
>

75 
	~<pio.h
>

78 
	~<pmc.h
>

79 
	~<¶ìp.h
>

82 
	~<∑πs.h
>

85 
	~<Àd.h
>

88 
	~<°dio_£rül.h
>

91 
	~<sys˛k.h
>

94 
	~<tc.h
>

97 
	~<u¨t.h
>

100 
	~<£rül.h
>

103 
	~<ußπ.h
>

106 
	~<pio_h™dÀr.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam4sd32c_sam4s_ek2/iar/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<gpio.h
>

66 
	~<bﬂrd.h
>

69 
	~<i›‹t.h
>

72 
	~<öãºu±.h
>

75 
	~<pio.h
>

78 
	~<pmc.h
>

79 
	~<¶ìp.h
>

82 
	~<∑πs.h
>

85 
	~<Àd.h
>

88 
	~<°dio_£rül.h
>

91 
	~<sys˛k.h
>

94 
	~<tc.h
>

97 
	~<u¨t.h
>

100 
	~<£rül.h
>

103 
	~<ußπ.h
>

106 
	~<pio_h™dÀr.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/doxygen/sam.drivers.adc_1/doxygen_module_mainpage.h

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/doxygen/sam.drivers.adc_2/doxygen_module_mainpage.h

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/unit_tests/sam4n16c_sam4n_xplained_pro/conf_board.h

47 #i‚de‡
CONF_BOARD_H_INCLUDED


48 
	#CONF_BOARD_H_INCLUDED


	)

51 
	#CONF_BOARD_UART_CONSOLE


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/unit_tests/sam4n16c_sam4n_xplained_pro/conf_clock.h

47 #i‚de‡
CONF_CLOCK_H_INCLUDED


48 
	#CONF_CLOCK_H_INCLUDED


	)

59 
	#CONFIG_SYSCLK_SOURCE
 
SYSCLK_SRC_PLLACK


	)

63 
	#CONFIG_SYSCLK_PRES
 
SYSCLK_PRES_2


	)

73 
	#CONFIG_PLL0_SOURCE
 
PLL_SRC_MAINCK_8M_RC


	)

74 
	#CONFIG_PLL0_MUL
 25

	)

75 
	#CONFIG_PLL0_DIV
 1

	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/unit_tests/sam4n16c_sam4n_xplained_pro/conf_sleepmgr.h

46 #i‚de‡
CONF_SLEEPMGR_H


47 
	#CONF_SLEEPMGR_H


	)

50 
	#CONFIG_SLEEPMGR_ENABLE


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/unit_tests/sam4n16c_sam4n_xplained_pro/conf_test.h

47 #i‚de‡
CONF_TEST_H


48 
	#CONF_TEST_H


	)

51 
	#CONF_TEST_USART
 
CONSOLE_UART


	)

53 
	#CONF_TEST_BAUDRATE
 (115200UL)

	)

55 
	#CONF_TEST_PARITY
 
UART_MR_PAR_NO


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/unit_tests/sam4n16c_sam4n_xplained_pro/conf_uart_serial.h

47 #i‚de‡
CONF_USART_SERIAL_H_INCLUDED


48 
	#CONF_USART_SERIAL_H_INCLUDED


	)

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/unit_tests/sam4n16c_sam4n_xplained_pro/gcc/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc2.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<dñay.h
>

66 
	~<bﬂrd.h
>

69 
	~<unô_ã°/suôe.h
>

72 
	~<i›‹t.h
>

75 
	~<öãºu±.h
>

78 
	~<pmc.h
>

79 
	~<¶ìp.h
>

82 
	~<∑πs.h
>

85 
	~<Àd.h
>

88 
	~<ex˚±i⁄s.h
>

91 
	~<ßm/¶ìpmgr.h
>

92 
	~<¶ìpmgr.h
>

95 
	~<°dio_£rül.h
>

98 
	~<sys˛k.h
>

101 
	~<tc.h
>

104 
	~<u¨t.h
>

107 
	~<£rül.h
>

110 
	~<ußπ.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/unit_tests/sam4n16c_sam4n_xplained_pro/iar/asf.h

44 #i‚de‡
ASF_H


45 
	#ASF_H


	)

56 
	~<adc2.h
>

59 
	~<compûî.h
>

60 
	~<°©us_codes.h
>

63 
	~<dñay.h
>

66 
	~<bﬂrd.h
>

69 
	~<unô_ã°/suôe.h
>

72 
	~<i›‹t.h
>

75 
	~<öãºu±.h
>

78 
	~<pmc.h
>

79 
	~<¶ìp.h
>

82 
	~<∑πs.h
>

85 
	~<Àd.h
>

88 
	~<ex˚±i⁄s.h
>

91 
	~<ßm/¶ìpmgr.h
>

92 
	~<¶ìpmgr.h
>

95 
	~<°dio_£rül.h
>

98 
	~<sys˛k.h
>

101 
	~<tc.h
>

104 
	~<u¨t.h
>

107 
	~<£rül.h
>

110 
	~<ußπ.h
>

	@/home/vaje/Documents/vaja9/asf/sam/drivers/adc/unit_tests/unit_tests.c

47 
	~<asf.h
>

48 
	~<c⁄f_ã°.h
>

79 vﬁ©ûê
boﬁ
 
	gis_d©a_ªady
 = 
Ál£
;

84 
	$adc_£t_d©a_ªady_Êag
()

86 
is_d©a_ªady
 = 
åue
;

87 
	`adc_dißbÀ_öãºu±
(
ADC
, 
ADC_INTERRUPT_EOC_1
);

88 
	`tc_°›
(
TC0
, 0);

89 
	}
}

94 
	$c⁄figuª_tc_åiggî
()

96 
uöt32_t
 
ul_div
 = 0;

97 
uöt32_t
 
ul_tc_˛ks
 = 0;

98 
uöt32_t
 
ul_sys˛k
 = 
	`sys˛k_gë_˝u_hz
();

101 
	`pmc_íabÀ_≥rùh_˛k
(
ID_TC0
);

104 
	`i›‹t_£t_pö_mode
(
PIN_TC0_TIOA0
, 
PIN_TC0_TIOA0_MUX
);

105 
	`i›‹t_dißbÀ_pö
(
PIN_TC0_TIOA0
);

108 
	`tc_föd_mck_divis‹
(10, 
ul_sys˛k
, &
ul_div
, &
ul_tc_˛ks
, ul_sysclk);

109 
	`tc_öô
(
TC0
, 0, 
ul_tc_˛ks
 | 
TC_CMR_CPCTRG
 | 
TC_CMR_WAVE
 |

110 
TC_CMR_ACPA_CLEAR
 | 
TC_CMR_ACPC_SET
);

111 
TC0
->
TC_CHANNEL
[0].
TC_RA
 = (
ul_sys˛k
 / 
ul_div
) / 2;

112 
TC0
->
TC_CHANNEL
[0].
TC_RC
 = (
ul_sys˛k
 / 
ul_div
) / 1;

115 
	`tc_°¨t
(
TC0
, 0);

116 
	}
}

124 
	$run_adc_tc_åig_ã°
(c⁄° 
ã°_ˇ£
 *
ã°
)

126 
	`adc_ch™√l_íabÀ
(
ADC
, 
ADC_CHANNEL_1
);

128 
	`adc_£t_åiggî
(
ADC
, 
ADC_TRIG_TIO_CH_0
);

130 
	`adc_£t_ˇŒback
(
ADC
, 
ADC_INTERRUPT_EOC_1
,

131 
adc_£t_d©a_ªady_Êag
, 1);

133 
	`c⁄figuª_tc_åiggî
();

135 
	`dñay_ms
(2000);

137 
	`ã°_as£π_åue
(
ã°
, 
is_d©a_ªady
 =
åue
,

139 
	}
}

144 
	$maö
()

146 c⁄° 
ußπ_£rül_›ti⁄s_t
 
ußπ_£rül_›ti⁄s
 = {

147 .
baudøã
 = 
CONF_TEST_BAUDRATE
,

148 .
∑rôyty≥
 = 
CONF_TEST_PARITY


152 
	`sys˛k_öô
();

153 
	`bﬂrd_öô
();

155 
	`sys˛k_íabÀ_≥rùhîÆ_˛ock
(
CONSOLE_UART_ID
);

156 
	`°dio_£rül_öô
(
CONF_TEST_USART
, &
ußπ_£rül_›ti⁄s
);

158 
	`adc_íabÀ
();

160 
adc_c⁄fig
 
adc_cfg
;

162 
	`adc_gë_c⁄fig_deÁu…s
(&
adc_cfg
);

164 
	`adc_öô
(
ADC
, &
adc_cfg
);

166 #i‡
	`deföed
(
__GNUC__
)

167 
	`£tbuf
(
°dout
, 
NULL
);

171 
	`DEFINE_TEST_CASE
(
adc_tc_åig_ã°
, 
NULL
, 
run_adc_tc_åig_ã°
, NULL,

175 
	`DEFINE_TEST_ARRAY
(
adc_ã°s
) = {

176 &
adc_tc_åig_ã°
,

180 
	`DEFINE_TEST_SUITE
(
adc_suôe
, 
adc_ã°s
,

184 
	`ã°_suôe_run
(&
adc_suôe
);

189 
	}
}

	@/home/vaje/Documents/vaja9/asf/sam/drivers/pio/pio.c

47 
	~"pio.h
"

49 #i‚de‡
PIO_WPMR_WPKEY_PASSWD


50 
	#PIO_WPMR_WPKEY_PASSWD
 
	`PIO_WPMR_WPKEY
(0x50494Fu)

	)

66 #i‚de‡
FREQ_SLOW_CLOCK_EXT


68 
	#FREQ_SLOW_CLOCK_EXT
 32768

	)

79 
	$pio_puŒ_up
(
Pio
 *
p_pio
, c⁄° 
uöt32_t
 
ul_mask
,

80 c⁄° 
uöt32_t
 
ul_puŒ_up_íabÀ
)

83 i‡(
ul_puŒ_up_íabÀ
) {

84 
p_pio
->
PIO_PUER
 = 
ul_mask
;

86 
p_pio
->
PIO_PUDR
 = 
ul_mask
;

88 
	}
}

97 
	$pio_£t_deboun˚_fûãr
(
Pio
 *
p_pio
, c⁄° 
uöt32_t
 
ul_mask
,

98 c⁄° 
uöt32_t
 
ul_cut_off
)

100 #i‡(
SAM3S
 || 
SAM3N
 || 
SAM4S
 || 
SAM4E
 || 
SAM4N
 || 
SAM4C
 || 
SAMG
 || 
SAM4CP
 || 
SAM4CM
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

102 
p_pio
->
PIO_IFSCER
 = 
ul_mask
;

103 #ñi‡(
SAM3XA
 || 
SAM3U
)

105 
p_pio
->
PIO_DIFSR
 = 
ul_mask
;

115 
p_pio
->
PIO_SCDR
 = 
	`PIO_SCDR_DIV
((
FREQ_SLOW_CLOCK_EXT
 /

116 (2 * (
ul_cut_off
))) - 1);

117 
	}
}

127 
	$pio_£t
(
Pio
 *
p_pio
, c⁄° 
uöt32_t
 
ul_mask
)

129 
p_pio
->
PIO_SODR
 = 
ul_mask
;

130 
	}
}

140 
	$pio_˛ór
(
Pio
 *
p_pio
, c⁄° 
uöt32_t
 
ul_mask
)

142 
p_pio
->
PIO_CODR
 = 
ul_mask
;

143 
	}
}

158 
uöt32_t
 
	$pio_gë
(
Pio
 *
p_pio
, c⁄° 
pio_ty≥_t
 
ul_ty≥
,

159 c⁄° 
uöt32_t
 
ul_mask
)

161 
uöt32_t
 
ul_ªg
;

163 i‡((
ul_ty≥
 =
PIO_OUTPUT_0
Ë|| (ul_ty≥ =
PIO_OUTPUT_1
)) {

164 
ul_ªg
 = 
p_pio
->
PIO_ODSR
;

166 
ul_ªg
 = 
p_pio
->
PIO_PDSR
;

169 i‡((
ul_ªg
 & 
ul_mask
) == 0) {

174 
	}
}

184 
	$pio_£t_≥rùhîÆ
(
Pio
 *
p_pio
, c⁄° 
pio_ty≥_t
 
ul_ty≥
,

185 c⁄° 
uöt32_t
 
ul_mask
)

187 
uöt32_t
 
ul_§
;

190 
p_pio
->
PIO_IDR
 = 
ul_mask
;

192 #i‡(
SAM3S
 || 
SAM3N
 || 
SAM4S
 || 
SAM4E
 || 
SAM4N
 || 
SAM4C
 || 
SAMG
 || 
SAM4CP
 || 
SAM4CM
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

193 
ul_ty≥
) {

194 
PIO_PERIPH_A
:

195 
ul_§
 = 
p_pio
->
PIO_ABCDSR
[0];

196 
p_pio
->
PIO_ABCDSR
[0] &(~
ul_mask
 & 
ul_§
);

198 
ul_§
 = 
p_pio
->
PIO_ABCDSR
[1];

199 
p_pio
->
PIO_ABCDSR
[1] &(~
ul_mask
 & 
ul_§
);

201 
PIO_PERIPH_B
:

202 
ul_§
 = 
p_pio
->
PIO_ABCDSR
[0];

203 
p_pio
->
PIO_ABCDSR
[0] = (
ul_mask
 | 
ul_§
);

205 
ul_§
 = 
p_pio
->
PIO_ABCDSR
[1];

206 
p_pio
->
PIO_ABCDSR
[1] &(~
ul_mask
 & 
ul_§
);

208 #i‡(!
SAMG
)

209 
PIO_PERIPH_C
:

210 
ul_§
 = 
p_pio
->
PIO_ABCDSR
[0];

211 
p_pio
->
PIO_ABCDSR
[0] &(~
ul_mask
 & 
ul_§
);

213 
ul_§
 = 
p_pio
->
PIO_ABCDSR
[1];

214 
p_pio
->
PIO_ABCDSR
[1] = (
ul_mask
 | 
ul_§
);

216 
PIO_PERIPH_D
:

217 
ul_§
 = 
p_pio
->
PIO_ABCDSR
[0];

218 
p_pio
->
PIO_ABCDSR
[0] = (
ul_mask
 | 
ul_§
);

220 
ul_§
 = 
p_pio
->
PIO_ABCDSR
[1];

221 
p_pio
->
PIO_ABCDSR
[1] = (
ul_mask
 | 
ul_§
);

225 
PIO_INPUT
:

226 
PIO_OUTPUT_0
:

227 
PIO_OUTPUT_1
:

228 
PIO_NOT_A_PIN
:

231 #ñi‡(
SAM3XA
|| 
SAM3U
)

232 
ul_ty≥
) {

233 
PIO_PERIPH_A
:

234 
ul_§
 = 
p_pio
->
PIO_ABSR
;

235 
p_pio
->
PIO_ABSR
 &(~
ul_mask
 & 
ul_§
);

238 
PIO_PERIPH_B
:

239 
ul_§
 = 
p_pio
->
PIO_ABSR
;

240 
p_pio
->
PIO_ABSR
 = (
ul_mask
 | 
ul_§
);

244 
PIO_INPUT
:

245 
PIO_OUTPUT_0
:

246 
PIO_OUTPUT_1
:

247 
PIO_NOT_A_PIN
:

255 
p_pio
->
PIO_PDR
 = 
ul_mask
;

256 
	}
}

267 
	$pio_£t_öput
(
Pio
 *
p_pio
, c⁄° 
uöt32_t
 
ul_mask
,

268 c⁄° 
uöt32_t
 
ul_©åibuã
)

270 
	`pio_dißbÀ_öãºu±
(
p_pio
, 
ul_mask
);

271 
	`pio_puŒ_up
(
p_pio
, 
ul_mask
, 
ul_©åibuã
 & 
PIO_PULLUP
);

274 i‡(
ul_©åibuã
 & (
PIO_DEGLITCH
 | 
PIO_DEBOUNCE
)) {

275 
p_pio
->
PIO_IFER
 = 
ul_mask
;

277 
p_pio
->
PIO_IFDR
 = 
ul_mask
;

280 #i‡(
SAM3S
 || 
SAM3N
 || 
SAM4S
 || 
SAM4E
 || 
SAM4N
 || 
SAM4C
 || 
SAMG
 || 
SAM4CP
 || 
SAM4CM
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

282 i‡(
ul_©åibuã
 & 
PIO_DEGLITCH
) {

283 
p_pio
->
PIO_IFSCDR
 = 
ul_mask
;

285 i‡(
ul_©åibuã
 & 
PIO_DEBOUNCE
) {

286 
p_pio
->
PIO_IFSCER
 = 
ul_mask
;

289 #ñi‡(
SAM3XA
|| 
SAM3U
)

291 i‡(
ul_©åibuã
 & 
PIO_DEGLITCH
) {

292 
p_pio
->
PIO_SCIFSR
 = 
ul_mask
;

294 i‡(
ul_©åibuã
 & 
PIO_DEBOUNCE
) {

295 
p_pio
->
PIO_DIFSR
 = 
ul_mask
;

303 
p_pio
->
PIO_ODR
 = 
ul_mask
;

304 
p_pio
->
PIO_PER
 = 
ul_mask
;

305 
	}
}

320 
	$pio_£t_ouçut
(
Pio
 *
p_pio
, c⁄° 
uöt32_t
 
ul_mask
,

321 c⁄° 
uöt32_t
 
ul_deÁu…_Àvñ
,

322 c⁄° 
uöt32_t
 
ul_mu…idrive_íabÀ
,

323 c⁄° 
uöt32_t
 
ul_puŒ_up_íabÀ
)

325 
	`pio_dißbÀ_öãºu±
(
p_pio
, 
ul_mask
);

326 
	`pio_puŒ_up
(
p_pio
, 
ul_mask
, 
ul_puŒ_up_íabÀ
);

329 i‡(
ul_mu…idrive_íabÀ
) {

330 
p_pio
->
PIO_MDER
 = 
ul_mask
;

332 
p_pio
->
PIO_MDDR
 = 
ul_mask
;

336 i‡(
ul_deÁu…_Àvñ
) {

337 
p_pio
->
PIO_SODR
 = 
ul_mask
;

339 
p_pio
->
PIO_CODR
 = 
ul_mask
;

343 
p_pio
->
PIO_OER
 = 
ul_mask
;

344 
p_pio
->
PIO_PER
 = 
ul_mask
;

345 
	}
}

358 
uöt32_t
 
	$pio_c⁄figuª
(
Pio
 *
p_pio
, c⁄° 
pio_ty≥_t
 
ul_ty≥
,

359 c⁄° 
uöt32_t
 
ul_mask
, c⁄° uöt32_à
ul_©åibuã
)

362 
ul_ty≥
) {

363 
PIO_PERIPH_A
:

364 
PIO_PERIPH_B
:

365 #i‡(
SAM3S
 || 
SAM3N
 || 
SAM4S
 || 
SAM4E
 || 
SAM4N
 || 
SAM4C
 || 
SAM4CP
 || 
SAM4CM
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

366 
PIO_PERIPH_C
:

367 
PIO_PERIPH_D
:

369 
	`pio_£t_≥rùhîÆ
(
p_pio
, 
ul_ty≥
, 
ul_mask
);

370 
	`pio_puŒ_up
(
p_pio
, 
ul_mask
, (
ul_©åibuã
 & 
PIO_PULLUP
));

373 
PIO_INPUT
:

374 
	`pio_£t_öput
(
p_pio
, 
ul_mask
, 
ul_©åibuã
);

377 
PIO_OUTPUT_0
:

378 
PIO_OUTPUT_1
:

379 
	`pio_£t_ouçut
(
p_pio
, 
ul_mask
, (
ul_ty≥
 =
PIO_OUTPUT_1
),

380 (
ul_©åibuã
 & 
PIO_OPENDRAIN
) ? 1 : 0,

381 (
ul_©åibuã
 & 
PIO_PULLUP
) ? 1 : 0);

389 
	}
}

402 
uöt32_t
 
	$pio_gë_ouçut_d©a_°©us
(c⁄° 
Pio
 *
p_pio
,

403 c⁄° 
uöt32_t
 
ul_mask
)

405 i‡((
p_pio
->
PIO_ODSR
 & 
ul_mask
) == 0) {

410 
	}
}

420 
	$pio_£t_mu…i_drivî
(
Pio
 *
p_pio
, c⁄° 
uöt32_t
 
ul_mask
,

421 c⁄° 
uöt32_t
 
ul_mu…i_drivî_íabÀ
)

424 i‡(
ul_mu…i_drivî_íabÀ
) {

425 
p_pio
->
PIO_MDER
 = 
ul_mask
;

427 
p_pio
->
PIO_MDDR
 = 
ul_mask
;

429 
	}
}

438 
uöt32_t
 
	$pio_gë_mu…i_drivî_°©us
(c⁄° 
Pio
 *
p_pio
)

440  
p_pio
->
PIO_MDSR
;

441 
	}
}

444 #i‡(
SAM3S
 || 
SAM3N
 || 
SAM4S
 || 
SAM4E
 || 
SAM4N
 || 
SAM4C
 || 
SAMG
 || 
SAM4CP
 || 
SAM4CM
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

453 
	$pio_puŒ_down
(
Pio
 *
p_pio
, c⁄° 
uöt32_t
 
ul_mask
,

454 c⁄° 
uöt32_t
 
ul_puŒ_down_íabÀ
)

457 i‡(
ul_puŒ_down_íabÀ
) {

458 
p_pio
->
PIO_PPDER
 = 
ul_mask
;

460 
p_pio
->
PIO_PPDDR
 = 
ul_mask
;

462 
	}
}

471 
	$pio_íabÀ_ouçut_wrôe
(
Pio
 *
p_pio
, c⁄° 
uöt32_t
 
ul_mask
)

473 
p_pio
->
PIO_OWER
 = 
ul_mask
;

474 
	}
}

482 
	$pio_dißbÀ_ouçut_wrôe
(
Pio
 *
p_pio
, c⁄° 
uöt32_t
 
ul_mask
)

484 
p_pio
->
PIO_OWDR
 = 
ul_mask
;

485 
	}
}

494 
uöt32_t
 
	$pio_gë_ouçut_wrôe_°©us
(c⁄° 
Pio
 *
p_pio
)

496  
p_pio
->
PIO_OWSR
;

497 
	}
}

507 
	$pio_sync_ouçut_wrôe
(
Pio
 *
p_pio
, c⁄° 
uöt32_t
 
ul_mask
)

509 
p_pio
->
PIO_ODSR
 = 
ul_mask
;

510 
	}
}

512 #i‡(
SAM3S
 || 
SAM3N
 || 
SAM4S
 || 
SAM4E
 || 
SAM4N
 || 
SAM4C
 || 
SAMG
 || 
SAM4CP
 || 
SAM4CM
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

521 
	$pio_£t_schmôt_åiggî
(
Pio
 *
p_pio
, c⁄° 
uöt32_t
 
ul_mask
)

523 
p_pio
->
PIO_SCHMITT
 = 
ul_mask
;

524 
	}
}

533 
uöt32_t
 
	$pio_gë_schmôt_åiggî
(c⁄° 
Pio
 *
p_pio
)

535  
p_pio
->
PIO_SCHMITT
;

536 
	}
}

548 
	$pio_c⁄figuª_öãºu±
(
Pio
 *
p_pio
, c⁄° 
uöt32_t
 
ul_mask
,

549 c⁄° 
uöt32_t
 
ul_©å
)

552 i‡(
ul_©å
 & 
PIO_IT_AIME
) {

554 
p_pio
->
PIO_AIMER
 = 
ul_mask
;

558 i‡(
ul_©å
 & 
PIO_IT_RE_OR_HL
) {

560 
p_pio
->
PIO_REHLSR
 = 
ul_mask
;

563 
p_pio
->
PIO_FELLSR
 = 
ul_mask
;

568 i‡(
ul_©å
 & 
PIO_IT_EDGE
) {

570 
p_pio
->
PIO_ESR
 = 
ul_mask
;

573 
p_pio
->
PIO_LSR
 = 
ul_mask
;

577 
p_pio
->
PIO_AIMDR
 = 
ul_mask
;

579 
	}
}

588 
	$pio_íabÀ_öãºu±
(
Pio
 *
p_pio
, c⁄° 
uöt32_t
 
ul_mask
)

590 
p_pio
->
PIO_IER
 = 
ul_mask
;

591 
	}
}

599 
	$pio_dißbÀ_öãºu±
(
Pio
 *
p_pio
, c⁄° 
uöt32_t
 
ul_mask
)

601 
p_pio
->
PIO_IDR
 = 
ul_mask
;

602 
	}
}

611 
uöt32_t
 
	$pio_gë_öãºu±_°©us
(c⁄° 
Pio
 *
p_pio
)

613  
p_pio
->
PIO_ISR
;

614 
	}
}

623 
uöt32_t
 
	$pio_gë_öãºu±_mask
(c⁄° 
Pio
 *
p_pio
)

625  
p_pio
->
PIO_IMR
;

626 
	}
}

635 
	$pio_£t_addôi⁄Æ_öãºu±_mode
(
Pio
 *
p_pio
,

636 c⁄° 
uöt32_t
 
ul_mask
, c⁄° uöt32_à
ul_©åibuã
)

639 i‡(
ul_©åibuã
 & 
PIO_IT_AIME
) {

641 
p_pio
->
PIO_AIMER
 = 
ul_mask
;

645 i‡(
ul_©åibuã
 & 
PIO_IT_RE_OR_HL
) {

647 
p_pio
->
PIO_REHLSR
 = 
ul_mask
;

650 
p_pio
->
PIO_FELLSR
 = 
ul_mask
;

654 i‡(
ul_©åibuã
 & 
PIO_IT_EDGE
) {

656 
p_pio
->
PIO_ESR
 = 
ul_mask
;

659 
p_pio
->
PIO_LSR
 = 
ul_mask
;

663 
p_pio
->
PIO_AIMDR
 = 
ul_mask
;

665 
	}
}

667 #i‚de‡
PIO_WPMR_WPKEY_PASSWD


668 
	#PIO_WPMR_WPKEY_PASSWD
 
	`PIO_WPMR_WPKEY
(0x50494FU)

	)

677 
	$pio_£t_wrôïrŸe˘
(
Pio
 *
p_pio
, c⁄° 
uöt32_t
 
ul_íabÀ
)

679 
p_pio
->
PIO_WPMR
 = 
PIO_WPMR_WPKEY_PASSWD
 | (
ul_íabÀ
 & 
PIO_WPMR_WPEN
);

680 
	}
}

689 
uöt32_t
 
	$pio_gë_wrôïrŸe˘_°©us
(c⁄° 
Pio
 *
p_pio
)

691  
p_pio
->
PIO_WPSR
;

692 
	}
}

707 
uöt32_t
 
	$pio_gë_pö_vÆue
(
uöt32_t
 
ul_pö
)

709 
Pio
 *
p_pio
 = 
	`pio_gë_pö_group
(
ul_pö
);

711  (
p_pio
->
PIO_PDSR
 >> (
ul_pö
 & 0x1F)) & 1;

712 
	}
}

721 
	$pio_£t_pö_high
(
uöt32_t
 
ul_pö
)

723 
Pio
 *
p_pio
 = 
	`pio_gë_pö_group
(
ul_pö
);

726 
p_pio
->
PIO_SODR
 = 1 << (
ul_pö
 & 0x1F);

727 
	}
}

736 
	$pio_£t_pö_low
(
uöt32_t
 
ul_pö
)

738 
Pio
 *
p_pio
 = 
	`pio_gë_pö_group
(
ul_pö
);

741 
p_pio
->
PIO_CODR
 = 1 << (
ul_pö
 & 0x1F);

742 
	}
}

751 
	$pio_toggÀ_pö
(
uöt32_t
 
ul_pö
)

753 
Pio
 *
p_pio
 = 
	`pio_gë_pö_group
(
ul_pö
);

755 i‡(
p_pio
->
PIO_ODSR
 & (1 << (
ul_pö
 & 0x1F))) {

757 
p_pio
->
PIO_CODR
 = 1 << (
ul_pö
 & 0x1F);

760 
p_pio
->
PIO_SODR
 = 1 << (
ul_pö
 & 0x1F);

762 
	}
}

773 
uöt32_t
 
	$pio_c⁄figuª_pö
(
uöt32_t
 
ul_pö
, c⁄° uöt32_à
ul_Êags
)

775 
Pio
 *
p_pio
 = 
	`pio_gë_pö_group
(
ul_pö
);

778 
ul_Êags
 & 
PIO_TYPE_Msk
) {

779 
PIO_TYPE_PIO_PERIPH_A
:

780 
	`pio_£t_≥rùhîÆ
(
p_pio
, 
PIO_PERIPH_A
, (1 << (
ul_pö
 & 0x1F)));

781 
	`pio_puŒ_up
(
p_pio
, (1 << (
ul_pö
 & 0x1F)),

782 (
ul_Êags
 & 
PIO_PULLUP
));

784 
PIO_TYPE_PIO_PERIPH_B
:

785 
	`pio_£t_≥rùhîÆ
(
p_pio
, 
PIO_PERIPH_B
, (1 << (
ul_pö
 & 0x1F)));

786 
	`pio_puŒ_up
(
p_pio
, (1 << (
ul_pö
 & 0x1F)),

787 (
ul_Êags
 & 
PIO_PULLUP
));

789 #i‡(
SAM3S
 || 
SAM3N
 || 
SAM4S
 || 
SAM4E
 || 
SAM4N
 || 
SAM4C
 || 
SAM4CP
 || 
SAM4CM
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

790 
PIO_TYPE_PIO_PERIPH_C
:

791 
	`pio_£t_≥rùhîÆ
(
p_pio
, 
PIO_PERIPH_C
, (1 << (
ul_pö
 & 0x1F)));

792 
	`pio_puŒ_up
(
p_pio
, (1 << (
ul_pö
 & 0x1F)),

793 (
ul_Êags
 & 
PIO_PULLUP
));

795 
PIO_TYPE_PIO_PERIPH_D
:

796 
	`pio_£t_≥rùhîÆ
(
p_pio
, 
PIO_PERIPH_D
, (1 << (
ul_pö
 & 0x1F)));

797 
	`pio_puŒ_up
(
p_pio
, (1 << (
ul_pö
 & 0x1F)),

798 (
ul_Êags
 & 
PIO_PULLUP
));

802 
PIO_TYPE_PIO_INPUT
:

803 
	`pio_£t_öput
(
p_pio
, (1 << (
ul_pö
 & 0x1F)), 
ul_Êags
);

806 
PIO_TYPE_PIO_OUTPUT_0
:

807 
PIO_TYPE_PIO_OUTPUT_1
:

808 
	`pio_£t_ouçut
(
p_pio
, (1 << (
ul_pö
 & 0x1F)),

809 ((
ul_Êags
 & 
PIO_TYPE_PIO_OUTPUT_1
)

810 =
PIO_TYPE_PIO_OUTPUT_1
) ? 1 : 0,

811 (
ul_Êags
 & 
PIO_OPENDRAIN
) ? 1 : 0,

812 (
ul_Êags
 & 
PIO_PULLUP
) ? 1 : 0);

820 
	}
}

828 
	$pio_£t_pö_group_high
(
Pio
 *
p_pio
, 
uöt32_t
 
ul_mask
)

831 
p_pio
->
PIO_SODR
 = 
ul_mask
;

832 
	}
}

840 
	$pio_£t_pö_group_low
(
Pio
 *
p_pio
, 
uöt32_t
 
ul_mask
)

843 
p_pio
->
PIO_CODR
 = 
ul_mask
;

844 
	}
}

852 
	$pio_toggÀ_pö_group
(
Pio
 *
p_pio
, 
uöt32_t
 
ul_mask
)

854 i‡(
p_pio
->
PIO_ODSR
 & 
ul_mask
) {

856 
p_pio
->
PIO_CODR
 = 
ul_mask
;

859 
p_pio
->
PIO_SODR
 = 
ul_mask
;

861 
	}
}

873 
uöt32_t
 
	$pio_c⁄figuª_pö_group
(
Pio
 *
p_pio
,

874 
uöt32_t
 
ul_mask
, c⁄° uöt32_à
ul_Êags
)

877 
ul_Êags
 & 
PIO_TYPE_Msk
) {

878 
PIO_TYPE_PIO_PERIPH_A
:

879 
	`pio_£t_≥rùhîÆ
(
p_pio
, 
PIO_PERIPH_A
, 
ul_mask
);

880 
	`pio_puŒ_up
(
p_pio
, 
ul_mask
, (
ul_Êags
 & 
PIO_PULLUP
));

882 
PIO_TYPE_PIO_PERIPH_B
:

883 
	`pio_£t_≥rùhîÆ
(
p_pio
, 
PIO_PERIPH_B
, 
ul_mask
);

884 
	`pio_puŒ_up
(
p_pio
, 
ul_mask
, (
ul_Êags
 & 
PIO_PULLUP
));

886 #i‡(
SAM3S
 || 
SAM3N
 || 
SAM4S
 || 
SAM4E
 || 
SAM4N
 || 
SAM4C
 || 
SAM4CP
 || 
SAM4CM
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

887 
PIO_TYPE_PIO_PERIPH_C
:

888 
	`pio_£t_≥rùhîÆ
(
p_pio
, 
PIO_PERIPH_C
, 
ul_mask
);

889 
	`pio_puŒ_up
(
p_pio
, 
ul_mask
, (
ul_Êags
 & 
PIO_PULLUP
));

891 
PIO_TYPE_PIO_PERIPH_D
:

892 
	`pio_£t_≥rùhîÆ
(
p_pio
, 
PIO_PERIPH_D
, 
ul_mask
);

893 
	`pio_puŒ_up
(
p_pio
, 
ul_mask
, (
ul_Êags
 & 
PIO_PULLUP
));

897 
PIO_TYPE_PIO_INPUT
:

898 
	`pio_£t_öput
(
p_pio
, 
ul_mask
, 
ul_Êags
);

901 
PIO_TYPE_PIO_OUTPUT_0
:

902 
PIO_TYPE_PIO_OUTPUT_1
:

903 
	`pio_£t_ouçut
(
p_pio
, 
ul_mask
,

904 ((
ul_Êags
 & 
PIO_TYPE_PIO_OUTPUT_1
)

905 =
PIO_TYPE_PIO_OUTPUT_1
) ? 1 : 0,

906 (
ul_Êags
 & 
PIO_OPENDRAIN
) ? 1 : 0,

907 (
ul_Êags
 & 
PIO_PULLUP
) ? 1 : 0);

915 
	}
}

924 
	$pio_íabÀ_pö_öãºu±
(
uöt32_t
 
ul_pö
)

926 
Pio
 *
p_pio
 = 
	`pio_gë_pö_group
(
ul_pö
);

928 
p_pio
->
PIO_IER
 = 1 << (
ul_pö
 & 0x1F);

929 
	}
}

939 
	$pio_dißbÀ_pö_öãºu±
(
uöt32_t
 
ul_pö
)

941 
Pio
 *
p_pio
 = 
	`pio_gë_pö_group
(
ul_pö
);

943 
p_pio
->
PIO_IDR
 = 1 << (
ul_pö
 & 0x1F);

944 
	}
}

954 
Pio
 *
	$pio_gë_pö_group
(
uöt32_t
 
ul_pö
)

956 
Pio
 *
p_pio
;

958 #i‡(
SAM4C
 || 
SAM4CP
)

959 #ifde‡
ID_PIOD


960 i‡(
ul_pö
 > 
PIO_PC9_IDX
) {

961 
p_pio
 = 
PIOD
;

962 } i‡(
ul_pö
 > 
PIO_PB31_IDX
) {

964 i‡(
ul_pö
 > 
PIO_PB31_IDX
) {

966 
p_pio
 = 
PIOC
;

968 
p_pio
 = (
Pio
 *)((
uöt32_t
)
PIOA
 + (
PIO_DELTA
 * (
ul_pö
 >> 5)));

970 #ñi‡(
SAM4CM
)

971 i‡(
ul_pö
 > 
PIO_PB21_IDX
) {

972 
p_pio
 = 
PIOC
;

974 
p_pio
 = (
Pio
 *)((
uöt32_t
)
PIOA
 + (
PIO_DELTA
 * (
ul_pö
 >> 5)));

977 
p_pio
 = (
Pio
 *)((
uöt32_t
)
PIOA
 + (
PIO_DELTA
 * (
ul_pö
 >> 5)));

979  
p_pio
;

980 
	}
}

989 
uöt32_t
 
	$pio_gë_pö_group_id
(
uöt32_t
 
ul_pö
)

991 
uöt32_t
 
ul_id
;

993 #i‡(
SAM4C
 || 
SAM4CP
)

994 #ifde‡
ID_PIOD


995 i‡(
ul_pö
 > 
PIO_PC9_IDX
) {

996 
ul_id
 = 
ID_PIOD
;

997 } i‡(
ul_pö
 > 
PIO_PB31_IDX
) {

999 i‡(
ul_pö
 > 
PIO_PB31_IDX
) {

1001 
ul_id
 = 
ID_PIOC
;

1003 
ul_id
 = 
ID_PIOA
 + (
ul_pö
 >> 5);

1005 #ñi‡(
SAM4CM
)

1006 i‡(
ul_pö
 > 
PIO_PB21_IDX
) {

1007 
ul_id
 = 
ID_PIOC
;

1009 
ul_id
 = 
ID_PIOA
 + (
ul_pö
 >> 5);

1011 #ñi‡(
SAMV70
 || 
SAMV71
 || 
SAME70
 || 
SAMS70
)

1012 
ul_id
 = 
ID_PIOA
 + (
ul_pö
 >> 5);

1014 #ifde‡
ID_PIOD


1015 i‡(
ul_pö
 >
PIO_PD0_IDX
Ë
ul_id
 = 
ID_PIOD
;

1018 #ifde‡
ID_PIOE


1019 i‡(
ul_pö
 >
PIO_PE0_IDX
Ë
ul_id
 = 
ID_PIOE
;

1022 
ul_id
 = 
ID_PIOA
 + (
ul_pö
 >> 5);

1024  
ul_id
;

1025 
	}
}

1035 
uöt32_t
 
	$pio_gë_pö_group_mask
(
uöt32_t
 
ul_pö
)

1037 
uöt32_t
 
ul_mask
 = 1 << (
ul_pö
 & 0x1F);

1038  
ul_mask
;

1039 
	}
}

1041 #i‡(
SAM3S
 || 
SAM4S
 || 
SAM4E
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

1043 
uöt32_t
 
	gpio_ˇ±uª_íabÀ_Êag
;

1052 
	$pio_ˇ±uª_£t_mode
(
Pio
 *
p_pio
, 
uöt32_t
 
ul_mode
)

1054 
ul_mode
 &(~
PIO_PCMR_PCEN
);

1055 
p_pio
->
PIO_PCMR
 = 
ul_mode
;

1056 
	}
}

1063 
	$pio_ˇ±uª_íabÀ
(
Pio
 *
p_pio
)

1065 
p_pio
->
PIO_PCMR
 |
PIO_PCMR_PCEN
;

1066 
pio_ˇ±uª_íabÀ_Êag
 = 
åue
;

1067 
	}
}

1074 
	$pio_ˇ±uª_dißbÀ
(
Pio
 *
p_pio
)

1076 
p_pio
->
PIO_PCMR
 &(~
PIO_PCMR_PCEN
);

1077 
pio_ˇ±uª_íabÀ_Êag
 = 
Ál£
;

1078 
	}
}

1090 
uöt32_t
 
	$pio_ˇ±uª_ªad
(c⁄° 
Pio
 *
p_pio
, 
uöt32_t
 *
pul_d©a
)

1093 i‡((
p_pio
->
PIO_PCISR
 & 
PIO_PCISR_DRDY
) == 0) {

1098 *
pul_d©a
 = 
p_pio
->
PIO_PCRHR
;

1100 
	}
}

1110 
	$pio_ˇ±uª_íabÀ_öãºu±
(
Pio
 *
p_pio
, c⁄° 
uöt32_t
 
ul_mask
)

1112 
p_pio
->
PIO_PCISR
;

1113 
p_pio
->
PIO_PCIER
 = 
ul_mask
;

1114 
	}
}

1122 
	$pio_ˇ±uª_dißbÀ_öãºu±
(
Pio
 *
p_pio
, c⁄° 
uöt32_t
 
ul_mask
)

1124 
p_pio
->
PIO_PCIDR
 = 
ul_mask
;

1125 
	}
}

1134 
uöt32_t
 
	$pio_ˇ±uª_gë_öãºu±_°©us
(c⁄° 
Pio
 *
p_pio
)

1136  
p_pio
->
PIO_PCISR
;

1137 
	}
}

1146 
uöt32_t
 
	$pio_ˇ±uª_gë_öãºu±_mask
(c⁄° 
Pio
 *
p_pio
)

1148  
p_pio
->
PIO_PCIMR
;

1149 
	}
}

1150 #i‡!(
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

1158 
Pdc
 *
	$pio_ˇ±uª_gë_pdc_ba£
(c⁄° 
Pio
 *
p_pio
)

1160 
	`UNUSED
(
p_pio
);

1161  
PDC_PIOA
;

1162 
	}
}

1166 #i‡(
SAM4C
 || 
SAM4CP
 || 
SAM4CM
 || 
SAMG55
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

1174 
	$pio_£t_io_drive
(
Pio
 *
p_pio
, 
uöt32_t
 
ul_löe
,

1175 
pio_io_drive_mode
 
mode
)

1177 
p_pio
->
PIO_DRIVER
 &~(1 << 
ul_löe
);

1178 
p_pio
->
PIO_DRIVER
 |
mode
 << 
ul_löe
;

1179 
	}
}

	@/home/vaje/Documents/vaja9/asf/sam/drivers/pio/pio.h

47 #i‚de‡
PIO_H_INCLUDED


48 
	#PIO_H_INCLUDED


	)

50 
	~"compûî.h
"

52 #ifde‡
__˝lu•lus


57 
	#PIO_DELTA
 ((
uöt32_t
Ë
PIOB
 - (uöt32_tË
PIOA
)

	)

60 
	#PIO_TYPE_Pos
 27

	)

62 
	#PIO_TYPE_Msk
 (0xFu << 
PIO_TYPE_Pos
)

	)

64 
	#PIO_TYPE_NOT_A_PIN
 (0x0u << 
PIO_TYPE_Pos
)

	)

66 
	#PIO_TYPE_PIO_PERIPH_A
 (0x1u << 
PIO_TYPE_Pos
)

	)

68 
	#PIO_TYPE_PIO_PERIPH_B
 (0x2u << 
PIO_TYPE_Pos
)

	)

70 
	#PIO_TYPE_PIO_PERIPH_C
 (0x3u << 
PIO_TYPE_Pos
)

	)

72 
	#PIO_TYPE_PIO_PERIPH_D
 (0x4u << 
PIO_TYPE_Pos
)

	)

74 
	#PIO_TYPE_PIO_INPUT
 (0x5u << 
PIO_TYPE_Pos
)

	)

76 
	#PIO_TYPE_PIO_OUTPUT_0
 (0x6u << 
PIO_TYPE_Pos
)

	)

78 
	#PIO_TYPE_PIO_OUTPUT_1
 (0x7u << 
PIO_TYPE_Pos
)

	)

80 
	e_pio_ty≥
 {

81 
PIO_NOT_A_PIN
 = 
PIO_TYPE_NOT_A_PIN
,

82 
PIO_PERIPH_A
 = 
PIO_TYPE_PIO_PERIPH_A
,

83 
PIO_PERIPH_B
 = 
PIO_TYPE_PIO_PERIPH_B
,

84 #i‡(
SAM3S
 || 
SAM3N
 || 
SAM4S
 || 
SAM4E
 || 
SAM4N
 || 
SAM4C
 || 
SAM4CP
 || 
SAM4CM
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

85 
PIO_PERIPH_C
 = 
PIO_TYPE_PIO_PERIPH_C
,

86 
PIO_PERIPH_D
 = 
PIO_TYPE_PIO_PERIPH_D
,

88 
PIO_INPUT
 = 
PIO_TYPE_PIO_INPUT
,

89 
PIO_OUTPUT_0
 = 
PIO_TYPE_PIO_OUTPUT_0
,

90 
PIO_OUTPUT_1
 = 
PIO_TYPE_PIO_OUTPUT_1


91 } 
	tpio_ty≥_t
;

94 
	#PIO_DEFAULT
 (0u << 0)

	)

96 
	#PIO_PULLUP
 (1u << 0)

	)

98 
	#PIO_DEGLITCH
 (1u << 1)

	)

100 
	#PIO_OPENDRAIN
 (1u << 2)

	)

103 
	#PIO_DEBOUNCE
 (1u << 3)

	)

106 
	#PIO_IT_AIME
 (1u << 4)

	)

109 
	#PIO_IT_RE_OR_HL
 (1u << 5)

	)

111 
	#PIO_IT_EDGE
 (1u << 6)

	)

114 
	#PIO_IT_LOW_LEVEL
 (0 | 0 | 
PIO_IT_AIME
)

	)

116 
	#PIO_IT_HIGH_LEVEL
 (
PIO_IT_RE_OR_HL
 | 0 | 
PIO_IT_AIME
)

	)

118 
	#PIO_IT_FALL_EDGE
 (0 | 
PIO_IT_EDGE
 | 
PIO_IT_AIME
)

	)

120 
	#PIO_IT_RISE_EDGE
 (
PIO_IT_RE_OR_HL
 | 
PIO_IT_EDGE
 | 
PIO_IT_AIME
)

	)

134 
pio_puŒ_up
(
Pio
 *
p_pio
, c⁄° 
uöt32_t
 
ul_mask
,

135 c⁄° 
uöt32_t
 
ul_puŒ_up_íabÀ
);

136 
pio_£t_deboun˚_fûãr
(
Pio
 *
p_pio
, c⁄° 
uöt32_t
 
ul_mask
,

137 c⁄° 
uöt32_t
 
ul_cut_off
);

138 
pio_£t
(
Pio
 *
p_pio
, c⁄° 
uöt32_t
 
ul_mask
);

139 
pio_˛ór
(
Pio
 *
p_pio
, c⁄° 
uöt32_t
 
ul_mask
);

140 
uöt32_t
 
pio_gë
(
Pio
 *
p_pio
, c⁄° 
pio_ty≥_t
 
ul_ty≥
,

141 c⁄° 
uöt32_t
 
ul_mask
);

142 
pio_£t_≥rùhîÆ
(
Pio
 *
p_pio
, c⁄° 
pio_ty≥_t
 
ul_ty≥
,

143 c⁄° 
uöt32_t
 
ul_mask
);

144 
pio_£t_öput
(
Pio
 *
p_pio
, c⁄° 
uöt32_t
 
ul_mask
,

145 c⁄° 
uöt32_t
 
ul_©åibuã
);

146 
pio_£t_ouçut
(
Pio
 *
p_pio
, c⁄° 
uöt32_t
 
ul_mask
,

147 c⁄° 
uöt32_t
 
ul_deÁu…_Àvñ
,

148 c⁄° 
uöt32_t
 
ul_mu…idrive_íabÀ
,

149 c⁄° 
uöt32_t
 
ul_puŒ_up_íabÀ
);

150 
uöt32_t
 
pio_c⁄figuª
(
Pio
 *
p_pio
, c⁄° 
pio_ty≥_t
 
ul_ty≥
,

151 c⁄° 
uöt32_t
 
ul_mask
, c⁄° uöt32_à
ul_©åibuã
);

152 
uöt32_t
 
pio_gë_ouçut_d©a_°©us
(c⁄° 
Pio
 *
p_pio
,

153 c⁄° 
uöt32_t
 
ul_mask
);

154 
pio_£t_mu…i_drivî
(
Pio
 *
p_pio
, c⁄° 
uöt32_t
 
ul_mask
,

155 c⁄° 
uöt32_t
 
ul_mu…i_drivî_íabÀ
);

156 
uöt32_t
 
pio_gë_mu…i_drivî_°©us
(c⁄° 
Pio
 *
p_pio
);

158 #i‡(
SAM3S
 || 
SAM3N
 || 
SAM4S
 || 
SAM4E
 || 
SAM4N
 || 
SAM4C
 || 
SAMG
 || 
SAM4CP
 || 
SAM4CM
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

159 
pio_puŒ_down
(
Pio
 *
p_pio
, c⁄° 
uöt32_t
 
ul_mask
,

160 c⁄° 
uöt32_t
 
ul_puŒ_down_íabÀ
);

163 
pio_íabÀ_ouçut_wrôe
(
Pio
 *
p_pio
, c⁄° 
uöt32_t
 
ul_mask
);

164 
pio_dißbÀ_ouçut_wrôe
(
Pio
 *
p_pio
, c⁄° 
uöt32_t
 
ul_mask
);

165 
uöt32_t
 
pio_gë_ouçut_wrôe_°©us
(c⁄° 
Pio
 *
p_pio
);

166 
pio_sync_ouçut_wrôe
(
Pio
 *
p_pio
, c⁄° 
uöt32_t
 
ul_mask
);

168 #i‡(
SAM3S
 || 
SAM3N
 || 
SAM4S
 || 
SAM4E
 || 
SAM4N
 || 
SAM4C
 || 
SAMG
 || 
SAM4CP
 || 
SAM4CM
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

169 
pio_£t_schmôt_åiggî
(
Pio
 *
p_pio
, c⁄° 
uöt32_t
 
ul_mask
);

170 
uöt32_t
 
pio_gë_schmôt_åiggî
(c⁄° 
Pio
 *
p_pio
);

173 
pio_c⁄figuª_öãºu±
(
Pio
 *
p_pio
, c⁄° 
uöt32_t
 
ul_mask
,

174 c⁄° 
uöt32_t
 
ul_©å
);

175 
pio_íabÀ_öãºu±
(
Pio
 *
p_pio
, c⁄° 
uöt32_t
 
ul_mask
);

176 
pio_dißbÀ_öãºu±
(
Pio
 *
p_pio
, c⁄° 
uöt32_t
 
ul_mask
);

177 
uöt32_t
 
pio_gë_öãºu±_°©us
(c⁄° 
Pio
 *
p_pio
);

178 
uöt32_t
 
pio_gë_öãºu±_mask
(c⁄° 
Pio
 *
p_pio
);

179 
pio_£t_addôi⁄Æ_öãºu±_mode
(
Pio
 *
p_pio
,

180 c⁄° 
uöt32_t
 
ul_mask
, c⁄° uöt32_à
ul_©åibuã
);

181 
pio_£t_wrôïrŸe˘
(
Pio
 *
p_pio
, c⁄° 
uöt32_t
 
ul_íabÀ
);

182 
uöt32_t
 
pio_gë_wrôïrŸe˘_°©us
(c⁄° 
Pio
 *
p_pio
);

184 #i‡(
SAM3S
 || 
SAM4S
 || 
SAM4E
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

185 
pio_ˇ±uª_£t_mode
(
Pio
 *
p_pio
, 
uöt32_t
 
ul_mode
);

186 
pio_ˇ±uª_íabÀ
(
Pio
 *
p_pio
);

187 
pio_ˇ±uª_dißbÀ
(
Pio
 *
p_pio
);

188 
uöt32_t
 
pio_ˇ±uª_ªad
(c⁄° 
Pio
 *
p_pio
, uöt32_à* 
pul_d©a
);

189 
pio_ˇ±uª_íabÀ_öãºu±
(
Pio
 *
p_pio
, c⁄° 
uöt32_t
 
ul_mask
);

190 
pio_ˇ±uª_dißbÀ_öãºu±
(
Pio
 * 
p_pio
, c⁄° 
uöt32_t
 
ul_mask
);

191 
uöt32_t
 
pio_ˇ±uª_gë_öãºu±_°©us
(c⁄° 
Pio
 *
p_pio
);

192 
uöt32_t
 
pio_ˇ±uª_gë_öãºu±_mask
(c⁄° 
Pio
 *
p_pio
);

193 #i‡!(
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

194 
Pdc
 *
pio_ˇ±uª_gë_pdc_ba£
(c⁄° 
Pio
 *
p_pio
);

199 
uöt32_t
 
pio_gë_pö_vÆue
(uöt32_à
pö
);

200 
pio_£t_pö_high
(
uöt32_t
 
pö
);

201 
pio_£t_pö_low
(
uöt32_t
 
pö
);

202 
pio_toggÀ_pö
(
uöt32_t
 
pö
);

203 
pio_íabÀ_pö_öãºu±
(
uöt32_t
 
pö
);

204 
pio_dißbÀ_pö_öãºu±
(
uöt32_t
 
pö
);

205 
Pio
 *
pio_gë_pö_group
(
uöt32_t
 
pö
);

206 
uöt32_t
 
pio_gë_pö_group_id
(uöt32_à
pö
);

207 
uöt32_t
 
pio_gë_pö_group_mask
(uöt32_à
pö
);

208 
uöt32_t
 
pio_c⁄figuª_pö
(uöt32_à
ul_pö
, c⁄° uöt32_à
ul_Êags
);

209 
pio_£t_pö_group_high
(
Pio
 *
p_pio
, 
uöt32_t
 
ul_mask
);

210 
pio_£t_pö_group_low
(
Pio
 *
p_pio
, 
uöt32_t
 
ul_mask
);

211 
pio_toggÀ_pö_group
(
Pio
 *
p_pio
, 
uöt32_t
 
ul_mask
);

212 
uöt32_t
 
pio_c⁄figuª_pö_group
(
Pio
 *
p_pio
, uöt32_à
ul_mask
,

213 c⁄° 
uöt32_t
 
ul_Êags
);

215 #i‡(
SAM4C
 || 
SAM4CP
 || 
SAM4CM
 || 
SAMG55
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

216 
	epio_io_drive_mode
 {

217 
PIO_IO_DRIVE_LOW
 = 0,

218 
PIO_IO_DRIVE_HIGH
,

220 
pio_£t_io_drive
(
Pio
 *
p_pio
, 
uöt32_t
 
ul_löe
,

221 
pio_io_drive_mode
 
mode
);

224 #i‡(
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

225 
pio_key∑d_íabÀ
(
Pio
 *
p_pio
);

226 
pio_key∑d_dißbÀ
(
Pio
 *
p_pio
);

227 
pio_key∑d_£t_row_num
(
Pio
 *
p_pio
, 
uöt8_t
 
num
);

228 
uöt8_t
 
pio_key∑d_gë_row_num
(c⁄° 
Pio
 *
p_pio
);

229 
pio_key∑d_£t_cﬁumn_num
(
Pio
 *
p_pio
, 
uöt8_t
 
num
);

230 
uöt8_t
 
pio_key∑d_gë_cﬁumn_num
(c⁄° 
Pio
 *
p_pio
);

231 
pio_key∑d_£t_debouncög_vÆue
(
Pio
 *
p_pio
, 
uöt16_t
 
vÆue
);

232 
uöt16_t
 
pio_key∑d_gë_debouncög_vÆue
(c⁄° 
Pio
 *
p_pio
);

233 
pio_key∑d_íabÀ_öãºu±
(
Pio
 *
p_pio
, 
uöt32_t
 
ul_mask
);

234 
pio_key∑d_dißbÀ_öãºu±
(
Pio
 *
p_pio
, 
uöt32_t
 
ul_mask
);

235 
uöt32_t
 
pio_key∑d_gë_öãºu±_mask
(c⁄° 
Pio
 *
p_pio
);

236 
uöt32_t
 
pio_key∑d_gë_¥ess_°©us
(c⁄° 
Pio
 *
p_pio
);

237 
uöt32_t
 
pio_key∑d_gë_ªÀa£_°©us
(c⁄° 
Pio
 *
p_pio
);

238 
uöt8_t
 
pio_key∑d_gë_simu…_¥ess_num
(c⁄° 
Pio
 *
p_pio
);

239 
uöt8_t
 
pio_key∑d_gë_simu…_ªÀa£_num
(c⁄° 
Pio
 *
p_pio
);

240 
uöt8_t
 
pio_key∑d_gë_¥ess_row_ödex
(c⁄° 
Pio
 *
p_pio
, uöt8_à
queue
);

241 
uöt8_t
 
pio_key∑d_gë_¥ess_cﬁumn_ödex
(c⁄° 
Pio
 *
p_pio
, uöt8_à
queue
);

242 
uöt8_t
 
pio_key∑d_gë_ªÀa£_row_ödex
(c⁄° 
Pio
 *
p_pio
, uöt8_à
queue
);

243 
uöt8_t
 
pio_key∑d_gë_ªÀa£_cﬁumn_ödex
(c⁄° 
Pio
 *
p_pio
, uöt8_à
queue
);

373 #ifde‡
__˝lu•lus


	@/home/vaje/Documents/vaja9/asf/sam/drivers/pio/pio_handler.c

47 
	~"pio.h
"

48 
	~"pio_h™dÀr.h
"

55 
	#MAX_INTERRUPT_SOURCES
 7

	)

61 
	ss_öãºu±_sour˚
 {

62 
uöt32_t
 
	mid
;

63 
uöt32_t
 
	mmask
;

64 
uöt32_t
 
	m©å
;

67 (*
	mh™dÀr
Ë(c⁄° 
	muöt32_t
, const uint32_t);

72 
s_öãºu±_sour˚
 
	ggs_öãºu±_sour˚s
[
MAX_INTERRUPT_SOURCES
];

75 
uöt32_t
 
	ggs_ul_nb_sour˚s
 = 0;

77 #i‡(
SAM3S
 || 
SAM4S
 || 
SAM4E
)

79 (*
pio_ˇ±uª_h™dÀr
)(
Pio
 *Ë
NULL
;

80 
uöt32_t
 
pio_ˇ±uª_íabÀ_Êag
;

89 
	$pio_h™dÀr_¥o˚ss
(
Pio
 *
p_pio
, 
uöt32_t
 
ul_id
)

91 
uöt32_t
 
°©us
;

92 
uöt32_t
 
i
;

95 
°©us
 = 
	`pio_gë_öãºu±_°©us
(
p_pio
);

96 
°©us
 &
	`pio_gë_öãºu±_mask
(
p_pio
);

99 i‡(
°©us
 != 0) {

101 
i
 = 0;

102 
°©us
 != 0) {

104 i‡(
gs_öãºu±_sour˚s
[
i
].
id
 =
ul_id
) {

106 i‡((
°©us
 & 
gs_öãºu±_sour˚s
[
i
].
mask
) != 0) {

107 
gs_öãºu±_sour˚s
[
i
].
	`h™dÀr
(gs_öãºu±_sour˚s[i].
id
,

108 
gs_öãºu±_sour˚s
[
i
].
mask
);

109 
°©us
 &~(
gs_öãºu±_sour˚s
[
i
].
mask
);

112 
i
++;

113 i‡(
i
 >
MAX_INTERRUPT_SOURCES
) {

120 #i‡(
SAM3S
 || 
SAM4S
 || 
SAM4E
)

121 i‡(
pio_ˇ±uª_íabÀ_Êag
) {

122 i‡(
pio_ˇ±uª_h™dÀr
) {

123 
	`pio_ˇ±uª_h™dÀr
(
p_pio
);

127 
	}
}

142 
uöt32_t
 
	$pio_h™dÀr_£t
(
Pio
 *
p_pio
, 
uöt32_t
 
ul_id
, uöt32_à
ul_mask
,

143 
uöt32_t
 
ul_©å
, (*
p_h™dÀr
) (uint32_t, uint32_t))

145 
uöt8_t
 
i
;

146 
s_öãºu±_sour˚
 *
pSour˚
;

148 i‡(
gs_ul_nb_sour˚s
 >
MAX_INTERRUPT_SOURCES
)

152 
i
 = 0; i <
gs_ul_nb_sour˚s
; i++) {

153 
pSour˚
 = &(
gs_öãºu±_sour˚s
[
i
]);

154 i‡(
pSour˚
->
id
 =
ul_id
 &&ÖSour˚->
mask
 =
ul_mask
) {

160 
pSour˚
->
id
 = 
ul_id
;

161 
pSour˚
->
mask
 = 
ul_mask
;

162 
pSour˚
->
©å
 = 
ul_©å
;

163 
pSour˚
->
h™dÀr
 = 
p_h™dÀr
;

164 i‡(
i
 =
gs_ul_nb_sour˚s
 + 1) {

165 
gs_ul_nb_sour˚s
++;

169 
	`pio_c⁄figuª_öãºu±
(
p_pio
, 
ul_mask
, 
ul_©å
);

172 
	}
}

174 #i‡(
SAM3S
 || 
SAM4S
 || 
SAM4E
)

184 
	$pio_ˇ±uª_h™dÀr_£t
((*
p_h™dÀr
)(
Pio
 *))

186 
pio_ˇ±uª_h™dÀr
 = 
p_h™dÀr
;

187 
	}
}

190 #ifde‡
ID_PIOA


202 
uöt32_t
 
	$pio_h™dÀr_£t_pö
(
uöt32_t
 
ul_pö
, uöt32_à
ul_Êag
,

203 (*
p_h™dÀr
Ë(
uöt32_t
, uint32_t))

205 
Pio
 *
p_pio
 = 
	`pio_gë_pö_group
(
ul_pö
);

206 
uöt32_t
 
group_id
 = 
	`pio_gë_pö_group_id
(
ul_pö
);

207 
uöt32_t
 
group_mask
 = 
	`pio_gë_pö_group_mask
(
ul_pö
);

209  
	`pio_h™dÀr_£t
(
p_pio
, 
group_id
, 
group_mask
, 
ul_Êag
, 
p_h™dÀr
);

210 
	}
}

216 
	$PIOA_H™dÀr
()

218 
	`pio_h™dÀr_¥o˚ss
(
PIOA
, 
ID_PIOA
);

219 
	}
}

222 #ifde‡
ID_PIOB


227 
	$PIOB_H™dÀr
()

229 
	`pio_h™dÀr_¥o˚ss
(
PIOB
, 
ID_PIOB
);

230 
	}
}

233 #ifde‡
ID_PIOC


238 
	$PIOC_H™dÀr
()

240 
	`pio_h™dÀr_¥o˚ss
(
PIOC
, 
ID_PIOC
);

241 
	}
}

244 #ifde‡
ID_PIOD


249 
	$PIOD_H™dÀr
()

251 
	`pio_h™dÀr_¥o˚ss
(
PIOD
, 
ID_PIOD
);

252 
	}
}

255 #ifde‡
ID_PIOE


260 
	$PIOE_H™dÀr
()

262 
	`pio_h™dÀr_¥o˚ss
(
PIOE
, 
ID_PIOE
);

263 
	}
}

266 #ifde‡
ID_PIOF


271 
	$PIOF_H™dÀr
()

273 
	`pio_h™dÀr_¥o˚ss
(
PIOF
, 
ID_PIOF
);

274 
	}
}

284 
	$pio_h™dÀr_£t_¥i‹ôy
(
Pio
 *
p_pio
, 
IRQn_Ty≥
 
ul_úqn
, 
uöt32_t
 
ul_¥i‹ôy
)

286 
uöt32_t
 
bômask
 = 0;

288 
bômask
 = 
	`pio_gë_öãºu±_mask
(
p_pio
);

289 
	`pio_dißbÀ_öãºu±
(
p_pio
, 0xFFFFFFFF);

290 
	`pio_gë_öãºu±_°©us
(
p_pio
);

291 
	`NVIC_DißbÀIRQ
(
ul_úqn
);

292 
	`NVIC_CÀ¨PídögIRQ
(
ul_úqn
);

293 
	`NVIC_SëPri‹ôy
(
ul_úqn
, 
ul_¥i‹ôy
);

294 
	`NVIC_E«bÀIRQ
(
ul_úqn
);

295 
	`pio_íabÀ_öãºu±
(
p_pio
, 
bômask
);

296 
	}
}

	@/home/vaje/Documents/vaja9/asf/sam/drivers/pio/pio_handler.h

47 #i‚de‡
PIO_HANDLER_H_INCLUDED


48 
	#PIO_HANDLER_H_INCLUDED


	)

50 #ifde‡
__˝lu•lus


54 
pio_h™dÀr_¥o˚ss
(
Pio
 *
p_pio
, 
uöt32_t
 
ul_id
);

55 
pio_h™dÀr_£t_¥i‹ôy
(
Pio
 *
p_pio
, 
IRQn_Ty≥
 
ul_úqn
, 
uöt32_t
 
ul_¥i‹ôy
);

56 
uöt32_t
 
pio_h™dÀr_£t
(
Pio
 *
p_pio
, uöt32_à
ul_id
, uöt32_à
ul_mask
,

57 
uöt32_t
 
ul_©å
, (*
p_h™dÀr
) (uint32_t, uint32_t));

58 
uöt32_t
 
pio_h™dÀr_£t_pö
(uöt32_à
ul_pö
, uöt32_à
ul_Êag
,

59 (*
p_h™dÀr
Ë(
uöt32_t
, uint32_t));

61 #i‡(
SAM3S
 || 
SAM4S
 || 
SAM4E
)

62 
pio_ˇ±uª_h™dÀr_£t
((*
p_h™dÀr
)(
Pio
 *));

65 #ifde‡
__˝lu•lus


	@/home/vaje/Documents/vaja9/asf/sam/drivers/pmc/pmc.c

47 
	~"pmc.h
"

49 #i‡(
SAM3N
)

50 
	#MAX_PERIPH_ID
 31

	)

51 #ñi‡(
SAM3XA
)

52 
	#MAX_PERIPH_ID
 44

	)

53 #ñi‡(
SAM3U
)

54 
	#MAX_PERIPH_ID
 29

	)

55 #ñi‡(
SAM3S
 || 
SAM4S
)

56 
	#MAX_PERIPH_ID
 34

	)

57 #ñi‡(
SAM4E
)

58 
	#MAX_PERIPH_ID
 47

	)

59 #ñi‡(
SAMV71
)

60 
	#MAX_PERIPH_ID
 63

	)

61 #ñi‡(
SAMV70
)

62 
	#MAX_PERIPH_ID
 63

	)

63 #ñi‡(
SAME70
)

64 
	#MAX_PERIPH_ID
 63

	)

65 #ñi‡(
SAMS70
)

66 
	#MAX_PERIPH_ID
 63

	)

67 #ñi‡(
SAM4N
)

68 
	#MAX_PERIPH_ID
 31

	)

69 #ñi‡(
SAM4C
 || 
SAM4CM
 || 
SAM4CP
)

70 
	#MAX_PERIPH_ID
 43

	)

71 #ñi‡(
SAMG51
)

72 
	#MAX_PERIPH_ID
 47

	)

73 #ñi‡(
SAMG53
)

74 
	#MAX_PERIPH_ID
 47

	)

75 #ñi‡(
SAMG54
)

76 
	#MAX_PERIPH_ID
 47

	)

77 #ñi‡(
SAMG55
)

78 
	#MAX_PERIPH_ID
 50

	)

83 #ifde‡
__˝lu•lus


106 
pmc_mck_£t_¥esˇÀr
(
uöt32_t
 
ul_¥es
)

108 
PMC
->
PMC_MCKR
 =

109 (
PMC
->
PMC_MCKR
 & (~
PMC_MCKR_PRES_Msk
)Ë| 
ul_¥es
;

110 !(
PMC
->
PMC_SR
 & 
PMC_SR_MCKRDY
));

113 #i‡
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70


119 
pmc_mck_£t_divisi⁄
(
uöt32_t
 
ul_div
)

121 
ul_div
) {

123 
ul_div
 = 
PMC_MCKR_MDIV_EQ_PCK
;

126 
ul_div
 = 
PMC_MCKR_MDIV_PCK_DIV2
;

129 
ul_div
 = 
PMC_MCKR_MDIV_PCK_DIV3
;

132 
ul_div
 = 
PMC_MCKR_MDIV_PCK_DIV4
;

135 
ul_div
 = 
PMC_MCKR_MDIV_EQ_PCK
;

138 
PMC
->
PMC_MCKR
 =

139 (
PMC
->
PMC_MCKR
 & (~
PMC_MCKR_MDIV_Msk
)Ë| 
ul_div
;

140 !(
PMC
->
PMC_SR
 & 
PMC_SR_MCKRDY
));

149 
pmc_mck_£t_sour˚
(
uöt32_t
 
ul_sour˚
)

151 
PMC
->
PMC_MCKR
 =

152 (
PMC
->
PMC_MCKR
 & (~
PMC_MCKR_CSS_Msk
)Ë| 
ul_sour˚
;

153 !(
PMC
->
PMC_SR
 & 
PMC_SR_MCKRDY
));

164 
uöt32_t
 
pmc_swôch_mck_to_s˛k
(uöt32_à
ul_¥es
)

166 
uöt32_t
 
ul_timeout
;

168 
PMC
->
PMC_MCKR
 = (PMC->PMC_MCKR & (~
PMC_MCKR_CSS_Msk
)) |

169 
PMC_MCKR_CSS_SLOW_CLK
;

170 
ul_timeout
 = 
PMC_TIMEOUT
; !(
PMC
->
PMC_SR
 & 
PMC_SR_MCKRDY
);

171 --
ul_timeout
) {

172 i‡(
ul_timeout
 == 0) {

177 
PMC
->
PMC_MCKR
 = (PMC->PMC_MCKR & (~
PMC_MCKR_PRES_Msk
)Ë| 
ul_¥es
;

178 
ul_timeout
 = 
PMC_TIMEOUT
; !(
PMC
->
PMC_SR
 & 
PMC_SR_MCKRDY
);

179 --
ul_timeout
) {

180 i‡(
ul_timeout
 == 0) {

196 
uöt32_t
 
pmc_swôch_mck_to_maöck
(uöt32_à
ul_¥es
)

198 
uöt32_t
 
ul_timeout
;

200 
PMC
->
PMC_MCKR
 = (PMC->PMC_MCKR & (~
PMC_MCKR_CSS_Msk
)) |

201 
PMC_MCKR_CSS_MAIN_CLK
;

202 
ul_timeout
 = 
PMC_TIMEOUT
; !(
PMC
->
PMC_SR
 & 
PMC_SR_MCKRDY
);

203 --
ul_timeout
) {

204 i‡(
ul_timeout
 == 0) {

209 
PMC
->
PMC_MCKR
 = (PMC->PMC_MCKR & (~
PMC_MCKR_PRES_Msk
)Ë| 
ul_¥es
;

210 
ul_timeout
 = 
PMC_TIMEOUT
; !(
PMC
->
PMC_SR
 & 
PMC_SR_MCKRDY
);

211 --
ul_timeout
) {

212 i‡(
ul_timeout
 == 0) {

228 
uöt32_t
 
pmc_swôch_mck_to_∂œck
(uöt32_à
ul_¥es
)

230 
uöt32_t
 
ul_timeout
;

232 
PMC
->
PMC_MCKR
 = (PMC->PMC_MCKR & (~
PMC_MCKR_PRES_Msk
)Ë| 
ul_¥es
;

233 
ul_timeout
 = 
PMC_TIMEOUT
; !(
PMC
->
PMC_SR
 & 
PMC_SR_MCKRDY
);

234 --
ul_timeout
) {

235 i‡(
ul_timeout
 == 0) {

240 
PMC
->
PMC_MCKR
 = (PMC->PMC_MCKR & (~
PMC_MCKR_CSS_Msk
)) |

241 
PMC_MCKR_CSS_PLLA_CLK
;

243 
ul_timeout
 = 
PMC_TIMEOUT
; !(
PMC
->
PMC_SR
 & 
PMC_SR_MCKRDY
);

244 --
ul_timeout
) {

245 i‡(
ul_timeout
 == 0) {

253 #i‡(
SAM3S
 || 
SAM4S
 || 
SAM4C
 || 
SAM4CM
 || 
SAM4CP
 || 
SAMG55
)

262 
uöt32_t
 
pmc_swôch_mck_to_∂lbck
(uöt32_à
ul_¥es
)

264 
uöt32_t
 
ul_timeout
;

266 
PMC
->
PMC_MCKR
 = (PMC->PMC_MCKR & (~
PMC_MCKR_PRES_Msk
)Ë| 
ul_¥es
;

267 
ul_timeout
 = 
PMC_TIMEOUT
; !(
PMC
->
PMC_SR
 & 
PMC_SR_MCKRDY
);

268 --
ul_timeout
) {

269 i‡(
ul_timeout
 == 0) {

274 
PMC
->
PMC_MCKR
 = (PMC->PMC_MCKR & (~
PMC_MCKR_CSS_Msk
)) |

275 
PMC_MCKR_CSS_PLLB_CLK
;

276 
ul_timeout
 = 
PMC_TIMEOUT
; !(
PMC
->
PMC_SR
 & 
PMC_SR_MCKRDY
);

277 --
ul_timeout
) {

278 i‡(
ul_timeout
 == 0) {

287 #i‡(
SAM3XA
 || 
SAM3U
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

296 
uöt32_t
 
pmc_swôch_mck_to_u∂lck
(uöt32_à
ul_¥es
)

298 
uöt32_t
 
ul_timeout
;

300 
PMC
->
PMC_MCKR
 = (PMC->PMC_MCKR & (~
PMC_MCKR_PRES_Msk
)Ë| 
ul_¥es
;

301 
ul_timeout
 = 
PMC_TIMEOUT
; !(
PMC
->
PMC_SR
 & 
PMC_SR_MCKRDY
);

302 --
ul_timeout
) {

303 i‡(
ul_timeout
 == 0) {

308 
PMC
->
PMC_MCKR
 = (PMC->PMC_MCKR & (~
PMC_MCKR_CSS_Msk
)) |

309 
PMC_MCKR_CSS_UPLL_CLK
;

310 
ul_timeout
 = 
PMC_TIMEOUT
; !(
PMC
->
PMC_SR
 & 
PMC_SR_MCKRDY
);

311 --
ul_timeout
) {

312 i‡(
ul_timeout
 == 0) {

329 
pmc_swôch_s˛k_to_32kxèl
(
uöt32_t
 
ul_by∑ss
)

332 i‡(
ul_by∑ss
 == 1) {

333 
SUPC
->
SUPC_MR
 |
SUPC_MR_KEY_PASSWD
 |

334 
SUPC_MR_OSCBYPASS
;

337 
SUPC
->
SUPC_CR
 = 
SUPC_CR_KEY_PASSWD
 | 
SUPC_CR_XTALSEL
;

346 
uöt32_t
 
pmc_osc_is_ªady_32kxèl
()

348  ((
SUPC
->
SUPC_SR
 & 
SUPC_SR_OSCSEL
)

349 && (
PMC
->
PMC_SR
 & 
PMC_SR_OSCSELS
));

361 
pmc_swôch_maöck_to_Á°rc
(
uöt32_t
 
ul_mos¸cf
)

364 
PMC
->
CKGR_MOR
 |(
CKGR_MOR_KEY_PASSWD
 | 
CKGR_MOR_MOSCRCEN
);

367 !(
PMC
->
PMC_SR
 & 
PMC_SR_MOSCRCS
));

370 
PMC
->
CKGR_MOR
 = (PMC->CKGR_MOR & ~
CKGR_MOR_MOSCRCF_Msk
) |

371 
CKGR_MOR_KEY_PASSWD
 | 
ul_mos¸cf
;

374 !(
PMC
->
PMC_SR
 & 
PMC_SR_MOSCRCS
));

377 
PMC
->
CKGR_MOR
 = (PMC->CKGR_MOR & ~
CKGR_MOR_MOSCSEL
) |

378 
CKGR_MOR_KEY_PASSWD
;

386 
pmc_osc_íabÀ_Á°rc
(
uöt32_t
 
ul_rc
)

389 
PMC
->
CKGR_MOR
 |(
CKGR_MOR_KEY_PASSWD
 | 
CKGR_MOR_MOSCRCEN
);

391 !(
PMC
->
PMC_SR
 & 
PMC_SR_MOSCRCS
));

394 
PMC
->
CKGR_MOR
 = (PMC->CKGR_MOR & ~
CKGR_MOR_MOSCRCF_Msk
) |

395 
CKGR_MOR_KEY_PASSWD
 | 
ul_rc
;

397 !(
PMC
->
PMC_SR
 & 
PMC_SR_MOSCRCS
));

403 
pmc_osc_dißbÀ_Á°rc
()

406 
PMC
->
CKGR_MOR
 = (PMC->CKGR_MOR & ~
CKGR_MOR_MOSCRCEN
 &

407 ~
CKGR_MOR_MOSCRCF_Msk
)

408 | 
CKGR_MOR_KEY_PASSWD
;

416 
uöt32_t
 
pmc_osc_is_ªady_Á°rc
()

418  (
PMC
->
PMC_SR
 & 
PMC_SR_MOSCRCS
);

426 
pmc_osc_íabÀ_maö_xèl
(
uöt32_t
 
ul_xèl_°¨tup_time
)

428 
uöt32_t
 
m‹
 = 
PMC
->
CKGR_MOR
;

429 
m‹
 &~(
CKGR_MOR_MOSCXTBY
|
CKGR_MOR_MOSCXTEN
);

430 
m‹
 |
CKGR_MOR_KEY_PASSWD
 | 
CKGR_MOR_MOSCXTEN
 |

431 
CKGR_MOR_MOSCXTST
(
ul_xèl_°¨tup_time
);

432 
PMC
->
CKGR_MOR
 = 
m‹
;

434 !(
PMC
->
PMC_SR
 & 
PMC_SR_MOSCXTS
));

440 
pmc_osc_by∑ss_maö_xèl
()

442 
uöt32_t
 
m‹
 = 
PMC
->
CKGR_MOR
;

443 
m‹
 &~(
CKGR_MOR_MOSCXTBY
|
CKGR_MOR_MOSCXTEN
);

444 
m‹
 |
CKGR_MOR_KEY_PASSWD
 | 
CKGR_MOR_MOSCXTBY
;

446 
PMC
->
CKGR_MOR
 = 
m‹
;

453 
pmc_osc_dißbÀ_maö_xèl
()

455 
uöt32_t
 
m‹
 = 
PMC
->
CKGR_MOR
;

456 
m‹
 &~(
CKGR_MOR_MOSCXTBY
|
CKGR_MOR_MOSCXTEN
);

457 
PMC
->
CKGR_MOR
 = 
CKGR_MOR_KEY_PASSWD
 | 
m‹
;

465 
uöt32_t
 
pmc_osc_is_by∑s£d_maö_xèl
()

467  (
PMC
->
CKGR_MOR
 & 
CKGR_MOR_MOSCXTBY
);

477 
uöt32_t
 
pmc_osc_is_ªady_maö_xèl
()

479  (
PMC
->
PMC_SR
 & 
PMC_SR_MOSCXTS
);

495 
pmc_swôch_maöck_to_xèl
(
uöt32_t
 
ul_by∑ss
,

496 
uöt32_t
 
ul_xèl_°¨tup_time
)

499 i‡(
ul_by∑ss
) {

500 
PMC
->
CKGR_MOR
 = (PMC->CKGR_MOR & ~
CKGR_MOR_MOSCXTEN
) |

501 
CKGR_MOR_KEY_PASSWD
 | 
CKGR_MOR_MOSCXTBY
 |

502 
CKGR_MOR_MOSCSEL
;

504 
PMC
->
CKGR_MOR
 = (PMC->CKGR_MOR & ~
CKGR_MOR_MOSCXTBY
) |

505 
CKGR_MOR_KEY_PASSWD
 | 
CKGR_MOR_MOSCXTEN
 |

506 
CKGR_MOR_MOSCXTST
(
ul_xèl_°¨tup_time
);

508 !(
PMC
->
PMC_SR
 & 
PMC_SR_MOSCXTS
));

510 
PMC
->
CKGR_MOR
 |
CKGR_MOR_KEY_PASSWD
 | 
CKGR_MOR_MOSCSEL
;

519 
pmc_osc_dißbÀ_xèl
(
uöt32_t
 
ul_by∑ss
)

522 i‡(
ul_by∑ss
) {

523 
PMC
->
CKGR_MOR
 = (PMC->CKGR_MOR & ~
CKGR_MOR_MOSCXTBY
) |

524 
CKGR_MOR_KEY_PASSWD
;

526 
PMC
->
CKGR_MOR
 = (PMC->CKGR_MOR & ~
CKGR_MOR_MOSCXTEN
) |

527 
CKGR_MOR_KEY_PASSWD
;

538 
uöt32_t
 
pmc_osc_is_ªady_maöck
()

540  
PMC
->
PMC_SR
 & 
PMC_SR_MOSCSELS
;

550 
pmc_maöck_osc_£À˘
(
uöt32_t
 
ul_xèl_rc
)

552 
uöt32_t
 
m‹
 = 
PMC
->
CKGR_MOR
;

553 i‡(
ul_xèl_rc
) {

554 
m‹
 |
CKGR_MOR_MOSCSEL
;

556 
m‹
 &~
CKGR_MOR_MOSCSEL
;

558 
PMC
->
CKGR_MOR
 = 
CKGR_MOR_KEY_PASSWD
 | 
m‹
;

568 
pmc_íabÀ_∂œck
(
uöt32_t
 
muœ
, uöt32_à
∂œcou¡
, uöt32_à
diva
)

571 
pmc_dißbÀ_∂œck
();

573 #i‡(
SAM4C
 || 
SAM4CM
 || 
SAM4CP
 || 
SAMG
)

574 
PMC
->
CKGR_PLLAR
 = 
CKGR_PLLAR_PLLAEN
(
diva
) |

575 
CKGR_PLLAR_PLLACOUNT
(
∂œcou¡
Ë| 
CKGR_PLLAR_MULA
(
muœ
);

577 
PMC
->
CKGR_PLLAR
 = 
CKGR_PLLAR_ONE
 | 
CKGR_PLLAR_DIVA
(
diva
) |

578 
CKGR_PLLAR_PLLACOUNT
(
∂œcou¡
Ë| 
CKGR_PLLAR_MULA
(
muœ
);

580 (
PMC
->
PMC_SR
 & 
PMC_SR_LOCKA
) == 0);

586 
pmc_dißbÀ_∂œck
()

588 #i‡(
SAM4C
 || 
SAM4CM
 || 
SAM4CP
 || 
SAMG
)

589 
PMC
->
CKGR_PLLAR
 = 
CKGR_PLLAR_MULA
(0);

591 
PMC
->
CKGR_PLLAR
 = 
CKGR_PLLAR_ONE
 | 
CKGR_PLLAR_MULA
(0);

601 
uöt32_t
 
pmc_is_locked_∂œck
()

603  (
PMC
->
PMC_SR
 & 
PMC_SR_LOCKA
);

606 #i‡(
SAM3S
 || 
SAM4S
 || 
SAM4C
 || 
SAM4CM
 || 
SAM4CP
 || 
SAMG55
)

614 
pmc_íabÀ_∂lbck
(
uöt32_t
 
mulb
, uöt32_à
∂lbcou¡
, uöt32_à
divb
)

617 
pmc_dißbÀ_∂lbck
();

619 #i‡
SAMG55


620 
PMC
->
CKGR_PLLAR
 = 
CKGR_PLLAR_PLLAEN
(
divb
) |

621 
CKGR_PLLAR_PLLACOUNT
(
∂lbcou¡
Ë| 
CKGR_PLLAR_MULA
(
mulb
);

623 
PMC
->
CKGR_PLLBR
 =

624 
CKGR_PLLBR_DIVB
(
divb
Ë| 
CKGR_PLLBR_PLLBCOUNT
(
∂lbcou¡
)

625 | 
CKGR_PLLBR_MULB
(
mulb
);

627 (
PMC
->
PMC_SR
 & 
PMC_SR_LOCKB
) == 0);

633 
pmc_dißbÀ_∂lbck
()

635 
PMC
->
CKGR_PLLBR
 = 
CKGR_PLLBR_MULB
(0);

644 
uöt32_t
 
pmc_is_locked_∂lbck
()

646  (
PMC
->
PMC_SR
 & 
PMC_SR_LOCKB
);

650 #i‡(
SAM3XA
 || 
SAM3U
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

654 
pmc_íabÀ_u∂l_˛ock
()

656 
PMC
->
CKGR_UCKR
 = 
CKGR_UCKR_UPLLCOUNT
(3Ë| 
CKGR_UCKR_UPLLEN
;

659 !(
PMC
->
PMC_SR
 & 
PMC_SR_LOCKU
));

665 
pmc_dißbÀ_u∂l_˛ock
()

667 
PMC
->
CKGR_UCKR
 &~
CKGR_UCKR_UPLLEN
;

676 
uöt32_t
 
pmc_is_locked_u∂l
()

678  (
PMC
->
PMC_SR
 & 
PMC_SR_LOCKU
);

692 
uöt32_t
 
pmc_íabÀ_≥rùh_˛k
(uöt32_à
ul_id
)

694 i‡(
ul_id
 > 
MAX_PERIPH_ID
) {

698 i‡(
ul_id
 < 32) {

699 i‡((
PMC
->
PMC_PCSR0
 & (1u << 
ul_id
)) != (1u << ul_id)) {

700 
PMC
->
PMC_PCER0
 = 1 << 
ul_id
;

702 #i‡(
SAM3S
 || 
SAM3XA
 || 
SAM4S
 || 
SAM4E
 || 
SAM4C
 || 
SAM4CM
 || 
SAM4CP
 || 
SAMG55
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

704 
ul_id
 -= 32;

705 i‡((
PMC
->
PMC_PCSR1
 & (1u << 
ul_id
)) != (1u << ul_id)) {

706 
PMC
->
PMC_PCER1
 = 1 << 
ul_id
;

724 
uöt32_t
 
pmc_dißbÀ_≥rùh_˛k
(uöt32_à
ul_id
)

726 i‡(
ul_id
 > 
MAX_PERIPH_ID
) {

730 i‡(
ul_id
 < 32) {

731 i‡((
PMC
->
PMC_PCSR0
 & (1u << 
ul_id
)) == (1u << ul_id)) {

732 
PMC
->
PMC_PCDR0
 = 1 << 
ul_id
;

734 #i‡(
SAM3S
 || 
SAM3XA
 || 
SAM4S
 || 
SAM4E
 || 
SAM4C
 || 
SAM4CM
 || 
SAM4CP
 || 
SAMG55
 || 
SAMV71
 \

735 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

737 
ul_id
 -= 32;

738 i‡((
PMC
->
PMC_PCSR1
 & (1u << 
ul_id
)) == (1u << ul_id)) {

739 
PMC
->
PMC_PCDR1
 = 1 << 
ul_id
;

749 
pmc_íabÀ_Æl_≥rùh_˛k
()

751 
PMC
->
PMC_PCER0
 = 
PMC_MASK_STATUS0
;

752 (
PMC
->
PMC_PCSR0
 & 
PMC_MASK_STATUS0
) != PMC_MASK_STATUS0);

754 #i‡(
SAM3S
 || 
SAM3XA
 || 
SAM4S
 || 
SAM4E
 || 
SAM4C
 || 
SAM4CM
 || 
SAM4CP
 || 
SAMV71
 \

755 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

756 
PMC
->
PMC_PCER1
 = 
PMC_MASK_STATUS1
;

757 (
PMC
->
PMC_PCSR1
 & 
PMC_MASK_STATUS1
) != PMC_MASK_STATUS1);

764 
pmc_dißbÀ_Æl_≥rùh_˛k
()

766 
PMC
->
PMC_PCDR0
 = 
PMC_MASK_STATUS0
;

767 (
PMC
->
PMC_PCSR0
 & 
PMC_MASK_STATUS0
) != 0);

769 #i‡(
SAM3S
 || 
SAM3XA
 || 
SAM4S
 || 
SAM4E
 || 
SAM4C
 || 
SAM4CM
 || 
SAM4CP
 || 
SAMV71
 \

770 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

771 
PMC
->
PMC_PCDR1
 = 
PMC_MASK_STATUS1
;

772 (
PMC
->
PMC_PCSR1
 & 
PMC_MASK_STATUS1
) != 0);

786 
uöt32_t
 
pmc_is_≥rùh_˛k_íabÀd
(uöt32_à
ul_id
)

788 i‡(
ul_id
 > 
MAX_PERIPH_ID
) {

792 #i‡(
SAM3S
 || 
SAM3XA
 || 
SAM4S
 || 
SAM4E
 || 
SAM4C
 || 
SAM4CM
 || 
SAM4CP
 || 
SAMV71
 \

793 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

794 i‡(
ul_id
 < 32) {

796 i‡((
PMC
->
PMC_PCSR0
 & (1u << 
ul_id
))) {

801 #i‡(
SAM3S
 || 
SAM3XA
 || 
SAM4S
 || 
SAM4E
 || 
SAM4C
 || 
SAM4CM
 || 
SAM4CP
 || 
SAMV71
 \

802 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

804 
ul_id
 -= 32;

805 i‡((
PMC
->
PMC_PCSR1
 & (1u << 
ul_id
))) {

820 
pmc_pck_£t_¥esˇÀr
(
uöt32_t
 
ul_id
, uöt32_à
ul_¥es
)

822 
PMC
->
PMC_PCK
[
ul_id
] =

823 (
PMC
->
PMC_PCK
[
ul_id
] & ~
PMC_PCK_PRES_Msk
Ë| 
ul_¥es
;

824 (
PMC
->
PMC_SCER
 & (
PMC_SCER_PCK0
 << 
ul_id
))

825 && !(
PMC
->
PMC_SR
 & (
PMC_SR_PCKRDY0
 << 
ul_id
)));

834 
pmc_pck_£t_sour˚
(
uöt32_t
 
ul_id
, uöt32_à
ul_sour˚
)

836 
PMC
->
PMC_PCK
[
ul_id
] =

837 (
PMC
->
PMC_PCK
[
ul_id
] & ~
PMC_PCK_CSS_Msk
Ë| 
ul_sour˚
;

838 (
PMC
->
PMC_SCER
 & (
PMC_SCER_PCK0
 << 
ul_id
))

839 && !(
PMC
->
PMC_SR
 & (
PMC_SR_PCKRDY0
 << 
ul_id
)));

851 
uöt32_t
 
pmc_swôch_pck_to_s˛k
(uöt32_à
ul_id
, uöt32_à
ul_¥es
)

853 
uöt32_t
 
ul_timeout
;

855 
PMC
->
PMC_PCK
[
ul_id
] = 
PMC_PCK_CSS_SLOW_CLK
 | 
ul_¥es
;

856 
ul_timeout
 = 
PMC_TIMEOUT
;

857 !(
PMC
->
PMC_SR
 & (
PMC_SR_PCKRDY0
 << 
ul_id
)); --
ul_timeout
) {

858 i‡(
ul_timeout
 == 0) {

875 
uöt32_t
 
pmc_swôch_pck_to_maöck
(uöt32_à
ul_id
, uöt32_à
ul_¥es
)

877 
uöt32_t
 
ul_timeout
;

879 
PMC
->
PMC_PCK
[
ul_id
] = 
PMC_PCK_CSS_MAIN_CLK
 | 
ul_¥es
;

880 
ul_timeout
 = 
PMC_TIMEOUT
;

881 !(
PMC
->
PMC_SR
 & (
PMC_SR_PCKRDY0
 << 
ul_id
)); --
ul_timeout
) {

882 i‡(
ul_timeout
 == 0) {

899 
uöt32_t
 
pmc_swôch_pck_to_∂œck
(uöt32_à
ul_id
, uöt32_à
ul_¥es
)

901 
uöt32_t
 
ul_timeout
;

903 
PMC
->
PMC_PCK
[
ul_id
] = 
PMC_PCK_CSS_PLLA_CLK
 | 
ul_¥es
;

904 
ul_timeout
 = 
PMC_TIMEOUT
;

905 !(
PMC
->
PMC_SR
 & (
PMC_SR_PCKRDY0
 << 
ul_id
)); --
ul_timeout
) {

906 i‡(
ul_timeout
 == 0) {

914 #i‡(
SAM3S
 || 
SAM4S
 || 
SAM4C
 || 
SAM4CM
 || 
SAM4CP
 || 
SAMG55
)

924 
uöt32_t
 
pmc_swôch_pck_to_∂lbck
(uöt32_à
ul_id
, uöt32_à
ul_¥es
)

926 
uöt32_t
 
ul_timeout
;

928 
PMC
->
PMC_PCK
[
ul_id
] = 
PMC_PCK_CSS_PLLB_CLK
 | 
ul_¥es
;

929 
ul_timeout
 = 
PMC_TIMEOUT
;

930 !(
PMC
->
PMC_SR
 & (
PMC_SR_PCKRDY0
 << 
ul_id
));

931 --
ul_timeout
) {

932 i‡(
ul_timeout
 == 0) {

941 #i‡(
SAM3XA
 || 
SAM3U
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

951 
uöt32_t
 
pmc_swôch_pck_to_u∂lck
(uöt32_à
ul_id
, uöt32_à
ul_¥es
)

953 
uöt32_t
 
ul_timeout
;

955 
PMC
->
PMC_PCK
[
ul_id
] = 
PMC_PCK_CSS_UPLL_CLK
 | 
ul_¥es
;

956 
ul_timeout
 = 
PMC_TIMEOUT
;

957 !(
PMC
->
PMC_SR
 & (
PMC_SR_PCKRDY0
 << 
ul_id
));

958 --
ul_timeout
) {

959 i‡(
ul_timeout
 == 0) {

977 
uöt32_t
 
pmc_swôch_pck_to_mck
(uöt32_à
ul_id
, uöt32_à
ul_¥es
)

979 
uöt32_t
 
ul_timeout
;

981 
PMC
->
PMC_PCK
[
ul_id
] = 
PMC_PCK_CSS_MCK
 | 
ul_¥es
;

982 
ul_timeout
 = 
PMC_TIMEOUT
;

983 !(
PMC
->
PMC_SR
 & (
PMC_SR_PCKRDY0
 << 
ul_id
)); --
ul_timeout
) {

984 i‡(
ul_timeout
 == 0) {

997 
pmc_íabÀ_pck
(
uöt32_t
 
ul_id
)

999 
PMC
->
PMC_SCER
 = 
PMC_SCER_PCK0
 << 
ul_id
;

1007 
pmc_dißbÀ_pck
(
uöt32_t
 
ul_id
)

1009 
PMC
->
PMC_SCDR
 = 
PMC_SCER_PCK0
 << 
ul_id
;

1015 
pmc_íabÀ_Æl_pck
()

1017 
PMC
->
PMC_SCER
 = 
PMC_SCER_PCK0
 | 
PMC_SCER_PCK1
 | 
PMC_SCER_PCK2
;

1023 
pmc_dißbÀ_Æl_pck
()

1025 
PMC
->
PMC_SCDR
 = 
PMC_SCDR_PCK0
 | 
PMC_SCDR_PCK1
 | 
PMC_SCDR_PCK2
;

1036 
uöt32_t
 
pmc_is_pck_íabÀd
(uöt32_à
ul_id
)

1038 i‡(
ul_id
 > 2) {

1042  (
PMC
->
PMC_SCSR
 & (
PMC_SCSR_PCK0
 << 
ul_id
));

1045 #i‡(
SAM4C
 || 
SAM4CM
 || 
SAM4CP
)

1049 
pmc_íabÀ_˝ck
()

1051 
PMC
->
PMC_SCER
 = 
PMC_SCER_CPCK
 | 
PMC_SCER_CPKEY_PASSWD
;

1057 
pmc_dißbÀ_˝ck
()

1059 
PMC
->
PMC_SCDR
 = 
PMC_SCDR_CPCK
 | 
PMC_SCDR_CPKEY_PASSWD
;

1068 
boﬁ
 
pmc_is_˝ck_íabÀd
()

1070 if(
PMC
->
PMC_SCSR
 & 
PMC_SCSR_CPCK
) {

1080 
pmc_íabÀ_˝bmck
()

1082 
PMC
->
PMC_SCER
 = 
PMC_SCER_CPBMCK
 | 
PMC_SCER_CPKEY_PASSWD
;

1088 
pmc_dißbÀ_˝bmck
()

1090 
PMC
->
PMC_SCDR
 = 
PMC_SCDR_CPBMCK
 | 
PMC_SCDR_CPKEY_PASSWD
;

1099 
boﬁ
 
pmc_is_˝bmck_íabÀd
()

1101 if(
PMC
->
PMC_SCSR
 & 
PMC_SCSR_CPBMCK
) {

1113 
pmc_˝ck_£t_¥esˇÀr
(
uöt32_t
 
ul_¥es
)

1115 
PMC
->
PMC_MCKR
 =

1116 (
PMC
->
PMC_MCKR
 & (~
PMC_MCKR_CPPRES_Msk
)Ë| 
PMC_MCKR_CPPRES
(
ul_¥es
);

1124 
pmc_˝ck_£t_sour˚
(
uöt32_t
 
ul_sour˚
)

1126 
PMC
->
PMC_MCKR
 =

1127 (
PMC
->
PMC_MCKR
 & (~
PMC_MCKR_CPCSS_Msk
)Ë| 
ul_sour˚
;

1131 #i‡(
SAM3S
 || 
SAM3XA
 || 
SAM4S
 || 
SAM4E
 || 
SAMG55
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

1137 
pmc_swôch_udpck_to_∂œck
(
uöt32_t
 
ul_usbdiv
)

1139 
PMC
->
PMC_USB
 = 
PMC_USB_USBDIV
(
ul_usbdiv
);

1143 #i‡(
SAM3S
 || 
SAM4S
 || 
SAMG55
)

1149 
pmc_swôch_udpck_to_∂lbck
(
uöt32_t
 
ul_usbdiv
)

1151 
PMC
->
PMC_USB
 = 
PMC_USB_USBDIV
(
ul_usbdiv
Ë| 
PMC_USB_USBS
;

1155 #i‡(
SAM3XA
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

1161 
pmc_swôch_udpck_to_u∂lck
(
uöt32_t
 
ul_usbdiv
)

1163 
PMC
->
PMC_USB
 = 
PMC_USB_USBS
 | 
PMC_USB_USBDIV
(
ul_usbdiv
);

1167 #i‡(
SAM3S
 || 
SAM3XA
 || 
SAM4S
 || 
SAM4E
 || 
SAMG55
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

1171 
pmc_íabÀ_udpck
()

1173 #i‡(
SAM3S
 || 
SAM4S
 || 
SAM4E
 || 
SAMG55
)

1174 
PMC
->
PMC_SCER
 = 
PMC_SCER_UDP
;

1175 #ñi‡(
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

1176 
PMC
->
PMC_SCER
 = 
PMC_SCER_USBCLK
;

1178 
PMC
->
PMC_SCER
 = 
PMC_SCER_UOTGCLK
;

1185 
pmc_dißbÀ_udpck
()

1187 #i‡(
SAM3S
 || 
SAM4S
 || 
SAM4E
 || 
SAMG55
)

1188 
PMC
->
PMC_SCDR
 = 
PMC_SCDR_UDP
;

1189 #ñi‡(
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

1190 
PMC
->
PMC_SCDR
 = 
PMC_SCDR_USBCLK
;

1192 
PMC
->
PMC_SCDR
 = 
PMC_SCDR_UOTGCLK
;

1197 #i‡
SAMG55


1203 
pmc_swôch_uhpck_to_∂œck
(
uöt32_t
 
ul_usbdiv
)

1205 
PMC
->
PMC_USB
 = 
PMC_USB_USBDIV
(
ul_usbdiv
);

1213 
pmc_swôch_uhpck_to_∂lbck
(
uöt32_t
 
ul_usbdiv
)

1215 
PMC
->
PMC_USB
 = 
PMC_USB_USBDIV
(
ul_usbdiv
Ë| 
PMC_USB_USBS
;

1221 
pmc_íabÀ_uhpck
()

1223 
PMC
->
PMC_SCER
 = 
PMC_SCER_UHP
;

1232 
pmc_íabÀ_öãºu±
(
uöt32_t
 
ul_sour˚s
)

1234 
PMC
->
PMC_IER
 = 
ul_sour˚s
;

1242 
pmc_dißbÀ_öãºu±
(
uöt32_t
 
ul_sour˚s
)

1244 
PMC
->
PMC_IDR
 = 
ul_sour˚s
;

1252 
uöt32_t
 
pmc_gë_öãºu±_mask
()

1254  
PMC
->
PMC_IMR
;

1262 
uöt32_t
 
pmc_gë_°©us
()

1264  
PMC
->
PMC_SR
;

1273 
pmc_£t_Á°_°¨tup_öput
(
uöt32_t
 
ul_öputs
)

1275 
ul_öputs
 &
PMC_FAST_STARTUP_Msk
;

1276 
PMC
->
PMC_FSMR
 |
ul_öputs
;

1285 
pmc_˛r_Á°_°¨tup_öput
(
uöt32_t
 
ul_öputs
)

1287 
ul_öputs
 &
PMC_FAST_STARTUP_Msk
;

1288 
PMC
->
PMC_FSMR
 &~
ul_öputs
;

1291 #i‡(
SAM4C
 || 
SAM4CM
 || 
SAM4CP
)

1298 
pmc_˝_£t_Á°_°¨tup_öput
(
uöt32_t
 
ul_öputs
)

1300 
ul_öputs
 &
PMC_FAST_STARTUP_Msk
;

1301 
PMC
->
PMC_CPFSMR
 |
ul_öputs
;

1310 
pmc_˝_˛r_Á°_°¨tup_öput
(
uöt32_t
 
ul_öputs
)

1312 
ul_öputs
 &
PMC_FAST_STARTUP_Msk
;

1313 
PMC
->
PMC_CPFSMR
 &~
ul_öputs
;

1325 
pmc_íabÀ_¶ìpmode
(
uöt8_t
 
uc_ty≥
)

1327 #i‡!(
SAM4S
 || 
SAM4E
 || 
SAM4N
 || 
SAM4C
 || 
SAM4CM
 || 
SAM4CP
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

1328 
PMC
->
PMC_FSMR
 &(
uöt32_t
Ë~ 
PMC_FSMR_LPM
;

1330 
SCB
->
SCR
 &(
uöt32_t
Ë~ 
SCB_SCR_SLEEPDEEP_Msk
;

1332 #i‡(
SAM4S
 || 
SAM4E
 || 
SAM4N
 || 
SAM4C
 || 
SAM4CM
 || 
SAM4CP
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

1333 
UNUSED
(
uc_ty≥
);

1334 
__WFI
();

1336 i‡(
uc_ty≥
 == 0) {

1337 
__WFI
();

1339 
__WFE
();

1344 #i‡(
SAM4S
 || 
SAM4E
 || 
SAM4N
 || 
SAM4C
 || 
SAM4CM
 || 
SAMG
 || 
SAM4CP
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

1345 
uöt32_t
 
ul_Êash_ö_waô_mode
 = 
PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN
;

1352 
pmc_£t_Êash_ö_waô_mode
(
uöt32_t
 
ul_Êash_°©e
)

1354 
ul_Êash_ö_waô_mode
 = 
ul_Êash_°©e
;

1365 
pmc_íabÀ_waômode
()

1367 
uöt32_t
 
i
;

1370 
i
 = 
PMC
->
PMC_FSMR
;

1371 
i
 &~
PMC_FSMR_FLPM_Msk
;

1372 #i‡!(
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

1373 
i
 |
ul_Êash_ö_waô_mode
;

1375 
i
 |
PMC_WAIT_MODE_FLASH_IDLE
;

1377 
PMC
->
PMC_FSMR
 = 
i
;

1380 
PMC
->
CKGR_MOR
 |
CKGR_MOR_KEY_PASSWD
 | 
CKGR_MOR_WAITMODE
;

1383 !(
PMC
->
PMC_SR
 & 
PMC_SR_MCKRDY
));

1388 
i
 = 0; i < 500; i++) {

1389 
__NOP
();

1391 !(
PMC
->
CKGR_MOR
 & 
CKGR_MOR_MOSCRCEN
));

1393 #i‡(!
SAMG
)

1395 
i
 = 
PMC
->
PMC_FSMR
;

1396 
i
 &~
PMC_FSMR_FLPM_Msk
;

1397 
i
 |
PMC_WAIT_MODE_FLASH_IDLE
;

1398 
PMC
->
PMC_FSMR
 = 
i
;

1406 
pmc_íabÀ_waômode
()

1408 
uöt32_t
 
i
;

1410 
PMC
->
PMC_FSMR
 |
PMC_FSMR_LPM
;

1411 
SCB
->
SCR
 &(
uöt32_t
Ë~ 
SCB_SCR_SLEEPDEEP_Msk
;

1413 
__WFE
();

1418 
i
 = 0; i < 500; i++) {

1419 
__NOP
();

1421 !(
PMC
->
CKGR_MOR
 & 
CKGR_MOR_MOSCRCEN
));

1426 #i‡(!(
SAMG51
 || 
SAMG53
 || 
SAMG54
))

1431 
pmc_íabÀ_backupmode
()

1433 #i‡(
SAM4C
 || 
SAM4CM
 || 
SAM4CP
)

1434 
uöt32_t
 
tmp
 = 
SUPC
->
SUPC_MR
 & ~(
SUPC_MR_BUPPOREN
 | 
SUPC_MR_KEY_Msk
);

1435 
SUPC
->
SUPC_MR
 = 
tmp
 | 
SUPC_MR_KEY_PASSWD
;

1436 
SUPC
->
SUPC_SR
 & 
SUPC_SR_BUPPORS
);

1438 
SCB
->
SCR
 |
SCB_SCR_SLEEPDEEP_Msk
;

1439 #i‡(
SAM4S
 || 
SAM4E
 || 
SAM4N
 || 
SAM4C
 || 
SAM4CM
 || 
SAM4CP
 || 
SAMG55
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

1440 
SUPC
->
SUPC_CR
 = 
SUPC_CR_KEY_PASSWD
 | 
SUPC_CR_VROFF_STOP_VREG
;

1441 
__WFE
();

1442 
__WFI
();

1444 
__WFE
();

1452 
pmc_íabÀ_˛ock_Áûuª_dëe˘‹
()

1454 
uöt32_t
 
ul_ªg
 = 
PMC
->
CKGR_MOR
;

1456 
PMC
->
CKGR_MOR
 = 
CKGR_MOR_KEY_PASSWD
 | 
CKGR_MOR_CFDEN
 | 
ul_ªg
;

1462 
pmc_dißbÀ_˛ock_Áûuª_dëe˘‹
()

1464 
uöt32_t
 
ul_ªg
 = 
PMC
->
CKGR_MOR
 & (~
CKGR_MOR_CFDEN
);

1466 
PMC
->
CKGR_MOR
 = 
CKGR_MOR_KEY_PASSWD
 | 
ul_ªg
;

1469 #i‡(
SAM4N
 || 
SAM4C
 || 
SAM4CM
 || 
SAM4CP
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

1473 
pmc_íabÀ_s˛k_osc_‰eq_m⁄ô‹
()

1475 
uöt32_t
 
ul_ªg
 = 
PMC
->
CKGR_MOR
;

1477 
PMC
->
CKGR_MOR
 = 
CKGR_MOR_KEY_PASSWD
 | 
CKGR_MOR_XT32KFME
 | 
ul_ªg
;

1483 
pmc_dißbÀ_s˛k_osc_‰eq_m⁄ô‹
()

1485 
uöt32_t
 
ul_ªg
 = 
PMC
->
CKGR_MOR
 & (~
CKGR_MOR_XT32KFME
);

1487 
PMC
->
CKGR_MOR
 = 
CKGR_MOR_KEY_PASSWD
 | 
ul_ªg
;

1496 
pmc_£t_wrôïrŸe˘
(
uöt32_t
 
ul_íabÀ
)

1498 i‡(
ul_íabÀ
) {

1499 
PMC
->
PMC_WPMR
 = 
PMC_WPMR_WPKEY_PASSWD
 | 
PMC_WPMR_WPEN
;

1501 
PMC
->
PMC_WPMR
 = 
PMC_WPMR_WPKEY_PASSWD
;

1510 
uöt32_t
 
pmc_gë_wrôïrŸe˘_°©us
()

1512  
PMC
->
PMC_WPSR
;

1515 #i‡(
SAMG53
 || 
SAMG54
 || 
SAMG55
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

1526 
uöt32_t
 
pmc_íabÀ_¶ìpwÆkög
(uöt32_à
ul_id
)

1528 
uöt32_t
 
ãmp
;

1529 #i‡(
SAMG55
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

1530 i‡((7 <
ul_id
) && (ul_id<= 29)) {

1532 i‡((8 <
ul_id
) && (ul_id<= 29)) {

1534 
ãmp
 = 
pmc_gë_a˘ive_°©us0
();

1535 i‡(
ãmp
 & (1 << 
ul_id
)) {

1538 
PMC
->
PMC_SLPWK_ER0
 = 1 << 
ul_id
;

1539 
ãmp
 = 
pmc_gë_a˘ive_°©us0
();

1540 i‡(
ãmp
 & (1 << 
ul_id
)) {

1541 
pmc_dißbÀ_¶ìpwÆkög
(
ul_id
);

1546 #i‡(
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

1547 i‡((32 <
ul_id
) && (ul_id<= 60)) {

1548 
ul_id
 -= 32;

1549 
ãmp
 = 
pmc_gë_a˘ive_°©us1
();

1550 i‡(
ãmp
 & (1 << 
ul_id
)) {

1553 
PMC
->
PMC_SLPWK_ER1
 = 1 << 
ul_id
;

1554 
ãmp
 = 
pmc_gë_a˘ive_°©us1
();

1555 i‡(
ãmp
 & (1 << 
ul_id
)) {

1556 
pmc_dißbÀ_¶ìpwÆkög
(
ul_id
);

1577 
uöt32_t
 
pmc_dißbÀ_¶ìpwÆkög
(uöt32_à
ul_id
)

1579 #i‡(
SAMG55
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

1580 i‡((7 <
ul_id
) && (ul_id<= 29)) {

1582 i‡((8 <
ul_id
) && (ul_id<= 29)) {

1584 
PMC
->
PMC_SLPWK_DR0
 = 1 << 
ul_id
;

1587 #i‡(
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

1588 i‡((32 <
ul_id
) && (ul_id<= 60)) {

1589 
ul_id
 -= 32;

1590 
PMC
->
PMC_SLPWK_DR1
 = 1 << 
ul_id
;

1604 
uöt32_t
 
pmc_gë_¶ìpwÆkög_°©us0
()

1606  
PMC
->
PMC_SLPWK_SR0
;

1614 
uöt32_t
 
pmc_gë_a˘ive_°©us0
()

1616  
PMC
->
PMC_SLPWK_ASR0
;

1621 #i‡(
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

1627 
uöt32_t
 
pmc_gë_¶ìpwÆkög_°©us1
()

1629  
PMC
->
PMC_SLPWK_SR1
;

1637 
uöt32_t
 
pmc_gë_a˘ive_°©us1
()

1639  
PMC
->
PMC_SLPWK_ASR1
;

1645 #ifde‡
__˝lu•lus


	@/home/vaje/Documents/vaja9/asf/sam/drivers/pmc/pmc.h

47 #i‚de‡
PMC_H_INCLUDED


48 
	#PMC_H_INCLUDED


	)

50 
	~"compûî.h
"

54 #ifde‡
__˝lu•lus


61 
	#PMC_MASK_STATUS0
 (0xFFFFFFFC)

	)

64 
	#PMC_MASK_STATUS1
 (0xFFFFFFFF)

	)

67 #i‡!(
SAME70
)

68 
	#PMC_TIMEOUT
 (2048)

	)

70 
	#PMC_TIMEOUT
 (4096)

	)

74 #i‚de‡
CKGR_MOR_KEY_PASSWD


75 
	#CKGR_MOR_KEY_PASSWD
 
	`CKGR_MOR_KEY
(0x37U)

	)

79 #i‚de‡
SUPC_CR_KEY_PASSWD


80 
	#SUPC_CR_KEY_PASSWD
 
	`SUPC_CR_KEY
(0xA5U)

	)

83 #i‚de‡
SUPC_MR_KEY_PASSWD


84 
	#SUPC_MR_KEY_PASSWD
 
	`SUPC_MR_KEY
(0xA5U)

	)

88 
	#PMC_FAST_STARTUP_Msk
 (0x7FFFFu)

	)

91 #i‚de‡
PMC_WPMR_WPKEY_PASSWD


92 
	#PMC_WPMR_WPKEY_PASSWD
 
	`PMC_WPMR_WPKEY
((
uöt32_t
Ë0x504D43)

	)

96 
	#PMC_OSC_XTAL
 0

	)

99 
	#PMC_OSC_BYPASS
 1

	)

101 
	#PMC_PCK_0
 0

	)

102 
	#PMC_PCK_1
 1

	)

103 
	#PMC_PCK_2
 2

	)

104 #i‡(
SAMG55
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

105 
	#PMC_PCK_3
 3

	)

106 
	#PMC_PCK_4
 4

	)

107 
	#PMC_PCK_5
 5

	)

108 
	#PMC_PCK_6
 6

	)

109 #i‡
SAMG55


110 
	#PMC_PCK_7
 7

	)

114 #i‡(
SAM4S
 || 
SAM4E
 || 
SAM4N
 || 
SAM4C
 || 
SAM4CM
 || 
SAMG
 || 
SAM4CP
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

116 
	#PMC_WAIT_MODE_FLASH_STANDBY
 
PMC_FSMR_FLPM_FLASH_STANDBY


	)

117 
	#PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN
 
PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN


	)

118 
	#PMC_WAIT_MODE_FLASH_IDLE
 
PMC_FSMR_FLPM_FLASH_IDLE


	)

122 
	#pmc_us_to_moscxt°
(
°¨tup_us
, 
¶owck_‰eq
) \

123 ((
°¨tup_us
 * 
¶owck_‰eq
 / 8 / 1000000) < 0x100 ? \

124 (
°¨tup_us
 * 
¶owck_‰eq
 / 8 / 1000000Ë: 0xFF)

	)

134 
pmc_mck_£t_¥esˇÀr
(
uöt32_t
 
ul_¥es
);

135 #i‡
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70


136 
pmc_mck_£t_divisi⁄
(
uöt32_t
 
ul_div
);

138 
pmc_mck_£t_sour˚
(
uöt32_t
 
ul_sour˚
);

139 
uöt32_t
 
pmc_swôch_mck_to_s˛k
(uöt32_à
ul_¥es
);

140 
uöt32_t
 
pmc_swôch_mck_to_maöck
(uöt32_à
ul_¥es
);

141 
uöt32_t
 
pmc_swôch_mck_to_∂œck
(uöt32_à
ul_¥es
);

142 #i‡(
SAM3S
 || 
SAM4S
 || 
SAM4C
 || 
SAM4CM
 || 
SAM4CP
 || 
SAMG55
)

143 
uöt32_t
 
pmc_swôch_mck_to_∂lbck
(uöt32_à
ul_¥es
);

145 #i‡(
SAM3XA
 || 
SAM3U
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

146 
uöt32_t
 
pmc_swôch_mck_to_u∂lck
(uöt32_à
ul_¥es
);

148 #i‡(
SAM4S
 || 
SAM4E
 || 
SAM4N
 || 
SAM4C
 || 
SAM4CM
 || 
SAMG
 || 
SAM4CP
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

149 
pmc_£t_Êash_ö_waô_mode
(
uöt32_t
 
ul_Êash_°©e
);

161 
pmc_swôch_s˛k_to_32kxèl
(
uöt32_t
 
ul_by∑ss
);

162 
uöt32_t
 
pmc_osc_is_ªady_32kxèl
();

172 
pmc_swôch_maöck_to_Á°rc
(
uöt32_t
 
ul_mos¸cf
);

173 
pmc_osc_íabÀ_Á°rc
(
uöt32_t
 
ul_rc
);

174 
pmc_osc_dißbÀ_Á°rc
();

175 
uöt32_t
 
pmc_osc_is_ªady_Á°rc
();

176 
pmc_osc_íabÀ_maö_xèl
(
uöt32_t
 
ul_xèl_°¨tup_time
);

177 
pmc_osc_by∑ss_maö_xèl
();

178 
pmc_osc_dißbÀ_maö_xèl
();

179 
uöt32_t
 
pmc_osc_is_by∑s£d_maö_xèl
();

180 
uöt32_t
 
pmc_osc_is_ªady_maö_xèl
();

181 
pmc_swôch_maöck_to_xèl
(
uöt32_t
 
ul_by∑ss
,

182 
uöt32_t
 
ul_xèl_°¨tup_time
);

183 
pmc_osc_dißbÀ_xèl
(
uöt32_t
 
ul_by∑ss
);

184 
uöt32_t
 
pmc_osc_is_ªady_maöck
();

185 
pmc_maöck_osc_£À˘
(
uöt32_t
 
ul_xèl_rc
);

195 
pmc_íabÀ_∂œck
(
uöt32_t
 
muœ
, uöt32_à
∂œcou¡
, uöt32_à
diva
);

196 
pmc_dißbÀ_∂œck
();

197 
uöt32_t
 
pmc_is_locked_∂œck
();

199 #i‡(
SAM3S
 || 
SAM4S
 || 
SAM4C
 || 
SAM4CM
 || 
SAM4CP
 || 
SAMG55
)

200 
pmc_íabÀ_∂lbck
(
uöt32_t
 
mulb
, uöt32_à
∂lbcou¡
, uöt32_à
divb
);

201 
pmc_dißbÀ_∂lbck
();

202 
uöt32_t
 
pmc_is_locked_∂lbck
();

205 #i‡(
SAM3XA
 || 
SAM3U
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

206 
pmc_íabÀ_u∂l_˛ock
();

207 
pmc_dißbÀ_u∂l_˛ock
();

208 
uöt32_t
 
pmc_is_locked_u∂l
();

219 
uöt32_t
 
pmc_íabÀ_≥rùh_˛k
(uöt32_à
ul_id
);

220 
uöt32_t
 
pmc_dißbÀ_≥rùh_˛k
(uöt32_à
ul_id
);

221 
pmc_íabÀ_Æl_≥rùh_˛k
();

222 
pmc_dißbÀ_Æl_≥rùh_˛k
();

223 
uöt32_t
 
pmc_is_≥rùh_˛k_íabÀd
(uöt32_à
ul_id
);

235 
pmc_pck_£t_¥esˇÀr
(
uöt32_t
 
ul_id
, uöt32_à
ul_¥es
);

236 
pmc_pck_£t_sour˚
(
uöt32_t
 
ul_id
, uöt32_à
ul_sour˚
);

237 
uöt32_t
 
pmc_swôch_pck_to_s˛k
(uöt32_à
ul_id
, uöt32_à
ul_¥es
);

238 
uöt32_t
 
pmc_swôch_pck_to_maöck
(uöt32_à
ul_id
, uöt32_à
ul_¥es
);

239 
uöt32_t
 
pmc_swôch_pck_to_∂œck
(uöt32_à
ul_id
, uöt32_à
ul_¥es
);

240 #i‡(
SAM4C
 || 
SAM4CM
 || 
SAM4CP
)

241 
pmc_íabÀ_˝ck
();

242 
pmc_dißbÀ_˝ck
();

243 
boﬁ
 
pmc_is_˝ck_íabÀd
();

244 
pmc_íabÀ_˝bmck
();

245 
pmc_dißbÀ_˝bmck
();

246 
boﬁ
 
pmc_is_˝bmck_íabÀd
();

247 
pmc_˝ck_£t_¥esˇÀr
(
uöt32_t
 
ul_¥es
);

248 
pmc_˝ck_£t_sour˚
(
uöt32_t
 
ul_sour˚
);

250 #i‡(
SAM3S
 || 
SAM4S
 || 
SAM4C
 || 
SAM4CM
 || 
SAM4CP
 || 
SAMG55
)

251 
uöt32_t
 
pmc_swôch_pck_to_∂lbck
(uöt32_à
ul_id
, uöt32_à
ul_¥es
);

253 #i‡(
SAM3XA
 || 
SAM3U
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

254 
uöt32_t
 
pmc_swôch_pck_to_u∂lck
(uöt32_à
ul_id
, uöt32_à
ul_¥es
);

256 
uöt32_t
 
pmc_swôch_pck_to_mck
(uöt32_à
ul_id
, uöt32_à
ul_¥es
);

257 
pmc_íabÀ_pck
(
uöt32_t
 
ul_id
);

258 
pmc_dißbÀ_pck
(
uöt32_t
 
ul_id
);

259 
pmc_íabÀ_Æl_pck
();

260 
pmc_dißbÀ_Æl_pck
();

261 
uöt32_t
 
pmc_is_pck_íabÀd
(uöt32_à
ul_id
);

271 #i‡(
SAM3S
 || 
SAM3XA
 || 
SAM4S
 || 
SAM4E
 || 
SAMG55
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

272 
pmc_swôch_udpck_to_∂œck
(
uöt32_t
 
ul_usbdiv
);

274 #i‡(
SAM3S
 || 
SAM4S
 || 
SAMG55
)

275 
pmc_swôch_udpck_to_∂lbck
(
uöt32_t
 
ul_usbdiv
);

277 #i‡(
SAM3XA
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

278 
pmc_swôch_udpck_to_u∂lck
(
uöt32_t
 
ul_usbdiv
);

280 #i‡(
SAM3S
 || 
SAM3XA
 || 
SAM4S
 || 
SAM4E
 || 
SAMG55
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

281 
pmc_íabÀ_udpck
();

282 
pmc_dißbÀ_udpck
();

284 #i‡
SAMG55


285 
pmc_swôch_uhpck_to_∂œck
(
uöt32_t
 
ul_usbdiv
);

286 
pmc_swôch_uhpck_to_∂lbck
(
uöt32_t
 
ul_usbdiv
);

287 
pmc_íabÀ_uhpck
();

298 
pmc_íabÀ_öãºu±
(
uöt32_t
 
ul_sour˚s
);

299 
pmc_dißbÀ_öãºu±
(
uöt32_t
 
ul_sour˚s
);

300 
uöt32_t
 
pmc_gë_öãºu±_mask
();

301 
uöt32_t
 
pmc_gë_°©us
();

313 
pmc_£t_Á°_°¨tup_öput
(
uöt32_t
 
ul_öputs
);

314 
pmc_˛r_Á°_°¨tup_öput
(
uöt32_t
 
ul_öputs
);

315 #i‡(
SAM4C
 || 
SAM4CM
 || 
SAM4CP
)

316 
pmc_˝_£t_Á°_°¨tup_öput
(
uöt32_t
 
ul_öputs
);

317 
pmc_˝_˛r_Á°_°¨tup_öput
(
uöt32_t
 
ul_öputs
);

319 
pmc_íabÀ_¶ìpmode
(
uöt8_t
 
uc_ty≥
);

320 
pmc_íabÀ_waômode
();

321 #i‡(!(
SAMG51
 || 
SAMG53
 || 
SAMG54
))

322 
pmc_íabÀ_backupmode
();

332 
pmc_íabÀ_˛ock_Áûuª_dëe˘‹
();

333 
pmc_dißbÀ_˛ock_Áûuª_dëe˘‹
();

337 #i‡(
SAM4N
 || 
SAM4C
 || 
SAM4CM
 || 
SAM4CP
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

344 
pmc_íabÀ_s˛k_osc_‰eq_m⁄ô‹
();

345 
pmc_dißbÀ_s˛k_osc_‰eq_m⁄ô‹
();

356 
pmc_£t_wrôïrŸe˘
(
uöt32_t
 
ul_íabÀ
);

357 
uöt32_t
 
pmc_gë_wrôïrŸe˘_°©us
();

361 #i‡(
SAMG53
 || 
SAMG54
 || 
SAMG55
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

368 
uöt32_t
 
pmc_íabÀ_¶ìpwÆkög
(uöt32_à
ul_id
);

369 
uöt32_t
 
pmc_dißbÀ_¶ìpwÆkög
(uöt32_à
ul_id
);

370 
uöt32_t
 
pmc_gë_¶ìpwÆkög_°©us0
();

371 
uöt32_t
 
pmc_gë_a˘ive_°©us0
();

372 #i‡(
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

373 
uöt32_t
 
pmc_gë_¶ìpwÆkög_°©us1
();

374 
uöt32_t
 
pmc_gë_a˘ive_°©us1
();

381 #ifde‡
__˝lu•lus


	@/home/vaje/Documents/vaja9/asf/sam/drivers/pmc/sleep.c

47 
	~<compûî.h
>

48 
	~"¶ìp.h
"

51 #i‡(
SAM3S
 || 
SAM3N
 || 
SAM3XA
 || 
SAM3U
 || 
SAM4S
 || 
SAM4E
 || 
SAM4N
 || 
SAM4C
 || \

52 
	gSAM4CM
 || 
	gSAMG
 || 
	gSAM4CP
 || 
	gSAMV71
 || 
	gSAMV70
 || 
	gSAMS70
 || 
	gSAME70
)

53 
	~"pmc.h
"

54 
	~"bﬂrd.h
"

57 #i‡!
deföed
(
BOARD_OSC_STARTUP_US
)

58 #w¨nög 
The
 
bﬂrd
 
maö
 
˛ock
 
xèl
 
°©up
 
time
 
has
 
nŸ
 
bìn
 
deföed
. 
Usög
  
£âögs
.

59 
	#BOARD_OSC_STARTUP_US
 (15625UL)

	)

62 #i‡!
deföed
(
EFC0
)

63 
	#EFC0
 
EFC


	)

69 
__Æways_ölöe
 
pmc_ßve_˛ock_£âögs
(

70 
uöt32_t
 *
p_osc_£âög
,

71 
uöt32_t
 *
p_∂l0_£âög
,

72 
uöt32_t
 *
p_∂l1_£âög
,

73 
uöt32_t
 *
p_mck_£âög
,

74 
uöt32_t
 *
p_fmr_£âög
,

75 #i‡
deföed
(
EFC1
)

76 
uöt32_t
 *
p_fmr_£âög1
,

78 c⁄° 
boﬁ
 
dißbÀ_xèl
)

80 
uöt32_t
 
	gm‹
 = 
PMC
->
CKGR_MOR
;

81 
uöt32_t
 
	gmckr
 = 
PMC
->
PMC_MCKR
;

82 
uöt32_t
 
	gfmr
 = 
EFC0
->
EEFC_FMR
;

83 #i‡
deföed
(
EFC1
)

84 
uöt32_t
 
	gfmr1
 = 
EFC1
->
EEFC_FMR
;

87 i‡(
	gp_osc_£âög
) {

88 *
	gp_osc_£âög
 = 
m‹
;

90 i‡(
	gp_∂l0_£âög
) {

91 *
	gp_∂l0_£âög
 = 
PMC
->
CKGR_PLLAR
;

93 i‡(
	gp_∂l1_£âög
) {

94 #i‡(
SAM3S
 || 
SAM4S
 || 
SAM4C
 || 
SAM4CM
 || 
SAM4CP
)

95 *
	gp_∂l1_£âög
 = 
PMC
->
CKGR_PLLBR
;

96 #ñi‡(
SAM3U
 || 
SAM3XA
)

97 *
	gp_∂l1_£âög
 = 
PMC
->
CKGR_UCKR
;

99 *
	gp_∂l1_£âög
 = 0;

102 i‡(
	gp_mck_£âög
) {

103 *
	gp_mck_£âög
 = 
mckr
;

105 i‡(
	gp_fmr_£âög
) {

106 *
	gp_fmr_£âög
 = 
fmr
;

108 #i‡
deföed
(
EFC1
)

109 i‡(
	gp_fmr_£âög1
) {

110 *
	gp_fmr_£âög1
 = 
fmr1
;

115 
	gPMC
->
	gCKGR_MOR
 = 
CKGR_MOR_KEY_PASSWD
 | 
m‹
 | 
CKGR_MOR_MOSCRCEN
;

117 i‡((
	gmckr
 & 
	gPMC_MCKR_CSS_Msk
Ë> 
	gPMC_MCKR_CSS_MAIN_CLK
) {

119 
	gmckr
 = (
mckr
 & (~
PMC_MCKR_CSS_Msk
)Ë| 
PMC_MCKR_CSS_MAIN_CLK
;

120 
	gPMC
->
	gPMC_MCKR
 = 
mckr
;

121 !(
	gPMC
->
	gPMC_SR
 & 
	gPMC_SR_MCKRDY
));

124 i‡(
	gmckr
 & 
	gPMC_MCKR_PRES_Msk
) {

125 
	gmckr
 = (
mckr
 & (~
PMC_MCKR_PRES_Msk
));

126 
	gPMC
->
	gPMC_MCKR
 = 
mckr
;

127 !(
	gPMC
->
	gPMC_SR
 & 
	gPMC_SR_MCKRDY
));

130 
pmc_dißbÀ_∂œck
();

131 #i‡(
SAM3S
 || 
SAM4S
 || 
SAM4C
 || 
SAM4CM
 || 
SAM4CP
)

132 
pmc_dißbÀ_∂lbck
();

133 #ñi‡(
SAM3U
 || 
SAM3XA
)

134 
pmc_dißbÀ_u∂l_˛ock
();

139 !(
	gPMC
->
	gPMC_SR
 & 
	gPMC_SR_MOSCRCS
));

142 #i‡
SAMG


148 
	gEFC0
->
	gEEFC_FMR
 = (
fmr
 & (~
EEFC_FMR_FWS_Msk
)Ë| 
EEFC_FMR_FWS
(1);

150 
	gPMC
->
	gCKGR_MOR
 = (
PMC
->
CKGR_MOR
 & ~
CKGR_MOR_MOSCSEL
Ë| 
CKGR_MOR_MOSCRCF_24_MHz
 |

151 
CKGR_MOR_KEY_PASSWD
;

153 
	gPMC
->
	gCKGR_MOR
 = (
PMC
->
CKGR_MOR
 & ~
CKGR_MOR_MOSCSEL
) |

154 
CKGR_MOR_KEY_PASSWD
;

156 !(
	gPMC
->
	gPMC_SR
 & 
	gPMC_SR_MOSCSELS
));

158 #i‡(!
SAMG
)

160 
	gEFC0
->
	gEEFC_FMR
 = 
fmr
 & (~
EEFC_FMR_FWS_Msk
);

161 #i‡
deföed
(
EFC1
)

162 
	gEFC1
->
	gEEFC_FMR
 = 
fmr1
 & (~
EEFC_FMR_FWS_Msk
);

167 i‡(
	gdißbÀ_xèl
) {

168 
	gPMC
->
	gCKGR_MOR
 = (
PMC
->
CKGR_MOR
 & ~
CKGR_MOR_MOSCXTEN
) |

169 
CKGR_MOR_KEY_PASSWD
;

176 
__Æways_ölöe
 
pmc_ª°‹e_˛ock_£âög
(

177 c⁄° 
uöt32_t
 
osc_£âög
,

178 c⁄° 
uöt32_t
 
∂l0_£âög
,

179 c⁄° 
uöt32_t
 
∂l1_£âög
,

180 c⁄° 
uöt32_t
 
mck_£âög
,

181 c⁄° 
uöt32_t
 
fmr_£âög


182 #i‡
deföed
(
EFC1
)

183 , c⁄° 
uöt32_t
 
fmr_£âög1


187 
uöt32_t
 
	gmckr
;

188 
uöt32_t
 
	g∂l_§
 = 0;

191 i‡(
	gCKGR_MOR_MOSCXTBY
 =(
osc_£âög
 & 
CKGR_MOR_MOSCXTBY
)) {

193 
PMC
->
CKGR_MOR
 = (PMC->CKGR_MOR & ~
CKGR_MOR_MOSCXTEN
) |

194 
CKGR_MOR_KEY_PASSWD
 | 
CKGR_MOR_MOSCXTBY
 |

195 
CKGR_MOR_MOSCSEL
;

196 
	gPMC
->
	gCKGR_MOR
 = (
PMC
->
CKGR_MOR
 & ~
CKGR_MOR_MOSCRCEN
 &

197 ~
CKGR_MOR_MOSCRCF_Msk
)

198 | 
CKGR_MOR_KEY_PASSWD
;

199 } i‡(
	gCKGR_MOR_MOSCXTEN
 =(
osc_£âög
 & 
CKGR_MOR_MOSCXTEN
)) {

201 i‡(!(
PMC
->
CKGR_MOR
 & 
CKGR_MOR_MOSCXTEN
)) {

202 
PMC
->
CKGR_MOR
 = (PMC->CKGR_MOR & ~
CKGR_MOR_MOSCXTBY
) |

203 
CKGR_MOR_KEY_PASSWD
 | 
CKGR_MOR_MOSCXTEN
;

205 !(
	gPMC
->
	gPMC_SR
 & 
	gPMC_SR_MOSCXTS
));

208 i‡(!(
	gPMC
->
	gCKGR_MOR
 & 
	gCKGR_MOR_MOSCSEL
)) {

209 
	gPMC
->
	gCKGR_MOR
 |
CKGR_MOR_KEY_PASSWD
 | 
CKGR_MOR_MOSCSEL
;

210 !(
	gPMC
->
	gPMC_SR
 & 
	gPMC_SR_MOSCSELS
));

213 
	gPMC
->
	gCKGR_MOR
 = (
PMC
->
CKGR_MOR
 & ~
CKGR_MOR_MOSCRCEN
 &

214 ~
CKGR_MOR_MOSCRCF_Msk
)

215 | 
CKGR_MOR_KEY_PASSWD
;

218 i‡(
	g∂l0_£âög
 & 
	gCKGR_PLLAR_MULA_Msk
) {

219 #i‡(
SAM4C
 || 
SAM4CM
 || 
SAMG
 || 
SAM4CP
)

220 
	gPMC
->
	gCKGR_PLLAR
 = 
∂l0_£âög
;

222 
	gPMC
->
	gCKGR_PLLAR
 = 
CKGR_PLLAR_ONE
 | 
∂l0_£âög
;

224 
	g∂l_§
 |
PMC_SR_LOCKA
;

226 #i‡(
SAM3S
 || 
SAM4S
 || 
SAM4C
 || 
SAM4CM
 || 
SAM4CP
)

227 i‡(
	g∂l1_£âög
 & 
	gCKGR_PLLBR_MULB_Msk
) {

228 
	gPMC
->
	gCKGR_PLLBR
 = 
∂l1_£âög
;

229 
	g∂l_§
 |
PMC_SR_LOCKB
;

231 #ñi‡(
SAM3U
 || 
SAM3XA
)

232 i‡(
	g∂l1_£âög
 & 
	gCKGR_UCKR_UPLLEN
) {

233 
	gPMC
->
	gCKGR_UCKR
 = 
∂l1_£âög
;

234 
	g∂l_§
 |
PMC_SR_LOCKU
;

237 
UNUSED
(
∂l1_£âög
);

240 
	gmck_£âög
 & 
	gPMC_MCKR_CSS_Msk
) {

241 
	gPMC_MCKR_CSS_PLLA_CLK
:

242 !(
PMC
->
PMC_SR
 & 
PMC_SR_LOCKA
));

244 #i‡(
SAM3S
 || 
SAM4S
 || 
SAM4C
 || 
SAM4CM
 || 
SAM4CP
)

245 
	gPMC_MCKR_CSS_PLLB_CLK
:

246 !(
PMC
->
PMC_SR
 & 
PMC_SR_LOCKB
));

248 #ñi‡(
SAM3U
 || 
SAM3XA
)

249 
	gPMC_MCKR_CSS_UPLL_CLK
:

250 !(
PMC
->
PMC_SR
 & 
PMC_SR_LOCKU
));

256 
	gmckr
 = 
PMC
->
PMC_MCKR
;

259 
	gPMC
->
	gPMC_MCKR
 = (
mckr
 & ~
PMC_MCKR_PRES_Msk
)

260 | (
mck_£âög
 & 
PMC_MCKR_PRES_Msk
);

261 !(
	gPMC
->
	gPMC_SR
 & 
	gPMC_SR_MCKRDY
));

264 
	gEFC0
->
	gEEFC_FMR
 = 
fmr_£âög
;

265 #i‡
deföed
(
EFC1
)

266 
	gEFC1
->
	gEEFC_FMR
 = 
fmr_£âög1
;

270 
	gPMC
->
	gPMC_MCKR
 = 
mck_£âög
;

271 !(
	gPMC
->
	gPMC_SR
 & 
	gPMC_SR_MCKRDY
));

274 !(
	gPMC
->
	gPMC_SR
 & 
	g∂l_§
));

278 vﬁ©ûê
boﬁ
 
	gb_is_¶ìp_˛ock_u£d
 = 
Ál£
;

280 
pmc_ˇŒback_wakeup_˛ocks_ª°‹ed_t
 
	gˇŒback_˛ocks_ª°‹ed
 = 
NULL
;

282 
	$pmc_¶ìp
(
¶ìp_mode
)

284 
¶ìp_mode
) {

285 
SAM_PM_SMODE_SLEEP_WFI
:

286 
SAM_PM_SMODE_SLEEP_WFE
:

287 #i‡(
SAM4S
 || 
SAM4E
 || 
SAM4N
 || 
SAM4C
 || 
SAM4CM
 || 
SAM4CP
 || 
SAMG
 || 
SAMV71
 || 
SAMV70
 || 
SAMS70
 || 
SAME70
)

288 
SCB
->
SCR
 &(
uöt32_t
)~
SCR_SLEEPDEEP
;

289 
	`˝u_úq_íabÀ
();

290 
	`__WFI
();

293 
PMC
->
PMC_FSMR
 &(
uöt32_t
)~
PMC_FSMR_LPM
;

294 
SCB
->
SCR
 &(
uöt32_t
)~
SCR_SLEEPDEEP
;

295 
	`˝u_úq_íabÀ
();

296 i‡(
¶ìp_mode
 =
SAM_PM_SMODE_SLEEP_WFI
)

297 
	`__WFI
();

299 
	`__WFE
();

303 
SAM_PM_SMODE_WAIT_FAST
:

304 
SAM_PM_SMODE_WAIT
: {

305 
uöt32_t
 
m‹
, 
∂Ã0
, 
∂Ã1
, 
mckr
;

306 
uöt32_t
 
fmr
;

307 #i‡
	`deföed
(
EFC1
)

308 
uöt32_t
 
fmr1
;

310 #i‡(
SAM4S
 || 
SAM4E
 || 
SAM4N
 || 
SAM4C
 || 
SAM4CM
 || 
SAM4CP
 || 
SAMG
 || 
SAMV71
 || 
SAMV70
 || 
SAMS70
 || 
SAME70
)

311 (
¶ìp_mode
 =
SAM_PM_SMODE_WAIT_FAST
) ?

312 
	`pmc_£t_Êash_ö_waô_mode
(
PMC_FSMR_FLPM_FLASH_STANDBY
) :

313 
	`pmc_£t_Êash_ö_waô_mode
(
PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN
);

315 
	`˝u_úq_dißbÀ
();

316 
b_is_¶ìp_˛ock_u£d
 = 
åue
;

318 #i‡(
SAM4C
 || 
SAM4CM
 || 
SAM4CP
)

320 
uöt32_t
 
˝˛k_backup
 = 
PMC
->
PMC_SCSR
 &

321 (
PMC_SCSR_CPCK
 | 
PMC_SCSR_CPBMCK
);

322 
PMC
->
PMC_SCDR
 = 
˝˛k_backup
 | 
PMC_SCDR_CPKEY_PASSWD
;

324 
	`pmc_ßve_˛ock_£âögs
(&
m‹
, &
∂Ã0
, &
∂Ã1
, &
mckr
, &
fmr
,

325 #i‡
	`deföed
(
EFC1
)

326 &
fmr1
,

328 (
¶ìp_mode
 =
SAM_PM_SMODE_WAIT
));

331 
	`˝u_úq_íabÀ
();

333 
	`pmc_íabÀ_waômode
();

335 
	`˝u_úq_dißbÀ
();

336 
	`pmc_ª°‹e_˛ock_£âög
(
m‹
, 
∂Ã0
, 
∂Ã1
, 
mckr
, 
fmr


337 #i‡
	`deföed
(
EFC1
)

338 , 
fmr1


342 #i‡(
SAM4C
 || 
SAM4CM
 || 
SAM4CP
)

344 
PMC
->
PMC_SCER
 = 
˝˛k_backup
 | 
PMC_SCER_CPKEY_PASSWD
;

346 
b_is_¶ìp_˛ock_u£d
 = 
Ál£
;

347 i‡(
ˇŒback_˛ocks_ª°‹ed
) {

348 
	`ˇŒback_˛ocks_ª°‹ed
();

349 
ˇŒback_˛ocks_ª°‹ed
 = 
NULL
;

351 
	`˝u_úq_íabÀ
();

355 #i‡(!(
SAMG51
 || 
SAMG53
 || 
SAMG54
))

356 
SAM_PM_SMODE_BACKUP
:

357 
SCB
->
SCR
 |
SCR_SLEEPDEEP
;

358 #i‡(
SAM4S
 || 
SAM4E
 || 
SAM4N
 || 
SAM4C
 || 
SAM4CM
 || 
SAM4CP
 || 
SAMG55
 || 
SAMV71
 || 
SAMV70
 || 
SAMS70
 || 
SAME70
)

359 
SUPC
->
SUPC_CR
 = 
SUPC_CR_KEY_PASSWD
 | 
SUPC_CR_VROFF_STOP_VREG
;

360 
	`˝u_úq_íabÀ
();

361 
	`__WFI
() ;

363 
	`˝u_úq_íabÀ
();

364 
	`__WFE
() ;

369 
	}
}

371 
boﬁ
 
	$pmc_is_wakeup_˛ocks_ª°‹ed
()

373  !
b_is_¶ìp_˛ock_u£d
;

374 
	}
}

376 
	$pmc_waô_wakeup_˛ocks_ª°‹e
(

377 
pmc_ˇŒback_wakeup_˛ocks_ª°‹ed_t
 
ˇŒback
)

379 i‡(
b_is_¶ìp_˛ock_u£d
) {

380 
	`˝u_úq_dißbÀ
();

381 
ˇŒback_˛ocks_ª°‹ed
 = 
ˇŒback
;

382 } i‡(
ˇŒback
) {

383 
	`ˇŒback
();

385 
	}
}

	@/home/vaje/Documents/vaja9/asf/sam/drivers/pmc/sleep.h

47 #i‚de‡
SLEEP_H


48 
	#SLEEP_H


	)

50 #ifde‡
__˝lu•lus


54 
	~<compûî.h
>

71 #i‡
deföed
(
__DOXYGEN__
)

78 #i‡(
SAM3S
 || 
SAM3N
 || 
SAM3XA
 || 
SAM3U
 || 
SAM4S
 || 
SAM4E
 || 
SAM4N
 || 
SAM4C
 || \

79 
SAM4CM
 || 
SAM4CP
 || 
SAMG
 || 
SAMV71
 || 
SAME70
 || 
SAMS70
)

80 
	#SAM_PM_SMODE_ACTIVE
 0

	)

81 
	#SAM_PM_SMODE_SLEEP_WFE
 1

	)

82 
	#SAM_PM_SMODE_SLEEP_WFI
 2

	)

83 
	#SAM_PM_SMODE_WAIT_FAST
 3

	)

84 
	#SAM_PM_SMODE_WAIT
 4

	)

85 #i‡(!(
SAMG51
 || 
SAMG53
 || 
SAMG54
))

86 
	#SAM_PM_SMODE_BACKUP
 5

	)

90 
	#SCR_SLEEPDEEP
 (0x1 << 2)

	)

97 (*
pmc_ˇŒback_wakeup_˛ocks_ª°‹ed_t
) ();

103 
pmc_¶ìp
(
¶ìp_mode
);

111 
boﬁ
 
pmc_is_wakeup_˛ocks_ª°‹ed
();

116 
pmc_waô_wakeup_˛ocks_ª°‹e
(

117 
pmc_ˇŒback_wakeup_˛ocks_ª°‹ed_t
 
ˇŒback
);

123 #ifde‡
__˝lu•lus


	@/home/vaje/Documents/vaja9/asf/sam/drivers/tc/tc.c

47 
	~<as£π.h
>

48 
	~"tc.h
"

52 #ifde‡
__˝lu•lus


58 #i‚de‡
TC_WPMR_WPKEY_PASSWD


59 
	#TC_WPMR_WPKEY_PASSWD
 
	`TC_WPMR_WPKEY
((
uöt32_t
)0x54494D)

	)

80 
tc_öô
(

81 
Tc
 *
p_tc
,

82 
uöt32_t
 
ul_ch™√l
,

83 
uöt32_t
 
ul_mode
)

85 
TcCh™√l
 *
tc_ch™√l
;

88 
As£π
(
p_tc
);

89 
As£π
(
ul_ch™√l
 <

90 ((
p_tc
->
TC_CHANNEL
) / (p_tc->TC_CHANNEL[0])));

91 
tc_ch™√l
 = 
p_tc
->
TC_CHANNEL
 + 
ul_ch™√l
;

94 
tc_ch™√l
->
TC_CCR
 = 
TC_CCR_CLKDIS
;

97 
tc_ch™√l
->
TC_IDR
 = 0xFFFFFFFF;

100 
tc_ch™√l
->
TC_SR
;

103 
tc_ch™√l
->
TC_CMR
 = 
ul_mode
;

113 
tc_sync_åiggî
(

114 
Tc
 *
p_tc
)

117 
As£π
(
p_tc
);

119 
p_tc
->
TC_BCR
 = 
TC_BCR_SYNC
;

133 
tc_£t_block_mode
(

134 
Tc
 *
p_tc
,

135 
uöt32_t
 
ul_blockmode
)

138 
As£π
(
p_tc
);

140 
p_tc
->
TC_BMR
 = 
ul_blockmode
;

143 #i‡(!
SAM3U
Ë|| 
deföed
(
__DOXYGEN__
)

157 
uöt32_t
 
tc_öô_2bô_gøy
(

158 
Tc
 *
p_tc
,

159 
uöt32_t
 
ul_ch™√l
,

160 
uöt32_t
 
ul_°ï≥rmode
)

163 
As£π
(
p_tc
);

164 
As£π
(
ul_ch™√l
 <

165 ((
p_tc
->
TC_CHANNEL
) / (p_tc->TC_CHANNEL[0])));

167 
p_tc
->
TC_CHANNEL
[
ul_ch™√l
].
TC_SMMR
 = 
ul_°ï≥rmode
;

179 
tc_°¨t
(

180 
Tc
 *
p_tc
,

181 
uöt32_t
 
ul_ch™√l
)

184 
As£π
(
p_tc
);

185 
As£π
(
ul_ch™√l
 <

186 ((
p_tc
->
TC_CHANNEL
) / (p_tc->TC_CHANNEL[0])));

188 
p_tc
->
TC_CHANNEL
[
ul_ch™√l
].
TC_CCR
 = 
TC_CCR_CLKEN
 | 
TC_CCR_SWTRG
;

197 
tc_°›
(

198 
Tc
 *
p_tc
,

199 
uöt32_t
 
ul_ch™√l
)

202 
As£π
(
p_tc
);

203 
As£π
(
ul_ch™√l
 <

204 ((
p_tc
->
TC_CHANNEL
) / (p_tc->TC_CHANNEL[0])));

206 
p_tc
->
TC_CHANNEL
[
ul_ch™√l
].
TC_CCR
 = 
TC_CCR_CLKDIS
;

217 
uöt32_t
 
tc_ªad_cv
(

218 
Tc
 *
p_tc
,

219 
uöt32_t
 
ul_ch™√l
)

222 
As£π
(
p_tc
);

223 
As£π
(
ul_ch™√l
 <

224 ((
p_tc
->
TC_CHANNEL
) / (p_tc->TC_CHANNEL[0])));

226  
p_tc
->
TC_CHANNEL
[
ul_ch™√l
].
TC_CV
;

237 
uöt32_t
 
tc_ªad_ø
(

238 
Tc
 *
p_tc
,

239 
uöt32_t
 
ul_ch™√l
)

242 
As£π
(
p_tc
);

243 
As£π
(
ul_ch™√l
 <

244 ((
p_tc
->
TC_CHANNEL
) / (p_tc->TC_CHANNEL[0])));

246  
p_tc
->
TC_CHANNEL
[
ul_ch™√l
].
TC_RA
;

257 
uöt32_t
 
tc_ªad_rb
(

258 
Tc
 *
p_tc
,

259 
uöt32_t
 
ul_ch™√l
)

262 
As£π
(
p_tc
);

263 
As£π
(
ul_ch™√l
 <

264 ((
p_tc
->
TC_CHANNEL
) / (p_tc->TC_CHANNEL[0])));

266  
p_tc
->
TC_CHANNEL
[
ul_ch™√l
].
TC_RB
;

277 
uöt32_t
 
tc_ªad_rc
(

278 
Tc
 *
p_tc
,

279 
uöt32_t
 
ul_ch™√l
)

282 
As£π
(
p_tc
);

283 
As£π
(
ul_ch™√l
 <

284 ((
p_tc
->
TC_CHANNEL
) / (p_tc->TC_CHANNEL[0])));

286  
p_tc
->
TC_CHANNEL
[
ul_ch™√l
].
TC_RC
;

296 
tc_wrôe_ø
(

297 
Tc
 *
p_tc
,

298 
uöt32_t
 
ul_ch™√l
,

299 
uöt32_t
 
ul_vÆue
)

302 
As£π
(
p_tc
);

303 
As£π
(
ul_ch™√l
 <

304 ((
p_tc
->
TC_CHANNEL
) / (p_tc->TC_CHANNEL[0])));

306 
p_tc
->
TC_CHANNEL
[
ul_ch™√l
].
TC_RA
 = 
ul_vÆue
;

316 
tc_wrôe_rb
(

317 
Tc
 *
p_tc
,

318 
uöt32_t
 
ul_ch™√l
,

319 
uöt32_t
 
ul_vÆue
)

322 
As£π
(
p_tc
);

323 
As£π
(
ul_ch™√l
 <

324 ((
p_tc
->
TC_CHANNEL
) / (p_tc->TC_CHANNEL[0])));

326 
p_tc
->
TC_CHANNEL
[
ul_ch™√l
].
TC_RB
 = 
ul_vÆue
;

336 
tc_wrôe_rc
(

337 
Tc
 *
p_tc
,

338 
uöt32_t
 
ul_ch™√l
,

339 
uöt32_t
 
ul_vÆue
)

342 
As£π
(
p_tc
);

343 
As£π
(
ul_ch™√l
 <

344 ((
p_tc
->
TC_CHANNEL
) / (p_tc->TC_CHANNEL[0])));

346 
p_tc
->
TC_CHANNEL
[
ul_ch™√l
].
TC_RC
 = 
ul_vÆue
;

372 
tc_íabÀ_öãºu±
(

373 
Tc
 *
p_tc
,

374 
uöt32_t
 
ul_ch™√l
,

375 
uöt32_t
 
ul_sour˚s
)

377 
TcCh™√l
 *
tc_ch™√l
;

380 
As£π
(
p_tc
);

381 
As£π
(
ul_ch™√l
 <

382 ((
p_tc
->
TC_CHANNEL
) / (p_tc->TC_CHANNEL[0])));

383 
tc_ch™√l
 = 
p_tc
->
TC_CHANNEL
 + 
ul_ch™√l
;

384 
tc_ch™√l
->
TC_IER
 = 
ul_sour˚s
;

410 
tc_dißbÀ_öãºu±
(

411 
Tc
 *
p_tc
,

412 
uöt32_t
 
ul_ch™√l
,

413 
uöt32_t
 
ul_sour˚s
)

415 
TcCh™√l
 *
tc_ch™√l
;

418 
As£π
(
p_tc
);

419 
As£π
(
ul_ch™√l
 <

420 ((
p_tc
->
TC_CHANNEL
) / (p_tc->TC_CHANNEL[0])));

421 
tc_ch™√l
 = 
p_tc
->
TC_CHANNEL
 + 
ul_ch™√l
;

422 
tc_ch™√l
->
TC_IDR
 = 
ul_sour˚s
;

433 
uöt32_t
 
tc_gë_öãºu±_mask
(

434 
Tc
 *
p_tc
,

435 
uöt32_t
 
ul_ch™√l
)

437 
TcCh™√l
 *
tc_ch™√l
;

440 
As£π
(
p_tc
);

441 
As£π
(
ul_ch™√l
 <

442 ((
p_tc
->
TC_CHANNEL
) / (p_tc->TC_CHANNEL[0])));

443 
tc_ch™√l
 = 
p_tc
->
TC_CHANNEL
 + 
ul_ch™√l
;

444  
tc_ch™√l
->
TC_IMR
;

455 
uöt32_t
 
tc_gë_°©us
(

456 
Tc
 *
p_tc
,

457 
uöt32_t
 
ul_ch™√l
)

459 
TcCh™√l
 *
tc_ch™√l
;

462 
As£π
(
p_tc
);

463 
As£π
(
ul_ch™√l
 <

464 ((
p_tc
->
TC_CHANNEL
) / (p_tc->TC_CHANNEL[0])));

466 
tc_ch™√l
 = 
p_tc
->
TC_CHANNEL
 + 
ul_ch™√l
;

467  
tc_ch™√l
->
TC_SR
;

471 
	#TC_DIV_FACTOR
 65536

	)

473 #i‡(!
SAM4L
Ë&& !
deföed
(
__DOXYGEN__
)

475 #i‚de‡
FREQ_SLOW_CLOCK_EXT


476 
	#FREQ_SLOW_CLOCK_EXT
 32768

	)

497 
uöt32_t
 
tc_föd_mck_divis‹
(

498 
uöt32_t
 
ul_‰eq
,

499 
uöt32_t
 
ul_mck
,

500 
uöt32_t
 *
p_uldiv
,

501 
uöt32_t
 *
p_u…c˛ks
,

502 
uöt32_t
 
ul_bﬂrdmck
)

504 c⁄° 
uöt32_t
 
divis‹s
[5] = { 2, 8, 32, 128,

505 
ul_bﬂrdmck
 / 
FREQ_SLOW_CLOCK_EXT
 };

506 
uöt32_t
 
ul_ödex
;

507 
uöt32_t
 
ul_high
, 
ul_low
;

510 
ul_ödex
 = 0;

511 
ul_ödex
 < ((
divis‹s
) / (divisors[0]));

512 
ul_ödex
++) {

513 
ul_high
 = 
ul_mck
 / 
divis‹s
[
ul_ödex
];

514 
ul_low
 = 
ul_high
 / 
TC_DIV_FACTOR
;

515 i‡(
ul_‰eq
 > 
ul_high
) {

517 } i‡(
ul_‰eq
 >
ul_low
) {

521 i‡(
ul_ödex
 >((
divis‹s
) / (divisors[0]))) {

526 i‡(
p_uldiv
) {

527 *
p_uldiv
 = 
divis‹s
[
ul_ödex
];

530 i‡(
p_u…c˛ks
) {

531 *
p_u…c˛ks
 = 
ul_ödex
;

539 #i‡(
SAM4L
Ë|| 
deföed
(
__DOXYGEN__
)

563 
uöt32_t
 
tc_föd_mck_divis‹
(

564 
uöt32_t
 
ul_‰eq
,

565 
uöt32_t
 
ul_mck
,

566 
uöt32_t
 *
p_uldiv
,

567 
uöt32_t
 *
p_u…c˛ks
,

568 
uöt32_t
 
ul_bﬂrdmck
)

570 c⁄° 
uöt32_t
 
divis‹s
[5] = { 0, 2, 8, 32, 128};

571 
uöt32_t
 
ul_ödex
;

572 
uöt32_t
 
ul_high
, 
ul_low
;

574 
UNUSED
(
ul_bﬂrdmck
);

577 
ul_ödex
 = 1;

578 
ul_ödex
 < ((
divis‹s
) / (divisors[0]));

579 
ul_ödex
++) {

580 
ul_high
 = 
ul_mck
 / 
divis‹s
[
ul_ödex
];

581 
ul_low
 = 
ul_high
 / 
TC_DIV_FACTOR
;

582 i‡(
ul_‰eq
 > 
ul_high
) {

584 } i‡(
ul_‰eq
 >
ul_low
) {

588 i‡(
ul_ödex
 >((
divis‹s
) / (divisors[0]))) {

593 i‡(
p_uldiv
) {

594 *
p_uldiv
 = 
divis‹s
[
ul_ödex
];

597 i‡(
p_u…c˛ks
) {

598 *
p_u…c˛ks
 = 
ul_ödex
;

606 #i‡(!
SAM4L
 && !
SAMG
Ë|| 
deföed
(
__DOXYGEN__
)

627 
tc_íabÀ_qdec_öãºu±
(

628 
Tc
 *
p_tc
,

629 
uöt32_t
 
ul_sour˚s
)

632 
As£π
(
p_tc
);

634 
p_tc
->
TC_QIER
 = 
ul_sour˚s
;

656 
tc_dißbÀ_qdec_öãºu±
(

657 
Tc
 *
p_tc
,

658 
uöt32_t
 
ul_sour˚s
)

661 
As£π
(
p_tc
);

663 
p_tc
->
TC_QIDR
 = 
ul_sour˚s
;

675 
uöt32_t
 
tc_gë_qdec_öãºu±_mask
(

676 
Tc
 *
p_tc
)

679 
As£π
(
p_tc
);

681  
p_tc
->
TC_QIMR
;

693 
uöt32_t
 
tc_gë_qdec_öãºu±_°©us
(

694 
Tc
 *
p_tc
)

697 
As£π
(
p_tc
);

699  
p_tc
->
TC_QISR
;

704 #i‡(!
SAM3U
Ë|| 
deföed
(
__DOXYGEN__
)

714 
tc_£t_wrôïrŸe˘
(

715 
Tc
 *
p_tc
,

716 
uöt32_t
 
ul_íabÀ
)

719 
As£π
(
p_tc
);

721 i‡(
ul_íabÀ
) {

722 
p_tc
->
TC_WPMR
 = 
TC_WPMR_WPKEY_PASSWD
 | 
TC_WPMR_WPEN
;

724 
p_tc
->
TC_WPMR
 = 
TC_WPMR_WPKEY_PASSWD
;

730 #i‡
SAM4L
 || 
deföed
(
__DOXYGEN__
)

741 
uöt32_t
 
tc_gë_„©uª
(

742 
Tc
 *
p_tc
)

745 
As£π
(
p_tc
);

747  
p_tc
->
TC_FEATURES
;

759 
uöt32_t
 
tc_gë_vîsi⁄
(

760 
Tc
 *
p_tc
)

763 
As£π
(
p_tc
);

765  
p_tc
->
TC_VERSION
;

772 #ifde‡
__˝lu•lus


	@/home/vaje/Documents/vaja9/asf/sam/drivers/tc/tc.h

47 #i‚de‡
TC_H_INCLUDED


48 
	#TC_H_INCLUDED


	)

136 
	~<compûî.h
>

140 #ifde‡
__˝lu•lus


146 
tc_öô
(
Tc
 *
p_tc
, 
uöt32_t
 
ul_Ch™√l
, uöt32_à
ul_Mode
);

147 
tc_sync_åiggî
(
Tc
 *
p_tc
);

148 
tc_£t_block_mode
(
Tc
 *
p_tc
, 
uöt32_t
 
ul_blockmode
);

150 #i‡(!
SAM3U
Ë|| 
deföed
(
__DOXYGEN__
)

151 
uöt32_t
 
tc_öô_2bô_gøy
(
Tc
 *
p_tc
, uöt32_à
ul_ch™√l
,

152 
uöt32_t
 
ul_°ï≥rmode
);

155 
tc_°¨t
(
Tc
 *
p_tc
, 
uöt32_t
 
ul_ch™√l
);

156 
tc_°›
(
Tc
 *
p_tc
, 
uöt32_t
 
ul_ch™√l
);

158 
uöt32_t
 
tc_ªad_cv
(
Tc
 *
p_tc
, uöt32_à
ul_ch™√l
);

159 
uöt32_t
 
tc_ªad_ø
(
Tc
 *
p_tc
, uöt32_à
ul_ch™√l
);

160 
uöt32_t
 
tc_ªad_rb
(
Tc
 *
p_tc
, uöt32_à
ul_ch™√l
);

161 
uöt32_t
 
tc_ªad_rc
(
Tc
 *
p_tc
, uöt32_à
ul_ch™√l
);

163 
tc_wrôe_ø
(
Tc
 *
p_tc
, 
uöt32_t
 
ul_ch™√l
,

164 
uöt32_t
 
ul_vÆue
);

165 
tc_wrôe_rb
(
Tc
 *
p_tc
, 
uöt32_t
 
ul_ch™√l
,

166 
uöt32_t
 
ul_vÆue
);

167 
tc_wrôe_rc
(
Tc
 *
p_tc
, 
uöt32_t
 
ul_ch™√l
,

168 
uöt32_t
 
ul_vÆue
);

170 
uöt32_t
 
tc_föd_mck_divis‹
(uöt32_à
ul_‰eq
, uöt32_à
ul_mck
,

171 
uöt32_t
 *
p_uldiv
, uöt32_à*
ul_tc˛ks
, uöt32_à
ul_bﬂrdmck
);

172 
tc_íabÀ_öãºu±
(
Tc
 *
p_tc
, 
uöt32_t
 
ul_ch™√l
,

173 
uöt32_t
 
ul_sour˚s
);

174 
tc_dißbÀ_öãºu±
(
Tc
 *
p_tc
, 
uöt32_t
 
ul_ch™√l
,

175 
uöt32_t
 
ul_sour˚s
);

176 
uöt32_t
 
tc_gë_öãºu±_mask
(
Tc
 *
p_tc
, uöt32_à
ul_ch™√l
);

177 
uöt32_t
 
tc_gë_°©us
(
Tc
 *
p_tc
, uöt32_à
ul_ch™√l
);

178 #i‡(!
SAM4L
 && !
SAMG
Ë|| 
deföed
(
__DOXYGEN__
)

179 
tc_íabÀ_qdec_öãºu±
(
Tc
 *
p_tc
, 
uöt32_t
 
ul_sour˚s
);

180 
tc_dißbÀ_qdec_öãºu±
(
Tc
 *
p_tc
, 
uöt32_t
 
ul_sour˚s
);

181 
uöt32_t
 
tc_gë_qdec_öãºu±_mask
(
Tc
 *
p_tc
);

182 
uöt32_t
 
tc_gë_qdec_öãºu±_°©us
(
Tc
 *
p_tc
);

185 #i‡(!
SAM3U
)

186 
tc_£t_wrôïrŸe˘
(
Tc
 *
p_tc
, 
uöt32_t
 
ul_íabÀ
);

189 #i‡
SAM4L
 || 
deföed
(
__DOXYGEN__
)

190 
uöt32_t
 
tc_gë_„©uª
(
Tc
 *
p_tc
);

191 
uöt32_t
 
tc_gë_vîsi⁄
(
Tc
 *
p_tc
);

196 #ifde‡
__˝lu•lus


	@/home/vaje/Documents/vaja9/asf/sam/drivers/uart/uart.c

47 
	~"u¨t.h
"

51 #ifde‡
__˝lu•lus


91 
uöt32_t
 
u¨t_öô
(
U¨t
 *
p_u¨t
, c⁄° 
ßm_u¨t_›t_t
 *
p_u¨t_›t
)

93 
uöt32_t
 
cd
 = 0;

96 
p_u¨t
->
UART_CR
 = 
UART_CR_RSTRX
 | 
UART_CR_RSTTX


97 | 
UART_CR_RXDIS
 | 
UART_CR_TXDIS
;

101 
cd
 = (
p_u¨t_›t
->
ul_mck
 /Ö_u¨t_›t->
ul_baudøã
Ë/ 
UART_MCK_DIV
;

102 i‡(
cd
 < 
UART_MCK_DIV_MIN_FACTOR
 || cd > 
UART_MCK_DIV_MAX_FACTOR
)

105 
p_u¨t
->
UART_BRGR
 = 
cd
;

107 
p_u¨t
->
UART_MR
 = 
p_u¨t_›t
->
ul_mode
;

109 #i‡(!
SAMV71
 && !
SAMV70
 && !
SAME70
 && !
SAMS70
)

111 
p_u¨t
->
UART_PTCR
 = 
UART_PTCR_RXTDIS
 | 
UART_PTCR_TXTDIS
;

115 
p_u¨t
->
UART_CR
 = 
UART_CR_RXEN
 | 
UART_CR_TXEN
;

125 
u¨t_íabÀ_tx
(
U¨t
 *
p_u¨t
)

128 
p_u¨t
->
UART_CR
 = 
UART_CR_TXEN
;

136 
u¨t_dißbÀ_tx
(
U¨t
 *
p_u¨t
)

139 
p_u¨t
->
UART_CR
 = 
UART_CR_TXDIS
;

147 
u¨t_ª£t_tx
(
U¨t
 *
p_u¨t
)

150 
p_u¨t
->
UART_CR
 = 
UART_CR_RSTTX
 | 
UART_CR_TXDIS
;

158 
u¨t_íabÀ_rx
(
U¨t
 *
p_u¨t
)

161 
p_u¨t
->
UART_CR
 = 
UART_CR_RXEN
;

169 
u¨t_dißbÀ_rx
(
U¨t
 *
p_u¨t
)

172 
p_u¨t
->
UART_CR
 = 
UART_CR_RXDIS
;

180 
u¨t_ª£t_rx
(
U¨t
 *
p_u¨t
)

183 
p_u¨t
->
UART_CR
 = 
UART_CR_RSTRX
 | 
UART_CR_RXDIS
;

191 
u¨t_íabÀ
(
U¨t
 *
p_u¨t
)

194 
p_u¨t
->
UART_CR
 = 
UART_CR_RXEN
 | 
UART_CR_TXEN
;

202 
u¨t_dißbÀ
(
U¨t
 *
p_u¨t
)

205 
p_u¨t
->
UART_CR
 = 
UART_CR_RXDIS
 | 
UART_CR_TXDIS
;

213 
u¨t_ª£t
(
U¨t
 *
p_u¨t
)

216 
p_u¨t
->
UART_CR
 = 
UART_CR_RSTRX
 | 
UART_CR_RSTTX


217 | 
UART_CR_RXDIS
 | 
UART_CR_TXDIS
;

225 
u¨t_íabÀ_öãºu±
(
U¨t
 *
p_u¨t
, 
uöt32_t
 
ul_sour˚s
)

227 
p_u¨t
->
UART_IER
 = 
ul_sour˚s
;

235 
u¨t_dißbÀ_öãºu±
(
U¨t
 *
p_u¨t
, 
uöt32_t
 
ul_sour˚s
)

237 
p_u¨t
->
UART_IDR
 = 
ul_sour˚s
;

246 
uöt32_t
 
u¨t_gë_öãºu±_mask
(
U¨t
 *
p_u¨t
)

248  
p_u¨t
->
UART_IMR
;

258 
uöt32_t
 
u¨t_gë_°©us
(
U¨t
 *
p_u¨t
)

260  
p_u¨t
->
UART_SR
;

268 
u¨t_ª£t_°©us
(
U¨t
 *
p_u¨t
)

270 
p_u¨t
->
UART_CR
 = 
UART_CR_RSTSTA
;

283 
uöt32_t
 
u¨t_is_tx_ªady
(
U¨t
 *
p_u¨t
)

285  (
p_u¨t
->
UART_SR
 & 
UART_SR_TXRDY
) > 0;

298 
uöt32_t
 
u¨t_is_tx_em±y
(
U¨t
 *
p_u¨t
)

300  (
p_u¨t
->
UART_SR
 & 
UART_SR_TXEMPTY
) > 0;

312 
uöt32_t
 
u¨t_is_rx_ªady
(
U¨t
 *
p_u¨t
)

314  (
p_u¨t
->
UART_SR
 & 
UART_SR_RXRDY
) > 0;

325 
uöt32_t
 
u¨t_is_tx_buf_em±y
(
U¨t
 *
p_u¨t
)

327  (
p_u¨t
->
UART_SR
 & 
UART_SR_TXEMPTY
) > 0;

337 
u¨t_£t_˛ock_divis‹
(
U¨t
 *
p_u¨t
, 
uöt16_t
 
us_divis‹
)

339 
p_u¨t
->
UART_BRGR
 = 
us_divis‹
;

352 
uöt32_t
 
u¨t_wrôe
(
U¨t
 *
p_u¨t
, c⁄° 
uöt8_t
 
uc_d©a
)

355 i‡(!(
p_u¨t
->
UART_SR
 & 
UART_SR_TXRDY
))

359 
p_u¨t
->
UART_THR
 = 
uc_d©a
;

372 
uöt32_t
 
u¨t_ªad
(
U¨t
 *
p_u¨t
, 
uöt8_t
 *
puc_d©a
)

375 i‡((
p_u¨t
->
UART_SR
 & 
UART_SR_RXRDY
) == 0)

379 *
puc_d©a
 = (
uöt8_t
Ë
p_u¨t
->
UART_RHR
;

383 #i‡(!
SAMV71
 && !
SAMV70
 && !
SAME70
 && !
SAMS70
)

392 
uöt32_t
 
u¨t_is_rx_buf_íd
(
U¨t
 *
p_u¨t
)

394  (
p_u¨t
->
UART_SR
 & 
UART_SR_ENDRX
) > 0;

405 
uöt32_t
 
u¨t_is_tx_buf_íd
(
U¨t
 *
p_u¨t
)

407  (
p_u¨t
->
UART_SR
 & 
UART_SR_ENDTX
) > 0;

418 
uöt32_t
 
u¨t_is_rx_buf_fuŒ
(
U¨t
 *
p_u¨t
)

420  (
p_u¨t
->
UART_SR
 & 
UART_SR_RXBUFF
) > 0;

430 
Pdc
 *
u¨t_gë_pdc_ba£
(
U¨t
 *
p_u¨t
)

432 
Pdc
 *
p_pdc_ba£
;

434 #i‡(
SAM3S
 || 
SAM3N
 || 
SAM4S
 || 
SAM4E
 || 
SAM4N
 || 
SAM4C
 || 
SAMG
 || 
SAM4CP
 || 
SAM4CM
)

435 i‡(
p_u¨t
 =
UART0
)

436 
p_pdc_ba£
 = 
PDC_UART0
;

437 #ñi‡(
SAM3XA
 || 
SAM3U
)

438 i‡(
p_u¨t
 =
UART
)

439 
p_pdc_ba£
 = 
PDC_UART
;

444 #i‡(
SAM3S
 || 
SAM4S
 || 
SAM4E
 || 
SAM4N
 || 
SAM4C
 || 
SAMG
 || 
SAM4CP
 || 
SAM4CM
)

445 i‡(
p_u¨t
 =
UART1
)

446 
p_pdc_ba£
 = 
PDC_UART1
;

449 #i‡(
SAM4N
)

450 i‡(
p_u¨t
 =
UART2
)

451 
p_pdc_ba£
 = 
PDC_UART2
;

454  
p_pdc_ba£
;

458 #i‡(
SAM4C
 || 
SAM4CP
 || 
SAM4CM
)

464 
u¨t_íabÀ_›tiˇl_öãrÁ˚
(
U¨t
 *
p_u¨t
)

466 
As£π
(
p_u¨t
 =
UART1
);

467 
p_u¨t
->
UART_MR
 |
UART_MR_OPT_EN
;

475 
u¨t_dißbÀ_›tiˇl_öãrÁ˚
(
U¨t
 *
p_u¨t
)

477 
As£π
(
p_u¨t
 =
UART1
);

478 
p_u¨t
->
UART_MR
 &~
UART_MR_OPT_EN
;

487 
u¨t_c⁄fig_›tiˇl_öãrÁ˚
(
U¨t
 *
p_u¨t
,

488 
u¨t_c⁄fig_›tiˇl
 *
cfg
)

490 
As£π
(
p_u¨t
 =
UART1
);

491 
uöt32_t
 
ªg
 = 
p_u¨t
->
UART_MR
;

493 
ªg
 &~(
UART_MR_OPT_RXINV
 | 
UART_MR_OPT_MDINV
 | 
UART_MR_FILTER


494 | 
UART_MR_OPT_CLKDIV_Msk
 | 
UART_MR_OPT_DUTY_Msk


495 | 
UART_MR_OPT_CMPTH_Msk
);

496 
ªg
 |(
cfg
->
rx_övîãd
 ? 
UART_MR_OPT_RXINV
 : 0)

497 | (
cfg
->
tx_övîãd
 ? 
UART_MR_OPT_MDINV
 : 0)

498 | (
cfg
->
rx_fûãr
 ? 
UART_MR_FILTER
 : 0)

499 | 
UART_MR_OPT_CLKDIV
(
cfg
->
˛k_div
)

500 | 
cfg
->
duty
 | cfg->
thªshﬁd
;

502 
p_u¨t
->
UART_MR
 = 
ªg
;

506 #i‡(
SAMG53
 || 
SAMG54
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

516 
u¨t_£t_¶ìpwÆkög
(
U¨t
 *
p_u¨t
, 
uöt8_t
 
ul_low_vÆue
,

517 
boﬁ
 
cmpmode
, boﬁ 
cmµ¨
, 
uöt8_t
 
ul_high_vÆue
)

519 
As£π
(
ul_low_vÆue
 <
ul_high_vÆue
);

521 
uöt32_t
 
ãmp
 = 0;

523 i‡(
cmpmode
) {

524 
ãmp
 |
UART_CMPR_CMPMODE_START_CONDITION
;

527 i‡(
cmµ¨
) {

528 
ãmp
 |
UART_CMPR_CMPPAR
;

531 
ãmp
 |
UART_CMPR_VAL1
(
ul_low_vÆue
);

533 
ãmp
 |
UART_CMPR_VAL2
(
ul_high_vÆue
);

535 
p_u¨t
->
UART_CMPR

ãmp
;

544 
u¨t_£t_wrôe_¥Ÿe˘i⁄
(
U¨t
 *
p_u¨t
, 
boﬁ
 
Êag
)

546 i‡(
Êag
) {

547 
p_u¨t
->
UART_WPMR
 = 
UART_WPMR_WPKEY_PASSWD
 | 
UART_WPMR_WPEN
;

549 
p_u¨t
->
UART_WPMR
 = 
UART_WPMR_WPKEY_PASSWD
;

558 #ifde‡
__˝lu•lus


	@/home/vaje/Documents/vaja9/asf/sam/drivers/uart/uart.h

47 #i‚de‡
UART_H_INCLUDED


48 
	#UART_H_INCLUDED


	)

50 
	~"compûî.h
"

54 #ifde‡
__˝lu•lus


61 
	#UART_MCK_DIV
 16

	)

63 
	#UART_MCK_DIV_MIN_FACTOR
 1

	)

65 
	#UART_MCK_DIV_MAX_FACTOR
 65535

	)

68 
	sßm_u¨t_›t
 {

70 
uöt32_t
 
ul_mck
;

72 
uöt32_t
 
ul_baudøã
;

74 
uöt32_t
 
ul_mode
;

75 } 
	tßm_u¨t_›t_t
;

77 
uöt32_t
 
u¨t_öô
(
U¨t
 *
p_u¨t
, c⁄° 
ßm_u¨t_›t_t
 *
p_u¨t_›t
);

78 
u¨t_íabÀ_tx
(
U¨t
 *
p_u¨t
);

79 
u¨t_dißbÀ_tx
(
U¨t
 *
p_u¨t
);

80 
u¨t_ª£t_tx
(
U¨t
 *
p_u¨t
);

81 
u¨t_íabÀ_rx
(
U¨t
 *
p_u¨t
);

82 
u¨t_dißbÀ_rx
(
U¨t
 *
p_u¨t
);

83 
u¨t_ª£t_rx
(
U¨t
 *
p_u¨t
);

84 
u¨t_íabÀ
(
U¨t
 *
p_u¨t
);

85 
u¨t_dißbÀ
(
U¨t
 *
p_u¨t
);

86 
u¨t_ª£t
(
U¨t
 *
p_u¨t
);

87 
u¨t_íabÀ_öãºu±
(
U¨t
 *
p_u¨t
, 
uöt32_t
 
ul_sour˚s
);

88 
u¨t_dißbÀ_öãºu±
(
U¨t
 *
p_u¨t
, 
uöt32_t
 
ul_sour˚s
);

89 
uöt32_t
 
u¨t_gë_öãºu±_mask
(
U¨t
 *
p_u¨t
);

90 
uöt32_t
 
u¨t_gë_°©us
(
U¨t
 *
p_u¨t
);

91 
u¨t_ª£t_°©us
(
U¨t
 *
p_u¨t
);

92 
uöt32_t
 
u¨t_is_tx_ªady
(
U¨t
 *
p_u¨t
);

93 
uöt32_t
 
u¨t_is_tx_em±y
(
U¨t
 *
p_u¨t
);

94 
uöt32_t
 
u¨t_is_rx_ªady
(
U¨t
 *
p_u¨t
);

95 
uöt32_t
 
u¨t_is_tx_buf_em±y
(
U¨t
 *
p_u¨t
);

96 
u¨t_£t_˛ock_divis‹
(
U¨t
 *
p_u¨t
, 
uöt16_t
 
us_divis‹
);

97 
uöt32_t
 
u¨t_wrôe
(
U¨t
 *
p_u¨t
, c⁄° 
uöt8_t
 
uc_d©a
);

98 
uöt32_t
 
u¨t_ªad
(
U¨t
 *
p_u¨t
, 
uöt8_t
 *
puc_d©a
);

99 #i‡(!
SAMV71
 && !
SAMV70
 && !
SAME70
 && !
SAMS70
)

100 
uöt32_t
 
u¨t_is_rx_buf_íd
(
U¨t
 *
p_u¨t
);

101 
uöt32_t
 
u¨t_is_tx_buf_íd
(
U¨t
 *
p_u¨t
);

102 
uöt32_t
 
u¨t_is_rx_buf_fuŒ
(
U¨t
 *
p_u¨t
);

103 
Pdc
 *
u¨t_gë_pdc_ba£
(
U¨t
 *
p_u¨t
);

105 #i‡(
SAMG53
 || 
SAMG54
 || 
SAMV71
 || 
SAMV70
 || 
SAME70
 || 
SAMS70
)

106 
u¨t_£t_¶ìpwÆkög
(
U¨t
 *
p_u¨t
, 
uöt8_t
 
ul_low_vÆue
,

107 
boﬁ
 
cmpmode
, boﬁ 
cmµ¨
, 
uöt8_t
 
ul_high_vÆue
);

108 
u¨t_£t_wrôe_¥Ÿe˘i⁄
(
U¨t
 *
p_u¨t
, 
boﬁ
 
Êag
);

111 #i‡(
SAM4C
 || 
SAM4CP
 || 
SAM4CM
)

112 
	eu¨t_›tiˇl_duty_cy˛e
 {

113 
UART_MOD_CLK_DUTY_50_00
 = 
UART_MR_OPT_DUTY_DUTY_50
,

114 
UART_MOD_CLK_DUTY_43_75
 = 
UART_MR_OPT_DUTY_DUTY_43P75
,

115 
UART_MOD_CLK_DUTY_37_50
 = 
UART_MR_OPT_DUTY_DUTY_37P5
,

116 
UART_MOD_CLK_DUTY_31_25
 = 
UART_MR_OPT_DUTY_DUTY_31P25
,

117 
UART_MOD_CLK_DUTY_25_00
 = 
UART_MR_OPT_DUTY_DUTY_25
,

118 
UART_MOD_CLK_DUTY_18_75
 = 
UART_MR_OPT_DUTY_DUTY_18P75
,

119 
UART_MOD_CLK_DUTY_12_50
 = 
UART_MR_OPT_DUTY_DUTY_12P5
,

120 
UART_MOD_CLK_DUTY_06_25
 = 
UART_MR_OPT_DUTY_DUTY_6P25
,

123 
	eu¨t_›tiˇl_cmp_thªshﬁd
 {

124 
UART_RX_CMP_THRESHOLD_VDDIO_DIV_10_0
 = 
UART_MR_OPT_CMPTH_VDDIO_DIV10
,

125 
UART_RX_CMP_THRESHOLD_VDDIO_DIV_5_0
 = 
UART_MR_OPT_CMPTH_VDDIO_DIV5
,

126 
UART_RX_CMP_THRESHOLD_VDDIO_DIV_3_3
 = 
UART_MR_OPT_CMPTH_VDDIO_DIV3P3
,

127 
UART_RX_CMP_THRESHOLD_VDDIO_DIV_2_5
 = 
UART_MR_OPT_CMPTH_VDDIO_DIV2P5
,

128 
UART_RX_CMP_THRESHOLD_VDDIO_DIV_2_0
 = 
UART_MR_OPT_CMPTH_VDDIO_DIV2
,

131 
	su¨t_c⁄fig_›tiˇl
 {

133 
boﬁ
 
rx_övîãd
;

135 
boﬁ
 
tx_övîãd
;

137 
boﬁ
 
rx_fûãr
;

139 
uöt8_t
 
˛k_div
;

141 
u¨t_›tiˇl_duty_cy˛e
 
duty
;

143 
u¨t_›tiˇl_cmp_thªshﬁd
 
thªshﬁd
;

146 
u¨t_íabÀ_›tiˇl_öãrÁ˚
(
U¨t
 *
p_u¨t
);

147 
u¨t_dißbÀ_›tiˇl_öãrÁ˚
(
U¨t
 *
p_u¨t
);

148 
u¨t_c⁄fig_›tiˇl_öãrÁ˚
(
U¨t
 *
p_u¨t
,

149 
u¨t_c⁄fig_›tiˇl
 *
cfg
);

154 #ifde‡
__˝lu•lus


	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_adc.h

45 #i‚de‡
_SAM3XA_ADC_COMPONENT_


46 
	#_SAM3XA_ADC_COMPONENT_


	)

54 #i‡!(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

57 
WoReg
 
	mADC_CR
;

58 
RwReg
 
	mADC_MR
;

59 
RwReg
 
	mADC_SEQR1
;

60 
RwReg
 
	mADC_SEQR2
;

61 
WoReg
 
	mADC_CHER
;

62 
WoReg
 
	mADC_CHDR
;

63 
RoReg
 
	mADC_CHSR
;

64 
RoReg
 
	mRe£rved1
[1];

65 
RoReg
 
	mADC_LCDR
;

66 
WoReg
 
	mADC_IER
;

67 
WoReg
 
	mADC_IDR
;

68 
RoReg
 
	mADC_IMR
;

69 
RoReg
 
	mADC_ISR
;

70 
RoReg
 
	mRe£rved2
[2];

71 
RoReg
 
	mADC_OVER
;

72 
RwReg
 
	mADC_EMR
;

73 
RwReg
 
	mADC_CWR
;

74 
RwReg
 
	mADC_CGR
;

75 
RwReg
 
	mADC_COR
;

76 
RoReg
 
	mADC_CDR
[16];

77 
RoReg
 
	mRe£rved3
[1];

78 
RwReg
 
	mADC_ACR
;

79 
RoReg
 
	mRe£rved4
[19];

80 
RwReg
 
	mADC_WPMR
;

81 
RoReg
 
	mADC_WPSR
;

82 
RoReg
 
	mRe£rved5
[5];

83 
RwReg
 
	mADC_RPR
;

84 
RwReg
 
	mADC_RCR
;

85 
RoReg
 
	mRe£rved6
[2];

86 
RwReg
 
	mADC_RNPR
;

87 
RwReg
 
	mADC_RNCR
;

88 
RoReg
 
	mRe£rved7
[2];

89 
WoReg
 
	mADC_PTCR
;

90 
RoReg
 
	mADC_PTSR
;

91 } 
	tAdc
;

94 
	#ADC_CR_SWRST
 (0x1u << 0Ë

	)

95 
	#ADC_CR_START
 (0x1u << 1Ë

	)

97 
	#ADC_MR_TRGEN
 (0x1u << 0Ë

	)

98 
	#ADC_MR_TRGEN_DIS
 (0x0u << 0Ë

	)

99 
	#ADC_MR_TRGEN_EN
 (0x1u << 0Ë

	)

100 
	#ADC_MR_TRGSEL_Pos
 1

	)

101 
	#ADC_MR_TRGSEL_Msk
 (0x7u << 
ADC_MR_TRGSEL_Pos
Ë

	)

102 
	#ADC_MR_TRGSEL_ADC_TRIG0
 (0x0u << 1Ë

	)

103 
	#ADC_MR_TRGSEL_ADC_TRIG1
 (0x1u << 1Ë

	)

104 
	#ADC_MR_TRGSEL_ADC_TRIG2
 (0x2u << 1Ë

	)

105 
	#ADC_MR_TRGSEL_ADC_TRIG3
 (0x3u << 1Ë

	)

106 
	#ADC_MR_TRGSEL_ADC_TRIG4
 (0x4u << 1Ë

	)

107 
	#ADC_MR_TRGSEL_ADC_TRIG5
 (0x5u << 1Ë

	)

108 
	#ADC_MR_LOWRES
 (0x1u << 4Ë

	)

109 
	#ADC_MR_LOWRES_BITS_12
 (0x0u << 4Ë

	)

110 
	#ADC_MR_LOWRES_BITS_10
 (0x1u << 4Ë

	)

111 
	#ADC_MR_SLEEP
 (0x1u << 5Ë

	)

112 
	#ADC_MR_SLEEP_NORMAL
 (0x0u << 5Ë

	)

113 
	#ADC_MR_SLEEP_SLEEP
 (0x1u << 5Ë

	)

114 
	#ADC_MR_FWUP
 (0x1u << 6Ë

	)

115 
	#ADC_MR_FWUP_OFF
 (0x0u << 6Ë

	)

116 
	#ADC_MR_FWUP_ON
 (0x1u << 6Ë

	)

117 
	#ADC_MR_FREERUN
 (0x1u << 7Ë

	)

118 
	#ADC_MR_FREERUN_OFF
 (0x0u << 7Ë

	)

119 
	#ADC_MR_FREERUN_ON
 (0x1u << 7Ë

	)

120 
	#ADC_MR_PRESCAL_Pos
 8

	)

121 
	#ADC_MR_PRESCAL_Msk
 (0xffu << 
ADC_MR_PRESCAL_Pos
Ë

	)

122 
	#ADC_MR_PRESCAL
(
vÆue
Ë((
ADC_MR_PRESCAL_Msk
 & ((vÆueË<< 
ADC_MR_PRESCAL_Pos
)))

	)

123 
	#ADC_MR_STARTUP_Pos
 16

	)

124 
	#ADC_MR_STARTUP_Msk
 (0xfu << 
ADC_MR_STARTUP_Pos
Ë

	)

125 
	#ADC_MR_STARTUP_SUT0
 (0x0u << 16Ë

	)

126 
	#ADC_MR_STARTUP_SUT8
 (0x1u << 16Ë

	)

127 
	#ADC_MR_STARTUP_SUT16
 (0x2u << 16Ë

	)

128 
	#ADC_MR_STARTUP_SUT24
 (0x3u << 16Ë

	)

129 
	#ADC_MR_STARTUP_SUT64
 (0x4u << 16Ë

	)

130 
	#ADC_MR_STARTUP_SUT80
 (0x5u << 16Ë

	)

131 
	#ADC_MR_STARTUP_SUT96
 (0x6u << 16Ë

	)

132 
	#ADC_MR_STARTUP_SUT112
 (0x7u << 16Ë

	)

133 
	#ADC_MR_STARTUP_SUT512
 (0x8u << 16Ë

	)

134 
	#ADC_MR_STARTUP_SUT576
 (0x9u << 16Ë

	)

135 
	#ADC_MR_STARTUP_SUT640
 (0xAu << 16Ë

	)

136 
	#ADC_MR_STARTUP_SUT704
 (0xBu << 16Ë

	)

137 
	#ADC_MR_STARTUP_SUT768
 (0xCu << 16Ë

	)

138 
	#ADC_MR_STARTUP_SUT832
 (0xDu << 16Ë

	)

139 
	#ADC_MR_STARTUP_SUT896
 (0xEu << 16Ë

	)

140 
	#ADC_MR_STARTUP_SUT960
 (0xFu << 16Ë

	)

141 
	#ADC_MR_SETTLING_Pos
 20

	)

142 
	#ADC_MR_SETTLING_Msk
 (0x3u << 
ADC_MR_SETTLING_Pos
Ë

	)

143 
	#ADC_MR_SETTLING_AST3
 (0x0u << 20Ë

	)

144 
	#ADC_MR_SETTLING_AST5
 (0x1u << 20Ë

	)

145 
	#ADC_MR_SETTLING_AST9
 (0x2u << 20Ë

	)

146 
	#ADC_MR_SETTLING_AST17
 (0x3u << 20Ë

	)

147 
	#ADC_MR_ANACH
 (0x1u << 23Ë

	)

148 
	#ADC_MR_ANACH_NONE
 (0x0u << 23Ë

	)

149 
	#ADC_MR_ANACH_ALLOWED
 (0x1u << 23Ë

	)

150 
	#ADC_MR_TRACKTIM_Pos
 24

	)

151 
	#ADC_MR_TRACKTIM_Msk
 (0xfu << 
ADC_MR_TRACKTIM_Pos
Ë

	)

152 
	#ADC_MR_TRACKTIM
(
vÆue
Ë((
ADC_MR_TRACKTIM_Msk
 & ((vÆueË<< 
ADC_MR_TRACKTIM_Pos
)))

	)

153 
	#ADC_MR_TRANSFER_Pos
 28

	)

154 
	#ADC_MR_TRANSFER_Msk
 (0x3u << 
ADC_MR_TRANSFER_Pos
Ë

	)

155 
	#ADC_MR_TRANSFER
(
vÆue
Ë((
ADC_MR_TRANSFER_Msk
 & ((vÆueË<< 
ADC_MR_TRANSFER_Pos
)))

	)

156 
	#ADC_MR_USEQ
 (0x1u << 31Ë

	)

157 
	#ADC_MR_USEQ_NUM_ORDER
 (0x0u << 31Ë

	)

158 
	#ADC_MR_USEQ_REG_ORDER
 (0x1u << 31Ë

	)

160 
	#ADC_SEQR1_USCH1_Pos
 0

	)

161 
	#ADC_SEQR1_USCH1_Msk
 (0xfu << 
ADC_SEQR1_USCH1_Pos
Ë

	)

162 
	#ADC_SEQR1_USCH1
(
vÆue
Ë((
ADC_SEQR1_USCH1_Msk
 & ((vÆueË<< 
ADC_SEQR1_USCH1_Pos
)))

	)

163 
	#ADC_SEQR1_USCH2_Pos
 4

	)

164 
	#ADC_SEQR1_USCH2_Msk
 (0xfu << 
ADC_SEQR1_USCH2_Pos
Ë

	)

165 
	#ADC_SEQR1_USCH2
(
vÆue
Ë((
ADC_SEQR1_USCH2_Msk
 & ((vÆueË<< 
ADC_SEQR1_USCH2_Pos
)))

	)

166 
	#ADC_SEQR1_USCH3_Pos
 8

	)

167 
	#ADC_SEQR1_USCH3_Msk
 (0xfu << 
ADC_SEQR1_USCH3_Pos
Ë

	)

168 
	#ADC_SEQR1_USCH3
(
vÆue
Ë((
ADC_SEQR1_USCH3_Msk
 & ((vÆueË<< 
ADC_SEQR1_USCH3_Pos
)))

	)

169 
	#ADC_SEQR1_USCH4_Pos
 12

	)

170 
	#ADC_SEQR1_USCH4_Msk
 (0xfu << 
ADC_SEQR1_USCH4_Pos
Ë

	)

171 
	#ADC_SEQR1_USCH4
(
vÆue
Ë((
ADC_SEQR1_USCH4_Msk
 & ((vÆueË<< 
ADC_SEQR1_USCH4_Pos
)))

	)

172 
	#ADC_SEQR1_USCH5_Pos
 16

	)

173 
	#ADC_SEQR1_USCH5_Msk
 (0xfu << 
ADC_SEQR1_USCH5_Pos
Ë

	)

174 
	#ADC_SEQR1_USCH5
(
vÆue
Ë((
ADC_SEQR1_USCH5_Msk
 & ((vÆueË<< 
ADC_SEQR1_USCH5_Pos
)))

	)

175 
	#ADC_SEQR1_USCH6_Pos
 20

	)

176 
	#ADC_SEQR1_USCH6_Msk
 (0xfu << 
ADC_SEQR1_USCH6_Pos
Ë

	)

177 
	#ADC_SEQR1_USCH6
(
vÆue
Ë((
ADC_SEQR1_USCH6_Msk
 & ((vÆueË<< 
ADC_SEQR1_USCH6_Pos
)))

	)

178 
	#ADC_SEQR1_USCH7_Pos
 24

	)

179 
	#ADC_SEQR1_USCH7_Msk
 (0xfu << 
ADC_SEQR1_USCH7_Pos
Ë

	)

180 
	#ADC_SEQR1_USCH7
(
vÆue
Ë((
ADC_SEQR1_USCH7_Msk
 & ((vÆueË<< 
ADC_SEQR1_USCH7_Pos
)))

	)

181 
	#ADC_SEQR1_USCH8_Pos
 28

	)

182 
	#ADC_SEQR1_USCH8_Msk
 (0xfu << 
ADC_SEQR1_USCH8_Pos
Ë

	)

183 
	#ADC_SEQR1_USCH8
(
vÆue
Ë((
ADC_SEQR1_USCH8_Msk
 & ((vÆueË<< 
ADC_SEQR1_USCH8_Pos
)))

	)

185 
	#ADC_SEQR2_USCH9_Pos
 0

	)

186 
	#ADC_SEQR2_USCH9_Msk
 (0xfu << 
ADC_SEQR2_USCH9_Pos
Ë

	)

187 
	#ADC_SEQR2_USCH9
(
vÆue
Ë((
ADC_SEQR2_USCH9_Msk
 & ((vÆueË<< 
ADC_SEQR2_USCH9_Pos
)))

	)

188 
	#ADC_SEQR2_USCH10_Pos
 4

	)

189 
	#ADC_SEQR2_USCH10_Msk
 (0xfu << 
ADC_SEQR2_USCH10_Pos
Ë

	)

190 
	#ADC_SEQR2_USCH10
(
vÆue
Ë((
ADC_SEQR2_USCH10_Msk
 & ((vÆueË<< 
ADC_SEQR2_USCH10_Pos
)))

	)

191 
	#ADC_SEQR2_USCH11_Pos
 8

	)

192 
	#ADC_SEQR2_USCH11_Msk
 (0xfu << 
ADC_SEQR2_USCH11_Pos
Ë

	)

193 
	#ADC_SEQR2_USCH11
(
vÆue
Ë((
ADC_SEQR2_USCH11_Msk
 & ((vÆueË<< 
ADC_SEQR2_USCH11_Pos
)))

	)

194 
	#ADC_SEQR2_USCH12_Pos
 12

	)

195 
	#ADC_SEQR2_USCH12_Msk
 (0xfu << 
ADC_SEQR2_USCH12_Pos
Ë

	)

196 
	#ADC_SEQR2_USCH12
(
vÆue
Ë((
ADC_SEQR2_USCH12_Msk
 & ((vÆueË<< 
ADC_SEQR2_USCH12_Pos
)))

	)

197 
	#ADC_SEQR2_USCH13_Pos
 16

	)

198 
	#ADC_SEQR2_USCH13_Msk
 (0xfu << 
ADC_SEQR2_USCH13_Pos
Ë

	)

199 
	#ADC_SEQR2_USCH13
(
vÆue
Ë((
ADC_SEQR2_USCH13_Msk
 & ((vÆueË<< 
ADC_SEQR2_USCH13_Pos
)))

	)

200 
	#ADC_SEQR2_USCH14_Pos
 20

	)

201 
	#ADC_SEQR2_USCH14_Msk
 (0xfu << 
ADC_SEQR2_USCH14_Pos
Ë

	)

202 
	#ADC_SEQR2_USCH14
(
vÆue
Ë((
ADC_SEQR2_USCH14_Msk
 & ((vÆueË<< 
ADC_SEQR2_USCH14_Pos
)))

	)

203 
	#ADC_SEQR2_USCH15_Pos
 24

	)

204 
	#ADC_SEQR2_USCH15_Msk
 (0xfu << 
ADC_SEQR2_USCH15_Pos
Ë

	)

205 
	#ADC_SEQR2_USCH15
(
vÆue
Ë((
ADC_SEQR2_USCH15_Msk
 & ((vÆueË<< 
ADC_SEQR2_USCH15_Pos
)))

	)

206 
	#ADC_SEQR2_USCH16_Pos
 28

	)

207 
	#ADC_SEQR2_USCH16_Msk
 (0xfu << 
ADC_SEQR2_USCH16_Pos
Ë

	)

208 
	#ADC_SEQR2_USCH16
(
vÆue
Ë((
ADC_SEQR2_USCH16_Msk
 & ((vÆueË<< 
ADC_SEQR2_USCH16_Pos
)))

	)

210 
	#ADC_CHER_CH0
 (0x1u << 0Ë

	)

211 
	#ADC_CHER_CH1
 (0x1u << 1Ë

	)

212 
	#ADC_CHER_CH2
 (0x1u << 2Ë

	)

213 
	#ADC_CHER_CH3
 (0x1u << 3Ë

	)

214 
	#ADC_CHER_CH4
 (0x1u << 4Ë

	)

215 
	#ADC_CHER_CH5
 (0x1u << 5Ë

	)

216 
	#ADC_CHER_CH6
 (0x1u << 6Ë

	)

217 
	#ADC_CHER_CH7
 (0x1u << 7Ë

	)

218 
	#ADC_CHER_CH8
 (0x1u << 8Ë

	)

219 
	#ADC_CHER_CH9
 (0x1u << 9Ë

	)

220 
	#ADC_CHER_CH10
 (0x1u << 10Ë

	)

221 
	#ADC_CHER_CH11
 (0x1u << 11Ë

	)

222 
	#ADC_CHER_CH12
 (0x1u << 12Ë

	)

223 
	#ADC_CHER_CH13
 (0x1u << 13Ë

	)

224 
	#ADC_CHER_CH14
 (0x1u << 14Ë

	)

225 
	#ADC_CHER_CH15
 (0x1u << 15Ë

	)

227 
	#ADC_CHDR_CH0
 (0x1u << 0Ë

	)

228 
	#ADC_CHDR_CH1
 (0x1u << 1Ë

	)

229 
	#ADC_CHDR_CH2
 (0x1u << 2Ë

	)

230 
	#ADC_CHDR_CH3
 (0x1u << 3Ë

	)

231 
	#ADC_CHDR_CH4
 (0x1u << 4Ë

	)

232 
	#ADC_CHDR_CH5
 (0x1u << 5Ë

	)

233 
	#ADC_CHDR_CH6
 (0x1u << 6Ë

	)

234 
	#ADC_CHDR_CH7
 (0x1u << 7Ë

	)

235 
	#ADC_CHDR_CH8
 (0x1u << 8Ë

	)

236 
	#ADC_CHDR_CH9
 (0x1u << 9Ë

	)

237 
	#ADC_CHDR_CH10
 (0x1u << 10Ë

	)

238 
	#ADC_CHDR_CH11
 (0x1u << 11Ë

	)

239 
	#ADC_CHDR_CH12
 (0x1u << 12Ë

	)

240 
	#ADC_CHDR_CH13
 (0x1u << 13Ë

	)

241 
	#ADC_CHDR_CH14
 (0x1u << 14Ë

	)

242 
	#ADC_CHDR_CH15
 (0x1u << 15Ë

	)

244 
	#ADC_CHSR_CH0
 (0x1u << 0Ë

	)

245 
	#ADC_CHSR_CH1
 (0x1u << 1Ë

	)

246 
	#ADC_CHSR_CH2
 (0x1u << 2Ë

	)

247 
	#ADC_CHSR_CH3
 (0x1u << 3Ë

	)

248 
	#ADC_CHSR_CH4
 (0x1u << 4Ë

	)

249 
	#ADC_CHSR_CH5
 (0x1u << 5Ë

	)

250 
	#ADC_CHSR_CH6
 (0x1u << 6Ë

	)

251 
	#ADC_CHSR_CH7
 (0x1u << 7Ë

	)

252 
	#ADC_CHSR_CH8
 (0x1u << 8Ë

	)

253 
	#ADC_CHSR_CH9
 (0x1u << 9Ë

	)

254 
	#ADC_CHSR_CH10
 (0x1u << 10Ë

	)

255 
	#ADC_CHSR_CH11
 (0x1u << 11Ë

	)

256 
	#ADC_CHSR_CH12
 (0x1u << 12Ë

	)

257 
	#ADC_CHSR_CH13
 (0x1u << 13Ë

	)

258 
	#ADC_CHSR_CH14
 (0x1u << 14Ë

	)

259 
	#ADC_CHSR_CH15
 (0x1u << 15Ë

	)

261 
	#ADC_LCDR_LDATA_Pos
 0

	)

262 
	#ADC_LCDR_LDATA_Msk
 (0xfffu << 
ADC_LCDR_LDATA_Pos
Ë

	)

263 
	#ADC_LCDR_CHNB_Pos
 12

	)

264 
	#ADC_LCDR_CHNB_Msk
 (0xfu << 
ADC_LCDR_CHNB_Pos
Ë

	)

266 
	#ADC_IER_EOC0
 (0x1u << 0Ë

	)

267 
	#ADC_IER_EOC1
 (0x1u << 1Ë

	)

268 
	#ADC_IER_EOC2
 (0x1u << 2Ë

	)

269 
	#ADC_IER_EOC3
 (0x1u << 3Ë

	)

270 
	#ADC_IER_EOC4
 (0x1u << 4Ë

	)

271 
	#ADC_IER_EOC5
 (0x1u << 5Ë

	)

272 
	#ADC_IER_EOC6
 (0x1u << 6Ë

	)

273 
	#ADC_IER_EOC7
 (0x1u << 7Ë

	)

274 
	#ADC_IER_EOC8
 (0x1u << 8Ë

	)

275 
	#ADC_IER_EOC9
 (0x1u << 9Ë

	)

276 
	#ADC_IER_EOC10
 (0x1u << 10Ë

	)

277 
	#ADC_IER_EOC11
 (0x1u << 11Ë

	)

278 
	#ADC_IER_EOC12
 (0x1u << 12Ë

	)

279 
	#ADC_IER_EOC13
 (0x1u << 13Ë

	)

280 
	#ADC_IER_EOC14
 (0x1u << 14Ë

	)

281 
	#ADC_IER_EOC15
 (0x1u << 15Ë

	)

282 
	#ADC_IER_DRDY
 (0x1u << 24Ë

	)

283 
	#ADC_IER_GOVRE
 (0x1u << 25Ë

	)

284 
	#ADC_IER_COMPE
 (0x1u << 26Ë

	)

285 
	#ADC_IER_ENDRX
 (0x1u << 27Ë

	)

286 
	#ADC_IER_RXBUFF
 (0x1u << 28Ë

	)

288 
	#ADC_IDR_EOC0
 (0x1u << 0Ë

	)

289 
	#ADC_IDR_EOC1
 (0x1u << 1Ë

	)

290 
	#ADC_IDR_EOC2
 (0x1u << 2Ë

	)

291 
	#ADC_IDR_EOC3
 (0x1u << 3Ë

	)

292 
	#ADC_IDR_EOC4
 (0x1u << 4Ë

	)

293 
	#ADC_IDR_EOC5
 (0x1u << 5Ë

	)

294 
	#ADC_IDR_EOC6
 (0x1u << 6Ë

	)

295 
	#ADC_IDR_EOC7
 (0x1u << 7Ë

	)

296 
	#ADC_IDR_EOC8
 (0x1u << 8Ë

	)

297 
	#ADC_IDR_EOC9
 (0x1u << 9Ë

	)

298 
	#ADC_IDR_EOC10
 (0x1u << 10Ë

	)

299 
	#ADC_IDR_EOC11
 (0x1u << 11Ë

	)

300 
	#ADC_IDR_EOC12
 (0x1u << 12Ë

	)

301 
	#ADC_IDR_EOC13
 (0x1u << 13Ë

	)

302 
	#ADC_IDR_EOC14
 (0x1u << 14Ë

	)

303 
	#ADC_IDR_EOC15
 (0x1u << 15Ë

	)

304 
	#ADC_IDR_DRDY
 (0x1u << 24Ë

	)

305 
	#ADC_IDR_GOVRE
 (0x1u << 25Ë

	)

306 
	#ADC_IDR_COMPE
 (0x1u << 26Ë

	)

307 
	#ADC_IDR_ENDRX
 (0x1u << 27Ë

	)

308 
	#ADC_IDR_RXBUFF
 (0x1u << 28Ë

	)

310 
	#ADC_IMR_EOC0
 (0x1u << 0Ë

	)

311 
	#ADC_IMR_EOC1
 (0x1u << 1Ë

	)

312 
	#ADC_IMR_EOC2
 (0x1u << 2Ë

	)

313 
	#ADC_IMR_EOC3
 (0x1u << 3Ë

	)

314 
	#ADC_IMR_EOC4
 (0x1u << 4Ë

	)

315 
	#ADC_IMR_EOC5
 (0x1u << 5Ë

	)

316 
	#ADC_IMR_EOC6
 (0x1u << 6Ë

	)

317 
	#ADC_IMR_EOC7
 (0x1u << 7Ë

	)

318 
	#ADC_IMR_EOC8
 (0x1u << 8Ë

	)

319 
	#ADC_IMR_EOC9
 (0x1u << 9Ë

	)

320 
	#ADC_IMR_EOC10
 (0x1u << 10Ë

	)

321 
	#ADC_IMR_EOC11
 (0x1u << 11Ë

	)

322 
	#ADC_IMR_EOC12
 (0x1u << 12Ë

	)

323 
	#ADC_IMR_EOC13
 (0x1u << 13Ë

	)

324 
	#ADC_IMR_EOC14
 (0x1u << 14Ë

	)

325 
	#ADC_IMR_EOC15
 (0x1u << 15Ë

	)

326 
	#ADC_IMR_DRDY
 (0x1u << 24Ë

	)

327 
	#ADC_IMR_GOVRE
 (0x1u << 25Ë

	)

328 
	#ADC_IMR_COMPE
 (0x1u << 26Ë

	)

329 
	#ADC_IMR_ENDRX
 (0x1u << 27Ë

	)

330 
	#ADC_IMR_RXBUFF
 (0x1u << 28Ë

	)

332 
	#ADC_ISR_EOC0
 (0x1u << 0Ë

	)

333 
	#ADC_ISR_EOC1
 (0x1u << 1Ë

	)

334 
	#ADC_ISR_EOC2
 (0x1u << 2Ë

	)

335 
	#ADC_ISR_EOC3
 (0x1u << 3Ë

	)

336 
	#ADC_ISR_EOC4
 (0x1u << 4Ë

	)

337 
	#ADC_ISR_EOC5
 (0x1u << 5Ë

	)

338 
	#ADC_ISR_EOC6
 (0x1u << 6Ë

	)

339 
	#ADC_ISR_EOC7
 (0x1u << 7Ë

	)

340 
	#ADC_ISR_EOC8
 (0x1u << 8Ë

	)

341 
	#ADC_ISR_EOC9
 (0x1u << 9Ë

	)

342 
	#ADC_ISR_EOC10
 (0x1u << 10Ë

	)

343 
	#ADC_ISR_EOC11
 (0x1u << 11Ë

	)

344 
	#ADC_ISR_EOC12
 (0x1u << 12Ë

	)

345 
	#ADC_ISR_EOC13
 (0x1u << 13Ë

	)

346 
	#ADC_ISR_EOC14
 (0x1u << 14Ë

	)

347 
	#ADC_ISR_EOC15
 (0x1u << 15Ë

	)

348 
	#ADC_ISR_DRDY
 (0x1u << 24Ë

	)

349 
	#ADC_ISR_GOVRE
 (0x1u << 25Ë

	)

350 
	#ADC_ISR_COMPE
 (0x1u << 26Ë

	)

351 
	#ADC_ISR_ENDRX
 (0x1u << 27Ë

	)

352 
	#ADC_ISR_RXBUFF
 (0x1u << 28Ë

	)

354 
	#ADC_OVER_OVRE0
 (0x1u << 0Ë

	)

355 
	#ADC_OVER_OVRE1
 (0x1u << 1Ë

	)

356 
	#ADC_OVER_OVRE2
 (0x1u << 2Ë

	)

357 
	#ADC_OVER_OVRE3
 (0x1u << 3Ë

	)

358 
	#ADC_OVER_OVRE4
 (0x1u << 4Ë

	)

359 
	#ADC_OVER_OVRE5
 (0x1u << 5Ë

	)

360 
	#ADC_OVER_OVRE6
 (0x1u << 6Ë

	)

361 
	#ADC_OVER_OVRE7
 (0x1u << 7Ë

	)

362 
	#ADC_OVER_OVRE8
 (0x1u << 8Ë

	)

363 
	#ADC_OVER_OVRE9
 (0x1u << 9Ë

	)

364 
	#ADC_OVER_OVRE10
 (0x1u << 10Ë

	)

365 
	#ADC_OVER_OVRE11
 (0x1u << 11Ë

	)

366 
	#ADC_OVER_OVRE12
 (0x1u << 12Ë

	)

367 
	#ADC_OVER_OVRE13
 (0x1u << 13Ë

	)

368 
	#ADC_OVER_OVRE14
 (0x1u << 14Ë

	)

369 
	#ADC_OVER_OVRE15
 (0x1u << 15Ë

	)

371 
	#ADC_EMR_CMPMODE_Pos
 0

	)

372 
	#ADC_EMR_CMPMODE_Msk
 (0x3u << 
ADC_EMR_CMPMODE_Pos
Ë

	)

373 
	#ADC_EMR_CMPMODE_LOW
 (0x0u << 0Ë

	)

374 
	#ADC_EMR_CMPMODE_HIGH
 (0x1u << 0Ë

	)

375 
	#ADC_EMR_CMPMODE_IN
 (0x2u << 0Ë

	)

376 
	#ADC_EMR_CMPMODE_OUT
 (0x3u << 0Ë

	)

377 
	#ADC_EMR_CMPSEL_Pos
 4

	)

378 
	#ADC_EMR_CMPSEL_Msk
 (0xfu << 
ADC_EMR_CMPSEL_Pos
Ë

	)

379 
	#ADC_EMR_CMPSEL
(
vÆue
Ë((
ADC_EMR_CMPSEL_Msk
 & ((vÆueË<< 
ADC_EMR_CMPSEL_Pos
)))

	)

380 
	#ADC_EMR_CMPALL
 (0x1u << 9Ë

	)

381 
	#ADC_EMR_CMPFILTER_Pos
 12

	)

382 
	#ADC_EMR_CMPFILTER_Msk
 (0x3u << 
ADC_EMR_CMPFILTER_Pos
Ë

	)

383 
	#ADC_EMR_CMPFILTER
(
vÆue
Ë((
ADC_EMR_CMPFILTER_Msk
 & ((vÆueË<< 
ADC_EMR_CMPFILTER_Pos
)))

	)

384 
	#ADC_EMR_TAG
 (0x1u << 24Ë

	)

386 
	#ADC_CWR_LOWTHRES_Pos
 0

	)

387 
	#ADC_CWR_LOWTHRES_Msk
 (0xfffu << 
ADC_CWR_LOWTHRES_Pos
Ë

	)

388 
	#ADC_CWR_LOWTHRES
(
vÆue
Ë((
ADC_CWR_LOWTHRES_Msk
 & ((vÆueË<< 
ADC_CWR_LOWTHRES_Pos
)))

	)

389 
	#ADC_CWR_HIGHTHRES_Pos
 16

	)

390 
	#ADC_CWR_HIGHTHRES_Msk
 (0xfffu << 
ADC_CWR_HIGHTHRES_Pos
Ë

	)

391 
	#ADC_CWR_HIGHTHRES
(
vÆue
Ë((
ADC_CWR_HIGHTHRES_Msk
 & ((vÆueË<< 
ADC_CWR_HIGHTHRES_Pos
)))

	)

393 
	#ADC_CGR_GAIN0_Pos
 0

	)

394 
	#ADC_CGR_GAIN0_Msk
 (0x3u << 
ADC_CGR_GAIN0_Pos
Ë

	)

395 
	#ADC_CGR_GAIN0
(
vÆue
Ë((
ADC_CGR_GAIN0_Msk
 & ((vÆueË<< 
ADC_CGR_GAIN0_Pos
)))

	)

396 
	#ADC_CGR_GAIN1_Pos
 2

	)

397 
	#ADC_CGR_GAIN1_Msk
 (0x3u << 
ADC_CGR_GAIN1_Pos
Ë

	)

398 
	#ADC_CGR_GAIN1
(
vÆue
Ë((
ADC_CGR_GAIN1_Msk
 & ((vÆueË<< 
ADC_CGR_GAIN1_Pos
)))

	)

399 
	#ADC_CGR_GAIN2_Pos
 4

	)

400 
	#ADC_CGR_GAIN2_Msk
 (0x3u << 
ADC_CGR_GAIN2_Pos
Ë

	)

401 
	#ADC_CGR_GAIN2
(
vÆue
Ë((
ADC_CGR_GAIN2_Msk
 & ((vÆueË<< 
ADC_CGR_GAIN2_Pos
)))

	)

402 
	#ADC_CGR_GAIN3_Pos
 6

	)

403 
	#ADC_CGR_GAIN3_Msk
 (0x3u << 
ADC_CGR_GAIN3_Pos
Ë

	)

404 
	#ADC_CGR_GAIN3
(
vÆue
Ë((
ADC_CGR_GAIN3_Msk
 & ((vÆueË<< 
ADC_CGR_GAIN3_Pos
)))

	)

405 
	#ADC_CGR_GAIN4_Pos
 8

	)

406 
	#ADC_CGR_GAIN4_Msk
 (0x3u << 
ADC_CGR_GAIN4_Pos
Ë

	)

407 
	#ADC_CGR_GAIN4
(
vÆue
Ë((
ADC_CGR_GAIN4_Msk
 & ((vÆueË<< 
ADC_CGR_GAIN4_Pos
)))

	)

408 
	#ADC_CGR_GAIN5_Pos
 10

	)

409 
	#ADC_CGR_GAIN5_Msk
 (0x3u << 
ADC_CGR_GAIN5_Pos
Ë

	)

410 
	#ADC_CGR_GAIN5
(
vÆue
Ë((
ADC_CGR_GAIN5_Msk
 & ((vÆueË<< 
ADC_CGR_GAIN5_Pos
)))

	)

411 
	#ADC_CGR_GAIN6_Pos
 12

	)

412 
	#ADC_CGR_GAIN6_Msk
 (0x3u << 
ADC_CGR_GAIN6_Pos
Ë

	)

413 
	#ADC_CGR_GAIN6
(
vÆue
Ë((
ADC_CGR_GAIN6_Msk
 & ((vÆueË<< 
ADC_CGR_GAIN6_Pos
)))

	)

414 
	#ADC_CGR_GAIN7_Pos
 14

	)

415 
	#ADC_CGR_GAIN7_Msk
 (0x3u << 
ADC_CGR_GAIN7_Pos
Ë

	)

416 
	#ADC_CGR_GAIN7
(
vÆue
Ë((
ADC_CGR_GAIN7_Msk
 & ((vÆueË<< 
ADC_CGR_GAIN7_Pos
)))

	)

417 
	#ADC_CGR_GAIN8_Pos
 16

	)

418 
	#ADC_CGR_GAIN8_Msk
 (0x3u << 
ADC_CGR_GAIN8_Pos
Ë

	)

419 
	#ADC_CGR_GAIN8
(
vÆue
Ë((
ADC_CGR_GAIN8_Msk
 & ((vÆueË<< 
ADC_CGR_GAIN8_Pos
)))

	)

420 
	#ADC_CGR_GAIN9_Pos
 18

	)

421 
	#ADC_CGR_GAIN9_Msk
 (0x3u << 
ADC_CGR_GAIN9_Pos
Ë

	)

422 
	#ADC_CGR_GAIN9
(
vÆue
Ë((
ADC_CGR_GAIN9_Msk
 & ((vÆueË<< 
ADC_CGR_GAIN9_Pos
)))

	)

423 
	#ADC_CGR_GAIN10_Pos
 20

	)

424 
	#ADC_CGR_GAIN10_Msk
 (0x3u << 
ADC_CGR_GAIN10_Pos
Ë

	)

425 
	#ADC_CGR_GAIN10
(
vÆue
Ë((
ADC_CGR_GAIN10_Msk
 & ((vÆueË<< 
ADC_CGR_GAIN10_Pos
)))

	)

426 
	#ADC_CGR_GAIN11_Pos
 22

	)

427 
	#ADC_CGR_GAIN11_Msk
 (0x3u << 
ADC_CGR_GAIN11_Pos
Ë

	)

428 
	#ADC_CGR_GAIN11
(
vÆue
Ë((
ADC_CGR_GAIN11_Msk
 & ((vÆueË<< 
ADC_CGR_GAIN11_Pos
)))

	)

429 
	#ADC_CGR_GAIN12_Pos
 24

	)

430 
	#ADC_CGR_GAIN12_Msk
 (0x3u << 
ADC_CGR_GAIN12_Pos
Ë

	)

431 
	#ADC_CGR_GAIN12
(
vÆue
Ë((
ADC_CGR_GAIN12_Msk
 & ((vÆueË<< 
ADC_CGR_GAIN12_Pos
)))

	)

432 
	#ADC_CGR_GAIN13_Pos
 26

	)

433 
	#ADC_CGR_GAIN13_Msk
 (0x3u << 
ADC_CGR_GAIN13_Pos
Ë

	)

434 
	#ADC_CGR_GAIN13
(
vÆue
Ë((
ADC_CGR_GAIN13_Msk
 & ((vÆueË<< 
ADC_CGR_GAIN13_Pos
)))

	)

435 
	#ADC_CGR_GAIN14_Pos
 28

	)

436 
	#ADC_CGR_GAIN14_Msk
 (0x3u << 
ADC_CGR_GAIN14_Pos
Ë

	)

437 
	#ADC_CGR_GAIN14
(
vÆue
Ë((
ADC_CGR_GAIN14_Msk
 & ((vÆueË<< 
ADC_CGR_GAIN14_Pos
)))

	)

438 
	#ADC_CGR_GAIN15_Pos
 30

	)

439 
	#ADC_CGR_GAIN15_Msk
 (0x3u << 
ADC_CGR_GAIN15_Pos
Ë

	)

440 
	#ADC_CGR_GAIN15
(
vÆue
Ë((
ADC_CGR_GAIN15_Msk
 & ((vÆueË<< 
ADC_CGR_GAIN15_Pos
)))

	)

442 
	#ADC_COR_OFF0
 (0x1u << 0Ë

	)

443 
	#ADC_COR_OFF1
 (0x1u << 1Ë

	)

444 
	#ADC_COR_OFF2
 (0x1u << 2Ë

	)

445 
	#ADC_COR_OFF3
 (0x1u << 3Ë

	)

446 
	#ADC_COR_OFF4
 (0x1u << 4Ë

	)

447 
	#ADC_COR_OFF5
 (0x1u << 5Ë

	)

448 
	#ADC_COR_OFF6
 (0x1u << 6Ë

	)

449 
	#ADC_COR_OFF7
 (0x1u << 7Ë

	)

450 
	#ADC_COR_OFF8
 (0x1u << 8Ë

	)

451 
	#ADC_COR_OFF9
 (0x1u << 9Ë

	)

452 
	#ADC_COR_OFF10
 (0x1u << 10Ë

	)

453 
	#ADC_COR_OFF11
 (0x1u << 11Ë

	)

454 
	#ADC_COR_OFF12
 (0x1u << 12Ë

	)

455 
	#ADC_COR_OFF13
 (0x1u << 13Ë

	)

456 
	#ADC_COR_OFF14
 (0x1u << 14Ë

	)

457 
	#ADC_COR_OFF15
 (0x1u << 15Ë

	)

458 
	#ADC_COR_DIFF0
 (0x1u << 16Ë

	)

459 
	#ADC_COR_DIFF1
 (0x1u << 17Ë

	)

460 
	#ADC_COR_DIFF2
 (0x1u << 18Ë

	)

461 
	#ADC_COR_DIFF3
 (0x1u << 19Ë

	)

462 
	#ADC_COR_DIFF4
 (0x1u << 20Ë

	)

463 
	#ADC_COR_DIFF5
 (0x1u << 21Ë

	)

464 
	#ADC_COR_DIFF6
 (0x1u << 22Ë

	)

465 
	#ADC_COR_DIFF7
 (0x1u << 23Ë

	)

466 
	#ADC_COR_DIFF8
 (0x1u << 24Ë

	)

467 
	#ADC_COR_DIFF9
 (0x1u << 25Ë

	)

468 
	#ADC_COR_DIFF10
 (0x1u << 26Ë

	)

469 
	#ADC_COR_DIFF11
 (0x1u << 27Ë

	)

470 
	#ADC_COR_DIFF12
 (0x1u << 28Ë

	)

471 
	#ADC_COR_DIFF13
 (0x1u << 29Ë

	)

472 
	#ADC_COR_DIFF14
 (0x1u << 30Ë

	)

473 
	#ADC_COR_DIFF15
 (0x1u << 31Ë

	)

475 
	#ADC_CDR_DATA_Pos
 0

	)

476 
	#ADC_CDR_DATA_Msk
 (0xfffu << 
ADC_CDR_DATA_Pos
Ë

	)

478 
	#ADC_ACR_TSON
 (0x1u << 4Ë

	)

479 
	#ADC_ACR_IBCTL_Pos
 8

	)

480 
	#ADC_ACR_IBCTL_Msk
 (0x3u << 
ADC_ACR_IBCTL_Pos
Ë

	)

481 
	#ADC_ACR_IBCTL
(
vÆue
Ë((
ADC_ACR_IBCTL_Msk
 & ((vÆueË<< 
ADC_ACR_IBCTL_Pos
)))

	)

483 
	#ADC_WPMR_WPEN
 (0x1u << 0Ë

	)

484 
	#ADC_WPMR_WPKEY_Pos
 8

	)

485 
	#ADC_WPMR_WPKEY_Msk
 (0xffffffu << 
ADC_WPMR_WPKEY_Pos
Ë

	)

486 
	#ADC_WPMR_WPKEY
(
vÆue
Ë((
ADC_WPMR_WPKEY_Msk
 & ((vÆueË<< 
ADC_WPMR_WPKEY_Pos
)))

	)

488 
	#ADC_WPSR_WPVS
 (0x1u << 0Ë

	)

489 
	#ADC_WPSR_WPVSRC_Pos
 8

	)

490 
	#ADC_WPSR_WPVSRC_Msk
 (0xffffu << 
ADC_WPSR_WPVSRC_Pos
Ë

	)

492 
	#ADC_RPR_RXPTR_Pos
 0

	)

493 
	#ADC_RPR_RXPTR_Msk
 (0xffffffffu << 
ADC_RPR_RXPTR_Pos
Ë

	)

494 
	#ADC_RPR_RXPTR
(
vÆue
Ë((
ADC_RPR_RXPTR_Msk
 & ((vÆueË<< 
ADC_RPR_RXPTR_Pos
)))

	)

496 
	#ADC_RCR_RXCTR_Pos
 0

	)

497 
	#ADC_RCR_RXCTR_Msk
 (0xffffu << 
ADC_RCR_RXCTR_Pos
Ë

	)

498 
	#ADC_RCR_RXCTR
(
vÆue
Ë((
ADC_RCR_RXCTR_Msk
 & ((vÆueË<< 
ADC_RCR_RXCTR_Pos
)))

	)

500 
	#ADC_RNPR_RXNPTR_Pos
 0

	)

501 
	#ADC_RNPR_RXNPTR_Msk
 (0xffffffffu << 
ADC_RNPR_RXNPTR_Pos
Ë

	)

502 
	#ADC_RNPR_RXNPTR
(
vÆue
Ë((
ADC_RNPR_RXNPTR_Msk
 & ((vÆueË<< 
ADC_RNPR_RXNPTR_Pos
)))

	)

504 
	#ADC_RNCR_RXNCTR_Pos
 0

	)

505 
	#ADC_RNCR_RXNCTR_Msk
 (0xffffu << 
ADC_RNCR_RXNCTR_Pos
Ë

	)

506 
	#ADC_RNCR_RXNCTR
(
vÆue
Ë((
ADC_RNCR_RXNCTR_Msk
 & ((vÆueË<< 
ADC_RNCR_RXNCTR_Pos
)))

	)

508 
	#ADC_PTCR_RXTEN
 (0x1u << 0Ë

	)

509 
	#ADC_PTCR_RXTDIS
 (0x1u << 1Ë

	)

510 
	#ADC_PTCR_TXTEN
 (0x1u << 8Ë

	)

511 
	#ADC_PTCR_TXTDIS
 (0x1u << 9Ë

	)

513 
	#ADC_PTSR_RXTEN
 (0x1u << 0Ë

	)

514 
	#ADC_PTSR_TXTEN
 (0x1u << 8Ë

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_can.h

45 #i‚de‡
_SAM3XA_CAN_COMPONENT_


46 
	#_SAM3XA_CAN_COMPONENT_


	)

54 #i‡!(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

57 
RwReg
 
	mCAN_MMR
;

58 
RwReg
 
	mCAN_MAM
;

59 
RwReg
 
	mCAN_MID
;

60 
RwReg
 
	mCAN_MFID
;

61 
RwReg
 
	mCAN_MSR
;

62 
RwReg
 
	mCAN_MDL
;

63 
RwReg
 
	mCAN_MDH
;

64 
RwReg
 
	mCAN_MCR
;

65 } 
	tC™Mb
;

67 
	#CANMB_NUMBER
 8

	)

69 
RwReg
 
	mCAN_MR
;

70 
WoReg
 
	mCAN_IER
;

71 
WoReg
 
	mCAN_IDR
;

72 
RoReg
 
	mCAN_IMR
;

73 
RoReg
 
	mCAN_SR
;

74 
RwReg
 
	mCAN_BR
;

75 
RoReg
 
	mCAN_TIM
;

76 
RoReg
 
	mCAN_TIMESTP
;

77 
RoReg
 
	mCAN_ECR
;

78 
WoReg
 
	mCAN_TCR
;

79 
WoReg
 
	mCAN_ACR
;

80 
RoReg
 
	mRe£rved1
[46];

81 
RwReg
 
	mCAN_WPMR
;

82 
RoReg
 
	mCAN_WPSR
;

83 
RoReg
 
	mRe£rved2
[69];

84 
C™Mb
 
	mCAN_MB
[
CANMB_NUMBER
];

85 } 
	tC™
;

88 
	#CAN_MR_CANEN
 (0x1u << 0Ë

	)

89 
	#CAN_MR_LPM
 (0x1u << 1Ë

	)

90 
	#CAN_MR_ABM
 (0x1u << 2Ë

	)

91 
	#CAN_MR_OVL
 (0x1u << 3Ë

	)

92 
	#CAN_MR_TEOF
 (0x1u << 4Ë

	)

93 
	#CAN_MR_TTM
 (0x1u << 5Ë

	)

94 
	#CAN_MR_TIMFRZ
 (0x1u << 6Ë

	)

95 
	#CAN_MR_DRPT
 (0x1u << 7Ë

	)

96 
	#CAN_MR_RXSYNC_Pos
 24

	)

97 
	#CAN_MR_RXSYNC_Msk
 (0x7u << 
CAN_MR_RXSYNC_Pos
Ë

	)

98 
	#CAN_MR_RXSYNC_DOUBLE_PP
 (0x0u << 24Ë

	)

99 
	#CAN_MR_RXSYNC_DOUBLE_PN
 (0x1u << 24Ë

	)

100 
	#CAN_MR_RXSYNC_SINGLE_P
 (0x2u << 24Ë

	)

101 
	#CAN_MR_RXSYNC_NONE
 (0x3u << 24Ë

	)

103 
	#CAN_IER_MB0
 (0x1u << 0Ë

	)

104 
	#CAN_IER_MB1
 (0x1u << 1Ë

	)

105 
	#CAN_IER_MB2
 (0x1u << 2Ë

	)

106 
	#CAN_IER_MB3
 (0x1u << 3Ë

	)

107 
	#CAN_IER_MB4
 (0x1u << 4Ë

	)

108 
	#CAN_IER_MB5
 (0x1u << 5Ë

	)

109 
	#CAN_IER_MB6
 (0x1u << 6Ë

	)

110 
	#CAN_IER_MB7
 (0x1u << 7Ë

	)

111 
	#CAN_IER_ERRA
 (0x1u << 16Ë

	)

112 
	#CAN_IER_WARN
 (0x1u << 17Ë

	)

113 
	#CAN_IER_ERRP
 (0x1u << 18Ë

	)

114 
	#CAN_IER_BOFF
 (0x1u << 19Ë

	)

115 
	#CAN_IER_SLEEP
 (0x1u << 20Ë

	)

116 
	#CAN_IER_WAKEUP
 (0x1u << 21Ë

	)

117 
	#CAN_IER_TOVF
 (0x1u << 22Ë

	)

118 
	#CAN_IER_TSTP
 (0x1u << 23Ë

	)

119 
	#CAN_IER_CERR
 (0x1u << 24Ë

	)

120 
	#CAN_IER_SERR
 (0x1u << 25Ë

	)

121 
	#CAN_IER_AERR
 (0x1u << 26Ë

	)

122 
	#CAN_IER_FERR
 (0x1u << 27Ë

	)

123 
	#CAN_IER_BERR
 (0x1u << 28Ë

	)

125 
	#CAN_IDR_MB0
 (0x1u << 0Ë

	)

126 
	#CAN_IDR_MB1
 (0x1u << 1Ë

	)

127 
	#CAN_IDR_MB2
 (0x1u << 2Ë

	)

128 
	#CAN_IDR_MB3
 (0x1u << 3Ë

	)

129 
	#CAN_IDR_MB4
 (0x1u << 4Ë

	)

130 
	#CAN_IDR_MB5
 (0x1u << 5Ë

	)

131 
	#CAN_IDR_MB6
 (0x1u << 6Ë

	)

132 
	#CAN_IDR_MB7
 (0x1u << 7Ë

	)

133 
	#CAN_IDR_ERRA
 (0x1u << 16Ë

	)

134 
	#CAN_IDR_WARN
 (0x1u << 17Ë

	)

135 
	#CAN_IDR_ERRP
 (0x1u << 18Ë

	)

136 
	#CAN_IDR_BOFF
 (0x1u << 19Ë

	)

137 
	#CAN_IDR_SLEEP
 (0x1u << 20Ë

	)

138 
	#CAN_IDR_WAKEUP
 (0x1u << 21Ë

	)

139 
	#CAN_IDR_TOVF
 (0x1u << 22Ë

	)

140 
	#CAN_IDR_TSTP
 (0x1u << 23Ë

	)

141 
	#CAN_IDR_CERR
 (0x1u << 24Ë

	)

142 
	#CAN_IDR_SERR
 (0x1u << 25Ë

	)

143 
	#CAN_IDR_AERR
 (0x1u << 26Ë

	)

144 
	#CAN_IDR_FERR
 (0x1u << 27Ë

	)

145 
	#CAN_IDR_BERR
 (0x1u << 28Ë

	)

147 
	#CAN_IMR_MB0
 (0x1u << 0Ë

	)

148 
	#CAN_IMR_MB1
 (0x1u << 1Ë

	)

149 
	#CAN_IMR_MB2
 (0x1u << 2Ë

	)

150 
	#CAN_IMR_MB3
 (0x1u << 3Ë

	)

151 
	#CAN_IMR_MB4
 (0x1u << 4Ë

	)

152 
	#CAN_IMR_MB5
 (0x1u << 5Ë

	)

153 
	#CAN_IMR_MB6
 (0x1u << 6Ë

	)

154 
	#CAN_IMR_MB7
 (0x1u << 7Ë

	)

155 
	#CAN_IMR_ERRA
 (0x1u << 16Ë

	)

156 
	#CAN_IMR_WARN
 (0x1u << 17Ë

	)

157 
	#CAN_IMR_ERRP
 (0x1u << 18Ë

	)

158 
	#CAN_IMR_BOFF
 (0x1u << 19Ë

	)

159 
	#CAN_IMR_SLEEP
 (0x1u << 20Ë

	)

160 
	#CAN_IMR_WAKEUP
 (0x1u << 21Ë

	)

161 
	#CAN_IMR_TOVF
 (0x1u << 22Ë

	)

162 
	#CAN_IMR_TSTP
 (0x1u << 23Ë

	)

163 
	#CAN_IMR_CERR
 (0x1u << 24Ë

	)

164 
	#CAN_IMR_SERR
 (0x1u << 25Ë

	)

165 
	#CAN_IMR_AERR
 (0x1u << 26Ë

	)

166 
	#CAN_IMR_FERR
 (0x1u << 27Ë

	)

167 
	#CAN_IMR_BERR
 (0x1u << 28Ë

	)

169 
	#CAN_SR_MB0
 (0x1u << 0Ë

	)

170 
	#CAN_SR_MB1
 (0x1u << 1Ë

	)

171 
	#CAN_SR_MB2
 (0x1u << 2Ë

	)

172 
	#CAN_SR_MB3
 (0x1u << 3Ë

	)

173 
	#CAN_SR_MB4
 (0x1u << 4Ë

	)

174 
	#CAN_SR_MB5
 (0x1u << 5Ë

	)

175 
	#CAN_SR_MB6
 (0x1u << 6Ë

	)

176 
	#CAN_SR_MB7
 (0x1u << 7Ë

	)

177 
	#CAN_SR_ERRA
 (0x1u << 16Ë

	)

178 
	#CAN_SR_WARN
 (0x1u << 17Ë

	)

179 
	#CAN_SR_ERRP
 (0x1u << 18Ë

	)

180 
	#CAN_SR_BOFF
 (0x1u << 19Ë

	)

181 
	#CAN_SR_SLEEP
 (0x1u << 20Ë

	)

182 
	#CAN_SR_WAKEUP
 (0x1u << 21Ë

	)

183 
	#CAN_SR_TOVF
 (0x1u << 22Ë

	)

184 
	#CAN_SR_TSTP
 (0x1u << 23Ë

	)

185 
	#CAN_SR_CERR
 (0x1u << 24Ë

	)

186 
	#CAN_SR_SERR
 (0x1u << 25Ë

	)

187 
	#CAN_SR_AERR
 (0x1u << 26Ë

	)

188 
	#CAN_SR_FERR
 (0x1u << 27Ë

	)

189 
	#CAN_SR_BERR
 (0x1u << 28Ë

	)

190 
	#CAN_SR_RBSY
 (0x1u << 29Ë

	)

191 
	#CAN_SR_TBSY
 (0x1u << 30Ë

	)

192 
	#CAN_SR_OVLSY
 (0x1u << 31Ë

	)

194 
	#CAN_BR_PHASE2_Pos
 0

	)

195 
	#CAN_BR_PHASE2_Msk
 (0x7u << 
CAN_BR_PHASE2_Pos
Ë

	)

196 
	#CAN_BR_PHASE2
(
vÆue
Ë((
CAN_BR_PHASE2_Msk
 & ((vÆueË<< 
CAN_BR_PHASE2_Pos
)))

	)

197 
	#CAN_BR_PHASE1_Pos
 4

	)

198 
	#CAN_BR_PHASE1_Msk
 (0x7u << 
CAN_BR_PHASE1_Pos
Ë

	)

199 
	#CAN_BR_PHASE1
(
vÆue
Ë((
CAN_BR_PHASE1_Msk
 & ((vÆueË<< 
CAN_BR_PHASE1_Pos
)))

	)

200 
	#CAN_BR_PROPAG_Pos
 8

	)

201 
	#CAN_BR_PROPAG_Msk
 (0x7u << 
CAN_BR_PROPAG_Pos
Ë

	)

202 
	#CAN_BR_PROPAG
(
vÆue
Ë((
CAN_BR_PROPAG_Msk
 & ((vÆueË<< 
CAN_BR_PROPAG_Pos
)))

	)

203 
	#CAN_BR_SJW_Pos
 12

	)

204 
	#CAN_BR_SJW_Msk
 (0x3u << 
CAN_BR_SJW_Pos
Ë

	)

205 
	#CAN_BR_SJW
(
vÆue
Ë((
CAN_BR_SJW_Msk
 & ((vÆueË<< 
CAN_BR_SJW_Pos
)))

	)

206 
	#CAN_BR_BRP_Pos
 16

	)

207 
	#CAN_BR_BRP_Msk
 (0x7fu << 
CAN_BR_BRP_Pos
Ë

	)

208 
	#CAN_BR_BRP
(
vÆue
Ë((
CAN_BR_BRP_Msk
 & ((vÆueË<< 
CAN_BR_BRP_Pos
)))

	)

209 
	#CAN_BR_SMP
 (0x1u << 24Ë

	)

210 
	#CAN_BR_SMP_ONCE
 (0x0u << 24Ë

	)

211 
	#CAN_BR_SMP_THREE
 (0x1u << 24Ë

	)

213 
	#CAN_TIM_TIMER_Pos
 0

	)

214 
	#CAN_TIM_TIMER_Msk
 (0xffffu << 
CAN_TIM_TIMER_Pos
Ë

	)

216 
	#CAN_TIMESTP_MTIMESTAMP_Pos
 0

	)

217 
	#CAN_TIMESTP_MTIMESTAMP_Msk
 (0xffffu << 
CAN_TIMESTP_MTIMESTAMP_Pos
Ë

	)

219 
	#CAN_ECR_REC_Pos
 0

	)

220 
	#CAN_ECR_REC_Msk
 (0xffu << 
CAN_ECR_REC_Pos
Ë

	)

221 
	#CAN_ECR_TEC_Pos
 16

	)

222 
	#CAN_ECR_TEC_Msk
 (0xffu << 
CAN_ECR_TEC_Pos
Ë

	)

224 
	#CAN_TCR_MB0
 (0x1u << 0Ë

	)

225 
	#CAN_TCR_MB1
 (0x1u << 1Ë

	)

226 
	#CAN_TCR_MB2
 (0x1u << 2Ë

	)

227 
	#CAN_TCR_MB3
 (0x1u << 3Ë

	)

228 
	#CAN_TCR_MB4
 (0x1u << 4Ë

	)

229 
	#CAN_TCR_MB5
 (0x1u << 5Ë

	)

230 
	#CAN_TCR_MB6
 (0x1u << 6Ë

	)

231 
	#CAN_TCR_MB7
 (0x1u << 7Ë

	)

232 
	#CAN_TCR_TIMRST
 (0x1u << 31Ë

	)

234 
	#CAN_ACR_MB0
 (0x1u << 0Ë

	)

235 
	#CAN_ACR_MB1
 (0x1u << 1Ë

	)

236 
	#CAN_ACR_MB2
 (0x1u << 2Ë

	)

237 
	#CAN_ACR_MB3
 (0x1u << 3Ë

	)

238 
	#CAN_ACR_MB4
 (0x1u << 4Ë

	)

239 
	#CAN_ACR_MB5
 (0x1u << 5Ë

	)

240 
	#CAN_ACR_MB6
 (0x1u << 6Ë

	)

241 
	#CAN_ACR_MB7
 (0x1u << 7Ë

	)

243 
	#CAN_WPMR_WPEN
 (0x1u << 0Ë

	)

244 
	#CAN_WPMR_WPKEY_Pos
 8

	)

245 
	#CAN_WPMR_WPKEY_Msk
 (0xffffffu << 
CAN_WPMR_WPKEY_Pos
Ë

	)

246 
	#CAN_WPMR_WPKEY
(
vÆue
Ë((
CAN_WPMR_WPKEY_Msk
 & ((vÆueË<< 
CAN_WPMR_WPKEY_Pos
)))

	)

248 
	#CAN_WPSR_WPVS
 (0x1u << 0Ë

	)

249 
	#CAN_WPSR_WPVSRC_Pos
 8

	)

250 
	#CAN_WPSR_WPVSRC_Msk
 (0xffu << 
CAN_WPSR_WPVSRC_Pos
Ë

	)

252 
	#CAN_MMR_MTIMEMARK_Pos
 0

	)

253 
	#CAN_MMR_MTIMEMARK_Msk
 (0xffffu << 
CAN_MMR_MTIMEMARK_Pos
Ë

	)

254 
	#CAN_MMR_MTIMEMARK
(
vÆue
Ë((
CAN_MMR_MTIMEMARK_Msk
 & ((vÆueË<< 
CAN_MMR_MTIMEMARK_Pos
)))

	)

255 
	#CAN_MMR_PRIOR_Pos
 16

	)

256 
	#CAN_MMR_PRIOR_Msk
 (0xfu << 
CAN_MMR_PRIOR_Pos
Ë

	)

257 
	#CAN_MMR_PRIOR
(
vÆue
Ë((
CAN_MMR_PRIOR_Msk
 & ((vÆueË<< 
CAN_MMR_PRIOR_Pos
)))

	)

258 
	#CAN_MMR_MOT_Pos
 24

	)

259 
	#CAN_MMR_MOT_Msk
 (0x7u << 
CAN_MMR_MOT_Pos
Ë

	)

260 
	#CAN_MMR_MOT_MB_DISABLED
 (0x0u << 24Ë

	)

261 
	#CAN_MMR_MOT_MB_RX
 (0x1u << 24Ë

	)

262 
	#CAN_MMR_MOT_MB_RX_OVERWRITE
 (0x2u << 24Ë

	)

263 
	#CAN_MMR_MOT_MB_TX
 (0x3u << 24Ë

	)

264 
	#CAN_MMR_MOT_MB_CONSUMER
 (0x4u << 24Ë

	)

265 
	#CAN_MMR_MOT_MB_PRODUCER
 (0x5u << 24Ë

	)

267 
	#CAN_MAM_MIDvB_Pos
 0

	)

268 
	#CAN_MAM_MIDvB_Msk
 (0x3ffffu << 
CAN_MAM_MIDvB_Pos
Ë

	)

269 
	#CAN_MAM_MIDvB
(
vÆue
Ë((
CAN_MAM_MIDvB_Msk
 & ((vÆueË<< 
CAN_MAM_MIDvB_Pos
)))

	)

270 
	#CAN_MAM_MIDvA_Pos
 18

	)

271 
	#CAN_MAM_MIDvA_Msk
 (0x7ffu << 
CAN_MAM_MIDvA_Pos
Ë

	)

272 
	#CAN_MAM_MIDvA
(
vÆue
Ë((
CAN_MAM_MIDvA_Msk
 & ((vÆueË<< 
CAN_MAM_MIDvA_Pos
)))

	)

273 
	#CAN_MAM_MIDE
 (0x1u << 29Ë

	)

275 
	#CAN_MID_MIDvB_Pos
 0

	)

276 
	#CAN_MID_MIDvB_Msk
 (0x3ffffu << 
CAN_MID_MIDvB_Pos
Ë

	)

277 
	#CAN_MID_MIDvB
(
vÆue
Ë((
CAN_MID_MIDvB_Msk
 & ((vÆueË<< 
CAN_MID_MIDvB_Pos
)))

	)

278 
	#CAN_MID_MIDvA_Pos
 18

	)

279 
	#CAN_MID_MIDvA_Msk
 (0x7ffu << 
CAN_MID_MIDvA_Pos
Ë

	)

280 
	#CAN_MID_MIDvA
(
vÆue
Ë((
CAN_MID_MIDvA_Msk
 & ((vÆueË<< 
CAN_MID_MIDvA_Pos
)))

	)

281 
	#CAN_MID_MIDE
 (0x1u << 29Ë

	)

283 
	#CAN_MFID_MFID_Pos
 0

	)

284 
	#CAN_MFID_MFID_Msk
 (0x1fffffffu << 
CAN_MFID_MFID_Pos
Ë

	)

286 
	#CAN_MSR_MTIMESTAMP_Pos
 0

	)

287 
	#CAN_MSR_MTIMESTAMP_Msk
 (0xffffu << 
CAN_MSR_MTIMESTAMP_Pos
Ë

	)

288 
	#CAN_MSR_MDLC_Pos
 16

	)

289 
	#CAN_MSR_MDLC_Msk
 (0xfu << 
CAN_MSR_MDLC_Pos
Ë

	)

290 
	#CAN_MSR_MRTR
 (0x1u << 20Ë

	)

291 
	#CAN_MSR_MABT
 (0x1u << 22Ë

	)

292 
	#CAN_MSR_MRDY
 (0x1u << 23Ë

	)

293 
	#CAN_MSR_MMI
 (0x1u << 24Ë

	)

295 
	#CAN_MDL_MDL_Pos
 0

	)

296 
	#CAN_MDL_MDL_Msk
 (0xffffffffu << 
CAN_MDL_MDL_Pos
Ë

	)

297 
	#CAN_MDL_MDL
(
vÆue
Ë((
CAN_MDL_MDL_Msk
 & ((vÆueË<< 
CAN_MDL_MDL_Pos
)))

	)

299 
	#CAN_MDH_MDH_Pos
 0

	)

300 
	#CAN_MDH_MDH_Msk
 (0xffffffffu << 
CAN_MDH_MDH_Pos
Ë

	)

301 
	#CAN_MDH_MDH
(
vÆue
Ë((
CAN_MDH_MDH_Msk
 & ((vÆueË<< 
CAN_MDH_MDH_Pos
)))

	)

303 
	#CAN_MCR_MDLC_Pos
 16

	)

304 
	#CAN_MCR_MDLC_Msk
 (0xfu << 
CAN_MCR_MDLC_Pos
Ë

	)

305 
	#CAN_MCR_MDLC
(
vÆue
Ë((
CAN_MCR_MDLC_Msk
 & ((vÆueË<< 
CAN_MCR_MDLC_Pos
)))

	)

306 
	#CAN_MCR_MRTR
 (0x1u << 20Ë

	)

307 
	#CAN_MCR_MACR
 (0x1u << 22Ë

	)

308 
	#CAN_MCR_MTCR
 (0x1u << 23Ë

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_chipid.h

45 #i‚de‡
_SAM3XA_CHIPID_COMPONENT_


46 
	#_SAM3XA_CHIPID_COMPONENT_


	)

54 #i‡!(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

57 
RoReg
 
	mCHIPID_CIDR
;

58 
RoReg
 
	mCHIPID_EXID
;

59 } 
	tChùid
;

62 
	#CHIPID_CIDR_VERSION_Pos
 0

	)

63 
	#CHIPID_CIDR_VERSION_Msk
 (0x1fu << 
CHIPID_CIDR_VERSION_Pos
Ë

	)

64 
	#CHIPID_CIDR_EPROC_Pos
 5

	)

65 
	#CHIPID_CIDR_EPROC_Msk
 (0x7u << 
CHIPID_CIDR_EPROC_Pos
Ë

	)

66 
	#CHIPID_CIDR_EPROC_ARM946ES
 (0x1u << 5Ë

	)

67 
	#CHIPID_CIDR_EPROC_ARM7TDMI
 (0x2u << 5Ë

	)

68 
	#CHIPID_CIDR_EPROC_CM3
 (0x3u << 5Ë

	)

69 
	#CHIPID_CIDR_EPROC_ARM920T
 (0x4u << 5Ë

	)

70 
	#CHIPID_CIDR_EPROC_ARM926EJS
 (0x5u << 5Ë

	)

71 
	#CHIPID_CIDR_EPROC_CA5
 (0x6u << 5Ë

	)

72 
	#CHIPID_CIDR_EPROC_CM4
 (0x7u << 5Ë

	)

73 
	#CHIPID_CIDR_NVPSIZ_Pos
 8

	)

74 
	#CHIPID_CIDR_NVPSIZ_Msk
 (0xfu << 
CHIPID_CIDR_NVPSIZ_Pos
Ë

	)

75 
	#CHIPID_CIDR_NVPSIZ_NONE
 (0x0u << 8Ë

	)

76 
	#CHIPID_CIDR_NVPSIZ_8K
 (0x1u << 8Ë

	)

77 
	#CHIPID_CIDR_NVPSIZ_16K
 (0x2u << 8Ë

	)

78 
	#CHIPID_CIDR_NVPSIZ_32K
 (0x3u << 8Ë

	)

79 
	#CHIPID_CIDR_NVPSIZ_64K
 (0x5u << 8Ë

	)

80 
	#CHIPID_CIDR_NVPSIZ_128K
 (0x7u << 8Ë

	)

81 
	#CHIPID_CIDR_NVPSIZ_256K
 (0x9u << 8Ë

	)

82 
	#CHIPID_CIDR_NVPSIZ_512K
 (0xAu << 8Ë

	)

83 
	#CHIPID_CIDR_NVPSIZ_1024K
 (0xCu << 8Ë

	)

84 
	#CHIPID_CIDR_NVPSIZ_2048K
 (0xEu << 8Ë

	)

85 
	#CHIPID_CIDR_NVPSIZ2_Pos
 12

	)

86 
	#CHIPID_CIDR_NVPSIZ2_Msk
 (0xfu << 
CHIPID_CIDR_NVPSIZ2_Pos
Ë

	)

87 
	#CHIPID_CIDR_NVPSIZ2_NONE
 (0x0u << 12Ë

	)

88 
	#CHIPID_CIDR_NVPSIZ2_8K
 (0x1u << 12Ë

	)

89 
	#CHIPID_CIDR_NVPSIZ2_16K
 (0x2u << 12Ë

	)

90 
	#CHIPID_CIDR_NVPSIZ2_32K
 (0x3u << 12Ë

	)

91 
	#CHIPID_CIDR_NVPSIZ2_64K
 (0x5u << 12Ë

	)

92 
	#CHIPID_CIDR_NVPSIZ2_128K
 (0x7u << 12Ë

	)

93 
	#CHIPID_CIDR_NVPSIZ2_256K
 (0x9u << 12Ë

	)

94 
	#CHIPID_CIDR_NVPSIZ2_512K
 (0xAu << 12Ë

	)

95 
	#CHIPID_CIDR_NVPSIZ2_1024K
 (0xCu << 12Ë

	)

96 
	#CHIPID_CIDR_NVPSIZ2_2048K
 (0xEu << 12Ë

	)

97 
	#CHIPID_CIDR_SRAMSIZ_Pos
 16

	)

98 
	#CHIPID_CIDR_SRAMSIZ_Msk
 (0xfu << 
CHIPID_CIDR_SRAMSIZ_Pos
Ë

	)

99 
	#CHIPID_CIDR_SRAMSIZ_48K
 (0x0u << 16Ë

	)

100 
	#CHIPID_CIDR_SRAMSIZ_1K
 (0x1u << 16Ë

	)

101 
	#CHIPID_CIDR_SRAMSIZ_2K
 (0x2u << 16Ë

	)

102 
	#CHIPID_CIDR_SRAMSIZ_6K
 (0x3u << 16Ë

	)

103 
	#CHIPID_CIDR_SRAMSIZ_24K
 (0x4u << 16Ë

	)

104 
	#CHIPID_CIDR_SRAMSIZ_4K
 (0x5u << 16Ë

	)

105 
	#CHIPID_CIDR_SRAMSIZ_80K
 (0x6u << 16Ë

	)

106 
	#CHIPID_CIDR_SRAMSIZ_160K
 (0x7u << 16Ë

	)

107 
	#CHIPID_CIDR_SRAMSIZ_8K
 (0x8u << 16Ë

	)

108 
	#CHIPID_CIDR_SRAMSIZ_16K
 (0x9u << 16Ë

	)

109 
	#CHIPID_CIDR_SRAMSIZ_32K
 (0xAu << 16Ë

	)

110 
	#CHIPID_CIDR_SRAMSIZ_64K
 (0xBu << 16Ë

	)

111 
	#CHIPID_CIDR_SRAMSIZ_128K
 (0xCu << 16Ë

	)

112 
	#CHIPID_CIDR_SRAMSIZ_256K
 (0xDu << 16Ë

	)

113 
	#CHIPID_CIDR_SRAMSIZ_96K
 (0xEu << 16Ë

	)

114 
	#CHIPID_CIDR_SRAMSIZ_512K
 (0xFu << 16Ë

	)

115 
	#CHIPID_CIDR_ARCH_Pos
 20

	)

116 
	#CHIPID_CIDR_ARCH_Msk
 (0xffu << 
CHIPID_CIDR_ARCH_Pos
Ë

	)

117 
	#CHIPID_CIDR_ARCH_AT91SAM9xx
 (0x19u << 20Ë

	)

118 
	#CHIPID_CIDR_ARCH_AT91SAM9XExx
 (0x29u << 20Ë

	)

119 
	#CHIPID_CIDR_ARCH_AT91x34
 (0x34u << 20Ë

	)

120 
	#CHIPID_CIDR_ARCH_CAP7
 (0x37u << 20Ë

	)

121 
	#CHIPID_CIDR_ARCH_CAP9
 (0x39u << 20Ë

	)

122 
	#CHIPID_CIDR_ARCH_CAP11
 (0x3Bu << 20Ë

	)

123 
	#CHIPID_CIDR_ARCH_AT91x40
 (0x40u << 20Ë

	)

124 
	#CHIPID_CIDR_ARCH_AT91x42
 (0x42u << 20Ë

	)

125 
	#CHIPID_CIDR_ARCH_AT91x55
 (0x55u << 20Ë

	)

126 
	#CHIPID_CIDR_ARCH_AT91SAM7Axx
 (0x60u << 20Ë

	)

127 
	#CHIPID_CIDR_ARCH_AT91SAM7AQxx
 (0x61u << 20Ë

	)

128 
	#CHIPID_CIDR_ARCH_AT91x63
 (0x63u << 20Ë

	)

129 
	#CHIPID_CIDR_ARCH_AT91SAM7Sxx
 (0x70u << 20Ë

	)

130 
	#CHIPID_CIDR_ARCH_AT91SAM7XCxx
 (0x71u << 20Ë

	)

131 
	#CHIPID_CIDR_ARCH_AT91SAM7SExx
 (0x72u << 20Ë

	)

132 
	#CHIPID_CIDR_ARCH_AT91SAM7Lxx
 (0x73u << 20Ë

	)

133 
	#CHIPID_CIDR_ARCH_AT91SAM7Xxx
 (0x75u << 20Ë

	)

134 
	#CHIPID_CIDR_ARCH_AT91SAM7SLxx
 (0x76u << 20Ë

	)

135 
	#CHIPID_CIDR_ARCH_SAM3UxC
 (0x80u << 20Ë

	)

136 
	#CHIPID_CIDR_ARCH_SAM3UxE
 (0x81u << 20Ë

	)

137 
	#CHIPID_CIDR_ARCH_SAM3AxC
 (0x83u << 20Ë

	)

138 
	#CHIPID_CIDR_ARCH_SAM4AxC
 (0x83u << 20Ë

	)

139 
	#CHIPID_CIDR_ARCH_SAM3XxC
 (0x84u << 20Ë

	)

140 
	#CHIPID_CIDR_ARCH_SAM4XxC
 (0x84u << 20Ë

	)

141 
	#CHIPID_CIDR_ARCH_SAM3XxE
 (0x85u << 20Ë

	)

142 
	#CHIPID_CIDR_ARCH_SAM4XxE
 (0x85u << 20Ë

	)

143 
	#CHIPID_CIDR_ARCH_SAM3XxG
 (0x86u << 20Ë

	)

144 
	#CHIPID_CIDR_ARCH_SAM4XxG
 (0x86u << 20Ë

	)

145 
	#CHIPID_CIDR_ARCH_SAM3SxA
 (0x88u << 20Ë

	)

146 
	#CHIPID_CIDR_ARCH_SAM4SxA
 (0x88u << 20Ë

	)

147 
	#CHIPID_CIDR_ARCH_SAM3SxB
 (0x89u << 20Ë

	)

148 
	#CHIPID_CIDR_ARCH_SAM4SxB
 (0x89u << 20Ë

	)

149 
	#CHIPID_CIDR_ARCH_SAM3SxC
 (0x8Au << 20Ë

	)

150 
	#CHIPID_CIDR_ARCH_SAM4SxC
 (0x8Au << 20Ë

	)

151 
	#CHIPID_CIDR_ARCH_AT91x92
 (0x92u << 20Ë

	)

152 
	#CHIPID_CIDR_ARCH_SAM3NxA
 (0x93u << 20Ë

	)

153 
	#CHIPID_CIDR_ARCH_SAM3NxB
 (0x94u << 20Ë

	)

154 
	#CHIPID_CIDR_ARCH_SAM3NxC
 (0x95u << 20Ë

	)

155 
	#CHIPID_CIDR_ARCH_SAM3SDxB
 (0x99u << 20Ë

	)

156 
	#CHIPID_CIDR_ARCH_SAM3SDxC
 (0x9Au << 20Ë

	)

157 
	#CHIPID_CIDR_ARCH_SAM5A
 (0xA5u << 20Ë

	)

158 
	#CHIPID_CIDR_ARCH_AT75Cxx
 (0xF0u << 20Ë

	)

159 
	#CHIPID_CIDR_NVPTYP_Pos
 28

	)

160 
	#CHIPID_CIDR_NVPTYP_Msk
 (0x7u << 
CHIPID_CIDR_NVPTYP_Pos
Ë

	)

161 
	#CHIPID_CIDR_NVPTYP_ROM
 (0x0u << 28Ë

	)

162 
	#CHIPID_CIDR_NVPTYP_ROMLESS
 (0x1u << 28Ë

	)

163 
	#CHIPID_CIDR_NVPTYP_FLASH
 (0x2u << 28Ë

	)

164 
	#CHIPID_CIDR_NVPTYP_ROM_FLASH
 (0x3u << 28Ë

	)

165 
	#CHIPID_CIDR_NVPTYP_SRAM
 (0x4u << 28Ë

	)

166 
	#CHIPID_CIDR_EXT
 (0x1u << 31Ë

	)

168 
	#CHIPID_EXID_EXID_Pos
 0

	)

169 
	#CHIPID_EXID_EXID_Msk
 (0xffffffffu << 
CHIPID_EXID_EXID_Pos
Ë

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_dacc.h

45 #i‚de‡
_SAM3XA_DACC_COMPONENT_


46 
	#_SAM3XA_DACC_COMPONENT_


	)

54 #i‡!(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

57 
WoReg
 
	mDACC_CR
;

58 
RwReg
 
	mDACC_MR
;

59 
RoReg
 
	mRe£rved1
[2];

60 
WoReg
 
	mDACC_CHER
;

61 
WoReg
 
	mDACC_CHDR
;

62 
RoReg
 
	mDACC_CHSR
;

63 
RoReg
 
	mRe£rved2
[1];

64 
WoReg
 
	mDACC_CDR
;

65 
WoReg
 
	mDACC_IER
;

66 
WoReg
 
	mDACC_IDR
;

67 
RoReg
 
	mDACC_IMR
;

68 
RoReg
 
	mDACC_ISR
;

69 
RoReg
 
	mRe£rved3
[24];

70 
RwReg
 
	mDACC_ACR
;

71 
RoReg
 
	mRe£rved4
[19];

72 
RwReg
 
	mDACC_WPMR
;

73 
RoReg
 
	mDACC_WPSR
;

74 
RoReg
 
	mRe£rved5
[7];

75 
RwReg
 
	mDACC_TPR
;

76 
RwReg
 
	mDACC_TCR
;

77 
RoReg
 
	mRe£rved6
[2];

78 
RwReg
 
	mDACC_TNPR
;

79 
RwReg
 
	mDACC_TNCR
;

80 
WoReg
 
	mDACC_PTCR
;

81 
RoReg
 
	mDACC_PTSR
;

82 } 
	tDacc
;

85 
	#DACC_CR_SWRST
 (0x1u << 0Ë

	)

87 
	#DACC_MR_TRGEN
 (0x1u << 0Ë

	)

88 
	#DACC_MR_TRGEN_DIS
 (0x0u << 0Ë

	)

89 
	#DACC_MR_TRGEN_EN
 (0x1u << 0Ë

	)

90 
	#DACC_MR_TRGSEL_Pos
 1

	)

91 
	#DACC_MR_TRGSEL_Msk
 (0x7u << 
DACC_MR_TRGSEL_Pos
Ë

	)

92 
	#DACC_MR_TRGSEL
(
vÆue
Ë((
DACC_MR_TRGSEL_Msk
 & ((vÆueË<< 
DACC_MR_TRGSEL_Pos
)))

	)

93 
	#DACC_MR_WORD
 (0x1u << 4Ë

	)

94 
	#DACC_MR_WORD_HALF
 (0x0u << 4Ë

	)

95 
	#DACC_MR_WORD_WORD
 (0x1u << 4Ë

	)

96 
	#DACC_MR_SLEEP
 (0x1u << 5Ë

	)

97 
	#DACC_MR_FASTWKUP
 (0x1u << 6Ë

	)

98 
	#DACC_MR_REFRESH_Pos
 8

	)

99 
	#DACC_MR_REFRESH_Msk
 (0xffu << 
DACC_MR_REFRESH_Pos
Ë

	)

100 
	#DACC_MR_REFRESH
(
vÆue
Ë((
DACC_MR_REFRESH_Msk
 & ((vÆueË<< 
DACC_MR_REFRESH_Pos
)))

	)

101 
	#DACC_MR_USER_SEL_Pos
 16

	)

102 
	#DACC_MR_USER_SEL_Msk
 (0x3u << 
DACC_MR_USER_SEL_Pos
Ë

	)

103 
	#DACC_MR_USER_SEL_CHANNEL0
 (0x0u << 16Ë

	)

104 
	#DACC_MR_USER_SEL_CHANNEL1
 (0x1u << 16Ë

	)

105 
	#DACC_MR_TAG
 (0x1u << 20Ë

	)

106 
	#DACC_MR_TAG_DIS
 (0x0u << 20Ë

	)

107 
	#DACC_MR_TAG_EN
 (0x1u << 20Ë

	)

108 
	#DACC_MR_MAXS
 (0x1u << 21Ë

	)

109 
	#DACC_MR_MAXS_NORMAL
 (0x0u << 21Ë

	)

110 
	#DACC_MR_MAXS_MAXIMUM
 (0x1u << 21Ë

	)

111 
	#DACC_MR_STARTUP_Pos
 24

	)

112 
	#DACC_MR_STARTUP_Msk
 (0x3fu << 
DACC_MR_STARTUP_Pos
Ë

	)

113 
	#DACC_MR_STARTUP_0
 (0x0u << 24Ë

	)

114 
	#DACC_MR_STARTUP_8
 (0x1u << 24Ë

	)

115 
	#DACC_MR_STARTUP_16
 (0x2u << 24Ë

	)

116 
	#DACC_MR_STARTUP_24
 (0x3u << 24Ë

	)

117 
	#DACC_MR_STARTUP_64
 (0x4u << 24Ë

	)

118 
	#DACC_MR_STARTUP_80
 (0x5u << 24Ë

	)

119 
	#DACC_MR_STARTUP_96
 (0x6u << 24Ë

	)

120 
	#DACC_MR_STARTUP_112
 (0x7u << 24Ë

	)

121 
	#DACC_MR_STARTUP_512
 (0x8u << 24Ë

	)

122 
	#DACC_MR_STARTUP_576
 (0x9u << 24Ë

	)

123 
	#DACC_MR_STARTUP_640
 (0xAu << 24Ë

	)

124 
	#DACC_MR_STARTUP_704
 (0xBu << 24Ë

	)

125 
	#DACC_MR_STARTUP_768
 (0xCu << 24Ë

	)

126 
	#DACC_MR_STARTUP_832
 (0xDu << 24Ë

	)

127 
	#DACC_MR_STARTUP_896
 (0xEu << 24Ë

	)

128 
	#DACC_MR_STARTUP_960
 (0xFu << 24Ë

	)

129 
	#DACC_MR_STARTUP_1024
 (0x10u << 24Ë

	)

130 
	#DACC_MR_STARTUP_1088
 (0x11u << 24Ë

	)

131 
	#DACC_MR_STARTUP_1152
 (0x12u << 24Ë

	)

132 
	#DACC_MR_STARTUP_1216
 (0x13u << 24Ë

	)

133 
	#DACC_MR_STARTUP_1280
 (0x14u << 24Ë

	)

134 
	#DACC_MR_STARTUP_1344
 (0x15u << 24Ë

	)

135 
	#DACC_MR_STARTUP_1408
 (0x16u << 24Ë

	)

136 
	#DACC_MR_STARTUP_1472
 (0x17u << 24Ë

	)

137 
	#DACC_MR_STARTUP_1536
 (0x18u << 24Ë

	)

138 
	#DACC_MR_STARTUP_1600
 (0x19u << 24Ë

	)

139 
	#DACC_MR_STARTUP_1664
 (0x1Au << 24Ë

	)

140 
	#DACC_MR_STARTUP_1728
 (0x1Bu << 24Ë

	)

141 
	#DACC_MR_STARTUP_1792
 (0x1Cu << 24Ë

	)

142 
	#DACC_MR_STARTUP_1856
 (0x1Du << 24Ë

	)

143 
	#DACC_MR_STARTUP_1920
 (0x1Eu << 24Ë

	)

144 
	#DACC_MR_STARTUP_1984
 (0x1Fu << 24Ë

	)

146 
	#DACC_CHER_CH0
 (0x1u << 0Ë

	)

147 
	#DACC_CHER_CH1
 (0x1u << 1Ë

	)

149 
	#DACC_CHDR_CH0
 (0x1u << 0Ë

	)

150 
	#DACC_CHDR_CH1
 (0x1u << 1Ë

	)

152 
	#DACC_CHSR_CH0
 (0x1u << 0Ë

	)

153 
	#DACC_CHSR_CH1
 (0x1u << 1Ë

	)

155 
	#DACC_CDR_DATA_Pos
 0

	)

156 
	#DACC_CDR_DATA_Msk
 (0xffffffffu << 
DACC_CDR_DATA_Pos
Ë

	)

157 
	#DACC_CDR_DATA
(
vÆue
Ë((
DACC_CDR_DATA_Msk
 & ((vÆueË<< 
DACC_CDR_DATA_Pos
)))

	)

159 
	#DACC_IER_TXRDY
 (0x1u << 0Ë

	)

160 
	#DACC_IER_EOC
 (0x1u << 1Ë

	)

161 
	#DACC_IER_ENDTX
 (0x1u << 2Ë

	)

162 
	#DACC_IER_TXBUFE
 (0x1u << 3Ë

	)

164 
	#DACC_IDR_TXRDY
 (0x1u << 0Ë

	)

165 
	#DACC_IDR_EOC
 (0x1u << 1Ë

	)

166 
	#DACC_IDR_ENDTX
 (0x1u << 2Ë

	)

167 
	#DACC_IDR_TXBUFE
 (0x1u << 3Ë

	)

169 
	#DACC_IMR_TXRDY
 (0x1u << 0Ë

	)

170 
	#DACC_IMR_EOC
 (0x1u << 1Ë

	)

171 
	#DACC_IMR_ENDTX
 (0x1u << 2Ë

	)

172 
	#DACC_IMR_TXBUFE
 (0x1u << 3Ë

	)

174 
	#DACC_ISR_TXRDY
 (0x1u << 0Ë

	)

175 
	#DACC_ISR_EOC
 (0x1u << 1Ë

	)

176 
	#DACC_ISR_ENDTX
 (0x1u << 2Ë

	)

177 
	#DACC_ISR_TXBUFE
 (0x1u << 3Ë

	)

179 
	#DACC_ACR_IBCTLCH0_Pos
 0

	)

180 
	#DACC_ACR_IBCTLCH0_Msk
 (0x3u << 
DACC_ACR_IBCTLCH0_Pos
Ë

	)

181 
	#DACC_ACR_IBCTLCH0
(
vÆue
Ë((
DACC_ACR_IBCTLCH0_Msk
 & ((vÆueË<< 
DACC_ACR_IBCTLCH0_Pos
)))

	)

182 
	#DACC_ACR_IBCTLCH1_Pos
 2

	)

183 
	#DACC_ACR_IBCTLCH1_Msk
 (0x3u << 
DACC_ACR_IBCTLCH1_Pos
Ë

	)

184 
	#DACC_ACR_IBCTLCH1
(
vÆue
Ë((
DACC_ACR_IBCTLCH1_Msk
 & ((vÆueË<< 
DACC_ACR_IBCTLCH1_Pos
)))

	)

185 
	#DACC_ACR_IBCTLDACCORE_Pos
 8

	)

186 
	#DACC_ACR_IBCTLDACCORE_Msk
 (0x3u << 
DACC_ACR_IBCTLDACCORE_Pos
Ë

	)

187 
	#DACC_ACR_IBCTLDACCORE
(
vÆue
Ë((
DACC_ACR_IBCTLDACCORE_Msk
 & ((vÆueË<< 
DACC_ACR_IBCTLDACCORE_Pos
)))

	)

189 
	#DACC_WPMR_WPEN
 (0x1u << 0Ë

	)

190 
	#DACC_WPMR_WPKEY_Pos
 8

	)

191 
	#DACC_WPMR_WPKEY_Msk
 (0xffffffu << 
DACC_WPMR_WPKEY_Pos
Ë

	)

192 
	#DACC_WPMR_WPKEY
(
vÆue
Ë((
DACC_WPMR_WPKEY_Msk
 & ((vÆueË<< 
DACC_WPMR_WPKEY_Pos
)))

	)

194 
	#DACC_WPSR_WPROTERR
 (0x1u << 0Ë

	)

195 
	#DACC_WPSR_WPROTADDR_Pos
 8

	)

196 
	#DACC_WPSR_WPROTADDR_Msk
 (0xffu << 
DACC_WPSR_WPROTADDR_Pos
Ë

	)

198 
	#DACC_TPR_TXPTR_Pos
 0

	)

199 
	#DACC_TPR_TXPTR_Msk
 (0xffffffffu << 
DACC_TPR_TXPTR_Pos
Ë

	)

200 
	#DACC_TPR_TXPTR
(
vÆue
Ë((
DACC_TPR_TXPTR_Msk
 & ((vÆueË<< 
DACC_TPR_TXPTR_Pos
)))

	)

202 
	#DACC_TCR_TXCTR_Pos
 0

	)

203 
	#DACC_TCR_TXCTR_Msk
 (0xffffu << 
DACC_TCR_TXCTR_Pos
Ë

	)

204 
	#DACC_TCR_TXCTR
(
vÆue
Ë((
DACC_TCR_TXCTR_Msk
 & ((vÆueË<< 
DACC_TCR_TXCTR_Pos
)))

	)

206 
	#DACC_TNPR_TXNPTR_Pos
 0

	)

207 
	#DACC_TNPR_TXNPTR_Msk
 (0xffffffffu << 
DACC_TNPR_TXNPTR_Pos
Ë

	)

208 
	#DACC_TNPR_TXNPTR
(
vÆue
Ë((
DACC_TNPR_TXNPTR_Msk
 & ((vÆueË<< 
DACC_TNPR_TXNPTR_Pos
)))

	)

210 
	#DACC_TNCR_TXNCTR_Pos
 0

	)

211 
	#DACC_TNCR_TXNCTR_Msk
 (0xffffu << 
DACC_TNCR_TXNCTR_Pos
Ë

	)

212 
	#DACC_TNCR_TXNCTR
(
vÆue
Ë((
DACC_TNCR_TXNCTR_Msk
 & ((vÆueË<< 
DACC_TNCR_TXNCTR_Pos
)))

	)

214 
	#DACC_PTCR_RXTEN
 (0x1u << 0Ë

	)

215 
	#DACC_PTCR_RXTDIS
 (0x1u << 1Ë

	)

216 
	#DACC_PTCR_TXTEN
 (0x1u << 8Ë

	)

217 
	#DACC_PTCR_TXTDIS
 (0x1u << 9Ë

	)

219 
	#DACC_PTSR_RXTEN
 (0x1u << 0Ë

	)

220 
	#DACC_PTSR_TXTEN
 (0x1u << 8Ë

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_dmac.h

45 #i‚de‡
_SAM3XA_DMAC_COMPONENT_


46 
	#_SAM3XA_DMAC_COMPONENT_


	)

54 #i‡!(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

57 
RwReg
 
	mDMAC_SADDR
;

58 
RwReg
 
	mDMAC_DADDR
;

59 
RwReg
 
	mDMAC_DSCR
;

60 
RwReg
 
	mDMAC_CTRLA
;

61 
RwReg
 
	mDMAC_CTRLB
;

62 
RwReg
 
	mDMAC_CFG
;

63 
RoReg
 
	mRe£rved1
[4];

64 } 
	tDmacCh_num
;

66 
	#DMACCH_NUM_NUMBER
 6

	)

68 
RwReg
 
	mDMAC_GCFG
;

69 
RwReg
 
	mDMAC_EN
;

70 
RwReg
 
	mDMAC_SREQ
;

71 
RwReg
 
	mDMAC_CREQ
;

72 
RwReg
 
	mDMAC_LAST
;

73 
RoReg
 
	mRe£rved1
[1];

74 
WoReg
 
	mDMAC_EBCIER
;

75 
WoReg
 
	mDMAC_EBCIDR
;

76 
RoReg
 
	mDMAC_EBCIMR
;

77 
RoReg
 
	mDMAC_EBCISR
;

78 
WoReg
 
	mDMAC_CHER
;

79 
WoReg
 
	mDMAC_CHDR
;

80 
RoReg
 
	mDMAC_CHSR
;

81 
RoReg
 
	mRe£rved2
[2];

82 
DmacCh_num
 
	mDMAC_CH_NUM
[
DMACCH_NUM_NUMBER
];

83 
RoReg
 
	mRe£rved3
[46];

84 
RwReg
 
	mDMAC_WPMR
;

85 
RoReg
 
	mDMAC_WPSR
;

86 } 
	tDmac
;

89 
	#DMAC_GCFG_ARB_CFG
 (0x1u << 4Ë

	)

90 
	#DMAC_GCFG_ARB_CFG_FIXED
 (0x0u << 4Ë

	)

91 
	#DMAC_GCFG_ARB_CFG_ROUND_ROBIN
 (0x1u << 4Ë

	)

93 
	#DMAC_EN_ENABLE
 (0x1u << 0Ë

	)

95 
	#DMAC_SREQ_SSREQ0
 (0x1u << 0Ë

	)

96 
	#DMAC_SREQ_DSREQ0
 (0x1u << 1Ë

	)

97 
	#DMAC_SREQ_SSREQ1
 (0x1u << 2Ë

	)

98 
	#DMAC_SREQ_DSREQ1
 (0x1u << 3Ë

	)

99 
	#DMAC_SREQ_SSREQ2
 (0x1u << 4Ë

	)

100 
	#DMAC_SREQ_DSREQ2
 (0x1u << 5Ë

	)

101 
	#DMAC_SREQ_SSREQ3
 (0x1u << 6Ë

	)

102 
	#DMAC_SREQ_DSREQ3
 (0x1u << 7Ë

	)

103 
	#DMAC_SREQ_SSREQ4
 (0x1u << 8Ë

	)

104 
	#DMAC_SREQ_DSREQ4
 (0x1u << 9Ë

	)

105 
	#DMAC_SREQ_SSREQ5
 (0x1u << 10Ë

	)

106 
	#DMAC_SREQ_DSREQ5
 (0x1u << 11Ë

	)

108 
	#DMAC_CREQ_SCREQ0
 (0x1u << 0Ë

	)

109 
	#DMAC_CREQ_DCREQ0
 (0x1u << 1Ë

	)

110 
	#DMAC_CREQ_SCREQ1
 (0x1u << 2Ë

	)

111 
	#DMAC_CREQ_DCREQ1
 (0x1u << 3Ë

	)

112 
	#DMAC_CREQ_SCREQ2
 (0x1u << 4Ë

	)

113 
	#DMAC_CREQ_DCREQ2
 (0x1u << 5Ë

	)

114 
	#DMAC_CREQ_SCREQ3
 (0x1u << 6Ë

	)

115 
	#DMAC_CREQ_DCREQ3
 (0x1u << 7Ë

	)

116 
	#DMAC_CREQ_SCREQ4
 (0x1u << 8Ë

	)

117 
	#DMAC_CREQ_DCREQ4
 (0x1u << 9Ë

	)

118 
	#DMAC_CREQ_SCREQ5
 (0x1u << 10Ë

	)

119 
	#DMAC_CREQ_DCREQ5
 (0x1u << 11Ë

	)

121 
	#DMAC_LAST_SLAST0
 (0x1u << 0Ë

	)

122 
	#DMAC_LAST_DLAST0
 (0x1u << 1Ë

	)

123 
	#DMAC_LAST_SLAST1
 (0x1u << 2Ë

	)

124 
	#DMAC_LAST_DLAST1
 (0x1u << 3Ë

	)

125 
	#DMAC_LAST_SLAST2
 (0x1u << 4Ë

	)

126 
	#DMAC_LAST_DLAST2
 (0x1u << 5Ë

	)

127 
	#DMAC_LAST_SLAST3
 (0x1u << 6Ë

	)

128 
	#DMAC_LAST_DLAST3
 (0x1u << 7Ë

	)

129 
	#DMAC_LAST_SLAST4
 (0x1u << 8Ë

	)

130 
	#DMAC_LAST_DLAST4
 (0x1u << 9Ë

	)

131 
	#DMAC_LAST_SLAST5
 (0x1u << 10Ë

	)

132 
	#DMAC_LAST_DLAST5
 (0x1u << 11Ë

	)

134 
	#DMAC_EBCIER_BTC0
 (0x1u << 0Ë

	)

135 
	#DMAC_EBCIER_BTC1
 (0x1u << 1Ë

	)

136 
	#DMAC_EBCIER_BTC2
 (0x1u << 2Ë

	)

137 
	#DMAC_EBCIER_BTC3
 (0x1u << 3Ë

	)

138 
	#DMAC_EBCIER_BTC4
 (0x1u << 4Ë

	)

139 
	#DMAC_EBCIER_BTC5
 (0x1u << 5Ë

	)

140 
	#DMAC_EBCIER_CBTC0
 (0x1u << 8Ë

	)

141 
	#DMAC_EBCIER_CBTC1
 (0x1u << 9Ë

	)

142 
	#DMAC_EBCIER_CBTC2
 (0x1u << 10Ë

	)

143 
	#DMAC_EBCIER_CBTC3
 (0x1u << 11Ë

	)

144 
	#DMAC_EBCIER_CBTC4
 (0x1u << 12Ë

	)

145 
	#DMAC_EBCIER_CBTC5
 (0x1u << 13Ë

	)

146 
	#DMAC_EBCIER_ERR0
 (0x1u << 16Ë

	)

147 
	#DMAC_EBCIER_ERR1
 (0x1u << 17Ë

	)

148 
	#DMAC_EBCIER_ERR2
 (0x1u << 18Ë

	)

149 
	#DMAC_EBCIER_ERR3
 (0x1u << 19Ë

	)

150 
	#DMAC_EBCIER_ERR4
 (0x1u << 20Ë

	)

151 
	#DMAC_EBCIER_ERR5
 (0x1u << 21Ë

	)

153 
	#DMAC_EBCIDR_BTC0
 (0x1u << 0Ë

	)

154 
	#DMAC_EBCIDR_BTC1
 (0x1u << 1Ë

	)

155 
	#DMAC_EBCIDR_BTC2
 (0x1u << 2Ë

	)

156 
	#DMAC_EBCIDR_BTC3
 (0x1u << 3Ë

	)

157 
	#DMAC_EBCIDR_BTC4
 (0x1u << 4Ë

	)

158 
	#DMAC_EBCIDR_BTC5
 (0x1u << 5Ë

	)

159 
	#DMAC_EBCIDR_CBTC0
 (0x1u << 8Ë

	)

160 
	#DMAC_EBCIDR_CBTC1
 (0x1u << 9Ë

	)

161 
	#DMAC_EBCIDR_CBTC2
 (0x1u << 10Ë

	)

162 
	#DMAC_EBCIDR_CBTC3
 (0x1u << 11Ë

	)

163 
	#DMAC_EBCIDR_CBTC4
 (0x1u << 12Ë

	)

164 
	#DMAC_EBCIDR_CBTC5
 (0x1u << 13Ë

	)

165 
	#DMAC_EBCIDR_ERR0
 (0x1u << 16Ë

	)

166 
	#DMAC_EBCIDR_ERR1
 (0x1u << 17Ë

	)

167 
	#DMAC_EBCIDR_ERR2
 (0x1u << 18Ë

	)

168 
	#DMAC_EBCIDR_ERR3
 (0x1u << 19Ë

	)

169 
	#DMAC_EBCIDR_ERR4
 (0x1u << 20Ë

	)

170 
	#DMAC_EBCIDR_ERR5
 (0x1u << 21Ë

	)

172 
	#DMAC_EBCIMR_BTC0
 (0x1u << 0Ë

	)

173 
	#DMAC_EBCIMR_BTC1
 (0x1u << 1Ë

	)

174 
	#DMAC_EBCIMR_BTC2
 (0x1u << 2Ë

	)

175 
	#DMAC_EBCIMR_BTC3
 (0x1u << 3Ë

	)

176 
	#DMAC_EBCIMR_BTC4
 (0x1u << 4Ë

	)

177 
	#DMAC_EBCIMR_BTC5
 (0x1u << 5Ë

	)

178 
	#DMAC_EBCIMR_CBTC0
 (0x1u << 8Ë

	)

179 
	#DMAC_EBCIMR_CBTC1
 (0x1u << 9Ë

	)

180 
	#DMAC_EBCIMR_CBTC2
 (0x1u << 10Ë

	)

181 
	#DMAC_EBCIMR_CBTC3
 (0x1u << 11Ë

	)

182 
	#DMAC_EBCIMR_CBTC4
 (0x1u << 12Ë

	)

183 
	#DMAC_EBCIMR_CBTC5
 (0x1u << 13Ë

	)

184 
	#DMAC_EBCIMR_ERR0
 (0x1u << 16Ë

	)

185 
	#DMAC_EBCIMR_ERR1
 (0x1u << 17Ë

	)

186 
	#DMAC_EBCIMR_ERR2
 (0x1u << 18Ë

	)

187 
	#DMAC_EBCIMR_ERR3
 (0x1u << 19Ë

	)

188 
	#DMAC_EBCIMR_ERR4
 (0x1u << 20Ë

	)

189 
	#DMAC_EBCIMR_ERR5
 (0x1u << 21Ë

	)

191 
	#DMAC_EBCISR_BTC0
 (0x1u << 0Ë

	)

192 
	#DMAC_EBCISR_BTC1
 (0x1u << 1Ë

	)

193 
	#DMAC_EBCISR_BTC2
 (0x1u << 2Ë

	)

194 
	#DMAC_EBCISR_BTC3
 (0x1u << 3Ë

	)

195 
	#DMAC_EBCISR_BTC4
 (0x1u << 4Ë

	)

196 
	#DMAC_EBCISR_BTC5
 (0x1u << 5Ë

	)

197 
	#DMAC_EBCISR_CBTC0
 (0x1u << 8Ë

	)

198 
	#DMAC_EBCISR_CBTC1
 (0x1u << 9Ë

	)

199 
	#DMAC_EBCISR_CBTC2
 (0x1u << 10Ë

	)

200 
	#DMAC_EBCISR_CBTC3
 (0x1u << 11Ë

	)

201 
	#DMAC_EBCISR_CBTC4
 (0x1u << 12Ë

	)

202 
	#DMAC_EBCISR_CBTC5
 (0x1u << 13Ë

	)

203 
	#DMAC_EBCISR_ERR0
 (0x1u << 16Ë

	)

204 
	#DMAC_EBCISR_ERR1
 (0x1u << 17Ë

	)

205 
	#DMAC_EBCISR_ERR2
 (0x1u << 18Ë

	)

206 
	#DMAC_EBCISR_ERR3
 (0x1u << 19Ë

	)

207 
	#DMAC_EBCISR_ERR4
 (0x1u << 20Ë

	)

208 
	#DMAC_EBCISR_ERR5
 (0x1u << 21Ë

	)

210 
	#DMAC_CHER_ENA0
 (0x1u << 0Ë

	)

211 
	#DMAC_CHER_ENA1
 (0x1u << 1Ë

	)

212 
	#DMAC_CHER_ENA2
 (0x1u << 2Ë

	)

213 
	#DMAC_CHER_ENA3
 (0x1u << 3Ë

	)

214 
	#DMAC_CHER_ENA4
 (0x1u << 4Ë

	)

215 
	#DMAC_CHER_ENA5
 (0x1u << 5Ë

	)

216 
	#DMAC_CHER_SUSP0
 (0x1u << 8Ë

	)

217 
	#DMAC_CHER_SUSP1
 (0x1u << 9Ë

	)

218 
	#DMAC_CHER_SUSP2
 (0x1u << 10Ë

	)

219 
	#DMAC_CHER_SUSP3
 (0x1u << 11Ë

	)

220 
	#DMAC_CHER_SUSP4
 (0x1u << 12Ë

	)

221 
	#DMAC_CHER_SUSP5
 (0x1u << 13Ë

	)

222 
	#DMAC_CHER_KEEP0
 (0x1u << 24Ë

	)

223 
	#DMAC_CHER_KEEP1
 (0x1u << 25Ë

	)

224 
	#DMAC_CHER_KEEP2
 (0x1u << 26Ë

	)

225 
	#DMAC_CHER_KEEP3
 (0x1u << 27Ë

	)

226 
	#DMAC_CHER_KEEP4
 (0x1u << 28Ë

	)

227 
	#DMAC_CHER_KEEP5
 (0x1u << 29Ë

	)

229 
	#DMAC_CHDR_DIS0
 (0x1u << 0Ë

	)

230 
	#DMAC_CHDR_DIS1
 (0x1u << 1Ë

	)

231 
	#DMAC_CHDR_DIS2
 (0x1u << 2Ë

	)

232 
	#DMAC_CHDR_DIS3
 (0x1u << 3Ë

	)

233 
	#DMAC_CHDR_DIS4
 (0x1u << 4Ë

	)

234 
	#DMAC_CHDR_DIS5
 (0x1u << 5Ë

	)

235 
	#DMAC_CHDR_RES0
 (0x1u << 8Ë

	)

236 
	#DMAC_CHDR_RES1
 (0x1u << 9Ë

	)

237 
	#DMAC_CHDR_RES2
 (0x1u << 10Ë

	)

238 
	#DMAC_CHDR_RES3
 (0x1u << 11Ë

	)

239 
	#DMAC_CHDR_RES4
 (0x1u << 12Ë

	)

240 
	#DMAC_CHDR_RES5
 (0x1u << 13Ë

	)

242 
	#DMAC_CHSR_ENA0
 (0x1u << 0Ë

	)

243 
	#DMAC_CHSR_ENA1
 (0x1u << 1Ë

	)

244 
	#DMAC_CHSR_ENA2
 (0x1u << 2Ë

	)

245 
	#DMAC_CHSR_ENA3
 (0x1u << 3Ë

	)

246 
	#DMAC_CHSR_ENA4
 (0x1u << 4Ë

	)

247 
	#DMAC_CHSR_ENA5
 (0x1u << 5Ë

	)

248 
	#DMAC_CHSR_SUSP0
 (0x1u << 8Ë

	)

249 
	#DMAC_CHSR_SUSP1
 (0x1u << 9Ë

	)

250 
	#DMAC_CHSR_SUSP2
 (0x1u << 10Ë

	)

251 
	#DMAC_CHSR_SUSP3
 (0x1u << 11Ë

	)

252 
	#DMAC_CHSR_SUSP4
 (0x1u << 12Ë

	)

253 
	#DMAC_CHSR_SUSP5
 (0x1u << 13Ë

	)

254 
	#DMAC_CHSR_EMPT0
 (0x1u << 16Ë

	)

255 
	#DMAC_CHSR_EMPT1
 (0x1u << 17Ë

	)

256 
	#DMAC_CHSR_EMPT2
 (0x1u << 18Ë

	)

257 
	#DMAC_CHSR_EMPT3
 (0x1u << 19Ë

	)

258 
	#DMAC_CHSR_EMPT4
 (0x1u << 20Ë

	)

259 
	#DMAC_CHSR_EMPT5
 (0x1u << 21Ë

	)

260 
	#DMAC_CHSR_STAL0
 (0x1u << 24Ë

	)

261 
	#DMAC_CHSR_STAL1
 (0x1u << 25Ë

	)

262 
	#DMAC_CHSR_STAL2
 (0x1u << 26Ë

	)

263 
	#DMAC_CHSR_STAL3
 (0x1u << 27Ë

	)

264 
	#DMAC_CHSR_STAL4
 (0x1u << 28Ë

	)

265 
	#DMAC_CHSR_STAL5
 (0x1u << 29Ë

	)

267 
	#DMAC_SADDR_SADDR_Pos
 0

	)

268 
	#DMAC_SADDR_SADDR_Msk
 (0xffffffffu << 
DMAC_SADDR_SADDR_Pos
Ë

	)

269 
	#DMAC_SADDR_SADDR
(
vÆue
Ë((
DMAC_SADDR_SADDR_Msk
 & ((vÆueË<< 
DMAC_SADDR_SADDR_Pos
)))

	)

271 
	#DMAC_DADDR_DADDR_Pos
 0

	)

272 
	#DMAC_DADDR_DADDR_Msk
 (0xffffffffu << 
DMAC_DADDR_DADDR_Pos
Ë

	)

273 
	#DMAC_DADDR_DADDR
(
vÆue
Ë((
DMAC_DADDR_DADDR_Msk
 & ((vÆueË<< 
DMAC_DADDR_DADDR_Pos
)))

	)

275 
	#DMAC_DSCR_DSCR_Pos
 2

	)

276 
	#DMAC_DSCR_DSCR_Msk
 (0x3fffffffu << 
DMAC_DSCR_DSCR_Pos
Ë

	)

277 
	#DMAC_DSCR_DSCR
(
vÆue
Ë((
DMAC_DSCR_DSCR_Msk
 & ((vÆueË<< 
DMAC_DSCR_DSCR_Pos
)))

	)

279 
	#DMAC_CTRLA_BTSIZE_Pos
 0

	)

280 
	#DMAC_CTRLA_BTSIZE_Msk
 (0xffffu << 
DMAC_CTRLA_BTSIZE_Pos
Ë

	)

281 
	#DMAC_CTRLA_BTSIZE
(
vÆue
Ë((
DMAC_CTRLA_BTSIZE_Msk
 & ((vÆueË<< 
DMAC_CTRLA_BTSIZE_Pos
)))

	)

282 
	#DMAC_CTRLA_SCSIZE_Pos
 16

	)

283 
	#DMAC_CTRLA_SCSIZE_Msk
 (0x7u << 
DMAC_CTRLA_SCSIZE_Pos
Ë

	)

284 
	#DMAC_CTRLA_SCSIZE_CHK_1
 (0x0u << 16Ë

	)

285 
	#DMAC_CTRLA_SCSIZE_CHK_4
 (0x1u << 16Ë

	)

286 
	#DMAC_CTRLA_SCSIZE_CHK_8
 (0x2u << 16Ë

	)

287 
	#DMAC_CTRLA_SCSIZE_CHK_16
 (0x3u << 16Ë

	)

288 
	#DMAC_CTRLA_SCSIZE_CHK_32
 (0x4u << 16Ë

	)

289 
	#DMAC_CTRLA_SCSIZE_CHK_64
 (0x5u << 16Ë

	)

290 
	#DMAC_CTRLA_SCSIZE_CHK_128
 (0x6u << 16Ë

	)

291 
	#DMAC_CTRLA_SCSIZE_CHK_256
 (0x7u << 16Ë

	)

292 
	#DMAC_CTRLA_DCSIZE_Pos
 20

	)

293 
	#DMAC_CTRLA_DCSIZE_Msk
 (0x7u << 
DMAC_CTRLA_DCSIZE_Pos
Ë

	)

294 
	#DMAC_CTRLA_DCSIZE_CHK_1
 (0x0u << 20Ë

	)

295 
	#DMAC_CTRLA_DCSIZE_CHK_4
 (0x1u << 20Ë

	)

296 
	#DMAC_CTRLA_DCSIZE_CHK_8
 (0x2u << 20Ë

	)

297 
	#DMAC_CTRLA_DCSIZE_CHK_16
 (0x3u << 20Ë

	)

298 
	#DMAC_CTRLA_DCSIZE_CHK_32
 (0x4u << 20Ë

	)

299 
	#DMAC_CTRLA_DCSIZE_CHK_64
 (0x5u << 20Ë

	)

300 
	#DMAC_CTRLA_DCSIZE_CHK_128
 (0x6u << 20Ë

	)

301 
	#DMAC_CTRLA_DCSIZE_CHK_256
 (0x7u << 20Ë

	)

302 
	#DMAC_CTRLA_SRC_WIDTH_Pos
 24

	)

303 
	#DMAC_CTRLA_SRC_WIDTH_Msk
 (0x3u << 
DMAC_CTRLA_SRC_WIDTH_Pos
Ë

	)

304 
	#DMAC_CTRLA_SRC_WIDTH_BYTE
 (0x0u << 24Ë

	)

305 
	#DMAC_CTRLA_SRC_WIDTH_HALF_WORD
 (0x1u << 24Ë

	)

306 
	#DMAC_CTRLA_SRC_WIDTH_WORD
 (0x2u << 24Ë

	)

307 
	#DMAC_CTRLA_DST_WIDTH_Pos
 28

	)

308 
	#DMAC_CTRLA_DST_WIDTH_Msk
 (0x3u << 
DMAC_CTRLA_DST_WIDTH_Pos
Ë

	)

309 
	#DMAC_CTRLA_DST_WIDTH_BYTE
 (0x0u << 28Ë

	)

310 
	#DMAC_CTRLA_DST_WIDTH_HALF_WORD
 (0x1u << 28Ë

	)

311 
	#DMAC_CTRLA_DST_WIDTH_WORD
 (0x2u << 28Ë

	)

312 
	#DMAC_CTRLA_DONE
 (0x1u << 31Ë

	)

314 
	#DMAC_CTRLB_SRC_DSCR
 (0x1u << 16Ë

	)

315 
	#DMAC_CTRLB_SRC_DSCR_FETCH_FROM_MEM
 (0x0u << 16Ë

	)

316 
	#DMAC_CTRLB_SRC_DSCR_FETCH_DISABLE
 (0x1u << 16Ë

	)

317 
	#DMAC_CTRLB_DST_DSCR
 (0x1u << 20Ë

	)

318 
	#DMAC_CTRLB_DST_DSCR_FETCH_FROM_MEM
 (0x0u << 20Ë

	)

319 
	#DMAC_CTRLB_DST_DSCR_FETCH_DISABLE
 (0x1u << 20Ë

	)

320 
	#DMAC_CTRLB_FC_Pos
 21

	)

321 
	#DMAC_CTRLB_FC_Msk
 (0x7u << 
DMAC_CTRLB_FC_Pos
Ë

	)

322 
	#DMAC_CTRLB_FC_MEM2MEM_DMA_FC
 (0x0u << 21Ë

	)

323 
	#DMAC_CTRLB_FC_MEM2PER_DMA_FC
 (0x1u << 21Ë

	)

324 
	#DMAC_CTRLB_FC_PER2MEM_DMA_FC
 (0x2u << 21Ë

	)

325 
	#DMAC_CTRLB_FC_PER2PER_DMA_FC
 (0x3u << 21Ë

	)

326 
	#DMAC_CTRLB_SRC_INCR_Pos
 24

	)

327 
	#DMAC_CTRLB_SRC_INCR_Msk
 (0x3u << 
DMAC_CTRLB_SRC_INCR_Pos
Ë

	)

328 
	#DMAC_CTRLB_SRC_INCR_INCREMENTING
 (0x0u << 24Ë

	)

329 
	#DMAC_CTRLB_SRC_INCR_DECREMENTING
 (0x1u << 24Ë

	)

330 
	#DMAC_CTRLB_SRC_INCR_FIXED
 (0x2u << 24Ë

	)

331 
	#DMAC_CTRLB_DST_INCR_Pos
 28

	)

332 
	#DMAC_CTRLB_DST_INCR_Msk
 (0x3u << 
DMAC_CTRLB_DST_INCR_Pos
Ë

	)

333 
	#DMAC_CTRLB_DST_INCR_INCREMENTING
 (0x0u << 28Ë

	)

334 
	#DMAC_CTRLB_DST_INCR_DECREMENTING
 (0x1u << 28Ë

	)

335 
	#DMAC_CTRLB_DST_INCR_FIXED
 (0x2u << 28Ë

	)

336 
	#DMAC_CTRLB_IEN
 (0x1u << 30Ë

	)

338 
	#DMAC_CFG_SRC_PER_Pos
 0

	)

339 
	#DMAC_CFG_SRC_PER_Msk
 (0xfu << 
DMAC_CFG_SRC_PER_Pos
Ë

	)

340 
	#DMAC_CFG_SRC_PER
(
vÆue
Ë((
DMAC_CFG_SRC_PER_Msk
 & ((vÆueË<< 
DMAC_CFG_SRC_PER_Pos
)))

	)

341 
	#DMAC_CFG_DST_PER_Pos
 4

	)

342 
	#DMAC_CFG_DST_PER_Msk
 (0xfu << 
DMAC_CFG_DST_PER_Pos
Ë

	)

343 
	#DMAC_CFG_DST_PER
(
vÆue
Ë((
DMAC_CFG_DST_PER_Msk
 & ((vÆueË<< 
DMAC_CFG_DST_PER_Pos
)))

	)

344 
	#DMAC_CFG_SRC_H2SEL
 (0x1u << 9Ë

	)

345 
	#DMAC_CFG_SRC_H2SEL_SW
 (0x0u << 9Ë

	)

346 
	#DMAC_CFG_SRC_H2SEL_HW
 (0x1u << 9Ë

	)

347 
	#DMAC_CFG_DST_H2SEL
 (0x1u << 13Ë

	)

348 
	#DMAC_CFG_DST_H2SEL_SW
 (0x0u << 13Ë

	)

349 
	#DMAC_CFG_DST_H2SEL_HW
 (0x1u << 13Ë

	)

350 
	#DMAC_CFG_SOD
 (0x1u << 16Ë

	)

351 
	#DMAC_CFG_SOD_DISABLE
 (0x0u << 16Ë

	)

352 
	#DMAC_CFG_SOD_ENABLE
 (0x1u << 16Ë

	)

353 
	#DMAC_CFG_LOCK_IF
 (0x1u << 20Ë

	)

354 
	#DMAC_CFG_LOCK_IF_DISABLE
 (0x0u << 20Ë

	)

355 
	#DMAC_CFG_LOCK_IF_ENABLE
 (0x1u << 20Ë

	)

356 
	#DMAC_CFG_LOCK_B
 (0x1u << 21Ë

	)

357 
	#DMAC_CFG_LOCK_B_DISABLE
 (0x0u << 21Ë

	)

358 
	#DMAC_CFG_LOCK_IF_L
 (0x1u << 22Ë

	)

359 
	#DMAC_CFG_LOCK_IF_L_CHUNK
 (0x0u << 22Ë

	)

360 
	#DMAC_CFG_LOCK_IF_L_BUFFER
 (0x1u << 22Ë

	)

361 
	#DMAC_CFG_AHB_PROT_Pos
 24

	)

362 
	#DMAC_CFG_AHB_PROT_Msk
 (0x7u << 
DMAC_CFG_AHB_PROT_Pos
Ë

	)

363 
	#DMAC_CFG_AHB_PROT
(
vÆue
Ë((
DMAC_CFG_AHB_PROT_Msk
 & ((vÆueË<< 
DMAC_CFG_AHB_PROT_Pos
)))

	)

364 
	#DMAC_CFG_FIFOCFG_Pos
 28

	)

365 
	#DMAC_CFG_FIFOCFG_Msk
 (0x3u << 
DMAC_CFG_FIFOCFG_Pos
Ë

	)

366 
	#DMAC_CFG_FIFOCFG_ALAP_CFG
 (0x0u << 28Ë

	)

367 
	#DMAC_CFG_FIFOCFG_HALF_CFG
 (0x1u << 28Ë

	)

368 
	#DMAC_CFG_FIFOCFG_ASAP_CFG
 (0x2u << 28Ë

	)

370 
	#DMAC_WPMR_WPEN
 (0x1u << 0Ë

	)

371 
	#DMAC_WPMR_WPKEY_Pos
 8

	)

372 
	#DMAC_WPMR_WPKEY_Msk
 (0xffffffu << 
DMAC_WPMR_WPKEY_Pos
Ë

	)

373 
	#DMAC_WPMR_WPKEY
(
vÆue
Ë((
DMAC_WPMR_WPKEY_Msk
 & ((vÆueË<< 
DMAC_WPMR_WPKEY_Pos
)))

	)

375 
	#DMAC_WPSR_WPVS
 (0x1u << 0Ë

	)

376 
	#DMAC_WPSR_WPVSRC_Pos
 8

	)

377 
	#DMAC_WPSR_WPVSRC_Msk
 (0xffffu << 
DMAC_WPSR_WPVSRC_Pos
Ë

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_efc.h

45 #i‚de‡
_SAM3XA_EFC_COMPONENT_


46 
	#_SAM3XA_EFC_COMPONENT_


	)

54 #i‡!(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

57 
RwReg
 
	mEEFC_FMR
;

58 
WoReg
 
	mEEFC_FCR
;

59 
RoReg
 
	mEEFC_FSR
;

60 
RoReg
 
	mEEFC_FRR
;

61 } 
	tEfc
;

64 
	#EEFC_FMR_FRDY
 (0x1u << 0Ë

	)

65 
	#EEFC_FMR_FWS_Pos
 8

	)

66 
	#EEFC_FMR_FWS_Msk
 (0xfu << 
EEFC_FMR_FWS_Pos
Ë

	)

67 
	#EEFC_FMR_FWS
(
vÆue
Ë((
EEFC_FMR_FWS_Msk
 & ((vÆueË<< 
EEFC_FMR_FWS_Pos
)))

	)

68 
	#EEFC_FMR_SCOD
 (0x1u << 16Ë

	)

69 
	#EEFC_FMR_FAM
 (0x1u << 24Ë

	)

71 
	#EEFC_FCR_FCMD_Pos
 0

	)

72 
	#EEFC_FCR_FCMD_Msk
 (0xffu << 
EEFC_FCR_FCMD_Pos
Ë

	)

73 
	#EEFC_FCR_FCMD
(
vÆue
Ë((
EEFC_FCR_FCMD_Msk
 & ((vÆueË<< 
EEFC_FCR_FCMD_Pos
)))

	)

74 
	#EEFC_FCR_FARG_Pos
 8

	)

75 
	#EEFC_FCR_FARG_Msk
 (0xffffu << 
EEFC_FCR_FARG_Pos
Ë

	)

76 
	#EEFC_FCR_FARG
(
vÆue
Ë((
EEFC_FCR_FARG_Msk
 & ((vÆueË<< 
EEFC_FCR_FARG_Pos
)))

	)

77 
	#EEFC_FCR_FKEY_Pos
 24

	)

78 
	#EEFC_FCR_FKEY_Msk
 (0xffu << 
EEFC_FCR_FKEY_Pos
Ë

	)

79 
	#EEFC_FCR_FKEY
(
vÆue
Ë((
EEFC_FCR_FKEY_Msk
 & ((vÆueË<< 
EEFC_FCR_FKEY_Pos
)))

	)

81 
	#EEFC_FSR_FRDY
 (0x1u << 0Ë

	)

82 
	#EEFC_FSR_FCMDE
 (0x1u << 1Ë

	)

83 
	#EEFC_FSR_FLOCKE
 (0x1u << 2Ë

	)

85 
	#EEFC_FRR_FVALUE_Pos
 0

	)

86 
	#EEFC_FRR_FVALUE_Msk
 (0xffffffffu << 
EEFC_FRR_FVALUE_Pos
Ë

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_emac.h

45 #i‚de‡
_SAM3XA_EMAC_COMPONENT_


46 
	#_SAM3XA_EMAC_COMPONENT_


	)

54 #i‡!(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

57 
RwReg
 
	mEMAC_SAxB
;

58 
RwReg
 
	mEMAC_SAxT
;

59 } 
	tEmacSa
;

61 
	#EMACSA_NUMBER
 4

	)

63 
RwReg
 
	mEMAC_NCR
;

64 
RwReg
 
	mEMAC_NCFGR
;

65 
RoReg
 
	mEMAC_NSR
;

66 
RoReg
 
	mRe£rved1
[2];

67 
RwReg
 
	mEMAC_TSR
;

68 
RwReg
 
	mEMAC_RBQP
;

69 
RwReg
 
	mEMAC_TBQP
;

70 
RwReg
 
	mEMAC_RSR
;

71 
RwReg
 
	mEMAC_ISR
;

72 
WoReg
 
	mEMAC_IER
;

73 
WoReg
 
	mEMAC_IDR
;

74 
RoReg
 
	mEMAC_IMR
;

75 
RwReg
 
	mEMAC_MAN
;

76 
RwReg
 
	mEMAC_PTR
;

77 
RwReg
 
	mEMAC_PFR
;

78 
RwReg
 
	mEMAC_FTO
;

79 
RwReg
 
	mEMAC_SCF
;

80 
RwReg
 
	mEMAC_MCF
;

81 
RwReg
 
	mEMAC_FRO
;

82 
RwReg
 
	mEMAC_FCSE
;

83 
RwReg
 
	mEMAC_ALE
;

84 
RwReg
 
	mEMAC_DTF
;

85 
RwReg
 
	mEMAC_LCOL
;

86 
RwReg
 
	mEMAC_ECOL
;

87 
RwReg
 
	mEMAC_TUND
;

88 
RwReg
 
	mEMAC_CSE
;

89 
RwReg
 
	mEMAC_RRE
;

90 
RwReg
 
	mEMAC_ROV
;

91 
RwReg
 
	mEMAC_RSE
;

92 
RwReg
 
	mEMAC_ELE
;

93 
RwReg
 
	mEMAC_RJA
;

94 
RwReg
 
	mEMAC_USF
;

95 
RwReg
 
	mEMAC_STE
;

96 
RwReg
 
	mEMAC_RLE
;

97 
RoReg
 
	mRe£rved2
[1];

98 
RwReg
 
	mEMAC_HRB
;

99 
RwReg
 
	mEMAC_HRT
;

100 
EmacSa
 
	mEMAC_SA
[
EMACSA_NUMBER
];

101 
RwReg
 
	mEMAC_TID
;

102 
RoReg
 
	mRe£rved3
[1];

103 
RwReg
 
	mEMAC_USRIO
;

104 } 
	tEmac
;

107 
	#EMAC_NCR_LB
 (0x1u << 0Ë

	)

108 
	#EMAC_NCR_LLB
 (0x1u << 1Ë

	)

109 
	#EMAC_NCR_RE
 (0x1u << 2Ë

	)

110 
	#EMAC_NCR_TE
 (0x1u << 3Ë

	)

111 
	#EMAC_NCR_MPE
 (0x1u << 4Ë

	)

112 
	#EMAC_NCR_CLRSTAT
 (0x1u << 5Ë

	)

113 
	#EMAC_NCR_INCSTAT
 (0x1u << 6Ë

	)

114 
	#EMAC_NCR_WESTAT
 (0x1u << 7Ë

	)

115 
	#EMAC_NCR_BP
 (0x1u << 8Ë

	)

116 
	#EMAC_NCR_TSTART
 (0x1u << 9Ë

	)

117 
	#EMAC_NCR_THALT
 (0x1u << 10Ë

	)

119 
	#EMAC_NCFGR_SPD
 (0x1u << 0Ë

	)

120 
	#EMAC_NCFGR_FD
 (0x1u << 1Ë

	)

121 
	#EMAC_NCFGR_JFRAME
 (0x1u << 3Ë

	)

122 
	#EMAC_NCFGR_CAF
 (0x1u << 4Ë

	)

123 
	#EMAC_NCFGR_NBC
 (0x1u << 5Ë

	)

124 
	#EMAC_NCFGR_MTI
 (0x1u << 6Ë

	)

125 
	#EMAC_NCFGR_UNI
 (0x1u << 7Ë

	)

126 
	#EMAC_NCFGR_BIG
 (0x1u << 8Ë

	)

127 
	#EMAC_NCFGR_CLK_Pos
 10

	)

128 
	#EMAC_NCFGR_CLK_Msk
 (0x3u << 
EMAC_NCFGR_CLK_Pos
Ë

	)

129 
	#EMAC_NCFGR_CLK_MCK_8
 (0x0u << 10Ë

	)

130 
	#EMAC_NCFGR_CLK_MCK_16
 (0x1u << 10Ë

	)

131 
	#EMAC_NCFGR_CLK_MCK_32
 (0x2u << 10Ë

	)

132 
	#EMAC_NCFGR_CLK_MCK_64
 (0x3u << 10Ë

	)

133 
	#EMAC_NCFGR_RTY
 (0x1u << 12Ë

	)

134 
	#EMAC_NCFGR_PAE
 (0x1u << 13Ë

	)

135 
	#EMAC_NCFGR_RBOF_Pos
 14

	)

136 
	#EMAC_NCFGR_RBOF_Msk
 (0x3u << 
EMAC_NCFGR_RBOF_Pos
Ë

	)

137 
	#EMAC_NCFGR_RBOF_OFFSET_0
 (0x0u << 14Ë

	)

138 
	#EMAC_NCFGR_RBOF_OFFSET_1
 (0x1u << 14Ë

	)

139 
	#EMAC_NCFGR_RBOF_OFFSET_2
 (0x2u << 14Ë

	)

140 
	#EMAC_NCFGR_RBOF_OFFSET_3
 (0x3u << 14Ë

	)

141 
	#EMAC_NCFGR_RLCE
 (0x1u << 16Ë

	)

142 
	#EMAC_NCFGR_DRFCS
 (0x1u << 17Ë

	)

143 
	#EMAC_NCFGR_EFRHD
 (0x1u << 18Ë

	)

144 
	#EMAC_NCFGR_IRXFCS
 (0x1u << 19Ë

	)

146 
	#EMAC_NSR_MDIO
 (0x1u << 1Ë

	)

147 
	#EMAC_NSR_IDLE
 (0x1u << 2Ë

	)

149 
	#EMAC_TSR_UBR
 (0x1u << 0Ë

	)

150 
	#EMAC_TSR_COL
 (0x1u << 1Ë

	)

151 
	#EMAC_TSR_RLES
 (0x1u << 2Ë

	)

152 
	#EMAC_TSR_TGO
 (0x1u << 3Ë

	)

153 
	#EMAC_TSR_BEX
 (0x1u << 4Ë

	)

154 
	#EMAC_TSR_COMP
 (0x1u << 5Ë

	)

155 
	#EMAC_TSR_UND
 (0x1u << 6Ë

	)

157 
	#EMAC_RBQP_ADDR_Pos
 2

	)

158 
	#EMAC_RBQP_ADDR_Msk
 (0x3fffffffu << 
EMAC_RBQP_ADDR_Pos
Ë

	)

159 
	#EMAC_RBQP_ADDR
(
vÆue
Ë((
EMAC_RBQP_ADDR_Msk
 & ((vÆueË<< 
EMAC_RBQP_ADDR_Pos
)))

	)

161 
	#EMAC_TBQP_ADDR_Pos
 2

	)

162 
	#EMAC_TBQP_ADDR_Msk
 (0x3fffffffu << 
EMAC_TBQP_ADDR_Pos
Ë

	)

163 
	#EMAC_TBQP_ADDR
(
vÆue
Ë((
EMAC_TBQP_ADDR_Msk
 & ((vÆueË<< 
EMAC_TBQP_ADDR_Pos
)))

	)

165 
	#EMAC_RSR_BNA
 (0x1u << 0Ë

	)

166 
	#EMAC_RSR_REC
 (0x1u << 1Ë

	)

167 
	#EMAC_RSR_OVR
 (0x1u << 2Ë

	)

169 
	#EMAC_ISR_MFD
 (0x1u << 0Ë

	)

170 
	#EMAC_ISR_RCOMP
 (0x1u << 1Ë

	)

171 
	#EMAC_ISR_RXUBR
 (0x1u << 2Ë

	)

172 
	#EMAC_ISR_TXUBR
 (0x1u << 3Ë

	)

173 
	#EMAC_ISR_TUND
 (0x1u << 4Ë

	)

174 
	#EMAC_ISR_RLEX
 (0x1u << 5Ë

	)

175 
	#EMAC_ISR_TXERR
 (0x1u << 6Ë

	)

176 
	#EMAC_ISR_TCOMP
 (0x1u << 7Ë

	)

177 
	#EMAC_ISR_ROVR
 (0x1u << 10Ë

	)

178 
	#EMAC_ISR_HRESP
 (0x1u << 11Ë

	)

179 
	#EMAC_ISR_PFRE
 (0x1u << 12Ë

	)

180 
	#EMAC_ISR_PTZ
 (0x1u << 13Ë

	)

182 
	#EMAC_IER_MFD
 (0x1u << 0Ë

	)

183 
	#EMAC_IER_RCOMP
 (0x1u << 1Ë

	)

184 
	#EMAC_IER_RXUBR
 (0x1u << 2Ë

	)

185 
	#EMAC_IER_TXUBR
 (0x1u << 3Ë

	)

186 
	#EMAC_IER_TUND
 (0x1u << 4Ë

	)

187 
	#EMAC_IER_RLE
 (0x1u << 5Ë

	)

188 
	#EMAC_IER_TXERR
 (0x1u << 6Ë

	)

189 
	#EMAC_IER_TCOMP
 (0x1u << 7Ë

	)

190 
	#EMAC_IER_ROVR
 (0x1u << 10Ë

	)

191 
	#EMAC_IER_HRESP
 (0x1u << 11Ë

	)

192 
	#EMAC_IER_PFR
 (0x1u << 12Ë

	)

193 
	#EMAC_IER_PTZ
 (0x1u << 13Ë

	)

195 
	#EMAC_IDR_MFD
 (0x1u << 0Ë

	)

196 
	#EMAC_IDR_RCOMP
 (0x1u << 1Ë

	)

197 
	#EMAC_IDR_RXUBR
 (0x1u << 2Ë

	)

198 
	#EMAC_IDR_TXUBR
 (0x1u << 3Ë

	)

199 
	#EMAC_IDR_TUND
 (0x1u << 4Ë

	)

200 
	#EMAC_IDR_RLE
 (0x1u << 5Ë

	)

201 
	#EMAC_IDR_TXERR
 (0x1u << 6Ë

	)

202 
	#EMAC_IDR_TCOMP
 (0x1u << 7Ë

	)

203 
	#EMAC_IDR_ROVR
 (0x1u << 10Ë

	)

204 
	#EMAC_IDR_HRESP
 (0x1u << 11Ë

	)

205 
	#EMAC_IDR_PFR
 (0x1u << 12Ë

	)

206 
	#EMAC_IDR_PTZ
 (0x1u << 13Ë

	)

208 
	#EMAC_IMR_MFD
 (0x1u << 0Ë

	)

209 
	#EMAC_IMR_RCOMP
 (0x1u << 1Ë

	)

210 
	#EMAC_IMR_RXUBR
 (0x1u << 2Ë

	)

211 
	#EMAC_IMR_TXUBR
 (0x1u << 3Ë

	)

212 
	#EMAC_IMR_TUND
 (0x1u << 4Ë

	)

213 
	#EMAC_IMR_RLE
 (0x1u << 5Ë

	)

214 
	#EMAC_IMR_TXERR
 (0x1u << 6Ë

	)

215 
	#EMAC_IMR_TCOMP
 (0x1u << 7Ë

	)

216 
	#EMAC_IMR_ROVR
 (0x1u << 10Ë

	)

217 
	#EMAC_IMR_HRESP
 (0x1u << 11Ë

	)

218 
	#EMAC_IMR_PFR
 (0x1u << 12Ë

	)

219 
	#EMAC_IMR_PTZ
 (0x1u << 13Ë

	)

221 
	#EMAC_MAN_DATA_Pos
 0

	)

222 
	#EMAC_MAN_DATA_Msk
 (0xffffu << 
EMAC_MAN_DATA_Pos
Ë

	)

223 
	#EMAC_MAN_DATA
(
vÆue
Ë((
EMAC_MAN_DATA_Msk
 & ((vÆueË<< 
EMAC_MAN_DATA_Pos
)))

	)

224 
	#EMAC_MAN_CODE_Pos
 16

	)

225 
	#EMAC_MAN_CODE_Msk
 (0x3u << 
EMAC_MAN_CODE_Pos
Ë

	)

226 
	#EMAC_MAN_CODE
(
vÆue
Ë((
EMAC_MAN_CODE_Msk
 & ((vÆueË<< 
EMAC_MAN_CODE_Pos
)))

	)

227 
	#EMAC_MAN_REGA_Pos
 18

	)

228 
	#EMAC_MAN_REGA_Msk
 (0x1fu << 
EMAC_MAN_REGA_Pos
Ë

	)

229 
	#EMAC_MAN_REGA
(
vÆue
Ë((
EMAC_MAN_REGA_Msk
 & ((vÆueË<< 
EMAC_MAN_REGA_Pos
)))

	)

230 
	#EMAC_MAN_PHYA_Pos
 23

	)

231 
	#EMAC_MAN_PHYA_Msk
 (0x1fu << 
EMAC_MAN_PHYA_Pos
Ë

	)

232 
	#EMAC_MAN_PHYA
(
vÆue
Ë((
EMAC_MAN_PHYA_Msk
 & ((vÆueË<< 
EMAC_MAN_PHYA_Pos
)))

	)

233 
	#EMAC_MAN_RW_Pos
 28

	)

234 
	#EMAC_MAN_RW_Msk
 (0x3u << 
EMAC_MAN_RW_Pos
Ë

	)

235 
	#EMAC_MAN_RW
(
vÆue
Ë((
EMAC_MAN_RW_Msk
 & ((vÆueË<< 
EMAC_MAN_RW_Pos
)))

	)

236 
	#EMAC_MAN_SOF_Pos
 30

	)

237 
	#EMAC_MAN_SOF_Msk
 (0x3u << 
EMAC_MAN_SOF_Pos
Ë

	)

238 
	#EMAC_MAN_SOF
(
vÆue
Ë((
EMAC_MAN_SOF_Msk
 & ((vÆueË<< 
EMAC_MAN_SOF_Pos
)))

	)

240 
	#EMAC_PTR_PTIME_Pos
 0

	)

241 
	#EMAC_PTR_PTIME_Msk
 (0xffffu << 
EMAC_PTR_PTIME_Pos
Ë

	)

242 
	#EMAC_PTR_PTIME
(
vÆue
Ë((
EMAC_PTR_PTIME_Msk
 & ((vÆueË<< 
EMAC_PTR_PTIME_Pos
)))

	)

244 
	#EMAC_PFR_FROK_Pos
 0

	)

245 
	#EMAC_PFR_FROK_Msk
 (0xffffu << 
EMAC_PFR_FROK_Pos
Ë

	)

246 
	#EMAC_PFR_FROK
(
vÆue
Ë((
EMAC_PFR_FROK_Msk
 & ((vÆueË<< 
EMAC_PFR_FROK_Pos
)))

	)

248 
	#EMAC_FTO_FTOK_Pos
 0

	)

249 
	#EMAC_FTO_FTOK_Msk
 (0xffffffu << 
EMAC_FTO_FTOK_Pos
Ë

	)

250 
	#EMAC_FTO_FTOK
(
vÆue
Ë((
EMAC_FTO_FTOK_Msk
 & ((vÆueË<< 
EMAC_FTO_FTOK_Pos
)))

	)

252 
	#EMAC_SCF_SCF_Pos
 0

	)

253 
	#EMAC_SCF_SCF_Msk
 (0xffffu << 
EMAC_SCF_SCF_Pos
Ë

	)

254 
	#EMAC_SCF_SCF
(
vÆue
Ë((
EMAC_SCF_SCF_Msk
 & ((vÆueË<< 
EMAC_SCF_SCF_Pos
)))

	)

256 
	#EMAC_MCF_MCF_Pos
 0

	)

257 
	#EMAC_MCF_MCF_Msk
 (0xffffu << 
EMAC_MCF_MCF_Pos
Ë

	)

258 
	#EMAC_MCF_MCF
(
vÆue
Ë((
EMAC_MCF_MCF_Msk
 & ((vÆueË<< 
EMAC_MCF_MCF_Pos
)))

	)

260 
	#EMAC_FRO_FROK_Pos
 0

	)

261 
	#EMAC_FRO_FROK_Msk
 (0xffffffu << 
EMAC_FRO_FROK_Pos
Ë

	)

262 
	#EMAC_FRO_FROK
(
vÆue
Ë((
EMAC_FRO_FROK_Msk
 & ((vÆueË<< 
EMAC_FRO_FROK_Pos
)))

	)

264 
	#EMAC_FCSE_FCSE_Pos
 0

	)

265 
	#EMAC_FCSE_FCSE_Msk
 (0xffu << 
EMAC_FCSE_FCSE_Pos
Ë

	)

266 
	#EMAC_FCSE_FCSE
(
vÆue
Ë((
EMAC_FCSE_FCSE_Msk
 & ((vÆueË<< 
EMAC_FCSE_FCSE_Pos
)))

	)

268 
	#EMAC_ALE_ALE_Pos
 0

	)

269 
	#EMAC_ALE_ALE_Msk
 (0xffu << 
EMAC_ALE_ALE_Pos
Ë

	)

270 
	#EMAC_ALE_ALE
(
vÆue
Ë((
EMAC_ALE_ALE_Msk
 & ((vÆueË<< 
EMAC_ALE_ALE_Pos
)))

	)

272 
	#EMAC_DTF_DTF_Pos
 0

	)

273 
	#EMAC_DTF_DTF_Msk
 (0xffffu << 
EMAC_DTF_DTF_Pos
Ë

	)

274 
	#EMAC_DTF_DTF
(
vÆue
Ë((
EMAC_DTF_DTF_Msk
 & ((vÆueË<< 
EMAC_DTF_DTF_Pos
)))

	)

276 
	#EMAC_LCOL_LCOL_Pos
 0

	)

277 
	#EMAC_LCOL_LCOL_Msk
 (0xffu << 
EMAC_LCOL_LCOL_Pos
Ë

	)

278 
	#EMAC_LCOL_LCOL
(
vÆue
Ë((
EMAC_LCOL_LCOL_Msk
 & ((vÆueË<< 
EMAC_LCOL_LCOL_Pos
)))

	)

280 
	#EMAC_ECOL_EXCOL_Pos
 0

	)

281 
	#EMAC_ECOL_EXCOL_Msk
 (0xffu << 
EMAC_ECOL_EXCOL_Pos
Ë

	)

282 
	#EMAC_ECOL_EXCOL
(
vÆue
Ë((
EMAC_ECOL_EXCOL_Msk
 & ((vÆueË<< 
EMAC_ECOL_EXCOL_Pos
)))

	)

284 
	#EMAC_TUND_TUND_Pos
 0

	)

285 
	#EMAC_TUND_TUND_Msk
 (0xffu << 
EMAC_TUND_TUND_Pos
Ë

	)

286 
	#EMAC_TUND_TUND
(
vÆue
Ë((
EMAC_TUND_TUND_Msk
 & ((vÆueË<< 
EMAC_TUND_TUND_Pos
)))

	)

288 
	#EMAC_CSE_CSE_Pos
 0

	)

289 
	#EMAC_CSE_CSE_Msk
 (0xffu << 
EMAC_CSE_CSE_Pos
Ë

	)

290 
	#EMAC_CSE_CSE
(
vÆue
Ë((
EMAC_CSE_CSE_Msk
 & ((vÆueË<< 
EMAC_CSE_CSE_Pos
)))

	)

292 
	#EMAC_RRE_RRE_Pos
 0

	)

293 
	#EMAC_RRE_RRE_Msk
 (0xffffu << 
EMAC_RRE_RRE_Pos
Ë

	)

294 
	#EMAC_RRE_RRE
(
vÆue
Ë((
EMAC_RRE_RRE_Msk
 & ((vÆueË<< 
EMAC_RRE_RRE_Pos
)))

	)

296 
	#EMAC_ROV_ROVR_Pos
 0

	)

297 
	#EMAC_ROV_ROVR_Msk
 (0xffu << 
EMAC_ROV_ROVR_Pos
Ë

	)

298 
	#EMAC_ROV_ROVR
(
vÆue
Ë((
EMAC_ROV_ROVR_Msk
 & ((vÆueË<< 
EMAC_ROV_ROVR_Pos
)))

	)

300 
	#EMAC_RSE_RSE_Pos
 0

	)

301 
	#EMAC_RSE_RSE_Msk
 (0xffu << 
EMAC_RSE_RSE_Pos
Ë

	)

302 
	#EMAC_RSE_RSE
(
vÆue
Ë((
EMAC_RSE_RSE_Msk
 & ((vÆueË<< 
EMAC_RSE_RSE_Pos
)))

	)

304 
	#EMAC_ELE_EXL_Pos
 0

	)

305 
	#EMAC_ELE_EXL_Msk
 (0xffu << 
EMAC_ELE_EXL_Pos
Ë

	)

306 
	#EMAC_ELE_EXL
(
vÆue
Ë((
EMAC_ELE_EXL_Msk
 & ((vÆueË<< 
EMAC_ELE_EXL_Pos
)))

	)

308 
	#EMAC_RJA_RJB_Pos
 0

	)

309 
	#EMAC_RJA_RJB_Msk
 (0xffu << 
EMAC_RJA_RJB_Pos
Ë

	)

310 
	#EMAC_RJA_RJB
(
vÆue
Ë((
EMAC_RJA_RJB_Msk
 & ((vÆueË<< 
EMAC_RJA_RJB_Pos
)))

	)

312 
	#EMAC_USF_USF_Pos
 0

	)

313 
	#EMAC_USF_USF_Msk
 (0xffu << 
EMAC_USF_USF_Pos
Ë

	)

314 
	#EMAC_USF_USF
(
vÆue
Ë((
EMAC_USF_USF_Msk
 & ((vÆueË<< 
EMAC_USF_USF_Pos
)))

	)

316 
	#EMAC_STE_SQER_Pos
 0

	)

317 
	#EMAC_STE_SQER_Msk
 (0xffu << 
EMAC_STE_SQER_Pos
Ë

	)

318 
	#EMAC_STE_SQER
(
vÆue
Ë((
EMAC_STE_SQER_Msk
 & ((vÆueË<< 
EMAC_STE_SQER_Pos
)))

	)

320 
	#EMAC_RLE_RLFM_Pos
 0

	)

321 
	#EMAC_RLE_RLFM_Msk
 (0xffu << 
EMAC_RLE_RLFM_Pos
Ë

	)

322 
	#EMAC_RLE_RLFM
(
vÆue
Ë((
EMAC_RLE_RLFM_Msk
 & ((vÆueË<< 
EMAC_RLE_RLFM_Pos
)))

	)

324 
	#EMAC_HRB_ADDR_Pos
 0

	)

325 
	#EMAC_HRB_ADDR_Msk
 (0xffffffffu << 
EMAC_HRB_ADDR_Pos
Ë

	)

326 
	#EMAC_HRB_ADDR
(
vÆue
Ë((
EMAC_HRB_ADDR_Msk
 & ((vÆueË<< 
EMAC_HRB_ADDR_Pos
)))

	)

328 
	#EMAC_HRT_ADDR_Pos
 0

	)

329 
	#EMAC_HRT_ADDR_Msk
 (0xffffffffu << 
EMAC_HRT_ADDR_Pos
Ë

	)

330 
	#EMAC_HRT_ADDR
(
vÆue
Ë((
EMAC_HRT_ADDR_Msk
 & ((vÆueË<< 
EMAC_HRT_ADDR_Pos
)))

	)

332 
	#EMAC_SAxB_ADDR_Pos
 0

	)

333 
	#EMAC_SAxB_ADDR_Msk
 (0xffffffffu << 
EMAC_SAxB_ADDR_Pos
Ë

	)

334 
	#EMAC_SAxB_ADDR
(
vÆue
Ë((
EMAC_SAxB_ADDR_Msk
 & ((vÆueË<< 
EMAC_SAxB_ADDR_Pos
)))

	)

336 
	#EMAC_SAxT_ADDR_Pos
 0

	)

337 
	#EMAC_SAxT_ADDR_Msk
 (0xffffu << 
EMAC_SAxT_ADDR_Pos
Ë

	)

338 
	#EMAC_SAxT_ADDR
(
vÆue
Ë((
EMAC_SAxT_ADDR_Msk
 & ((vÆueË<< 
EMAC_SAxT_ADDR_Pos
)))

	)

340 
	#EMAC_TID_TID_Pos
 0

	)

341 
	#EMAC_TID_TID_Msk
 (0xffffu << 
EMAC_TID_TID_Pos
Ë

	)

342 
	#EMAC_TID_TID
(
vÆue
Ë((
EMAC_TID_TID_Msk
 & ((vÆueË<< 
EMAC_TID_TID_Pos
)))

	)

344 
	#EMAC_USRIO_RMII
 (0x1u << 0Ë

	)

345 
	#EMAC_USRIO_CLKEN
 (0x1u << 1Ë

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_gpbr.h

45 #i‚de‡
_SAM3XA_GPBR_COMPONENT_


46 
	#_SAM3XA_GPBR_COMPONENT_


	)

54 #i‡!(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

57 
RwReg
 
	mSYS_GPBR
[8];

58 } 
	tGpbr
;

61 
	#SYS_GPBR_GPBR_VALUE_Pos
 0

	)

62 
	#SYS_GPBR_GPBR_VALUE_Msk
 (0xffffffffu << 
SYS_GPBR_GPBR_VALUE_Pos
Ë

	)

63 
	#SYS_GPBR_GPBR_VALUE
(
vÆue
Ë((
SYS_GPBR_GPBR_VALUE_Msk
 & ((vÆueË<< 
SYS_GPBR_GPBR_VALUE_Pos
)))

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_hsmci.h

45 #i‚de‡
_SAM3XA_HSMCI_COMPONENT_


46 
	#_SAM3XA_HSMCI_COMPONENT_


	)

54 #i‡!(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

57 
WoReg
 
	mHSMCI_CR
;

58 
RwReg
 
	mHSMCI_MR
;

59 
RwReg
 
	mHSMCI_DTOR
;

60 
RwReg
 
	mHSMCI_SDCR
;

61 
RwReg
 
	mHSMCI_ARGR
;

62 
WoReg
 
	mHSMCI_CMDR
;

63 
RwReg
 
	mHSMCI_BLKR
;

64 
RwReg
 
	mHSMCI_CSTOR
;

65 
RoReg
 
	mHSMCI_RSPR
[4];

66 
RoReg
 
	mHSMCI_RDR
;

67 
WoReg
 
	mHSMCI_TDR
;

68 
RoReg
 
	mRe£rved1
[2];

69 
RoReg
 
	mHSMCI_SR
;

70 
WoReg
 
	mHSMCI_IER
;

71 
WoReg
 
	mHSMCI_IDR
;

72 
RoReg
 
	mHSMCI_IMR
;

73 
RwReg
 
	mHSMCI_DMA
;

74 
RwReg
 
	mHSMCI_CFG
;

75 
RoReg
 
	mRe£rved2
[35];

76 
RwReg
 
	mHSMCI_WPMR
;

77 
RoReg
 
	mHSMCI_WPSR
;

78 
RoReg
 
	mRe£rved3
[69];

79 
RwReg
 
	mHSMCI_FIFO
[256];

80 } 
	tHsmci
;

83 
	#HSMCI_CR_MCIEN
 (0x1u << 0Ë

	)

84 
	#HSMCI_CR_MCIDIS
 (0x1u << 1Ë

	)

85 
	#HSMCI_CR_PWSEN
 (0x1u << 2Ë

	)

86 
	#HSMCI_CR_PWSDIS
 (0x1u << 3Ë

	)

87 
	#HSMCI_CR_SWRST
 (0x1u << 7Ë

	)

89 
	#HSMCI_MR_CLKDIV_Pos
 0

	)

90 
	#HSMCI_MR_CLKDIV_Msk
 (0xffu << 
HSMCI_MR_CLKDIV_Pos
Ë

	)

91 
	#HSMCI_MR_CLKDIV
(
vÆue
Ë((
HSMCI_MR_CLKDIV_Msk
 & ((vÆueË<< 
HSMCI_MR_CLKDIV_Pos
)))

	)

92 
	#HSMCI_MR_PWSDIV_Pos
 8

	)

93 
	#HSMCI_MR_PWSDIV_Msk
 (0x7u << 
HSMCI_MR_PWSDIV_Pos
Ë

	)

94 
	#HSMCI_MR_PWSDIV
(
vÆue
Ë((
HSMCI_MR_PWSDIV_Msk
 & ((vÆueË<< 
HSMCI_MR_PWSDIV_Pos
)))

	)

95 
	#HSMCI_MR_RDPROOF
 (0x1u << 11Ë

	)

96 
	#HSMCI_MR_WRPROOF
 (0x1u << 12Ë

	)

97 
	#HSMCI_MR_FBYTE
 (0x1u << 13Ë

	)

98 
	#HSMCI_MR_PADV
 (0x1u << 14Ë

	)

100 
	#HSMCI_DTOR_DTOCYC_Pos
 0

	)

101 
	#HSMCI_DTOR_DTOCYC_Msk
 (0xfu << 
HSMCI_DTOR_DTOCYC_Pos
Ë

	)

102 
	#HSMCI_DTOR_DTOCYC
(
vÆue
Ë((
HSMCI_DTOR_DTOCYC_Msk
 & ((vÆueË<< 
HSMCI_DTOR_DTOCYC_Pos
)))

	)

103 
	#HSMCI_DTOR_DTOMUL_Pos
 4

	)

104 
	#HSMCI_DTOR_DTOMUL_Msk
 (0x7u << 
HSMCI_DTOR_DTOMUL_Pos
Ë

	)

105 
	#HSMCI_DTOR_DTOMUL_1
 (0x0u << 4Ë

	)

106 
	#HSMCI_DTOR_DTOMUL_16
 (0x1u << 4Ë

	)

107 
	#HSMCI_DTOR_DTOMUL_128
 (0x2u << 4Ë

	)

108 
	#HSMCI_DTOR_DTOMUL_256
 (0x3u << 4Ë

	)

109 
	#HSMCI_DTOR_DTOMUL_1024
 (0x4u << 4Ë

	)

110 
	#HSMCI_DTOR_DTOMUL_4096
 (0x5u << 4Ë

	)

111 
	#HSMCI_DTOR_DTOMUL_65536
 (0x6u << 4Ë

	)

112 
	#HSMCI_DTOR_DTOMUL_1048576
 (0x7u << 4Ë

	)

114 
	#HSMCI_SDCR_SDCSEL_Pos
 0

	)

115 
	#HSMCI_SDCR_SDCSEL_Msk
 (0x3u << 
HSMCI_SDCR_SDCSEL_Pos
Ë

	)

116 
	#HSMCI_SDCR_SDCSEL_SLOTA
 (0x0u << 0Ë

	)

117 
	#HSMCI_SDCR_SDCSEL_SLOTB
 (0x1u << 0Ë

	)

118 
	#HSMCI_SDCR_SDCSEL_SLOTC
 (0x2u << 0Ë

	)

119 
	#HSMCI_SDCR_SDCSEL_SLOTD
 (0x3u << 0Ë

	)

120 
	#HSMCI_SDCR_SDCBUS_Pos
 6

	)

121 
	#HSMCI_SDCR_SDCBUS_Msk
 (0x3u << 
HSMCI_SDCR_SDCBUS_Pos
Ë

	)

122 
	#HSMCI_SDCR_SDCBUS_1
 (0x0u << 6Ë

	)

123 
	#HSMCI_SDCR_SDCBUS_4
 (0x2u << 6Ë

	)

124 
	#HSMCI_SDCR_SDCBUS_8
 (0x3u << 6Ë

	)

126 
	#HSMCI_ARGR_ARG_Pos
 0

	)

127 
	#HSMCI_ARGR_ARG_Msk
 (0xffffffffu << 
HSMCI_ARGR_ARG_Pos
Ë

	)

128 
	#HSMCI_ARGR_ARG
(
vÆue
Ë((
HSMCI_ARGR_ARG_Msk
 & ((vÆueË<< 
HSMCI_ARGR_ARG_Pos
)))

	)

130 
	#HSMCI_CMDR_CMDNB_Pos
 0

	)

131 
	#HSMCI_CMDR_CMDNB_Msk
 (0x3fu << 
HSMCI_CMDR_CMDNB_Pos
Ë

	)

132 
	#HSMCI_CMDR_CMDNB
(
vÆue
Ë((
HSMCI_CMDR_CMDNB_Msk
 & ((vÆueË<< 
HSMCI_CMDR_CMDNB_Pos
)))

	)

133 
	#HSMCI_CMDR_RSPTYP_Pos
 6

	)

134 
	#HSMCI_CMDR_RSPTYP_Msk
 (0x3u << 
HSMCI_CMDR_RSPTYP_Pos
Ë

	)

135 
	#HSMCI_CMDR_RSPTYP_NORESP
 (0x0u << 6Ë

	)

136 
	#HSMCI_CMDR_RSPTYP_48_BIT
 (0x1u << 6Ë

	)

137 
	#HSMCI_CMDR_RSPTYP_136_BIT
 (0x2u << 6Ë

	)

138 
	#HSMCI_CMDR_RSPTYP_R1B
 (0x3u << 6Ë

	)

139 
	#HSMCI_CMDR_SPCMD_Pos
 8

	)

140 
	#HSMCI_CMDR_SPCMD_Msk
 (0x7u << 
HSMCI_CMDR_SPCMD_Pos
Ë

	)

141 
	#HSMCI_CMDR_SPCMD_STD
 (0x0u << 8Ë

	)

142 
	#HSMCI_CMDR_SPCMD_INIT
 (0x1u << 8Ë

	)

143 
	#HSMCI_CMDR_SPCMD_SYNC
 (0x2u << 8Ë

	)

144 
	#HSMCI_CMDR_SPCMD_CE_ATA
 (0x3u << 8Ë

	)

145 
	#HSMCI_CMDR_SPCMD_IT_CMD
 (0x4u << 8Ë

	)

146 
	#HSMCI_CMDR_SPCMD_IT_RESP
 (0x5u << 8Ë

	)

147 
	#HSMCI_CMDR_SPCMD_BOR
 (0x6u << 8Ë

	)

148 
	#HSMCI_CMDR_SPCMD_EBO
 (0x7u << 8Ë

	)

149 
	#HSMCI_CMDR_OPDCMD
 (0x1u << 11Ë

	)

150 
	#HSMCI_CMDR_OPDCMD_PUSHPULL
 (0x0u << 11Ë

	)

151 
	#HSMCI_CMDR_OPDCMD_OPENDRAIN
 (0x1u << 11Ë

	)

152 
	#HSMCI_CMDR_MAXLAT
 (0x1u << 12Ë

	)

153 
	#HSMCI_CMDR_MAXLAT_5
 (0x0u << 12Ë

	)

154 
	#HSMCI_CMDR_MAXLAT_64
 (0x1u << 12Ë

	)

155 
	#HSMCI_CMDR_TRCMD_Pos
 16

	)

156 
	#HSMCI_CMDR_TRCMD_Msk
 (0x3u << 
HSMCI_CMDR_TRCMD_Pos
Ë

	)

157 
	#HSMCI_CMDR_TRCMD_NO_DATA
 (0x0u << 16Ë

	)

158 
	#HSMCI_CMDR_TRCMD_START_DATA
 (0x1u << 16Ë

	)

159 
	#HSMCI_CMDR_TRCMD_STOP_DATA
 (0x2u << 16Ë

	)

160 
	#HSMCI_CMDR_TRDIR
 (0x1u << 18Ë

	)

161 
	#HSMCI_CMDR_TRDIR_WRITE
 (0x0u << 18Ë

	)

162 
	#HSMCI_CMDR_TRDIR_READ
 (0x1u << 18Ë

	)

163 
	#HSMCI_CMDR_TRTYP_Pos
 19

	)

164 
	#HSMCI_CMDR_TRTYP_Msk
 (0x7u << 
HSMCI_CMDR_TRTYP_Pos
Ë

	)

165 
	#HSMCI_CMDR_TRTYP_SINGLE
 (0x0u << 19Ë

	)

166 
	#HSMCI_CMDR_TRTYP_MULTIPLE
 (0x1u << 19Ë

	)

167 
	#HSMCI_CMDR_TRTYP_STREAM
 (0x2u << 19Ë

	)

168 
	#HSMCI_CMDR_TRTYP_BYTE
 (0x4u << 19Ë

	)

169 
	#HSMCI_CMDR_TRTYP_BLOCK
 (0x5u << 19Ë

	)

170 
	#HSMCI_CMDR_IOSPCMD_Pos
 24

	)

171 
	#HSMCI_CMDR_IOSPCMD_Msk
 (0x3u << 
HSMCI_CMDR_IOSPCMD_Pos
Ë

	)

172 
	#HSMCI_CMDR_IOSPCMD_STD
 (0x0u << 24Ë

	)

173 
	#HSMCI_CMDR_IOSPCMD_SUSPEND
 (0x1u << 24Ë

	)

174 
	#HSMCI_CMDR_IOSPCMD_RESUME
 (0x2u << 24Ë

	)

175 
	#HSMCI_CMDR_ATACS
 (0x1u << 26Ë

	)

176 
	#HSMCI_CMDR_ATACS_NORMAL
 (0x0u << 26Ë

	)

177 
	#HSMCI_CMDR_ATACS_COMPLETION
 (0x1u << 26Ë

	)

178 
	#HSMCI_CMDR_BOOT_ACK
 (0x1u << 27Ë

	)

180 
	#HSMCI_BLKR_BCNT_Pos
 0

	)

181 
	#HSMCI_BLKR_BCNT_Msk
 (0xffffu << 
HSMCI_BLKR_BCNT_Pos
Ë

	)

182 
	#HSMCI_BLKR_BCNT_MULTIPLE
 (0x0u << 0Ë

	)

183 
	#HSMCI_BLKR_BCNT_BYTE
 (0x4u << 0Ë

	)

184 
	#HSMCI_BLKR_BCNT_BLOCK
 (0x5u << 0Ë

	)

185 
	#HSMCI_BLKR_BLKLEN_Pos
 16

	)

186 
	#HSMCI_BLKR_BLKLEN_Msk
 (0xffffu << 
HSMCI_BLKR_BLKLEN_Pos
Ë

	)

187 
	#HSMCI_BLKR_BLKLEN
(
vÆue
Ë((
HSMCI_BLKR_BLKLEN_Msk
 & ((vÆueË<< 
HSMCI_BLKR_BLKLEN_Pos
)))

	)

189 
	#HSMCI_CSTOR_CSTOCYC_Pos
 0

	)

190 
	#HSMCI_CSTOR_CSTOCYC_Msk
 (0xfu << 
HSMCI_CSTOR_CSTOCYC_Pos
Ë

	)

191 
	#HSMCI_CSTOR_CSTOCYC
(
vÆue
Ë((
HSMCI_CSTOR_CSTOCYC_Msk
 & ((vÆueË<< 
HSMCI_CSTOR_CSTOCYC_Pos
)))

	)

192 
	#HSMCI_CSTOR_CSTOMUL_Pos
 4

	)

193 
	#HSMCI_CSTOR_CSTOMUL_Msk
 (0x7u << 
HSMCI_CSTOR_CSTOMUL_Pos
Ë

	)

194 
	#HSMCI_CSTOR_CSTOMUL_1
 (0x0u << 4Ë

	)

195 
	#HSMCI_CSTOR_CSTOMUL_16
 (0x1u << 4Ë

	)

196 
	#HSMCI_CSTOR_CSTOMUL_128
 (0x2u << 4Ë

	)

197 
	#HSMCI_CSTOR_CSTOMUL_256
 (0x3u << 4Ë

	)

198 
	#HSMCI_CSTOR_CSTOMUL_1024
 (0x4u << 4Ë

	)

199 
	#HSMCI_CSTOR_CSTOMUL_4096
 (0x5u << 4Ë

	)

200 
	#HSMCI_CSTOR_CSTOMUL_65536
 (0x6u << 4Ë

	)

201 
	#HSMCI_CSTOR_CSTOMUL_1048576
 (0x7u << 4Ë

	)

203 
	#HSMCI_RSPR_RSP_Pos
 0

	)

204 
	#HSMCI_RSPR_RSP_Msk
 (0xffffffffu << 
HSMCI_RSPR_RSP_Pos
Ë

	)

206 
	#HSMCI_RDR_DATA_Pos
 0

	)

207 
	#HSMCI_RDR_DATA_Msk
 (0xffffffffu << 
HSMCI_RDR_DATA_Pos
Ë

	)

209 
	#HSMCI_TDR_DATA_Pos
 0

	)

210 
	#HSMCI_TDR_DATA_Msk
 (0xffffffffu << 
HSMCI_TDR_DATA_Pos
Ë

	)

211 
	#HSMCI_TDR_DATA
(
vÆue
Ë((
HSMCI_TDR_DATA_Msk
 & ((vÆueË<< 
HSMCI_TDR_DATA_Pos
)))

	)

213 
	#HSMCI_SR_CMDRDY
 (0x1u << 0Ë

	)

214 
	#HSMCI_SR_RXRDY
 (0x1u << 1Ë

	)

215 
	#HSMCI_SR_TXRDY
 (0x1u << 2Ë

	)

216 
	#HSMCI_SR_BLKE
 (0x1u << 3Ë

	)

217 
	#HSMCI_SR_DTIP
 (0x1u << 4Ë

	)

218 
	#HSMCI_SR_NOTBUSY
 (0x1u << 5Ë

	)

219 
	#HSMCI_SR_SDIOIRQf‹SlŸA
 (0x1u << 8Ë

	)

220 
	#HSMCI_SR_SDIOIRQf‹SlŸB
 (0x1u << 9Ë

	)

221 
	#HSMCI_SR_SDIOWAIT
 (0x1u << 12Ë

	)

222 
	#HSMCI_SR_CSRCV
 (0x1u << 13Ë

	)

223 
	#HSMCI_SR_RINDE
 (0x1u << 16Ë

	)

224 
	#HSMCI_SR_RDIRE
 (0x1u << 17Ë

	)

225 
	#HSMCI_SR_RCRCE
 (0x1u << 18Ë

	)

226 
	#HSMCI_SR_RENDE
 (0x1u << 19Ë

	)

227 
	#HSMCI_SR_RTOE
 (0x1u << 20Ë

	)

228 
	#HSMCI_SR_DCRCE
 (0x1u << 21Ë

	)

229 
	#HSMCI_SR_DTOE
 (0x1u << 22Ë

	)

230 
	#HSMCI_SR_CSTOE
 (0x1u << 23Ë

	)

231 
	#HSMCI_SR_BLKOVRE
 (0x1u << 24Ë

	)

232 
	#HSMCI_SR_DMADONE
 (0x1u << 25Ë

	)

233 
	#HSMCI_SR_FIFOEMPTY
 (0x1u << 26Ë

	)

234 
	#HSMCI_SR_XFRDONE
 (0x1u << 27Ë

	)

235 
	#HSMCI_SR_ACKRCV
 (0x1u << 28Ë

	)

236 
	#HSMCI_SR_ACKRCVE
 (0x1u << 29Ë

	)

237 
	#HSMCI_SR_OVRE
 (0x1u << 30Ë

	)

238 
	#HSMCI_SR_UNRE
 (0x1u << 31Ë

	)

240 
	#HSMCI_IER_CMDRDY
 (0x1u << 0Ë

	)

241 
	#HSMCI_IER_RXRDY
 (0x1u << 1Ë

	)

242 
	#HSMCI_IER_TXRDY
 (0x1u << 2Ë

	)

243 
	#HSMCI_IER_BLKE
 (0x1u << 3Ë

	)

244 
	#HSMCI_IER_DTIP
 (0x1u << 4Ë

	)

245 
	#HSMCI_IER_NOTBUSY
 (0x1u << 5Ë

	)

246 
	#HSMCI_IER_SDIOIRQf‹SlŸA
 (0x1u << 8Ë

	)

247 
	#HSMCI_IER_SDIOIRQf‹SlŸB
 (0x1u << 9Ë

	)

248 
	#HSMCI_IER_SDIOWAIT
 (0x1u << 12Ë

	)

249 
	#HSMCI_IER_CSRCV
 (0x1u << 13Ë

	)

250 
	#HSMCI_IER_RINDE
 (0x1u << 16Ë

	)

251 
	#HSMCI_IER_RDIRE
 (0x1u << 17Ë

	)

252 
	#HSMCI_IER_RCRCE
 (0x1u << 18Ë

	)

253 
	#HSMCI_IER_RENDE
 (0x1u << 19Ë

	)

254 
	#HSMCI_IER_RTOE
 (0x1u << 20Ë

	)

255 
	#HSMCI_IER_DCRCE
 (0x1u << 21Ë

	)

256 
	#HSMCI_IER_DTOE
 (0x1u << 22Ë

	)

257 
	#HSMCI_IER_CSTOE
 (0x1u << 23Ë

	)

258 
	#HSMCI_IER_BLKOVRE
 (0x1u << 24Ë

	)

259 
	#HSMCI_IER_DMADONE
 (0x1u << 25Ë

	)

260 
	#HSMCI_IER_FIFOEMPTY
 (0x1u << 26Ë

	)

261 
	#HSMCI_IER_XFRDONE
 (0x1u << 27Ë

	)

262 
	#HSMCI_IER_ACKRCV
 (0x1u << 28Ë

	)

263 
	#HSMCI_IER_ACKRCVE
 (0x1u << 29Ë

	)

264 
	#HSMCI_IER_OVRE
 (0x1u << 30Ë

	)

265 
	#HSMCI_IER_UNRE
 (0x1u << 31Ë

	)

267 
	#HSMCI_IDR_CMDRDY
 (0x1u << 0Ë

	)

268 
	#HSMCI_IDR_RXRDY
 (0x1u << 1Ë

	)

269 
	#HSMCI_IDR_TXRDY
 (0x1u << 2Ë

	)

270 
	#HSMCI_IDR_BLKE
 (0x1u << 3Ë

	)

271 
	#HSMCI_IDR_DTIP
 (0x1u << 4Ë

	)

272 
	#HSMCI_IDR_NOTBUSY
 (0x1u << 5Ë

	)

273 
	#HSMCI_IDR_SDIOIRQf‹SlŸA
 (0x1u << 8Ë

	)

274 
	#HSMCI_IDR_SDIOIRQf‹SlŸB
 (0x1u << 9Ë

	)

275 
	#HSMCI_IDR_SDIOWAIT
 (0x1u << 12Ë

	)

276 
	#HSMCI_IDR_CSRCV
 (0x1u << 13Ë

	)

277 
	#HSMCI_IDR_RINDE
 (0x1u << 16Ë

	)

278 
	#HSMCI_IDR_RDIRE
 (0x1u << 17Ë

	)

279 
	#HSMCI_IDR_RCRCE
 (0x1u << 18Ë

	)

280 
	#HSMCI_IDR_RENDE
 (0x1u << 19Ë

	)

281 
	#HSMCI_IDR_RTOE
 (0x1u << 20Ë

	)

282 
	#HSMCI_IDR_DCRCE
 (0x1u << 21Ë

	)

283 
	#HSMCI_IDR_DTOE
 (0x1u << 22Ë

	)

284 
	#HSMCI_IDR_CSTOE
 (0x1u << 23Ë

	)

285 
	#HSMCI_IDR_BLKOVRE
 (0x1u << 24Ë

	)

286 
	#HSMCI_IDR_DMADONE
 (0x1u << 25Ë

	)

287 
	#HSMCI_IDR_FIFOEMPTY
 (0x1u << 26Ë

	)

288 
	#HSMCI_IDR_XFRDONE
 (0x1u << 27Ë

	)

289 
	#HSMCI_IDR_ACKRCV
 (0x1u << 28Ë

	)

290 
	#HSMCI_IDR_ACKRCVE
 (0x1u << 29Ë

	)

291 
	#HSMCI_IDR_OVRE
 (0x1u << 30Ë

	)

292 
	#HSMCI_IDR_UNRE
 (0x1u << 31Ë

	)

294 
	#HSMCI_IMR_CMDRDY
 (0x1u << 0Ë

	)

295 
	#HSMCI_IMR_RXRDY
 (0x1u << 1Ë

	)

296 
	#HSMCI_IMR_TXRDY
 (0x1u << 2Ë

	)

297 
	#HSMCI_IMR_BLKE
 (0x1u << 3Ë

	)

298 
	#HSMCI_IMR_DTIP
 (0x1u << 4Ë

	)

299 
	#HSMCI_IMR_NOTBUSY
 (0x1u << 5Ë

	)

300 
	#HSMCI_IMR_SDIOIRQf‹SlŸA
 (0x1u << 8Ë

	)

301 
	#HSMCI_IMR_SDIOIRQf‹SlŸB
 (0x1u << 9Ë

	)

302 
	#HSMCI_IMR_SDIOWAIT
 (0x1u << 12Ë

	)

303 
	#HSMCI_IMR_CSRCV
 (0x1u << 13Ë

	)

304 
	#HSMCI_IMR_RINDE
 (0x1u << 16Ë

	)

305 
	#HSMCI_IMR_RDIRE
 (0x1u << 17Ë

	)

306 
	#HSMCI_IMR_RCRCE
 (0x1u << 18Ë

	)

307 
	#HSMCI_IMR_RENDE
 (0x1u << 19Ë

	)

308 
	#HSMCI_IMR_RTOE
 (0x1u << 20Ë

	)

309 
	#HSMCI_IMR_DCRCE
 (0x1u << 21Ë

	)

310 
	#HSMCI_IMR_DTOE
 (0x1u << 22Ë

	)

311 
	#HSMCI_IMR_CSTOE
 (0x1u << 23Ë

	)

312 
	#HSMCI_IMR_BLKOVRE
 (0x1u << 24Ë

	)

313 
	#HSMCI_IMR_DMADONE
 (0x1u << 25Ë

	)

314 
	#HSMCI_IMR_FIFOEMPTY
 (0x1u << 26Ë

	)

315 
	#HSMCI_IMR_XFRDONE
 (0x1u << 27Ë

	)

316 
	#HSMCI_IMR_ACKRCV
 (0x1u << 28Ë

	)

317 
	#HSMCI_IMR_ACKRCVE
 (0x1u << 29Ë

	)

318 
	#HSMCI_IMR_OVRE
 (0x1u << 30Ë

	)

319 
	#HSMCI_IMR_UNRE
 (0x1u << 31Ë

	)

321 
	#HSMCI_DMA_OFFSET_Pos
 0

	)

322 
	#HSMCI_DMA_OFFSET_Msk
 (0x3u << 
HSMCI_DMA_OFFSET_Pos
Ë

	)

323 
	#HSMCI_DMA_OFFSET
(
vÆue
Ë((
HSMCI_DMA_OFFSET_Msk
 & ((vÆueË<< 
HSMCI_DMA_OFFSET_Pos
)))

	)

324 
	#HSMCI_DMA_CHKSIZE
 (0x1u << 4Ë

	)

325 
	#HSMCI_DMA_CHKSIZE_1
 (0x0u << 4Ë

	)

326 
	#HSMCI_DMA_CHKSIZE_4
 (0x1u << 4Ë

	)

327 
	#HSMCI_DMA_DMAEN
 (0x1u << 8Ë

	)

328 
	#HSMCI_DMA_ROPT
 (0x1u << 12Ë

	)

330 
	#HSMCI_CFG_FIFOMODE
 (0x1u << 0Ë

	)

331 
	#HSMCI_CFG_FERRCTRL
 (0x1u << 4Ë

	)

332 
	#HSMCI_CFG_HSMODE
 (0x1u << 8Ë

	)

333 
	#HSMCI_CFG_LSYNC
 (0x1u << 12Ë

	)

335 
	#HSMCI_WPMR_WP_EN
 (0x1u << 0Ë

	)

336 
	#HSMCI_WPMR_WP_KEY_Pos
 8

	)

337 
	#HSMCI_WPMR_WP_KEY_Msk
 (0xffffffu << 
HSMCI_WPMR_WP_KEY_Pos
Ë

	)

338 
	#HSMCI_WPMR_WP_KEY
(
vÆue
Ë((
HSMCI_WPMR_WP_KEY_Msk
 & ((vÆueË<< 
HSMCI_WPMR_WP_KEY_Pos
)))

	)

340 
	#HSMCI_WPSR_WP_VS_Pos
 0

	)

341 
	#HSMCI_WPSR_WP_VS_Msk
 (0xfu << 
HSMCI_WPSR_WP_VS_Pos
Ë

	)

342 
	#HSMCI_WPSR_WP_VS_NONE
 (0x0u << 0Ë

	)

343 
	#HSMCI_WPSR_WP_VS_WRITE
 (0x1u << 0Ë

	)

344 
	#HSMCI_WPSR_WP_VS_RESET
 (0x2u << 0Ë

	)

345 
	#HSMCI_WPSR_WP_VS_BOTH
 (0x3u << 0Ë

	)

346 
	#HSMCI_WPSR_WP_VSRC_Pos
 8

	)

347 
	#HSMCI_WPSR_WP_VSRC_Msk
 (0xffffu << 
HSMCI_WPSR_WP_VSRC_Pos
Ë

	)

349 
	#HSMCI_FIFO_DATA_Pos
 0

	)

350 
	#HSMCI_FIFO_DATA_Msk
 (0xffffffffu << 
HSMCI_FIFO_DATA_Pos
Ë

	)

351 
	#HSMCI_FIFO_DATA
(
vÆue
Ë((
HSMCI_FIFO_DATA_Msk
 & ((vÆueË<< 
HSMCI_FIFO_DATA_Pos
)))

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_matrix.h

45 #i‚de‡
_SAM3XA_MATRIX_COMPONENT_


46 
	#_SAM3XA_MATRIX_COMPONENT_


	)

54 #i‡!(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

57 
RwReg
 
	mMATRIX_MCFG
[6];

58 
RoReg
 
	mRe£rved1
[10];

59 
RwReg
 
	mMATRIX_SCFG
[9];

60 
RoReg
 
	mRe£rved2
[7];

61 
RwReg
 
	mMATRIX_PRAS0
;

62 
RoReg
 
	mRe£rved3
[1];

63 
RwReg
 
	mMATRIX_PRAS1
;

64 
RoReg
 
	mRe£rved4
[1];

65 
RwReg
 
	mMATRIX_PRAS2
;

66 
RoReg
 
	mRe£rved5
[1];

67 
RwReg
 
	mMATRIX_PRAS3
;

68 
RoReg
 
	mRe£rved6
[1];

69 
RwReg
 
	mMATRIX_PRAS4
;

70 
RoReg
 
	mRe£rved7
[1];

71 
RwReg
 
	mMATRIX_PRAS5
;

72 
RoReg
 
	mRe£rved8
[1];

73 
RwReg
 
	mMATRIX_PRAS6
;

74 
RoReg
 
	mRe£rved9
[1];

75 
RwReg
 
	mMATRIX_PRAS7
;

76 
RoReg
 
	mRe£rved10
[1];

77 
RwReg
 
	mMATRIX_PRAS8
;

78 
RoReg
 
	mRe£rved11
[1];

79 
RoReg
 
	mRe£rved12
[14];

80 
RwReg
 
	mMATRIX_MRCR
;

81 
RoReg
 
	mRe£rved13
[4];

82 
RwReg
 
	mCCFG_SYSIO
;

83 
RoReg
 
	mRe£rved14
[51];

84 
RwReg
 
	mMATRIX_WPMR
;

85 
RoReg
 
	mMATRIX_WPSR
;

86 } 
	tM©rix
;

89 
	#MATRIX_MCFG_ULBT_Pos
 0

	)

90 
	#MATRIX_MCFG_ULBT_Msk
 (0x7u << 
MATRIX_MCFG_ULBT_Pos
Ë

	)

91 
	#MATRIX_MCFG_ULBT
(
vÆue
Ë((
MATRIX_MCFG_ULBT_Msk
 & ((vÆueË<< 
MATRIX_MCFG_ULBT_Pos
)))

	)

93 
	#MATRIX_SCFG_SLOT_CYCLE_Pos
 0

	)

94 
	#MATRIX_SCFG_SLOT_CYCLE_Msk
 (0xffu << 
MATRIX_SCFG_SLOT_CYCLE_Pos
Ë

	)

95 
	#MATRIX_SCFG_SLOT_CYCLE
(
vÆue
Ë((
MATRIX_SCFG_SLOT_CYCLE_Msk
 & ((vÆueË<< 
MATRIX_SCFG_SLOT_CYCLE_Pos
)))

	)

96 
	#MATRIX_SCFG_DEFMSTR_TYPE_Pos
 16

	)

97 
	#MATRIX_SCFG_DEFMSTR_TYPE_Msk
 (0x3u << 
MATRIX_SCFG_DEFMSTR_TYPE_Pos
Ë

	)

98 
	#MATRIX_SCFG_DEFMSTR_TYPE
(
vÆue
Ë((
MATRIX_SCFG_DEFMSTR_TYPE_Msk
 & ((vÆueË<< 
MATRIX_SCFG_DEFMSTR_TYPE_Pos
)))

	)

99 
	#MATRIX_SCFG_FIXED_DEFMSTR_Pos
 18

	)

100 
	#MATRIX_SCFG_FIXED_DEFMSTR_Msk
 (0x7u << 
MATRIX_SCFG_FIXED_DEFMSTR_Pos
Ë

	)

101 
	#MATRIX_SCFG_FIXED_DEFMSTR
(
vÆue
Ë((
MATRIX_SCFG_FIXED_DEFMSTR_Msk
 & ((vÆueË<< 
MATRIX_SCFG_FIXED_DEFMSTR_Pos
)))

	)

102 
	#MATRIX_SCFG_ARBT_Pos
 24

	)

103 
	#MATRIX_SCFG_ARBT_Msk
 (0x3u << 
MATRIX_SCFG_ARBT_Pos
Ë

	)

104 
	#MATRIX_SCFG_ARBT
(
vÆue
Ë((
MATRIX_SCFG_ARBT_Msk
 & ((vÆueË<< 
MATRIX_SCFG_ARBT_Pos
)))

	)

106 
	#MATRIX_PRAS0_M0PR_Pos
 0

	)

107 
	#MATRIX_PRAS0_M0PR_Msk
 (0x3u << 
MATRIX_PRAS0_M0PR_Pos
Ë

	)

108 
	#MATRIX_PRAS0_M0PR
(
vÆue
Ë((
MATRIX_PRAS0_M0PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS0_M0PR_Pos
)))

	)

109 
	#MATRIX_PRAS0_M1PR_Pos
 4

	)

110 
	#MATRIX_PRAS0_M1PR_Msk
 (0x3u << 
MATRIX_PRAS0_M1PR_Pos
Ë

	)

111 
	#MATRIX_PRAS0_M1PR
(
vÆue
Ë((
MATRIX_PRAS0_M1PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS0_M1PR_Pos
)))

	)

112 
	#MATRIX_PRAS0_M2PR_Pos
 8

	)

113 
	#MATRIX_PRAS0_M2PR_Msk
 (0x3u << 
MATRIX_PRAS0_M2PR_Pos
Ë

	)

114 
	#MATRIX_PRAS0_M2PR
(
vÆue
Ë((
MATRIX_PRAS0_M2PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS0_M2PR_Pos
)))

	)

115 
	#MATRIX_PRAS0_M3PR_Pos
 12

	)

116 
	#MATRIX_PRAS0_M3PR_Msk
 (0x3u << 
MATRIX_PRAS0_M3PR_Pos
Ë

	)

117 
	#MATRIX_PRAS0_M3PR
(
vÆue
Ë((
MATRIX_PRAS0_M3PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS0_M3PR_Pos
)))

	)

118 
	#MATRIX_PRAS0_M4PR_Pos
 16

	)

119 
	#MATRIX_PRAS0_M4PR_Msk
 (0x3u << 
MATRIX_PRAS0_M4PR_Pos
Ë

	)

120 
	#MATRIX_PRAS0_M4PR
(
vÆue
Ë((
MATRIX_PRAS0_M4PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS0_M4PR_Pos
)))

	)

121 
	#MATRIX_PRAS0_M5PR_Pos
 20

	)

122 
	#MATRIX_PRAS0_M5PR_Msk
 (0x3u << 
MATRIX_PRAS0_M5PR_Pos
Ë

	)

123 
	#MATRIX_PRAS0_M5PR
(
vÆue
Ë((
MATRIX_PRAS0_M5PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS0_M5PR_Pos
)))

	)

125 
	#MATRIX_PRAS1_M0PR_Pos
 0

	)

126 
	#MATRIX_PRAS1_M0PR_Msk
 (0x3u << 
MATRIX_PRAS1_M0PR_Pos
Ë

	)

127 
	#MATRIX_PRAS1_M0PR
(
vÆue
Ë((
MATRIX_PRAS1_M0PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS1_M0PR_Pos
)))

	)

128 
	#MATRIX_PRAS1_M1PR_Pos
 4

	)

129 
	#MATRIX_PRAS1_M1PR_Msk
 (0x3u << 
MATRIX_PRAS1_M1PR_Pos
Ë

	)

130 
	#MATRIX_PRAS1_M1PR
(
vÆue
Ë((
MATRIX_PRAS1_M1PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS1_M1PR_Pos
)))

	)

131 
	#MATRIX_PRAS1_M2PR_Pos
 8

	)

132 
	#MATRIX_PRAS1_M2PR_Msk
 (0x3u << 
MATRIX_PRAS1_M2PR_Pos
Ë

	)

133 
	#MATRIX_PRAS1_M2PR
(
vÆue
Ë((
MATRIX_PRAS1_M2PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS1_M2PR_Pos
)))

	)

134 
	#MATRIX_PRAS1_M3PR_Pos
 12

	)

135 
	#MATRIX_PRAS1_M3PR_Msk
 (0x3u << 
MATRIX_PRAS1_M3PR_Pos
Ë

	)

136 
	#MATRIX_PRAS1_M3PR
(
vÆue
Ë((
MATRIX_PRAS1_M3PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS1_M3PR_Pos
)))

	)

137 
	#MATRIX_PRAS1_M4PR_Pos
 16

	)

138 
	#MATRIX_PRAS1_M4PR_Msk
 (0x3u << 
MATRIX_PRAS1_M4PR_Pos
Ë

	)

139 
	#MATRIX_PRAS1_M4PR
(
vÆue
Ë((
MATRIX_PRAS1_M4PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS1_M4PR_Pos
)))

	)

140 
	#MATRIX_PRAS1_M5PR_Pos
 20

	)

141 
	#MATRIX_PRAS1_M5PR_Msk
 (0x3u << 
MATRIX_PRAS1_M5PR_Pos
Ë

	)

142 
	#MATRIX_PRAS1_M5PR
(
vÆue
Ë((
MATRIX_PRAS1_M5PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS1_M5PR_Pos
)))

	)

144 
	#MATRIX_PRAS2_M0PR_Pos
 0

	)

145 
	#MATRIX_PRAS2_M0PR_Msk
 (0x3u << 
MATRIX_PRAS2_M0PR_Pos
Ë

	)

146 
	#MATRIX_PRAS2_M0PR
(
vÆue
Ë((
MATRIX_PRAS2_M0PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS2_M0PR_Pos
)))

	)

147 
	#MATRIX_PRAS2_M1PR_Pos
 4

	)

148 
	#MATRIX_PRAS2_M1PR_Msk
 (0x3u << 
MATRIX_PRAS2_M1PR_Pos
Ë

	)

149 
	#MATRIX_PRAS2_M1PR
(
vÆue
Ë((
MATRIX_PRAS2_M1PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS2_M1PR_Pos
)))

	)

150 
	#MATRIX_PRAS2_M2PR_Pos
 8

	)

151 
	#MATRIX_PRAS2_M2PR_Msk
 (0x3u << 
MATRIX_PRAS2_M2PR_Pos
Ë

	)

152 
	#MATRIX_PRAS2_M2PR
(
vÆue
Ë((
MATRIX_PRAS2_M2PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS2_M2PR_Pos
)))

	)

153 
	#MATRIX_PRAS2_M3PR_Pos
 12

	)

154 
	#MATRIX_PRAS2_M3PR_Msk
 (0x3u << 
MATRIX_PRAS2_M3PR_Pos
Ë

	)

155 
	#MATRIX_PRAS2_M3PR
(
vÆue
Ë((
MATRIX_PRAS2_M3PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS2_M3PR_Pos
)))

	)

156 
	#MATRIX_PRAS2_M4PR_Pos
 16

	)

157 
	#MATRIX_PRAS2_M4PR_Msk
 (0x3u << 
MATRIX_PRAS2_M4PR_Pos
Ë

	)

158 
	#MATRIX_PRAS2_M4PR
(
vÆue
Ë((
MATRIX_PRAS2_M4PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS2_M4PR_Pos
)))

	)

159 
	#MATRIX_PRAS2_M5PR_Pos
 20

	)

160 
	#MATRIX_PRAS2_M5PR_Msk
 (0x3u << 
MATRIX_PRAS2_M5PR_Pos
Ë

	)

161 
	#MATRIX_PRAS2_M5PR
(
vÆue
Ë((
MATRIX_PRAS2_M5PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS2_M5PR_Pos
)))

	)

163 
	#MATRIX_PRAS3_M0PR_Pos
 0

	)

164 
	#MATRIX_PRAS3_M0PR_Msk
 (0x3u << 
MATRIX_PRAS3_M0PR_Pos
Ë

	)

165 
	#MATRIX_PRAS3_M0PR
(
vÆue
Ë((
MATRIX_PRAS3_M0PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS3_M0PR_Pos
)))

	)

166 
	#MATRIX_PRAS3_M1PR_Pos
 4

	)

167 
	#MATRIX_PRAS3_M1PR_Msk
 (0x3u << 
MATRIX_PRAS3_M1PR_Pos
Ë

	)

168 
	#MATRIX_PRAS3_M1PR
(
vÆue
Ë((
MATRIX_PRAS3_M1PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS3_M1PR_Pos
)))

	)

169 
	#MATRIX_PRAS3_M2PR_Pos
 8

	)

170 
	#MATRIX_PRAS3_M2PR_Msk
 (0x3u << 
MATRIX_PRAS3_M2PR_Pos
Ë

	)

171 
	#MATRIX_PRAS3_M2PR
(
vÆue
Ë((
MATRIX_PRAS3_M2PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS3_M2PR_Pos
)))

	)

172 
	#MATRIX_PRAS3_M3PR_Pos
 12

	)

173 
	#MATRIX_PRAS3_M3PR_Msk
 (0x3u << 
MATRIX_PRAS3_M3PR_Pos
Ë

	)

174 
	#MATRIX_PRAS3_M3PR
(
vÆue
Ë((
MATRIX_PRAS3_M3PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS3_M3PR_Pos
)))

	)

175 
	#MATRIX_PRAS3_M4PR_Pos
 16

	)

176 
	#MATRIX_PRAS3_M4PR_Msk
 (0x3u << 
MATRIX_PRAS3_M4PR_Pos
Ë

	)

177 
	#MATRIX_PRAS3_M4PR
(
vÆue
Ë((
MATRIX_PRAS3_M4PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS3_M4PR_Pos
)))

	)

178 
	#MATRIX_PRAS3_M5PR_Pos
 20

	)

179 
	#MATRIX_PRAS3_M5PR_Msk
 (0x3u << 
MATRIX_PRAS3_M5PR_Pos
Ë

	)

180 
	#MATRIX_PRAS3_M5PR
(
vÆue
Ë((
MATRIX_PRAS3_M5PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS3_M5PR_Pos
)))

	)

182 
	#MATRIX_PRAS4_M0PR_Pos
 0

	)

183 
	#MATRIX_PRAS4_M0PR_Msk
 (0x3u << 
MATRIX_PRAS4_M0PR_Pos
Ë

	)

184 
	#MATRIX_PRAS4_M0PR
(
vÆue
Ë((
MATRIX_PRAS4_M0PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS4_M0PR_Pos
)))

	)

185 
	#MATRIX_PRAS4_M1PR_Pos
 4

	)

186 
	#MATRIX_PRAS4_M1PR_Msk
 (0x3u << 
MATRIX_PRAS4_M1PR_Pos
Ë

	)

187 
	#MATRIX_PRAS4_M1PR
(
vÆue
Ë((
MATRIX_PRAS4_M1PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS4_M1PR_Pos
)))

	)

188 
	#MATRIX_PRAS4_M2PR_Pos
 8

	)

189 
	#MATRIX_PRAS4_M2PR_Msk
 (0x3u << 
MATRIX_PRAS4_M2PR_Pos
Ë

	)

190 
	#MATRIX_PRAS4_M2PR
(
vÆue
Ë((
MATRIX_PRAS4_M2PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS4_M2PR_Pos
)))

	)

191 
	#MATRIX_PRAS4_M3PR_Pos
 12

	)

192 
	#MATRIX_PRAS4_M3PR_Msk
 (0x3u << 
MATRIX_PRAS4_M3PR_Pos
Ë

	)

193 
	#MATRIX_PRAS4_M3PR
(
vÆue
Ë((
MATRIX_PRAS4_M3PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS4_M3PR_Pos
)))

	)

194 
	#MATRIX_PRAS4_M4PR_Pos
 16

	)

195 
	#MATRIX_PRAS4_M4PR_Msk
 (0x3u << 
MATRIX_PRAS4_M4PR_Pos
Ë

	)

196 
	#MATRIX_PRAS4_M4PR
(
vÆue
Ë((
MATRIX_PRAS4_M4PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS4_M4PR_Pos
)))

	)

197 
	#MATRIX_PRAS4_M5PR_Pos
 20

	)

198 
	#MATRIX_PRAS4_M5PR_Msk
 (0x3u << 
MATRIX_PRAS4_M5PR_Pos
Ë

	)

199 
	#MATRIX_PRAS4_M5PR
(
vÆue
Ë((
MATRIX_PRAS4_M5PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS4_M5PR_Pos
)))

	)

201 
	#MATRIX_PRAS5_M0PR_Pos
 0

	)

202 
	#MATRIX_PRAS5_M0PR_Msk
 (0x3u << 
MATRIX_PRAS5_M0PR_Pos
Ë

	)

203 
	#MATRIX_PRAS5_M0PR
(
vÆue
Ë((
MATRIX_PRAS5_M0PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS5_M0PR_Pos
)))

	)

204 
	#MATRIX_PRAS5_M1PR_Pos
 4

	)

205 
	#MATRIX_PRAS5_M1PR_Msk
 (0x3u << 
MATRIX_PRAS5_M1PR_Pos
Ë

	)

206 
	#MATRIX_PRAS5_M1PR
(
vÆue
Ë((
MATRIX_PRAS5_M1PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS5_M1PR_Pos
)))

	)

207 
	#MATRIX_PRAS5_M2PR_Pos
 8

	)

208 
	#MATRIX_PRAS5_M2PR_Msk
 (0x3u << 
MATRIX_PRAS5_M2PR_Pos
Ë

	)

209 
	#MATRIX_PRAS5_M2PR
(
vÆue
Ë((
MATRIX_PRAS5_M2PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS5_M2PR_Pos
)))

	)

210 
	#MATRIX_PRAS5_M3PR_Pos
 12

	)

211 
	#MATRIX_PRAS5_M3PR_Msk
 (0x3u << 
MATRIX_PRAS5_M3PR_Pos
Ë

	)

212 
	#MATRIX_PRAS5_M3PR
(
vÆue
Ë((
MATRIX_PRAS5_M3PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS5_M3PR_Pos
)))

	)

213 
	#MATRIX_PRAS5_M4PR_Pos
 16

	)

214 
	#MATRIX_PRAS5_M4PR_Msk
 (0x3u << 
MATRIX_PRAS5_M4PR_Pos
Ë

	)

215 
	#MATRIX_PRAS5_M4PR
(
vÆue
Ë((
MATRIX_PRAS5_M4PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS5_M4PR_Pos
)))

	)

216 
	#MATRIX_PRAS5_M5PR_Pos
 20

	)

217 
	#MATRIX_PRAS5_M5PR_Msk
 (0x3u << 
MATRIX_PRAS5_M5PR_Pos
Ë

	)

218 
	#MATRIX_PRAS5_M5PR
(
vÆue
Ë((
MATRIX_PRAS5_M5PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS5_M5PR_Pos
)))

	)

220 
	#MATRIX_PRAS6_M0PR_Pos
 0

	)

221 
	#MATRIX_PRAS6_M0PR_Msk
 (0x3u << 
MATRIX_PRAS6_M0PR_Pos
Ë

	)

222 
	#MATRIX_PRAS6_M0PR
(
vÆue
Ë((
MATRIX_PRAS6_M0PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS6_M0PR_Pos
)))

	)

223 
	#MATRIX_PRAS6_M1PR_Pos
 4

	)

224 
	#MATRIX_PRAS6_M1PR_Msk
 (0x3u << 
MATRIX_PRAS6_M1PR_Pos
Ë

	)

225 
	#MATRIX_PRAS6_M1PR
(
vÆue
Ë((
MATRIX_PRAS6_M1PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS6_M1PR_Pos
)))

	)

226 
	#MATRIX_PRAS6_M2PR_Pos
 8

	)

227 
	#MATRIX_PRAS6_M2PR_Msk
 (0x3u << 
MATRIX_PRAS6_M2PR_Pos
Ë

	)

228 
	#MATRIX_PRAS6_M2PR
(
vÆue
Ë((
MATRIX_PRAS6_M2PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS6_M2PR_Pos
)))

	)

229 
	#MATRIX_PRAS6_M3PR_Pos
 12

	)

230 
	#MATRIX_PRAS6_M3PR_Msk
 (0x3u << 
MATRIX_PRAS6_M3PR_Pos
Ë

	)

231 
	#MATRIX_PRAS6_M3PR
(
vÆue
Ë((
MATRIX_PRAS6_M3PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS6_M3PR_Pos
)))

	)

232 
	#MATRIX_PRAS6_M4PR_Pos
 16

	)

233 
	#MATRIX_PRAS6_M4PR_Msk
 (0x3u << 
MATRIX_PRAS6_M4PR_Pos
Ë

	)

234 
	#MATRIX_PRAS6_M4PR
(
vÆue
Ë((
MATRIX_PRAS6_M4PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS6_M4PR_Pos
)))

	)

235 
	#MATRIX_PRAS6_M5PR_Pos
 20

	)

236 
	#MATRIX_PRAS6_M5PR_Msk
 (0x3u << 
MATRIX_PRAS6_M5PR_Pos
Ë

	)

237 
	#MATRIX_PRAS6_M5PR
(
vÆue
Ë((
MATRIX_PRAS6_M5PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS6_M5PR_Pos
)))

	)

239 
	#MATRIX_PRAS7_M0PR_Pos
 0

	)

240 
	#MATRIX_PRAS7_M0PR_Msk
 (0x3u << 
MATRIX_PRAS7_M0PR_Pos
Ë

	)

241 
	#MATRIX_PRAS7_M0PR
(
vÆue
Ë((
MATRIX_PRAS7_M0PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS7_M0PR_Pos
)))

	)

242 
	#MATRIX_PRAS7_M1PR_Pos
 4

	)

243 
	#MATRIX_PRAS7_M1PR_Msk
 (0x3u << 
MATRIX_PRAS7_M1PR_Pos
Ë

	)

244 
	#MATRIX_PRAS7_M1PR
(
vÆue
Ë((
MATRIX_PRAS7_M1PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS7_M1PR_Pos
)))

	)

245 
	#MATRIX_PRAS7_M2PR_Pos
 8

	)

246 
	#MATRIX_PRAS7_M2PR_Msk
 (0x3u << 
MATRIX_PRAS7_M2PR_Pos
Ë

	)

247 
	#MATRIX_PRAS7_M2PR
(
vÆue
Ë((
MATRIX_PRAS7_M2PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS7_M2PR_Pos
)))

	)

248 
	#MATRIX_PRAS7_M3PR_Pos
 12

	)

249 
	#MATRIX_PRAS7_M3PR_Msk
 (0x3u << 
MATRIX_PRAS7_M3PR_Pos
Ë

	)

250 
	#MATRIX_PRAS7_M3PR
(
vÆue
Ë((
MATRIX_PRAS7_M3PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS7_M3PR_Pos
)))

	)

251 
	#MATRIX_PRAS7_M4PR_Pos
 16

	)

252 
	#MATRIX_PRAS7_M4PR_Msk
 (0x3u << 
MATRIX_PRAS7_M4PR_Pos
Ë

	)

253 
	#MATRIX_PRAS7_M4PR
(
vÆue
Ë((
MATRIX_PRAS7_M4PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS7_M4PR_Pos
)))

	)

254 
	#MATRIX_PRAS7_M5PR_Pos
 20

	)

255 
	#MATRIX_PRAS7_M5PR_Msk
 (0x3u << 
MATRIX_PRAS7_M5PR_Pos
Ë

	)

256 
	#MATRIX_PRAS7_M5PR
(
vÆue
Ë((
MATRIX_PRAS7_M5PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS7_M5PR_Pos
)))

	)

258 
	#MATRIX_PRAS8_M0PR_Pos
 0

	)

259 
	#MATRIX_PRAS8_M0PR_Msk
 (0x3u << 
MATRIX_PRAS8_M0PR_Pos
Ë

	)

260 
	#MATRIX_PRAS8_M0PR
(
vÆue
Ë((
MATRIX_PRAS8_M0PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS8_M0PR_Pos
)))

	)

261 
	#MATRIX_PRAS8_M1PR_Pos
 4

	)

262 
	#MATRIX_PRAS8_M1PR_Msk
 (0x3u << 
MATRIX_PRAS8_M1PR_Pos
Ë

	)

263 
	#MATRIX_PRAS8_M1PR
(
vÆue
Ë((
MATRIX_PRAS8_M1PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS8_M1PR_Pos
)))

	)

264 
	#MATRIX_PRAS8_M2PR_Pos
 8

	)

265 
	#MATRIX_PRAS8_M2PR_Msk
 (0x3u << 
MATRIX_PRAS8_M2PR_Pos
Ë

	)

266 
	#MATRIX_PRAS8_M2PR
(
vÆue
Ë((
MATRIX_PRAS8_M2PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS8_M2PR_Pos
)))

	)

267 
	#MATRIX_PRAS8_M3PR_Pos
 12

	)

268 
	#MATRIX_PRAS8_M3PR_Msk
 (0x3u << 
MATRIX_PRAS8_M3PR_Pos
Ë

	)

269 
	#MATRIX_PRAS8_M3PR
(
vÆue
Ë((
MATRIX_PRAS8_M3PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS8_M3PR_Pos
)))

	)

270 
	#MATRIX_PRAS8_M4PR_Pos
 16

	)

271 
	#MATRIX_PRAS8_M4PR_Msk
 (0x3u << 
MATRIX_PRAS8_M4PR_Pos
Ë

	)

272 
	#MATRIX_PRAS8_M4PR
(
vÆue
Ë((
MATRIX_PRAS8_M4PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS8_M4PR_Pos
)))

	)

273 
	#MATRIX_PRAS8_M5PR_Pos
 20

	)

274 
	#MATRIX_PRAS8_M5PR_Msk
 (0x3u << 
MATRIX_PRAS8_M5PR_Pos
Ë

	)

275 
	#MATRIX_PRAS8_M5PR
(
vÆue
Ë((
MATRIX_PRAS8_M5PR_Msk
 & ((vÆueË<< 
MATRIX_PRAS8_M5PR_Pos
)))

	)

277 
	#MATRIX_MRCR_RCB0
 (0x1u << 0Ë

	)

278 
	#MATRIX_MRCR_RCB1
 (0x1u << 1Ë

	)

279 
	#MATRIX_MRCR_RCB2
 (0x1u << 2Ë

	)

280 
	#MATRIX_MRCR_RCB3
 (0x1u << 3Ë

	)

281 
	#MATRIX_MRCR_RCB4_Pos
 4

	)

282 
	#MATRIX_MRCR_RCB4_Msk
 (0x3u << 
MATRIX_MRCR_RCB4_Pos
Ë

	)

283 
	#MATRIX_MRCR_RCB4
(
vÆue
Ë((
MATRIX_MRCR_RCB4_Msk
 & ((vÆueË<< 
MATRIX_MRCR_RCB4_Pos
)))

	)

284 
	#MATRIX_MRCR_RCB5
 (0x1u << 6Ë

	)

286 
	#CCFG_SYSIO_SYSIO12
 (0x1u << 12Ë

	)

288 
	#MATRIX_WPMR_WPEN
 (0x1u << 0Ë

	)

289 
	#MATRIX_WPMR_WPKEY_Pos
 8

	)

290 
	#MATRIX_WPMR_WPKEY_Msk
 (0xffffffu << 
MATRIX_WPMR_WPKEY_Pos
Ë

	)

291 
	#MATRIX_WPMR_WPKEY
(
vÆue
Ë((
MATRIX_WPMR_WPKEY_Msk
 & ((vÆueË<< 
MATRIX_WPMR_WPKEY_Pos
)))

	)

293 
	#MATRIX_WPSR_WPVS
 (0x1u << 0Ë

	)

294 
	#MATRIX_WPSR_WPVSRC_Pos
 8

	)

295 
	#MATRIX_WPSR_WPVSRC_Msk
 (0xffffu << 
MATRIX_WPSR_WPVSRC_Pos
Ë

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_pdc.h

45 #i‚de‡
_SAM3XA_PDC_COMPONENT_


46 
	#_SAM3XA_PDC_COMPONENT_


	)

54 #i‡!(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

57 
RwReg
 
	mPERIPH_RPR
;

58 
RwReg
 
	mPERIPH_RCR
;

59 
RwReg
 
	mPERIPH_TPR
;

60 
RwReg
 
	mPERIPH_TCR
;

61 
RwReg
 
	mPERIPH_RNPR
;

62 
RwReg
 
	mPERIPH_RNCR
;

63 
RwReg
 
	mPERIPH_TNPR
;

64 
RwReg
 
	mPERIPH_TNCR
;

65 
WoReg
 
	mPERIPH_PTCR
;

66 
RoReg
 
	mPERIPH_PTSR
;

67 } 
	tPdc
;

70 
	#PERIPH_RPR_RXPTR_Pos
 0

	)

71 
	#PERIPH_RPR_RXPTR_Msk
 (0xffffffffu << 
PERIPH_RPR_RXPTR_Pos
Ë

	)

72 
	#PERIPH_RPR_RXPTR
(
vÆue
Ë((
PERIPH_RPR_RXPTR_Msk
 & ((vÆueË<< 
PERIPH_RPR_RXPTR_Pos
)))

	)

74 
	#PERIPH_RCR_RXCTR_Pos
 0

	)

75 
	#PERIPH_RCR_RXCTR_Msk
 (0xffffu << 
PERIPH_RCR_RXCTR_Pos
Ë

	)

76 
	#PERIPH_RCR_RXCTR
(
vÆue
Ë((
PERIPH_RCR_RXCTR_Msk
 & ((vÆueË<< 
PERIPH_RCR_RXCTR_Pos
)))

	)

78 
	#PERIPH_TPR_TXPTR_Pos
 0

	)

79 
	#PERIPH_TPR_TXPTR_Msk
 (0xffffffffu << 
PERIPH_TPR_TXPTR_Pos
Ë

	)

80 
	#PERIPH_TPR_TXPTR
(
vÆue
Ë((
PERIPH_TPR_TXPTR_Msk
 & ((vÆueË<< 
PERIPH_TPR_TXPTR_Pos
)))

	)

82 
	#PERIPH_TCR_TXCTR_Pos
 0

	)

83 
	#PERIPH_TCR_TXCTR_Msk
 (0xffffu << 
PERIPH_TCR_TXCTR_Pos
Ë

	)

84 
	#PERIPH_TCR_TXCTR
(
vÆue
Ë((
PERIPH_TCR_TXCTR_Msk
 & ((vÆueË<< 
PERIPH_TCR_TXCTR_Pos
)))

	)

86 
	#PERIPH_RNPR_RXNPTR_Pos
 0

	)

87 
	#PERIPH_RNPR_RXNPTR_Msk
 (0xffffffffu << 
PERIPH_RNPR_RXNPTR_Pos
Ë

	)

88 
	#PERIPH_RNPR_RXNPTR
(
vÆue
Ë((
PERIPH_RNPR_RXNPTR_Msk
 & ((vÆueË<< 
PERIPH_RNPR_RXNPTR_Pos
)))

	)

90 
	#PERIPH_RNCR_RXNCTR_Pos
 0

	)

91 
	#PERIPH_RNCR_RXNCTR_Msk
 (0xffffu << 
PERIPH_RNCR_RXNCTR_Pos
Ë

	)

92 
	#PERIPH_RNCR_RXNCTR
(
vÆue
Ë((
PERIPH_RNCR_RXNCTR_Msk
 & ((vÆueË<< 
PERIPH_RNCR_RXNCTR_Pos
)))

	)

94 
	#PERIPH_TNPR_TXNPTR_Pos
 0

	)

95 
	#PERIPH_TNPR_TXNPTR_Msk
 (0xffffffffu << 
PERIPH_TNPR_TXNPTR_Pos
Ë

	)

96 
	#PERIPH_TNPR_TXNPTR
(
vÆue
Ë((
PERIPH_TNPR_TXNPTR_Msk
 & ((vÆueË<< 
PERIPH_TNPR_TXNPTR_Pos
)))

	)

98 
	#PERIPH_TNCR_TXNCTR_Pos
 0

	)

99 
	#PERIPH_TNCR_TXNCTR_Msk
 (0xffffu << 
PERIPH_TNCR_TXNCTR_Pos
Ë

	)

100 
	#PERIPH_TNCR_TXNCTR
(
vÆue
Ë((
PERIPH_TNCR_TXNCTR_Msk
 & ((vÆueË<< 
PERIPH_TNCR_TXNCTR_Pos
)))

	)

102 
	#PERIPH_PTCR_RXTEN
 (0x1u << 0Ë

	)

103 
	#PERIPH_PTCR_RXTDIS
 (0x1u << 1Ë

	)

104 
	#PERIPH_PTCR_TXTEN
 (0x1u << 8Ë

	)

105 
	#PERIPH_PTCR_TXTDIS
 (0x1u << 9Ë

	)

107 
	#PERIPH_PTSR_RXTEN
 (0x1u << 0Ë

	)

108 
	#PERIPH_PTSR_TXTEN
 (0x1u << 8Ë

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_pio.h

45 #i‚de‡
_SAM3XA_PIO_COMPONENT_


46 
	#_SAM3XA_PIO_COMPONENT_


	)

54 #i‡!(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

57 
WoReg
 
	mPIO_PER
;

58 
WoReg
 
	mPIO_PDR
;

59 
RoReg
 
	mPIO_PSR
;

60 
RoReg
 
	mRe£rved1
[1];

61 
WoReg
 
	mPIO_OER
;

62 
WoReg
 
	mPIO_ODR
;

63 
RoReg
 
	mPIO_OSR
;

64 
RoReg
 
	mRe£rved2
[1];

65 
WoReg
 
	mPIO_IFER
;

66 
WoReg
 
	mPIO_IFDR
;

67 
RoReg
 
	mPIO_IFSR
;

68 
RoReg
 
	mRe£rved3
[1];

69 
WoReg
 
	mPIO_SODR
;

70 
WoReg
 
	mPIO_CODR
;

71 
RwReg
 
	mPIO_ODSR
;

72 
RoReg
 
	mPIO_PDSR
;

73 
WoReg
 
	mPIO_IER
;

74 
WoReg
 
	mPIO_IDR
;

75 
RoReg
 
	mPIO_IMR
;

76 
RoReg
 
	mPIO_ISR
;

77 
WoReg
 
	mPIO_MDER
;

78 
WoReg
 
	mPIO_MDDR
;

79 
RoReg
 
	mPIO_MDSR
;

80 
RoReg
 
	mRe£rved4
[1];

81 
WoReg
 
	mPIO_PUDR
;

82 
WoReg
 
	mPIO_PUER
;

83 
RoReg
 
	mPIO_PUSR
;

84 
RoReg
 
	mRe£rved5
[1];

85 
RwReg
 
	mPIO_ABSR
;

86 
RoReg
 
	mRe£rved6
[3];

87 
WoReg
 
	mPIO_SCIFSR
;

88 
WoReg
 
	mPIO_DIFSR
;

89 
RoReg
 
	mPIO_IFDGSR
;

90 
RwReg
 
	mPIO_SCDR
;

91 
RoReg
 
	mRe£rved7
[4];

92 
WoReg
 
	mPIO_OWER
;

93 
WoReg
 
	mPIO_OWDR
;

94 
RoReg
 
	mPIO_OWSR
;

95 
RoReg
 
	mRe£rved8
[1];

96 
WoReg
 
	mPIO_AIMER
;

97 
WoReg
 
	mPIO_AIMDR
;

98 
RoReg
 
	mPIO_AIMMR
;

99 
RoReg
 
	mRe£rved9
[1];

100 
WoReg
 
	mPIO_ESR
;

101 
WoReg
 
	mPIO_LSR
;

102 
RoReg
 
	mPIO_ELSR
;

103 
RoReg
 
	mRe£rved10
[1];

104 
WoReg
 
	mPIO_FELLSR
;

105 
WoReg
 
	mPIO_REHLSR
;

106 
RoReg
 
	mPIO_FRLHSR
;

107 
RoReg
 
	mRe£rved11
[1];

108 
RoReg
 
	mPIO_LOCKSR
;

109 
RwReg
 
	mPIO_WPMR
;

110 
RoReg
 
	mPIO_WPSR
;

111 } 
	tPio
;

114 
	#PIO_PER_P0
 (0x1u << 0Ë

	)

115 
	#PIO_PER_P1
 (0x1u << 1Ë

	)

116 
	#PIO_PER_P2
 (0x1u << 2Ë

	)

117 
	#PIO_PER_P3
 (0x1u << 3Ë

	)

118 
	#PIO_PER_P4
 (0x1u << 4Ë

	)

119 
	#PIO_PER_P5
 (0x1u << 5Ë

	)

120 
	#PIO_PER_P6
 (0x1u << 6Ë

	)

121 
	#PIO_PER_P7
 (0x1u << 7Ë

	)

122 
	#PIO_PER_P8
 (0x1u << 8Ë

	)

123 
	#PIO_PER_P9
 (0x1u << 9Ë

	)

124 
	#PIO_PER_P10
 (0x1u << 10Ë

	)

125 
	#PIO_PER_P11
 (0x1u << 11Ë

	)

126 
	#PIO_PER_P12
 (0x1u << 12Ë

	)

127 
	#PIO_PER_P13
 (0x1u << 13Ë

	)

128 
	#PIO_PER_P14
 (0x1u << 14Ë

	)

129 
	#PIO_PER_P15
 (0x1u << 15Ë

	)

130 
	#PIO_PER_P16
 (0x1u << 16Ë

	)

131 
	#PIO_PER_P17
 (0x1u << 17Ë

	)

132 
	#PIO_PER_P18
 (0x1u << 18Ë

	)

133 
	#PIO_PER_P19
 (0x1u << 19Ë

	)

134 
	#PIO_PER_P20
 (0x1u << 20Ë

	)

135 
	#PIO_PER_P21
 (0x1u << 21Ë

	)

136 
	#PIO_PER_P22
 (0x1u << 22Ë

	)

137 
	#PIO_PER_P23
 (0x1u << 23Ë

	)

138 
	#PIO_PER_P24
 (0x1u << 24Ë

	)

139 
	#PIO_PER_P25
 (0x1u << 25Ë

	)

140 
	#PIO_PER_P26
 (0x1u << 26Ë

	)

141 
	#PIO_PER_P27
 (0x1u << 27Ë

	)

142 
	#PIO_PER_P28
 (0x1u << 28Ë

	)

143 
	#PIO_PER_P29
 (0x1u << 29Ë

	)

144 
	#PIO_PER_P30
 (0x1u << 30Ë

	)

145 
	#PIO_PER_P31
 (0x1u << 31Ë

	)

147 
	#PIO_PDR_P0
 (0x1u << 0Ë

	)

148 
	#PIO_PDR_P1
 (0x1u << 1Ë

	)

149 
	#PIO_PDR_P2
 (0x1u << 2Ë

	)

150 
	#PIO_PDR_P3
 (0x1u << 3Ë

	)

151 
	#PIO_PDR_P4
 (0x1u << 4Ë

	)

152 
	#PIO_PDR_P5
 (0x1u << 5Ë

	)

153 
	#PIO_PDR_P6
 (0x1u << 6Ë

	)

154 
	#PIO_PDR_P7
 (0x1u << 7Ë

	)

155 
	#PIO_PDR_P8
 (0x1u << 8Ë

	)

156 
	#PIO_PDR_P9
 (0x1u << 9Ë

	)

157 
	#PIO_PDR_P10
 (0x1u << 10Ë

	)

158 
	#PIO_PDR_P11
 (0x1u << 11Ë

	)

159 
	#PIO_PDR_P12
 (0x1u << 12Ë

	)

160 
	#PIO_PDR_P13
 (0x1u << 13Ë

	)

161 
	#PIO_PDR_P14
 (0x1u << 14Ë

	)

162 
	#PIO_PDR_P15
 (0x1u << 15Ë

	)

163 
	#PIO_PDR_P16
 (0x1u << 16Ë

	)

164 
	#PIO_PDR_P17
 (0x1u << 17Ë

	)

165 
	#PIO_PDR_P18
 (0x1u << 18Ë

	)

166 
	#PIO_PDR_P19
 (0x1u << 19Ë

	)

167 
	#PIO_PDR_P20
 (0x1u << 20Ë

	)

168 
	#PIO_PDR_P21
 (0x1u << 21Ë

	)

169 
	#PIO_PDR_P22
 (0x1u << 22Ë

	)

170 
	#PIO_PDR_P23
 (0x1u << 23Ë

	)

171 
	#PIO_PDR_P24
 (0x1u << 24Ë

	)

172 
	#PIO_PDR_P25
 (0x1u << 25Ë

	)

173 
	#PIO_PDR_P26
 (0x1u << 26Ë

	)

174 
	#PIO_PDR_P27
 (0x1u << 27Ë

	)

175 
	#PIO_PDR_P28
 (0x1u << 28Ë

	)

176 
	#PIO_PDR_P29
 (0x1u << 29Ë

	)

177 
	#PIO_PDR_P30
 (0x1u << 30Ë

	)

178 
	#PIO_PDR_P31
 (0x1u << 31Ë

	)

180 
	#PIO_PSR_P0
 (0x1u << 0Ë

	)

181 
	#PIO_PSR_P1
 (0x1u << 1Ë

	)

182 
	#PIO_PSR_P2
 (0x1u << 2Ë

	)

183 
	#PIO_PSR_P3
 (0x1u << 3Ë

	)

184 
	#PIO_PSR_P4
 (0x1u << 4Ë

	)

185 
	#PIO_PSR_P5
 (0x1u << 5Ë

	)

186 
	#PIO_PSR_P6
 (0x1u << 6Ë

	)

187 
	#PIO_PSR_P7
 (0x1u << 7Ë

	)

188 
	#PIO_PSR_P8
 (0x1u << 8Ë

	)

189 
	#PIO_PSR_P9
 (0x1u << 9Ë

	)

190 
	#PIO_PSR_P10
 (0x1u << 10Ë

	)

191 
	#PIO_PSR_P11
 (0x1u << 11Ë

	)

192 
	#PIO_PSR_P12
 (0x1u << 12Ë

	)

193 
	#PIO_PSR_P13
 (0x1u << 13Ë

	)

194 
	#PIO_PSR_P14
 (0x1u << 14Ë

	)

195 
	#PIO_PSR_P15
 (0x1u << 15Ë

	)

196 
	#PIO_PSR_P16
 (0x1u << 16Ë

	)

197 
	#PIO_PSR_P17
 (0x1u << 17Ë

	)

198 
	#PIO_PSR_P18
 (0x1u << 18Ë

	)

199 
	#PIO_PSR_P19
 (0x1u << 19Ë

	)

200 
	#PIO_PSR_P20
 (0x1u << 20Ë

	)

201 
	#PIO_PSR_P21
 (0x1u << 21Ë

	)

202 
	#PIO_PSR_P22
 (0x1u << 22Ë

	)

203 
	#PIO_PSR_P23
 (0x1u << 23Ë

	)

204 
	#PIO_PSR_P24
 (0x1u << 24Ë

	)

205 
	#PIO_PSR_P25
 (0x1u << 25Ë

	)

206 
	#PIO_PSR_P26
 (0x1u << 26Ë

	)

207 
	#PIO_PSR_P27
 (0x1u << 27Ë

	)

208 
	#PIO_PSR_P28
 (0x1u << 28Ë

	)

209 
	#PIO_PSR_P29
 (0x1u << 29Ë

	)

210 
	#PIO_PSR_P30
 (0x1u << 30Ë

	)

211 
	#PIO_PSR_P31
 (0x1u << 31Ë

	)

213 
	#PIO_OER_P0
 (0x1u << 0Ë

	)

214 
	#PIO_OER_P1
 (0x1u << 1Ë

	)

215 
	#PIO_OER_P2
 (0x1u << 2Ë

	)

216 
	#PIO_OER_P3
 (0x1u << 3Ë

	)

217 
	#PIO_OER_P4
 (0x1u << 4Ë

	)

218 
	#PIO_OER_P5
 (0x1u << 5Ë

	)

219 
	#PIO_OER_P6
 (0x1u << 6Ë

	)

220 
	#PIO_OER_P7
 (0x1u << 7Ë

	)

221 
	#PIO_OER_P8
 (0x1u << 8Ë

	)

222 
	#PIO_OER_P9
 (0x1u << 9Ë

	)

223 
	#PIO_OER_P10
 (0x1u << 10Ë

	)

224 
	#PIO_OER_P11
 (0x1u << 11Ë

	)

225 
	#PIO_OER_P12
 (0x1u << 12Ë

	)

226 
	#PIO_OER_P13
 (0x1u << 13Ë

	)

227 
	#PIO_OER_P14
 (0x1u << 14Ë

	)

228 
	#PIO_OER_P15
 (0x1u << 15Ë

	)

229 
	#PIO_OER_P16
 (0x1u << 16Ë

	)

230 
	#PIO_OER_P17
 (0x1u << 17Ë

	)

231 
	#PIO_OER_P18
 (0x1u << 18Ë

	)

232 
	#PIO_OER_P19
 (0x1u << 19Ë

	)

233 
	#PIO_OER_P20
 (0x1u << 20Ë

	)

234 
	#PIO_OER_P21
 (0x1u << 21Ë

	)

235 
	#PIO_OER_P22
 (0x1u << 22Ë

	)

236 
	#PIO_OER_P23
 (0x1u << 23Ë

	)

237 
	#PIO_OER_P24
 (0x1u << 24Ë

	)

238 
	#PIO_OER_P25
 (0x1u << 25Ë

	)

239 
	#PIO_OER_P26
 (0x1u << 26Ë

	)

240 
	#PIO_OER_P27
 (0x1u << 27Ë

	)

241 
	#PIO_OER_P28
 (0x1u << 28Ë

	)

242 
	#PIO_OER_P29
 (0x1u << 29Ë

	)

243 
	#PIO_OER_P30
 (0x1u << 30Ë

	)

244 
	#PIO_OER_P31
 (0x1u << 31Ë

	)

246 
	#PIO_ODR_P0
 (0x1u << 0Ë

	)

247 
	#PIO_ODR_P1
 (0x1u << 1Ë

	)

248 
	#PIO_ODR_P2
 (0x1u << 2Ë

	)

249 
	#PIO_ODR_P3
 (0x1u << 3Ë

	)

250 
	#PIO_ODR_P4
 (0x1u << 4Ë

	)

251 
	#PIO_ODR_P5
 (0x1u << 5Ë

	)

252 
	#PIO_ODR_P6
 (0x1u << 6Ë

	)

253 
	#PIO_ODR_P7
 (0x1u << 7Ë

	)

254 
	#PIO_ODR_P8
 (0x1u << 8Ë

	)

255 
	#PIO_ODR_P9
 (0x1u << 9Ë

	)

256 
	#PIO_ODR_P10
 (0x1u << 10Ë

	)

257 
	#PIO_ODR_P11
 (0x1u << 11Ë

	)

258 
	#PIO_ODR_P12
 (0x1u << 12Ë

	)

259 
	#PIO_ODR_P13
 (0x1u << 13Ë

	)

260 
	#PIO_ODR_P14
 (0x1u << 14Ë

	)

261 
	#PIO_ODR_P15
 (0x1u << 15Ë

	)

262 
	#PIO_ODR_P16
 (0x1u << 16Ë

	)

263 
	#PIO_ODR_P17
 (0x1u << 17Ë

	)

264 
	#PIO_ODR_P18
 (0x1u << 18Ë

	)

265 
	#PIO_ODR_P19
 (0x1u << 19Ë

	)

266 
	#PIO_ODR_P20
 (0x1u << 20Ë

	)

267 
	#PIO_ODR_P21
 (0x1u << 21Ë

	)

268 
	#PIO_ODR_P22
 (0x1u << 22Ë

	)

269 
	#PIO_ODR_P23
 (0x1u << 23Ë

	)

270 
	#PIO_ODR_P24
 (0x1u << 24Ë

	)

271 
	#PIO_ODR_P25
 (0x1u << 25Ë

	)

272 
	#PIO_ODR_P26
 (0x1u << 26Ë

	)

273 
	#PIO_ODR_P27
 (0x1u << 27Ë

	)

274 
	#PIO_ODR_P28
 (0x1u << 28Ë

	)

275 
	#PIO_ODR_P29
 (0x1u << 29Ë

	)

276 
	#PIO_ODR_P30
 (0x1u << 30Ë

	)

277 
	#PIO_ODR_P31
 (0x1u << 31Ë

	)

279 
	#PIO_OSR_P0
 (0x1u << 0Ë

	)

280 
	#PIO_OSR_P1
 (0x1u << 1Ë

	)

281 
	#PIO_OSR_P2
 (0x1u << 2Ë

	)

282 
	#PIO_OSR_P3
 (0x1u << 3Ë

	)

283 
	#PIO_OSR_P4
 (0x1u << 4Ë

	)

284 
	#PIO_OSR_P5
 (0x1u << 5Ë

	)

285 
	#PIO_OSR_P6
 (0x1u << 6Ë

	)

286 
	#PIO_OSR_P7
 (0x1u << 7Ë

	)

287 
	#PIO_OSR_P8
 (0x1u << 8Ë

	)

288 
	#PIO_OSR_P9
 (0x1u << 9Ë

	)

289 
	#PIO_OSR_P10
 (0x1u << 10Ë

	)

290 
	#PIO_OSR_P11
 (0x1u << 11Ë

	)

291 
	#PIO_OSR_P12
 (0x1u << 12Ë

	)

292 
	#PIO_OSR_P13
 (0x1u << 13Ë

	)

293 
	#PIO_OSR_P14
 (0x1u << 14Ë

	)

294 
	#PIO_OSR_P15
 (0x1u << 15Ë

	)

295 
	#PIO_OSR_P16
 (0x1u << 16Ë

	)

296 
	#PIO_OSR_P17
 (0x1u << 17Ë

	)

297 
	#PIO_OSR_P18
 (0x1u << 18Ë

	)

298 
	#PIO_OSR_P19
 (0x1u << 19Ë

	)

299 
	#PIO_OSR_P20
 (0x1u << 20Ë

	)

300 
	#PIO_OSR_P21
 (0x1u << 21Ë

	)

301 
	#PIO_OSR_P22
 (0x1u << 22Ë

	)

302 
	#PIO_OSR_P23
 (0x1u << 23Ë

	)

303 
	#PIO_OSR_P24
 (0x1u << 24Ë

	)

304 
	#PIO_OSR_P25
 (0x1u << 25Ë

	)

305 
	#PIO_OSR_P26
 (0x1u << 26Ë

	)

306 
	#PIO_OSR_P27
 (0x1u << 27Ë

	)

307 
	#PIO_OSR_P28
 (0x1u << 28Ë

	)

308 
	#PIO_OSR_P29
 (0x1u << 29Ë

	)

309 
	#PIO_OSR_P30
 (0x1u << 30Ë

	)

310 
	#PIO_OSR_P31
 (0x1u << 31Ë

	)

312 
	#PIO_IFER_P0
 (0x1u << 0Ë

	)

313 
	#PIO_IFER_P1
 (0x1u << 1Ë

	)

314 
	#PIO_IFER_P2
 (0x1u << 2Ë

	)

315 
	#PIO_IFER_P3
 (0x1u << 3Ë

	)

316 
	#PIO_IFER_P4
 (0x1u << 4Ë

	)

317 
	#PIO_IFER_P5
 (0x1u << 5Ë

	)

318 
	#PIO_IFER_P6
 (0x1u << 6Ë

	)

319 
	#PIO_IFER_P7
 (0x1u << 7Ë

	)

320 
	#PIO_IFER_P8
 (0x1u << 8Ë

	)

321 
	#PIO_IFER_P9
 (0x1u << 9Ë

	)

322 
	#PIO_IFER_P10
 (0x1u << 10Ë

	)

323 
	#PIO_IFER_P11
 (0x1u << 11Ë

	)

324 
	#PIO_IFER_P12
 (0x1u << 12Ë

	)

325 
	#PIO_IFER_P13
 (0x1u << 13Ë

	)

326 
	#PIO_IFER_P14
 (0x1u << 14Ë

	)

327 
	#PIO_IFER_P15
 (0x1u << 15Ë

	)

328 
	#PIO_IFER_P16
 (0x1u << 16Ë

	)

329 
	#PIO_IFER_P17
 (0x1u << 17Ë

	)

330 
	#PIO_IFER_P18
 (0x1u << 18Ë

	)

331 
	#PIO_IFER_P19
 (0x1u << 19Ë

	)

332 
	#PIO_IFER_P20
 (0x1u << 20Ë

	)

333 
	#PIO_IFER_P21
 (0x1u << 21Ë

	)

334 
	#PIO_IFER_P22
 (0x1u << 22Ë

	)

335 
	#PIO_IFER_P23
 (0x1u << 23Ë

	)

336 
	#PIO_IFER_P24
 (0x1u << 24Ë

	)

337 
	#PIO_IFER_P25
 (0x1u << 25Ë

	)

338 
	#PIO_IFER_P26
 (0x1u << 26Ë

	)

339 
	#PIO_IFER_P27
 (0x1u << 27Ë

	)

340 
	#PIO_IFER_P28
 (0x1u << 28Ë

	)

341 
	#PIO_IFER_P29
 (0x1u << 29Ë

	)

342 
	#PIO_IFER_P30
 (0x1u << 30Ë

	)

343 
	#PIO_IFER_P31
 (0x1u << 31Ë

	)

345 
	#PIO_IFDR_P0
 (0x1u << 0Ë

	)

346 
	#PIO_IFDR_P1
 (0x1u << 1Ë

	)

347 
	#PIO_IFDR_P2
 (0x1u << 2Ë

	)

348 
	#PIO_IFDR_P3
 (0x1u << 3Ë

	)

349 
	#PIO_IFDR_P4
 (0x1u << 4Ë

	)

350 
	#PIO_IFDR_P5
 (0x1u << 5Ë

	)

351 
	#PIO_IFDR_P6
 (0x1u << 6Ë

	)

352 
	#PIO_IFDR_P7
 (0x1u << 7Ë

	)

353 
	#PIO_IFDR_P8
 (0x1u << 8Ë

	)

354 
	#PIO_IFDR_P9
 (0x1u << 9Ë

	)

355 
	#PIO_IFDR_P10
 (0x1u << 10Ë

	)

356 
	#PIO_IFDR_P11
 (0x1u << 11Ë

	)

357 
	#PIO_IFDR_P12
 (0x1u << 12Ë

	)

358 
	#PIO_IFDR_P13
 (0x1u << 13Ë

	)

359 
	#PIO_IFDR_P14
 (0x1u << 14Ë

	)

360 
	#PIO_IFDR_P15
 (0x1u << 15Ë

	)

361 
	#PIO_IFDR_P16
 (0x1u << 16Ë

	)

362 
	#PIO_IFDR_P17
 (0x1u << 17Ë

	)

363 
	#PIO_IFDR_P18
 (0x1u << 18Ë

	)

364 
	#PIO_IFDR_P19
 (0x1u << 19Ë

	)

365 
	#PIO_IFDR_P20
 (0x1u << 20Ë

	)

366 
	#PIO_IFDR_P21
 (0x1u << 21Ë

	)

367 
	#PIO_IFDR_P22
 (0x1u << 22Ë

	)

368 
	#PIO_IFDR_P23
 (0x1u << 23Ë

	)

369 
	#PIO_IFDR_P24
 (0x1u << 24Ë

	)

370 
	#PIO_IFDR_P25
 (0x1u << 25Ë

	)

371 
	#PIO_IFDR_P26
 (0x1u << 26Ë

	)

372 
	#PIO_IFDR_P27
 (0x1u << 27Ë

	)

373 
	#PIO_IFDR_P28
 (0x1u << 28Ë

	)

374 
	#PIO_IFDR_P29
 (0x1u << 29Ë

	)

375 
	#PIO_IFDR_P30
 (0x1u << 30Ë

	)

376 
	#PIO_IFDR_P31
 (0x1u << 31Ë

	)

378 
	#PIO_IFSR_P0
 (0x1u << 0Ë

	)

379 
	#PIO_IFSR_P1
 (0x1u << 1Ë

	)

380 
	#PIO_IFSR_P2
 (0x1u << 2Ë

	)

381 
	#PIO_IFSR_P3
 (0x1u << 3Ë

	)

382 
	#PIO_IFSR_P4
 (0x1u << 4Ë

	)

383 
	#PIO_IFSR_P5
 (0x1u << 5Ë

	)

384 
	#PIO_IFSR_P6
 (0x1u << 6Ë

	)

385 
	#PIO_IFSR_P7
 (0x1u << 7Ë

	)

386 
	#PIO_IFSR_P8
 (0x1u << 8Ë

	)

387 
	#PIO_IFSR_P9
 (0x1u << 9Ë

	)

388 
	#PIO_IFSR_P10
 (0x1u << 10Ë

	)

389 
	#PIO_IFSR_P11
 (0x1u << 11Ë

	)

390 
	#PIO_IFSR_P12
 (0x1u << 12Ë

	)

391 
	#PIO_IFSR_P13
 (0x1u << 13Ë

	)

392 
	#PIO_IFSR_P14
 (0x1u << 14Ë

	)

393 
	#PIO_IFSR_P15
 (0x1u << 15Ë

	)

394 
	#PIO_IFSR_P16
 (0x1u << 16Ë

	)

395 
	#PIO_IFSR_P17
 (0x1u << 17Ë

	)

396 
	#PIO_IFSR_P18
 (0x1u << 18Ë

	)

397 
	#PIO_IFSR_P19
 (0x1u << 19Ë

	)

398 
	#PIO_IFSR_P20
 (0x1u << 20Ë

	)

399 
	#PIO_IFSR_P21
 (0x1u << 21Ë

	)

400 
	#PIO_IFSR_P22
 (0x1u << 22Ë

	)

401 
	#PIO_IFSR_P23
 (0x1u << 23Ë

	)

402 
	#PIO_IFSR_P24
 (0x1u << 24Ë

	)

403 
	#PIO_IFSR_P25
 (0x1u << 25Ë

	)

404 
	#PIO_IFSR_P26
 (0x1u << 26Ë

	)

405 
	#PIO_IFSR_P27
 (0x1u << 27Ë

	)

406 
	#PIO_IFSR_P28
 (0x1u << 28Ë

	)

407 
	#PIO_IFSR_P29
 (0x1u << 29Ë

	)

408 
	#PIO_IFSR_P30
 (0x1u << 30Ë

	)

409 
	#PIO_IFSR_P31
 (0x1u << 31Ë

	)

411 
	#PIO_SODR_P0
 (0x1u << 0Ë

	)

412 
	#PIO_SODR_P1
 (0x1u << 1Ë

	)

413 
	#PIO_SODR_P2
 (0x1u << 2Ë

	)

414 
	#PIO_SODR_P3
 (0x1u << 3Ë

	)

415 
	#PIO_SODR_P4
 (0x1u << 4Ë

	)

416 
	#PIO_SODR_P5
 (0x1u << 5Ë

	)

417 
	#PIO_SODR_P6
 (0x1u << 6Ë

	)

418 
	#PIO_SODR_P7
 (0x1u << 7Ë

	)

419 
	#PIO_SODR_P8
 (0x1u << 8Ë

	)

420 
	#PIO_SODR_P9
 (0x1u << 9Ë

	)

421 
	#PIO_SODR_P10
 (0x1u << 10Ë

	)

422 
	#PIO_SODR_P11
 (0x1u << 11Ë

	)

423 
	#PIO_SODR_P12
 (0x1u << 12Ë

	)

424 
	#PIO_SODR_P13
 (0x1u << 13Ë

	)

425 
	#PIO_SODR_P14
 (0x1u << 14Ë

	)

426 
	#PIO_SODR_P15
 (0x1u << 15Ë

	)

427 
	#PIO_SODR_P16
 (0x1u << 16Ë

	)

428 
	#PIO_SODR_P17
 (0x1u << 17Ë

	)

429 
	#PIO_SODR_P18
 (0x1u << 18Ë

	)

430 
	#PIO_SODR_P19
 (0x1u << 19Ë

	)

431 
	#PIO_SODR_P20
 (0x1u << 20Ë

	)

432 
	#PIO_SODR_P21
 (0x1u << 21Ë

	)

433 
	#PIO_SODR_P22
 (0x1u << 22Ë

	)

434 
	#PIO_SODR_P23
 (0x1u << 23Ë

	)

435 
	#PIO_SODR_P24
 (0x1u << 24Ë

	)

436 
	#PIO_SODR_P25
 (0x1u << 25Ë

	)

437 
	#PIO_SODR_P26
 (0x1u << 26Ë

	)

438 
	#PIO_SODR_P27
 (0x1u << 27Ë

	)

439 
	#PIO_SODR_P28
 (0x1u << 28Ë

	)

440 
	#PIO_SODR_P29
 (0x1u << 29Ë

	)

441 
	#PIO_SODR_P30
 (0x1u << 30Ë

	)

442 
	#PIO_SODR_P31
 (0x1u << 31Ë

	)

444 
	#PIO_CODR_P0
 (0x1u << 0Ë

	)

445 
	#PIO_CODR_P1
 (0x1u << 1Ë

	)

446 
	#PIO_CODR_P2
 (0x1u << 2Ë

	)

447 
	#PIO_CODR_P3
 (0x1u << 3Ë

	)

448 
	#PIO_CODR_P4
 (0x1u << 4Ë

	)

449 
	#PIO_CODR_P5
 (0x1u << 5Ë

	)

450 
	#PIO_CODR_P6
 (0x1u << 6Ë

	)

451 
	#PIO_CODR_P7
 (0x1u << 7Ë

	)

452 
	#PIO_CODR_P8
 (0x1u << 8Ë

	)

453 
	#PIO_CODR_P9
 (0x1u << 9Ë

	)

454 
	#PIO_CODR_P10
 (0x1u << 10Ë

	)

455 
	#PIO_CODR_P11
 (0x1u << 11Ë

	)

456 
	#PIO_CODR_P12
 (0x1u << 12Ë

	)

457 
	#PIO_CODR_P13
 (0x1u << 13Ë

	)

458 
	#PIO_CODR_P14
 (0x1u << 14Ë

	)

459 
	#PIO_CODR_P15
 (0x1u << 15Ë

	)

460 
	#PIO_CODR_P16
 (0x1u << 16Ë

	)

461 
	#PIO_CODR_P17
 (0x1u << 17Ë

	)

462 
	#PIO_CODR_P18
 (0x1u << 18Ë

	)

463 
	#PIO_CODR_P19
 (0x1u << 19Ë

	)

464 
	#PIO_CODR_P20
 (0x1u << 20Ë

	)

465 
	#PIO_CODR_P21
 (0x1u << 21Ë

	)

466 
	#PIO_CODR_P22
 (0x1u << 22Ë

	)

467 
	#PIO_CODR_P23
 (0x1u << 23Ë

	)

468 
	#PIO_CODR_P24
 (0x1u << 24Ë

	)

469 
	#PIO_CODR_P25
 (0x1u << 25Ë

	)

470 
	#PIO_CODR_P26
 (0x1u << 26Ë

	)

471 
	#PIO_CODR_P27
 (0x1u << 27Ë

	)

472 
	#PIO_CODR_P28
 (0x1u << 28Ë

	)

473 
	#PIO_CODR_P29
 (0x1u << 29Ë

	)

474 
	#PIO_CODR_P30
 (0x1u << 30Ë

	)

475 
	#PIO_CODR_P31
 (0x1u << 31Ë

	)

477 
	#PIO_ODSR_P0
 (0x1u << 0Ë

	)

478 
	#PIO_ODSR_P1
 (0x1u << 1Ë

	)

479 
	#PIO_ODSR_P2
 (0x1u << 2Ë

	)

480 
	#PIO_ODSR_P3
 (0x1u << 3Ë

	)

481 
	#PIO_ODSR_P4
 (0x1u << 4Ë

	)

482 
	#PIO_ODSR_P5
 (0x1u << 5Ë

	)

483 
	#PIO_ODSR_P6
 (0x1u << 6Ë

	)

484 
	#PIO_ODSR_P7
 (0x1u << 7Ë

	)

485 
	#PIO_ODSR_P8
 (0x1u << 8Ë

	)

486 
	#PIO_ODSR_P9
 (0x1u << 9Ë

	)

487 
	#PIO_ODSR_P10
 (0x1u << 10Ë

	)

488 
	#PIO_ODSR_P11
 (0x1u << 11Ë

	)

489 
	#PIO_ODSR_P12
 (0x1u << 12Ë

	)

490 
	#PIO_ODSR_P13
 (0x1u << 13Ë

	)

491 
	#PIO_ODSR_P14
 (0x1u << 14Ë

	)

492 
	#PIO_ODSR_P15
 (0x1u << 15Ë

	)

493 
	#PIO_ODSR_P16
 (0x1u << 16Ë

	)

494 
	#PIO_ODSR_P17
 (0x1u << 17Ë

	)

495 
	#PIO_ODSR_P18
 (0x1u << 18Ë

	)

496 
	#PIO_ODSR_P19
 (0x1u << 19Ë

	)

497 
	#PIO_ODSR_P20
 (0x1u << 20Ë

	)

498 
	#PIO_ODSR_P21
 (0x1u << 21Ë

	)

499 
	#PIO_ODSR_P22
 (0x1u << 22Ë

	)

500 
	#PIO_ODSR_P23
 (0x1u << 23Ë

	)

501 
	#PIO_ODSR_P24
 (0x1u << 24Ë

	)

502 
	#PIO_ODSR_P25
 (0x1u << 25Ë

	)

503 
	#PIO_ODSR_P26
 (0x1u << 26Ë

	)

504 
	#PIO_ODSR_P27
 (0x1u << 27Ë

	)

505 
	#PIO_ODSR_P28
 (0x1u << 28Ë

	)

506 
	#PIO_ODSR_P29
 (0x1u << 29Ë

	)

507 
	#PIO_ODSR_P30
 (0x1u << 30Ë

	)

508 
	#PIO_ODSR_P31
 (0x1u << 31Ë

	)

510 
	#PIO_PDSR_P0
 (0x1u << 0Ë

	)

511 
	#PIO_PDSR_P1
 (0x1u << 1Ë

	)

512 
	#PIO_PDSR_P2
 (0x1u << 2Ë

	)

513 
	#PIO_PDSR_P3
 (0x1u << 3Ë

	)

514 
	#PIO_PDSR_P4
 (0x1u << 4Ë

	)

515 
	#PIO_PDSR_P5
 (0x1u << 5Ë

	)

516 
	#PIO_PDSR_P6
 (0x1u << 6Ë

	)

517 
	#PIO_PDSR_P7
 (0x1u << 7Ë

	)

518 
	#PIO_PDSR_P8
 (0x1u << 8Ë

	)

519 
	#PIO_PDSR_P9
 (0x1u << 9Ë

	)

520 
	#PIO_PDSR_P10
 (0x1u << 10Ë

	)

521 
	#PIO_PDSR_P11
 (0x1u << 11Ë

	)

522 
	#PIO_PDSR_P12
 (0x1u << 12Ë

	)

523 
	#PIO_PDSR_P13
 (0x1u << 13Ë

	)

524 
	#PIO_PDSR_P14
 (0x1u << 14Ë

	)

525 
	#PIO_PDSR_P15
 (0x1u << 15Ë

	)

526 
	#PIO_PDSR_P16
 (0x1u << 16Ë

	)

527 
	#PIO_PDSR_P17
 (0x1u << 17Ë

	)

528 
	#PIO_PDSR_P18
 (0x1u << 18Ë

	)

529 
	#PIO_PDSR_P19
 (0x1u << 19Ë

	)

530 
	#PIO_PDSR_P20
 (0x1u << 20Ë

	)

531 
	#PIO_PDSR_P21
 (0x1u << 21Ë

	)

532 
	#PIO_PDSR_P22
 (0x1u << 22Ë

	)

533 
	#PIO_PDSR_P23
 (0x1u << 23Ë

	)

534 
	#PIO_PDSR_P24
 (0x1u << 24Ë

	)

535 
	#PIO_PDSR_P25
 (0x1u << 25Ë

	)

536 
	#PIO_PDSR_P26
 (0x1u << 26Ë

	)

537 
	#PIO_PDSR_P27
 (0x1u << 27Ë

	)

538 
	#PIO_PDSR_P28
 (0x1u << 28Ë

	)

539 
	#PIO_PDSR_P29
 (0x1u << 29Ë

	)

540 
	#PIO_PDSR_P30
 (0x1u << 30Ë

	)

541 
	#PIO_PDSR_P31
 (0x1u << 31Ë

	)

543 
	#PIO_IER_P0
 (0x1u << 0Ë

	)

544 
	#PIO_IER_P1
 (0x1u << 1Ë

	)

545 
	#PIO_IER_P2
 (0x1u << 2Ë

	)

546 
	#PIO_IER_P3
 (0x1u << 3Ë

	)

547 
	#PIO_IER_P4
 (0x1u << 4Ë

	)

548 
	#PIO_IER_P5
 (0x1u << 5Ë

	)

549 
	#PIO_IER_P6
 (0x1u << 6Ë

	)

550 
	#PIO_IER_P7
 (0x1u << 7Ë

	)

551 
	#PIO_IER_P8
 (0x1u << 8Ë

	)

552 
	#PIO_IER_P9
 (0x1u << 9Ë

	)

553 
	#PIO_IER_P10
 (0x1u << 10Ë

	)

554 
	#PIO_IER_P11
 (0x1u << 11Ë

	)

555 
	#PIO_IER_P12
 (0x1u << 12Ë

	)

556 
	#PIO_IER_P13
 (0x1u << 13Ë

	)

557 
	#PIO_IER_P14
 (0x1u << 14Ë

	)

558 
	#PIO_IER_P15
 (0x1u << 15Ë

	)

559 
	#PIO_IER_P16
 (0x1u << 16Ë

	)

560 
	#PIO_IER_P17
 (0x1u << 17Ë

	)

561 
	#PIO_IER_P18
 (0x1u << 18Ë

	)

562 
	#PIO_IER_P19
 (0x1u << 19Ë

	)

563 
	#PIO_IER_P20
 (0x1u << 20Ë

	)

564 
	#PIO_IER_P21
 (0x1u << 21Ë

	)

565 
	#PIO_IER_P22
 (0x1u << 22Ë

	)

566 
	#PIO_IER_P23
 (0x1u << 23Ë

	)

567 
	#PIO_IER_P24
 (0x1u << 24Ë

	)

568 
	#PIO_IER_P25
 (0x1u << 25Ë

	)

569 
	#PIO_IER_P26
 (0x1u << 26Ë

	)

570 
	#PIO_IER_P27
 (0x1u << 27Ë

	)

571 
	#PIO_IER_P28
 (0x1u << 28Ë

	)

572 
	#PIO_IER_P29
 (0x1u << 29Ë

	)

573 
	#PIO_IER_P30
 (0x1u << 30Ë

	)

574 
	#PIO_IER_P31
 (0x1u << 31Ë

	)

576 
	#PIO_IDR_P0
 (0x1u << 0Ë

	)

577 
	#PIO_IDR_P1
 (0x1u << 1Ë

	)

578 
	#PIO_IDR_P2
 (0x1u << 2Ë

	)

579 
	#PIO_IDR_P3
 (0x1u << 3Ë

	)

580 
	#PIO_IDR_P4
 (0x1u << 4Ë

	)

581 
	#PIO_IDR_P5
 (0x1u << 5Ë

	)

582 
	#PIO_IDR_P6
 (0x1u << 6Ë

	)

583 
	#PIO_IDR_P7
 (0x1u << 7Ë

	)

584 
	#PIO_IDR_P8
 (0x1u << 8Ë

	)

585 
	#PIO_IDR_P9
 (0x1u << 9Ë

	)

586 
	#PIO_IDR_P10
 (0x1u << 10Ë

	)

587 
	#PIO_IDR_P11
 (0x1u << 11Ë

	)

588 
	#PIO_IDR_P12
 (0x1u << 12Ë

	)

589 
	#PIO_IDR_P13
 (0x1u << 13Ë

	)

590 
	#PIO_IDR_P14
 (0x1u << 14Ë

	)

591 
	#PIO_IDR_P15
 (0x1u << 15Ë

	)

592 
	#PIO_IDR_P16
 (0x1u << 16Ë

	)

593 
	#PIO_IDR_P17
 (0x1u << 17Ë

	)

594 
	#PIO_IDR_P18
 (0x1u << 18Ë

	)

595 
	#PIO_IDR_P19
 (0x1u << 19Ë

	)

596 
	#PIO_IDR_P20
 (0x1u << 20Ë

	)

597 
	#PIO_IDR_P21
 (0x1u << 21Ë

	)

598 
	#PIO_IDR_P22
 (0x1u << 22Ë

	)

599 
	#PIO_IDR_P23
 (0x1u << 23Ë

	)

600 
	#PIO_IDR_P24
 (0x1u << 24Ë

	)

601 
	#PIO_IDR_P25
 (0x1u << 25Ë

	)

602 
	#PIO_IDR_P26
 (0x1u << 26Ë

	)

603 
	#PIO_IDR_P27
 (0x1u << 27Ë

	)

604 
	#PIO_IDR_P28
 (0x1u << 28Ë

	)

605 
	#PIO_IDR_P29
 (0x1u << 29Ë

	)

606 
	#PIO_IDR_P30
 (0x1u << 30Ë

	)

607 
	#PIO_IDR_P31
 (0x1u << 31Ë

	)

609 
	#PIO_IMR_P0
 (0x1u << 0Ë

	)

610 
	#PIO_IMR_P1
 (0x1u << 1Ë

	)

611 
	#PIO_IMR_P2
 (0x1u << 2Ë

	)

612 
	#PIO_IMR_P3
 (0x1u << 3Ë

	)

613 
	#PIO_IMR_P4
 (0x1u << 4Ë

	)

614 
	#PIO_IMR_P5
 (0x1u << 5Ë

	)

615 
	#PIO_IMR_P6
 (0x1u << 6Ë

	)

616 
	#PIO_IMR_P7
 (0x1u << 7Ë

	)

617 
	#PIO_IMR_P8
 (0x1u << 8Ë

	)

618 
	#PIO_IMR_P9
 (0x1u << 9Ë

	)

619 
	#PIO_IMR_P10
 (0x1u << 10Ë

	)

620 
	#PIO_IMR_P11
 (0x1u << 11Ë

	)

621 
	#PIO_IMR_P12
 (0x1u << 12Ë

	)

622 
	#PIO_IMR_P13
 (0x1u << 13Ë

	)

623 
	#PIO_IMR_P14
 (0x1u << 14Ë

	)

624 
	#PIO_IMR_P15
 (0x1u << 15Ë

	)

625 
	#PIO_IMR_P16
 (0x1u << 16Ë

	)

626 
	#PIO_IMR_P17
 (0x1u << 17Ë

	)

627 
	#PIO_IMR_P18
 (0x1u << 18Ë

	)

628 
	#PIO_IMR_P19
 (0x1u << 19Ë

	)

629 
	#PIO_IMR_P20
 (0x1u << 20Ë

	)

630 
	#PIO_IMR_P21
 (0x1u << 21Ë

	)

631 
	#PIO_IMR_P22
 (0x1u << 22Ë

	)

632 
	#PIO_IMR_P23
 (0x1u << 23Ë

	)

633 
	#PIO_IMR_P24
 (0x1u << 24Ë

	)

634 
	#PIO_IMR_P25
 (0x1u << 25Ë

	)

635 
	#PIO_IMR_P26
 (0x1u << 26Ë

	)

636 
	#PIO_IMR_P27
 (0x1u << 27Ë

	)

637 
	#PIO_IMR_P28
 (0x1u << 28Ë

	)

638 
	#PIO_IMR_P29
 (0x1u << 29Ë

	)

639 
	#PIO_IMR_P30
 (0x1u << 30Ë

	)

640 
	#PIO_IMR_P31
 (0x1u << 31Ë

	)

642 
	#PIO_ISR_P0
 (0x1u << 0Ë

	)

643 
	#PIO_ISR_P1
 (0x1u << 1Ë

	)

644 
	#PIO_ISR_P2
 (0x1u << 2Ë

	)

645 
	#PIO_ISR_P3
 (0x1u << 3Ë

	)

646 
	#PIO_ISR_P4
 (0x1u << 4Ë

	)

647 
	#PIO_ISR_P5
 (0x1u << 5Ë

	)

648 
	#PIO_ISR_P6
 (0x1u << 6Ë

	)

649 
	#PIO_ISR_P7
 (0x1u << 7Ë

	)

650 
	#PIO_ISR_P8
 (0x1u << 8Ë

	)

651 
	#PIO_ISR_P9
 (0x1u << 9Ë

	)

652 
	#PIO_ISR_P10
 (0x1u << 10Ë

	)

653 
	#PIO_ISR_P11
 (0x1u << 11Ë

	)

654 
	#PIO_ISR_P12
 (0x1u << 12Ë

	)

655 
	#PIO_ISR_P13
 (0x1u << 13Ë

	)

656 
	#PIO_ISR_P14
 (0x1u << 14Ë

	)

657 
	#PIO_ISR_P15
 (0x1u << 15Ë

	)

658 
	#PIO_ISR_P16
 (0x1u << 16Ë

	)

659 
	#PIO_ISR_P17
 (0x1u << 17Ë

	)

660 
	#PIO_ISR_P18
 (0x1u << 18Ë

	)

661 
	#PIO_ISR_P19
 (0x1u << 19Ë

	)

662 
	#PIO_ISR_P20
 (0x1u << 20Ë

	)

663 
	#PIO_ISR_P21
 (0x1u << 21Ë

	)

664 
	#PIO_ISR_P22
 (0x1u << 22Ë

	)

665 
	#PIO_ISR_P23
 (0x1u << 23Ë

	)

666 
	#PIO_ISR_P24
 (0x1u << 24Ë

	)

667 
	#PIO_ISR_P25
 (0x1u << 25Ë

	)

668 
	#PIO_ISR_P26
 (0x1u << 26Ë

	)

669 
	#PIO_ISR_P27
 (0x1u << 27Ë

	)

670 
	#PIO_ISR_P28
 (0x1u << 28Ë

	)

671 
	#PIO_ISR_P29
 (0x1u << 29Ë

	)

672 
	#PIO_ISR_P30
 (0x1u << 30Ë

	)

673 
	#PIO_ISR_P31
 (0x1u << 31Ë

	)

675 
	#PIO_MDER_P0
 (0x1u << 0Ë

	)

676 
	#PIO_MDER_P1
 (0x1u << 1Ë

	)

677 
	#PIO_MDER_P2
 (0x1u << 2Ë

	)

678 
	#PIO_MDER_P3
 (0x1u << 3Ë

	)

679 
	#PIO_MDER_P4
 (0x1u << 4Ë

	)

680 
	#PIO_MDER_P5
 (0x1u << 5Ë

	)

681 
	#PIO_MDER_P6
 (0x1u << 6Ë

	)

682 
	#PIO_MDER_P7
 (0x1u << 7Ë

	)

683 
	#PIO_MDER_P8
 (0x1u << 8Ë

	)

684 
	#PIO_MDER_P9
 (0x1u << 9Ë

	)

685 
	#PIO_MDER_P10
 (0x1u << 10Ë

	)

686 
	#PIO_MDER_P11
 (0x1u << 11Ë

	)

687 
	#PIO_MDER_P12
 (0x1u << 12Ë

	)

688 
	#PIO_MDER_P13
 (0x1u << 13Ë

	)

689 
	#PIO_MDER_P14
 (0x1u << 14Ë

	)

690 
	#PIO_MDER_P15
 (0x1u << 15Ë

	)

691 
	#PIO_MDER_P16
 (0x1u << 16Ë

	)

692 
	#PIO_MDER_P17
 (0x1u << 17Ë

	)

693 
	#PIO_MDER_P18
 (0x1u << 18Ë

	)

694 
	#PIO_MDER_P19
 (0x1u << 19Ë

	)

695 
	#PIO_MDER_P20
 (0x1u << 20Ë

	)

696 
	#PIO_MDER_P21
 (0x1u << 21Ë

	)

697 
	#PIO_MDER_P22
 (0x1u << 22Ë

	)

698 
	#PIO_MDER_P23
 (0x1u << 23Ë

	)

699 
	#PIO_MDER_P24
 (0x1u << 24Ë

	)

700 
	#PIO_MDER_P25
 (0x1u << 25Ë

	)

701 
	#PIO_MDER_P26
 (0x1u << 26Ë

	)

702 
	#PIO_MDER_P27
 (0x1u << 27Ë

	)

703 
	#PIO_MDER_P28
 (0x1u << 28Ë

	)

704 
	#PIO_MDER_P29
 (0x1u << 29Ë

	)

705 
	#PIO_MDER_P30
 (0x1u << 30Ë

	)

706 
	#PIO_MDER_P31
 (0x1u << 31Ë

	)

708 
	#PIO_MDDR_P0
 (0x1u << 0Ë

	)

709 
	#PIO_MDDR_P1
 (0x1u << 1Ë

	)

710 
	#PIO_MDDR_P2
 (0x1u << 2Ë

	)

711 
	#PIO_MDDR_P3
 (0x1u << 3Ë

	)

712 
	#PIO_MDDR_P4
 (0x1u << 4Ë

	)

713 
	#PIO_MDDR_P5
 (0x1u << 5Ë

	)

714 
	#PIO_MDDR_P6
 (0x1u << 6Ë

	)

715 
	#PIO_MDDR_P7
 (0x1u << 7Ë

	)

716 
	#PIO_MDDR_P8
 (0x1u << 8Ë

	)

717 
	#PIO_MDDR_P9
 (0x1u << 9Ë

	)

718 
	#PIO_MDDR_P10
 (0x1u << 10Ë

	)

719 
	#PIO_MDDR_P11
 (0x1u << 11Ë

	)

720 
	#PIO_MDDR_P12
 (0x1u << 12Ë

	)

721 
	#PIO_MDDR_P13
 (0x1u << 13Ë

	)

722 
	#PIO_MDDR_P14
 (0x1u << 14Ë

	)

723 
	#PIO_MDDR_P15
 (0x1u << 15Ë

	)

724 
	#PIO_MDDR_P16
 (0x1u << 16Ë

	)

725 
	#PIO_MDDR_P17
 (0x1u << 17Ë

	)

726 
	#PIO_MDDR_P18
 (0x1u << 18Ë

	)

727 
	#PIO_MDDR_P19
 (0x1u << 19Ë

	)

728 
	#PIO_MDDR_P20
 (0x1u << 20Ë

	)

729 
	#PIO_MDDR_P21
 (0x1u << 21Ë

	)

730 
	#PIO_MDDR_P22
 (0x1u << 22Ë

	)

731 
	#PIO_MDDR_P23
 (0x1u << 23Ë

	)

732 
	#PIO_MDDR_P24
 (0x1u << 24Ë

	)

733 
	#PIO_MDDR_P25
 (0x1u << 25Ë

	)

734 
	#PIO_MDDR_P26
 (0x1u << 26Ë

	)

735 
	#PIO_MDDR_P27
 (0x1u << 27Ë

	)

736 
	#PIO_MDDR_P28
 (0x1u << 28Ë

	)

737 
	#PIO_MDDR_P29
 (0x1u << 29Ë

	)

738 
	#PIO_MDDR_P30
 (0x1u << 30Ë

	)

739 
	#PIO_MDDR_P31
 (0x1u << 31Ë

	)

741 
	#PIO_MDSR_P0
 (0x1u << 0Ë

	)

742 
	#PIO_MDSR_P1
 (0x1u << 1Ë

	)

743 
	#PIO_MDSR_P2
 (0x1u << 2Ë

	)

744 
	#PIO_MDSR_P3
 (0x1u << 3Ë

	)

745 
	#PIO_MDSR_P4
 (0x1u << 4Ë

	)

746 
	#PIO_MDSR_P5
 (0x1u << 5Ë

	)

747 
	#PIO_MDSR_P6
 (0x1u << 6Ë

	)

748 
	#PIO_MDSR_P7
 (0x1u << 7Ë

	)

749 
	#PIO_MDSR_P8
 (0x1u << 8Ë

	)

750 
	#PIO_MDSR_P9
 (0x1u << 9Ë

	)

751 
	#PIO_MDSR_P10
 (0x1u << 10Ë

	)

752 
	#PIO_MDSR_P11
 (0x1u << 11Ë

	)

753 
	#PIO_MDSR_P12
 (0x1u << 12Ë

	)

754 
	#PIO_MDSR_P13
 (0x1u << 13Ë

	)

755 
	#PIO_MDSR_P14
 (0x1u << 14Ë

	)

756 
	#PIO_MDSR_P15
 (0x1u << 15Ë

	)

757 
	#PIO_MDSR_P16
 (0x1u << 16Ë

	)

758 
	#PIO_MDSR_P17
 (0x1u << 17Ë

	)

759 
	#PIO_MDSR_P18
 (0x1u << 18Ë

	)

760 
	#PIO_MDSR_P19
 (0x1u << 19Ë

	)

761 
	#PIO_MDSR_P20
 (0x1u << 20Ë

	)

762 
	#PIO_MDSR_P21
 (0x1u << 21Ë

	)

763 
	#PIO_MDSR_P22
 (0x1u << 22Ë

	)

764 
	#PIO_MDSR_P23
 (0x1u << 23Ë

	)

765 
	#PIO_MDSR_P24
 (0x1u << 24Ë

	)

766 
	#PIO_MDSR_P25
 (0x1u << 25Ë

	)

767 
	#PIO_MDSR_P26
 (0x1u << 26Ë

	)

768 
	#PIO_MDSR_P27
 (0x1u << 27Ë

	)

769 
	#PIO_MDSR_P28
 (0x1u << 28Ë

	)

770 
	#PIO_MDSR_P29
 (0x1u << 29Ë

	)

771 
	#PIO_MDSR_P30
 (0x1u << 30Ë

	)

772 
	#PIO_MDSR_P31
 (0x1u << 31Ë

	)

774 
	#PIO_PUDR_P0
 (0x1u << 0Ë

	)

775 
	#PIO_PUDR_P1
 (0x1u << 1Ë

	)

776 
	#PIO_PUDR_P2
 (0x1u << 2Ë

	)

777 
	#PIO_PUDR_P3
 (0x1u << 3Ë

	)

778 
	#PIO_PUDR_P4
 (0x1u << 4Ë

	)

779 
	#PIO_PUDR_P5
 (0x1u << 5Ë

	)

780 
	#PIO_PUDR_P6
 (0x1u << 6Ë

	)

781 
	#PIO_PUDR_P7
 (0x1u << 7Ë

	)

782 
	#PIO_PUDR_P8
 (0x1u << 8Ë

	)

783 
	#PIO_PUDR_P9
 (0x1u << 9Ë

	)

784 
	#PIO_PUDR_P10
 (0x1u << 10Ë

	)

785 
	#PIO_PUDR_P11
 (0x1u << 11Ë

	)

786 
	#PIO_PUDR_P12
 (0x1u << 12Ë

	)

787 
	#PIO_PUDR_P13
 (0x1u << 13Ë

	)

788 
	#PIO_PUDR_P14
 (0x1u << 14Ë

	)

789 
	#PIO_PUDR_P15
 (0x1u << 15Ë

	)

790 
	#PIO_PUDR_P16
 (0x1u << 16Ë

	)

791 
	#PIO_PUDR_P17
 (0x1u << 17Ë

	)

792 
	#PIO_PUDR_P18
 (0x1u << 18Ë

	)

793 
	#PIO_PUDR_P19
 (0x1u << 19Ë

	)

794 
	#PIO_PUDR_P20
 (0x1u << 20Ë

	)

795 
	#PIO_PUDR_P21
 (0x1u << 21Ë

	)

796 
	#PIO_PUDR_P22
 (0x1u << 22Ë

	)

797 
	#PIO_PUDR_P23
 (0x1u << 23Ë

	)

798 
	#PIO_PUDR_P24
 (0x1u << 24Ë

	)

799 
	#PIO_PUDR_P25
 (0x1u << 25Ë

	)

800 
	#PIO_PUDR_P26
 (0x1u << 26Ë

	)

801 
	#PIO_PUDR_P27
 (0x1u << 27Ë

	)

802 
	#PIO_PUDR_P28
 (0x1u << 28Ë

	)

803 
	#PIO_PUDR_P29
 (0x1u << 29Ë

	)

804 
	#PIO_PUDR_P30
 (0x1u << 30Ë

	)

805 
	#PIO_PUDR_P31
 (0x1u << 31Ë

	)

807 
	#PIO_PUER_P0
 (0x1u << 0Ë

	)

808 
	#PIO_PUER_P1
 (0x1u << 1Ë

	)

809 
	#PIO_PUER_P2
 (0x1u << 2Ë

	)

810 
	#PIO_PUER_P3
 (0x1u << 3Ë

	)

811 
	#PIO_PUER_P4
 (0x1u << 4Ë

	)

812 
	#PIO_PUER_P5
 (0x1u << 5Ë

	)

813 
	#PIO_PUER_P6
 (0x1u << 6Ë

	)

814 
	#PIO_PUER_P7
 (0x1u << 7Ë

	)

815 
	#PIO_PUER_P8
 (0x1u << 8Ë

	)

816 
	#PIO_PUER_P9
 (0x1u << 9Ë

	)

817 
	#PIO_PUER_P10
 (0x1u << 10Ë

	)

818 
	#PIO_PUER_P11
 (0x1u << 11Ë

	)

819 
	#PIO_PUER_P12
 (0x1u << 12Ë

	)

820 
	#PIO_PUER_P13
 (0x1u << 13Ë

	)

821 
	#PIO_PUER_P14
 (0x1u << 14Ë

	)

822 
	#PIO_PUER_P15
 (0x1u << 15Ë

	)

823 
	#PIO_PUER_P16
 (0x1u << 16Ë

	)

824 
	#PIO_PUER_P17
 (0x1u << 17Ë

	)

825 
	#PIO_PUER_P18
 (0x1u << 18Ë

	)

826 
	#PIO_PUER_P19
 (0x1u << 19Ë

	)

827 
	#PIO_PUER_P20
 (0x1u << 20Ë

	)

828 
	#PIO_PUER_P21
 (0x1u << 21Ë

	)

829 
	#PIO_PUER_P22
 (0x1u << 22Ë

	)

830 
	#PIO_PUER_P23
 (0x1u << 23Ë

	)

831 
	#PIO_PUER_P24
 (0x1u << 24Ë

	)

832 
	#PIO_PUER_P25
 (0x1u << 25Ë

	)

833 
	#PIO_PUER_P26
 (0x1u << 26Ë

	)

834 
	#PIO_PUER_P27
 (0x1u << 27Ë

	)

835 
	#PIO_PUER_P28
 (0x1u << 28Ë

	)

836 
	#PIO_PUER_P29
 (0x1u << 29Ë

	)

837 
	#PIO_PUER_P30
 (0x1u << 30Ë

	)

838 
	#PIO_PUER_P31
 (0x1u << 31Ë

	)

840 
	#PIO_PUSR_P0
 (0x1u << 0Ë

	)

841 
	#PIO_PUSR_P1
 (0x1u << 1Ë

	)

842 
	#PIO_PUSR_P2
 (0x1u << 2Ë

	)

843 
	#PIO_PUSR_P3
 (0x1u << 3Ë

	)

844 
	#PIO_PUSR_P4
 (0x1u << 4Ë

	)

845 
	#PIO_PUSR_P5
 (0x1u << 5Ë

	)

846 
	#PIO_PUSR_P6
 (0x1u << 6Ë

	)

847 
	#PIO_PUSR_P7
 (0x1u << 7Ë

	)

848 
	#PIO_PUSR_P8
 (0x1u << 8Ë

	)

849 
	#PIO_PUSR_P9
 (0x1u << 9Ë

	)

850 
	#PIO_PUSR_P10
 (0x1u << 10Ë

	)

851 
	#PIO_PUSR_P11
 (0x1u << 11Ë

	)

852 
	#PIO_PUSR_P12
 (0x1u << 12Ë

	)

853 
	#PIO_PUSR_P13
 (0x1u << 13Ë

	)

854 
	#PIO_PUSR_P14
 (0x1u << 14Ë

	)

855 
	#PIO_PUSR_P15
 (0x1u << 15Ë

	)

856 
	#PIO_PUSR_P16
 (0x1u << 16Ë

	)

857 
	#PIO_PUSR_P17
 (0x1u << 17Ë

	)

858 
	#PIO_PUSR_P18
 (0x1u << 18Ë

	)

859 
	#PIO_PUSR_P19
 (0x1u << 19Ë

	)

860 
	#PIO_PUSR_P20
 (0x1u << 20Ë

	)

861 
	#PIO_PUSR_P21
 (0x1u << 21Ë

	)

862 
	#PIO_PUSR_P22
 (0x1u << 22Ë

	)

863 
	#PIO_PUSR_P23
 (0x1u << 23Ë

	)

864 
	#PIO_PUSR_P24
 (0x1u << 24Ë

	)

865 
	#PIO_PUSR_P25
 (0x1u << 25Ë

	)

866 
	#PIO_PUSR_P26
 (0x1u << 26Ë

	)

867 
	#PIO_PUSR_P27
 (0x1u << 27Ë

	)

868 
	#PIO_PUSR_P28
 (0x1u << 28Ë

	)

869 
	#PIO_PUSR_P29
 (0x1u << 29Ë

	)

870 
	#PIO_PUSR_P30
 (0x1u << 30Ë

	)

871 
	#PIO_PUSR_P31
 (0x1u << 31Ë

	)

873 
	#PIO_ABSR_P0
 (0x1u << 0Ë

	)

874 
	#PIO_ABSR_P1
 (0x1u << 1Ë

	)

875 
	#PIO_ABSR_P2
 (0x1u << 2Ë

	)

876 
	#PIO_ABSR_P3
 (0x1u << 3Ë

	)

877 
	#PIO_ABSR_P4
 (0x1u << 4Ë

	)

878 
	#PIO_ABSR_P5
 (0x1u << 5Ë

	)

879 
	#PIO_ABSR_P6
 (0x1u << 6Ë

	)

880 
	#PIO_ABSR_P7
 (0x1u << 7Ë

	)

881 
	#PIO_ABSR_P8
 (0x1u << 8Ë

	)

882 
	#PIO_ABSR_P9
 (0x1u << 9Ë

	)

883 
	#PIO_ABSR_P10
 (0x1u << 10Ë

	)

884 
	#PIO_ABSR_P11
 (0x1u << 11Ë

	)

885 
	#PIO_ABSR_P12
 (0x1u << 12Ë

	)

886 
	#PIO_ABSR_P13
 (0x1u << 13Ë

	)

887 
	#PIO_ABSR_P14
 (0x1u << 14Ë

	)

888 
	#PIO_ABSR_P15
 (0x1u << 15Ë

	)

889 
	#PIO_ABSR_P16
 (0x1u << 16Ë

	)

890 
	#PIO_ABSR_P17
 (0x1u << 17Ë

	)

891 
	#PIO_ABSR_P18
 (0x1u << 18Ë

	)

892 
	#PIO_ABSR_P19
 (0x1u << 19Ë

	)

893 
	#PIO_ABSR_P20
 (0x1u << 20Ë

	)

894 
	#PIO_ABSR_P21
 (0x1u << 21Ë

	)

895 
	#PIO_ABSR_P22
 (0x1u << 22Ë

	)

896 
	#PIO_ABSR_P23
 (0x1u << 23Ë

	)

897 
	#PIO_ABSR_P24
 (0x1u << 24Ë

	)

898 
	#PIO_ABSR_P25
 (0x1u << 25Ë

	)

899 
	#PIO_ABSR_P26
 (0x1u << 26Ë

	)

900 
	#PIO_ABSR_P27
 (0x1u << 27Ë

	)

901 
	#PIO_ABSR_P28
 (0x1u << 28Ë

	)

902 
	#PIO_ABSR_P29
 (0x1u << 29Ë

	)

903 
	#PIO_ABSR_P30
 (0x1u << 30Ë

	)

904 
	#PIO_ABSR_P31
 (0x1u << 31Ë

	)

906 
	#PIO_SCIFSR_P0
 (0x1u << 0Ë

	)

907 
	#PIO_SCIFSR_P1
 (0x1u << 1Ë

	)

908 
	#PIO_SCIFSR_P2
 (0x1u << 2Ë

	)

909 
	#PIO_SCIFSR_P3
 (0x1u << 3Ë

	)

910 
	#PIO_SCIFSR_P4
 (0x1u << 4Ë

	)

911 
	#PIO_SCIFSR_P5
 (0x1u << 5Ë

	)

912 
	#PIO_SCIFSR_P6
 (0x1u << 6Ë

	)

913 
	#PIO_SCIFSR_P7
 (0x1u << 7Ë

	)

914 
	#PIO_SCIFSR_P8
 (0x1u << 8Ë

	)

915 
	#PIO_SCIFSR_P9
 (0x1u << 9Ë

	)

916 
	#PIO_SCIFSR_P10
 (0x1u << 10Ë

	)

917 
	#PIO_SCIFSR_P11
 (0x1u << 11Ë

	)

918 
	#PIO_SCIFSR_P12
 (0x1u << 12Ë

	)

919 
	#PIO_SCIFSR_P13
 (0x1u << 13Ë

	)

920 
	#PIO_SCIFSR_P14
 (0x1u << 14Ë

	)

921 
	#PIO_SCIFSR_P15
 (0x1u << 15Ë

	)

922 
	#PIO_SCIFSR_P16
 (0x1u << 16Ë

	)

923 
	#PIO_SCIFSR_P17
 (0x1u << 17Ë

	)

924 
	#PIO_SCIFSR_P18
 (0x1u << 18Ë

	)

925 
	#PIO_SCIFSR_P19
 (0x1u << 19Ë

	)

926 
	#PIO_SCIFSR_P20
 (0x1u << 20Ë

	)

927 
	#PIO_SCIFSR_P21
 (0x1u << 21Ë

	)

928 
	#PIO_SCIFSR_P22
 (0x1u << 22Ë

	)

929 
	#PIO_SCIFSR_P23
 (0x1u << 23Ë

	)

930 
	#PIO_SCIFSR_P24
 (0x1u << 24Ë

	)

931 
	#PIO_SCIFSR_P25
 (0x1u << 25Ë

	)

932 
	#PIO_SCIFSR_P26
 (0x1u << 26Ë

	)

933 
	#PIO_SCIFSR_P27
 (0x1u << 27Ë

	)

934 
	#PIO_SCIFSR_P28
 (0x1u << 28Ë

	)

935 
	#PIO_SCIFSR_P29
 (0x1u << 29Ë

	)

936 
	#PIO_SCIFSR_P30
 (0x1u << 30Ë

	)

937 
	#PIO_SCIFSR_P31
 (0x1u << 31Ë

	)

939 
	#PIO_DIFSR_P0
 (0x1u << 0Ë

	)

940 
	#PIO_DIFSR_P1
 (0x1u << 1Ë

	)

941 
	#PIO_DIFSR_P2
 (0x1u << 2Ë

	)

942 
	#PIO_DIFSR_P3
 (0x1u << 3Ë

	)

943 
	#PIO_DIFSR_P4
 (0x1u << 4Ë

	)

944 
	#PIO_DIFSR_P5
 (0x1u << 5Ë

	)

945 
	#PIO_DIFSR_P6
 (0x1u << 6Ë

	)

946 
	#PIO_DIFSR_P7
 (0x1u << 7Ë

	)

947 
	#PIO_DIFSR_P8
 (0x1u << 8Ë

	)

948 
	#PIO_DIFSR_P9
 (0x1u << 9Ë

	)

949 
	#PIO_DIFSR_P10
 (0x1u << 10Ë

	)

950 
	#PIO_DIFSR_P11
 (0x1u << 11Ë

	)

951 
	#PIO_DIFSR_P12
 (0x1u << 12Ë

	)

952 
	#PIO_DIFSR_P13
 (0x1u << 13Ë

	)

953 
	#PIO_DIFSR_P14
 (0x1u << 14Ë

	)

954 
	#PIO_DIFSR_P15
 (0x1u << 15Ë

	)

955 
	#PIO_DIFSR_P16
 (0x1u << 16Ë

	)

956 
	#PIO_DIFSR_P17
 (0x1u << 17Ë

	)

957 
	#PIO_DIFSR_P18
 (0x1u << 18Ë

	)

958 
	#PIO_DIFSR_P19
 (0x1u << 19Ë

	)

959 
	#PIO_DIFSR_P20
 (0x1u << 20Ë

	)

960 
	#PIO_DIFSR_P21
 (0x1u << 21Ë

	)

961 
	#PIO_DIFSR_P22
 (0x1u << 22Ë

	)

962 
	#PIO_DIFSR_P23
 (0x1u << 23Ë

	)

963 
	#PIO_DIFSR_P24
 (0x1u << 24Ë

	)

964 
	#PIO_DIFSR_P25
 (0x1u << 25Ë

	)

965 
	#PIO_DIFSR_P26
 (0x1u << 26Ë

	)

966 
	#PIO_DIFSR_P27
 (0x1u << 27Ë

	)

967 
	#PIO_DIFSR_P28
 (0x1u << 28Ë

	)

968 
	#PIO_DIFSR_P29
 (0x1u << 29Ë

	)

969 
	#PIO_DIFSR_P30
 (0x1u << 30Ë

	)

970 
	#PIO_DIFSR_P31
 (0x1u << 31Ë

	)

972 
	#PIO_IFDGSR_P0
 (0x1u << 0Ë

	)

973 
	#PIO_IFDGSR_P1
 (0x1u << 1Ë

	)

974 
	#PIO_IFDGSR_P2
 (0x1u << 2Ë

	)

975 
	#PIO_IFDGSR_P3
 (0x1u << 3Ë

	)

976 
	#PIO_IFDGSR_P4
 (0x1u << 4Ë

	)

977 
	#PIO_IFDGSR_P5
 (0x1u << 5Ë

	)

978 
	#PIO_IFDGSR_P6
 (0x1u << 6Ë

	)

979 
	#PIO_IFDGSR_P7
 (0x1u << 7Ë

	)

980 
	#PIO_IFDGSR_P8
 (0x1u << 8Ë

	)

981 
	#PIO_IFDGSR_P9
 (0x1u << 9Ë

	)

982 
	#PIO_IFDGSR_P10
 (0x1u << 10Ë

	)

983 
	#PIO_IFDGSR_P11
 (0x1u << 11Ë

	)

984 
	#PIO_IFDGSR_P12
 (0x1u << 12Ë

	)

985 
	#PIO_IFDGSR_P13
 (0x1u << 13Ë

	)

986 
	#PIO_IFDGSR_P14
 (0x1u << 14Ë

	)

987 
	#PIO_IFDGSR_P15
 (0x1u << 15Ë

	)

988 
	#PIO_IFDGSR_P16
 (0x1u << 16Ë

	)

989 
	#PIO_IFDGSR_P17
 (0x1u << 17Ë

	)

990 
	#PIO_IFDGSR_P18
 (0x1u << 18Ë

	)

991 
	#PIO_IFDGSR_P19
 (0x1u << 19Ë

	)

992 
	#PIO_IFDGSR_P20
 (0x1u << 20Ë

	)

993 
	#PIO_IFDGSR_P21
 (0x1u << 21Ë

	)

994 
	#PIO_IFDGSR_P22
 (0x1u << 22Ë

	)

995 
	#PIO_IFDGSR_P23
 (0x1u << 23Ë

	)

996 
	#PIO_IFDGSR_P24
 (0x1u << 24Ë

	)

997 
	#PIO_IFDGSR_P25
 (0x1u << 25Ë

	)

998 
	#PIO_IFDGSR_P26
 (0x1u << 26Ë

	)

999 
	#PIO_IFDGSR_P27
 (0x1u << 27Ë

	)

1000 
	#PIO_IFDGSR_P28
 (0x1u << 28Ë

	)

1001 
	#PIO_IFDGSR_P29
 (0x1u << 29Ë

	)

1002 
	#PIO_IFDGSR_P30
 (0x1u << 30Ë

	)

1003 
	#PIO_IFDGSR_P31
 (0x1u << 31Ë

	)

1005 
	#PIO_SCDR_DIV_Pos
 0

	)

1006 
	#PIO_SCDR_DIV_Msk
 (0x3fffu << 
PIO_SCDR_DIV_Pos
Ë

	)

1007 
	#PIO_SCDR_DIV
(
vÆue
Ë((
PIO_SCDR_DIV_Msk
 & ((vÆueË<< 
PIO_SCDR_DIV_Pos
)))

	)

1009 
	#PIO_OWER_P0
 (0x1u << 0Ë

	)

1010 
	#PIO_OWER_P1
 (0x1u << 1Ë

	)

1011 
	#PIO_OWER_P2
 (0x1u << 2Ë

	)

1012 
	#PIO_OWER_P3
 (0x1u << 3Ë

	)

1013 
	#PIO_OWER_P4
 (0x1u << 4Ë

	)

1014 
	#PIO_OWER_P5
 (0x1u << 5Ë

	)

1015 
	#PIO_OWER_P6
 (0x1u << 6Ë

	)

1016 
	#PIO_OWER_P7
 (0x1u << 7Ë

	)

1017 
	#PIO_OWER_P8
 (0x1u << 8Ë

	)

1018 
	#PIO_OWER_P9
 (0x1u << 9Ë

	)

1019 
	#PIO_OWER_P10
 (0x1u << 10Ë

	)

1020 
	#PIO_OWER_P11
 (0x1u << 11Ë

	)

1021 
	#PIO_OWER_P12
 (0x1u << 12Ë

	)

1022 
	#PIO_OWER_P13
 (0x1u << 13Ë

	)

1023 
	#PIO_OWER_P14
 (0x1u << 14Ë

	)

1024 
	#PIO_OWER_P15
 (0x1u << 15Ë

	)

1025 
	#PIO_OWER_P16
 (0x1u << 16Ë

	)

1026 
	#PIO_OWER_P17
 (0x1u << 17Ë

	)

1027 
	#PIO_OWER_P18
 (0x1u << 18Ë

	)

1028 
	#PIO_OWER_P19
 (0x1u << 19Ë

	)

1029 
	#PIO_OWER_P20
 (0x1u << 20Ë

	)

1030 
	#PIO_OWER_P21
 (0x1u << 21Ë

	)

1031 
	#PIO_OWER_P22
 (0x1u << 22Ë

	)

1032 
	#PIO_OWER_P23
 (0x1u << 23Ë

	)

1033 
	#PIO_OWER_P24
 (0x1u << 24Ë

	)

1034 
	#PIO_OWER_P25
 (0x1u << 25Ë

	)

1035 
	#PIO_OWER_P26
 (0x1u << 26Ë

	)

1036 
	#PIO_OWER_P27
 (0x1u << 27Ë

	)

1037 
	#PIO_OWER_P28
 (0x1u << 28Ë

	)

1038 
	#PIO_OWER_P29
 (0x1u << 29Ë

	)

1039 
	#PIO_OWER_P30
 (0x1u << 30Ë

	)

1040 
	#PIO_OWER_P31
 (0x1u << 31Ë

	)

1042 
	#PIO_OWDR_P0
 (0x1u << 0Ë

	)

1043 
	#PIO_OWDR_P1
 (0x1u << 1Ë

	)

1044 
	#PIO_OWDR_P2
 (0x1u << 2Ë

	)

1045 
	#PIO_OWDR_P3
 (0x1u << 3Ë

	)

1046 
	#PIO_OWDR_P4
 (0x1u << 4Ë

	)

1047 
	#PIO_OWDR_P5
 (0x1u << 5Ë

	)

1048 
	#PIO_OWDR_P6
 (0x1u << 6Ë

	)

1049 
	#PIO_OWDR_P7
 (0x1u << 7Ë

	)

1050 
	#PIO_OWDR_P8
 (0x1u << 8Ë

	)

1051 
	#PIO_OWDR_P9
 (0x1u << 9Ë

	)

1052 
	#PIO_OWDR_P10
 (0x1u << 10Ë

	)

1053 
	#PIO_OWDR_P11
 (0x1u << 11Ë

	)

1054 
	#PIO_OWDR_P12
 (0x1u << 12Ë

	)

1055 
	#PIO_OWDR_P13
 (0x1u << 13Ë

	)

1056 
	#PIO_OWDR_P14
 (0x1u << 14Ë

	)

1057 
	#PIO_OWDR_P15
 (0x1u << 15Ë

	)

1058 
	#PIO_OWDR_P16
 (0x1u << 16Ë

	)

1059 
	#PIO_OWDR_P17
 (0x1u << 17Ë

	)

1060 
	#PIO_OWDR_P18
 (0x1u << 18Ë

	)

1061 
	#PIO_OWDR_P19
 (0x1u << 19Ë

	)

1062 
	#PIO_OWDR_P20
 (0x1u << 20Ë

	)

1063 
	#PIO_OWDR_P21
 (0x1u << 21Ë

	)

1064 
	#PIO_OWDR_P22
 (0x1u << 22Ë

	)

1065 
	#PIO_OWDR_P23
 (0x1u << 23Ë

	)

1066 
	#PIO_OWDR_P24
 (0x1u << 24Ë

	)

1067 
	#PIO_OWDR_P25
 (0x1u << 25Ë

	)

1068 
	#PIO_OWDR_P26
 (0x1u << 26Ë

	)

1069 
	#PIO_OWDR_P27
 (0x1u << 27Ë

	)

1070 
	#PIO_OWDR_P28
 (0x1u << 28Ë

	)

1071 
	#PIO_OWDR_P29
 (0x1u << 29Ë

	)

1072 
	#PIO_OWDR_P30
 (0x1u << 30Ë

	)

1073 
	#PIO_OWDR_P31
 (0x1u << 31Ë

	)

1075 
	#PIO_OWSR_P0
 (0x1u << 0Ë

	)

1076 
	#PIO_OWSR_P1
 (0x1u << 1Ë

	)

1077 
	#PIO_OWSR_P2
 (0x1u << 2Ë

	)

1078 
	#PIO_OWSR_P3
 (0x1u << 3Ë

	)

1079 
	#PIO_OWSR_P4
 (0x1u << 4Ë

	)

1080 
	#PIO_OWSR_P5
 (0x1u << 5Ë

	)

1081 
	#PIO_OWSR_P6
 (0x1u << 6Ë

	)

1082 
	#PIO_OWSR_P7
 (0x1u << 7Ë

	)

1083 
	#PIO_OWSR_P8
 (0x1u << 8Ë

	)

1084 
	#PIO_OWSR_P9
 (0x1u << 9Ë

	)

1085 
	#PIO_OWSR_P10
 (0x1u << 10Ë

	)

1086 
	#PIO_OWSR_P11
 (0x1u << 11Ë

	)

1087 
	#PIO_OWSR_P12
 (0x1u << 12Ë

	)

1088 
	#PIO_OWSR_P13
 (0x1u << 13Ë

	)

1089 
	#PIO_OWSR_P14
 (0x1u << 14Ë

	)

1090 
	#PIO_OWSR_P15
 (0x1u << 15Ë

	)

1091 
	#PIO_OWSR_P16
 (0x1u << 16Ë

	)

1092 
	#PIO_OWSR_P17
 (0x1u << 17Ë

	)

1093 
	#PIO_OWSR_P18
 (0x1u << 18Ë

	)

1094 
	#PIO_OWSR_P19
 (0x1u << 19Ë

	)

1095 
	#PIO_OWSR_P20
 (0x1u << 20Ë

	)

1096 
	#PIO_OWSR_P21
 (0x1u << 21Ë

	)

1097 
	#PIO_OWSR_P22
 (0x1u << 22Ë

	)

1098 
	#PIO_OWSR_P23
 (0x1u << 23Ë

	)

1099 
	#PIO_OWSR_P24
 (0x1u << 24Ë

	)

1100 
	#PIO_OWSR_P25
 (0x1u << 25Ë

	)

1101 
	#PIO_OWSR_P26
 (0x1u << 26Ë

	)

1102 
	#PIO_OWSR_P27
 (0x1u << 27Ë

	)

1103 
	#PIO_OWSR_P28
 (0x1u << 28Ë

	)

1104 
	#PIO_OWSR_P29
 (0x1u << 29Ë

	)

1105 
	#PIO_OWSR_P30
 (0x1u << 30Ë

	)

1106 
	#PIO_OWSR_P31
 (0x1u << 31Ë

	)

1108 
	#PIO_AIMER_P0
 (0x1u << 0Ë

	)

1109 
	#PIO_AIMER_P1
 (0x1u << 1Ë

	)

1110 
	#PIO_AIMER_P2
 (0x1u << 2Ë

	)

1111 
	#PIO_AIMER_P3
 (0x1u << 3Ë

	)

1112 
	#PIO_AIMER_P4
 (0x1u << 4Ë

	)

1113 
	#PIO_AIMER_P5
 (0x1u << 5Ë

	)

1114 
	#PIO_AIMER_P6
 (0x1u << 6Ë

	)

1115 
	#PIO_AIMER_P7
 (0x1u << 7Ë

	)

1116 
	#PIO_AIMER_P8
 (0x1u << 8Ë

	)

1117 
	#PIO_AIMER_P9
 (0x1u << 9Ë

	)

1118 
	#PIO_AIMER_P10
 (0x1u << 10Ë

	)

1119 
	#PIO_AIMER_P11
 (0x1u << 11Ë

	)

1120 
	#PIO_AIMER_P12
 (0x1u << 12Ë

	)

1121 
	#PIO_AIMER_P13
 (0x1u << 13Ë

	)

1122 
	#PIO_AIMER_P14
 (0x1u << 14Ë

	)

1123 
	#PIO_AIMER_P15
 (0x1u << 15Ë

	)

1124 
	#PIO_AIMER_P16
 (0x1u << 16Ë

	)

1125 
	#PIO_AIMER_P17
 (0x1u << 17Ë

	)

1126 
	#PIO_AIMER_P18
 (0x1u << 18Ë

	)

1127 
	#PIO_AIMER_P19
 (0x1u << 19Ë

	)

1128 
	#PIO_AIMER_P20
 (0x1u << 20Ë

	)

1129 
	#PIO_AIMER_P21
 (0x1u << 21Ë

	)

1130 
	#PIO_AIMER_P22
 (0x1u << 22Ë

	)

1131 
	#PIO_AIMER_P23
 (0x1u << 23Ë

	)

1132 
	#PIO_AIMER_P24
 (0x1u << 24Ë

	)

1133 
	#PIO_AIMER_P25
 (0x1u << 25Ë

	)

1134 
	#PIO_AIMER_P26
 (0x1u << 26Ë

	)

1135 
	#PIO_AIMER_P27
 (0x1u << 27Ë

	)

1136 
	#PIO_AIMER_P28
 (0x1u << 28Ë

	)

1137 
	#PIO_AIMER_P29
 (0x1u << 29Ë

	)

1138 
	#PIO_AIMER_P30
 (0x1u << 30Ë

	)

1139 
	#PIO_AIMER_P31
 (0x1u << 31Ë

	)

1141 
	#PIO_AIMDR_P0
 (0x1u << 0Ë

	)

1142 
	#PIO_AIMDR_P1
 (0x1u << 1Ë

	)

1143 
	#PIO_AIMDR_P2
 (0x1u << 2Ë

	)

1144 
	#PIO_AIMDR_P3
 (0x1u << 3Ë

	)

1145 
	#PIO_AIMDR_P4
 (0x1u << 4Ë

	)

1146 
	#PIO_AIMDR_P5
 (0x1u << 5Ë

	)

1147 
	#PIO_AIMDR_P6
 (0x1u << 6Ë

	)

1148 
	#PIO_AIMDR_P7
 (0x1u << 7Ë

	)

1149 
	#PIO_AIMDR_P8
 (0x1u << 8Ë

	)

1150 
	#PIO_AIMDR_P9
 (0x1u << 9Ë

	)

1151 
	#PIO_AIMDR_P10
 (0x1u << 10Ë

	)

1152 
	#PIO_AIMDR_P11
 (0x1u << 11Ë

	)

1153 
	#PIO_AIMDR_P12
 (0x1u << 12Ë

	)

1154 
	#PIO_AIMDR_P13
 (0x1u << 13Ë

	)

1155 
	#PIO_AIMDR_P14
 (0x1u << 14Ë

	)

1156 
	#PIO_AIMDR_P15
 (0x1u << 15Ë

	)

1157 
	#PIO_AIMDR_P16
 (0x1u << 16Ë

	)

1158 
	#PIO_AIMDR_P17
 (0x1u << 17Ë

	)

1159 
	#PIO_AIMDR_P18
 (0x1u << 18Ë

	)

1160 
	#PIO_AIMDR_P19
 (0x1u << 19Ë

	)

1161 
	#PIO_AIMDR_P20
 (0x1u << 20Ë

	)

1162 
	#PIO_AIMDR_P21
 (0x1u << 21Ë

	)

1163 
	#PIO_AIMDR_P22
 (0x1u << 22Ë

	)

1164 
	#PIO_AIMDR_P23
 (0x1u << 23Ë

	)

1165 
	#PIO_AIMDR_P24
 (0x1u << 24Ë

	)

1166 
	#PIO_AIMDR_P25
 (0x1u << 25Ë

	)

1167 
	#PIO_AIMDR_P26
 (0x1u << 26Ë

	)

1168 
	#PIO_AIMDR_P27
 (0x1u << 27Ë

	)

1169 
	#PIO_AIMDR_P28
 (0x1u << 28Ë

	)

1170 
	#PIO_AIMDR_P29
 (0x1u << 29Ë

	)

1171 
	#PIO_AIMDR_P30
 (0x1u << 30Ë

	)

1172 
	#PIO_AIMDR_P31
 (0x1u << 31Ë

	)

1174 
	#PIO_AIMMR_P0
 (0x1u << 0Ë

	)

1175 
	#PIO_AIMMR_P1
 (0x1u << 1Ë

	)

1176 
	#PIO_AIMMR_P2
 (0x1u << 2Ë

	)

1177 
	#PIO_AIMMR_P3
 (0x1u << 3Ë

	)

1178 
	#PIO_AIMMR_P4
 (0x1u << 4Ë

	)

1179 
	#PIO_AIMMR_P5
 (0x1u << 5Ë

	)

1180 
	#PIO_AIMMR_P6
 (0x1u << 6Ë

	)

1181 
	#PIO_AIMMR_P7
 (0x1u << 7Ë

	)

1182 
	#PIO_AIMMR_P8
 (0x1u << 8Ë

	)

1183 
	#PIO_AIMMR_P9
 (0x1u << 9Ë

	)

1184 
	#PIO_AIMMR_P10
 (0x1u << 10Ë

	)

1185 
	#PIO_AIMMR_P11
 (0x1u << 11Ë

	)

1186 
	#PIO_AIMMR_P12
 (0x1u << 12Ë

	)

1187 
	#PIO_AIMMR_P13
 (0x1u << 13Ë

	)

1188 
	#PIO_AIMMR_P14
 (0x1u << 14Ë

	)

1189 
	#PIO_AIMMR_P15
 (0x1u << 15Ë

	)

1190 
	#PIO_AIMMR_P16
 (0x1u << 16Ë

	)

1191 
	#PIO_AIMMR_P17
 (0x1u << 17Ë

	)

1192 
	#PIO_AIMMR_P18
 (0x1u << 18Ë

	)

1193 
	#PIO_AIMMR_P19
 (0x1u << 19Ë

	)

1194 
	#PIO_AIMMR_P20
 (0x1u << 20Ë

	)

1195 
	#PIO_AIMMR_P21
 (0x1u << 21Ë

	)

1196 
	#PIO_AIMMR_P22
 (0x1u << 22Ë

	)

1197 
	#PIO_AIMMR_P23
 (0x1u << 23Ë

	)

1198 
	#PIO_AIMMR_P24
 (0x1u << 24Ë

	)

1199 
	#PIO_AIMMR_P25
 (0x1u << 25Ë

	)

1200 
	#PIO_AIMMR_P26
 (0x1u << 26Ë

	)

1201 
	#PIO_AIMMR_P27
 (0x1u << 27Ë

	)

1202 
	#PIO_AIMMR_P28
 (0x1u << 28Ë

	)

1203 
	#PIO_AIMMR_P29
 (0x1u << 29Ë

	)

1204 
	#PIO_AIMMR_P30
 (0x1u << 30Ë

	)

1205 
	#PIO_AIMMR_P31
 (0x1u << 31Ë

	)

1207 
	#PIO_ESR_P0
 (0x1u << 0Ë

	)

1208 
	#PIO_ESR_P1
 (0x1u << 1Ë

	)

1209 
	#PIO_ESR_P2
 (0x1u << 2Ë

	)

1210 
	#PIO_ESR_P3
 (0x1u << 3Ë

	)

1211 
	#PIO_ESR_P4
 (0x1u << 4Ë

	)

1212 
	#PIO_ESR_P5
 (0x1u << 5Ë

	)

1213 
	#PIO_ESR_P6
 (0x1u << 6Ë

	)

1214 
	#PIO_ESR_P7
 (0x1u << 7Ë

	)

1215 
	#PIO_ESR_P8
 (0x1u << 8Ë

	)

1216 
	#PIO_ESR_P9
 (0x1u << 9Ë

	)

1217 
	#PIO_ESR_P10
 (0x1u << 10Ë

	)

1218 
	#PIO_ESR_P11
 (0x1u << 11Ë

	)

1219 
	#PIO_ESR_P12
 (0x1u << 12Ë

	)

1220 
	#PIO_ESR_P13
 (0x1u << 13Ë

	)

1221 
	#PIO_ESR_P14
 (0x1u << 14Ë

	)

1222 
	#PIO_ESR_P15
 (0x1u << 15Ë

	)

1223 
	#PIO_ESR_P16
 (0x1u << 16Ë

	)

1224 
	#PIO_ESR_P17
 (0x1u << 17Ë

	)

1225 
	#PIO_ESR_P18
 (0x1u << 18Ë

	)

1226 
	#PIO_ESR_P19
 (0x1u << 19Ë

	)

1227 
	#PIO_ESR_P20
 (0x1u << 20Ë

	)

1228 
	#PIO_ESR_P21
 (0x1u << 21Ë

	)

1229 
	#PIO_ESR_P22
 (0x1u << 22Ë

	)

1230 
	#PIO_ESR_P23
 (0x1u << 23Ë

	)

1231 
	#PIO_ESR_P24
 (0x1u << 24Ë

	)

1232 
	#PIO_ESR_P25
 (0x1u << 25Ë

	)

1233 
	#PIO_ESR_P26
 (0x1u << 26Ë

	)

1234 
	#PIO_ESR_P27
 (0x1u << 27Ë

	)

1235 
	#PIO_ESR_P28
 (0x1u << 28Ë

	)

1236 
	#PIO_ESR_P29
 (0x1u << 29Ë

	)

1237 
	#PIO_ESR_P30
 (0x1u << 30Ë

	)

1238 
	#PIO_ESR_P31
 (0x1u << 31Ë

	)

1240 
	#PIO_LSR_P0
 (0x1u << 0Ë

	)

1241 
	#PIO_LSR_P1
 (0x1u << 1Ë

	)

1242 
	#PIO_LSR_P2
 (0x1u << 2Ë

	)

1243 
	#PIO_LSR_P3
 (0x1u << 3Ë

	)

1244 
	#PIO_LSR_P4
 (0x1u << 4Ë

	)

1245 
	#PIO_LSR_P5
 (0x1u << 5Ë

	)

1246 
	#PIO_LSR_P6
 (0x1u << 6Ë

	)

1247 
	#PIO_LSR_P7
 (0x1u << 7Ë

	)

1248 
	#PIO_LSR_P8
 (0x1u << 8Ë

	)

1249 
	#PIO_LSR_P9
 (0x1u << 9Ë

	)

1250 
	#PIO_LSR_P10
 (0x1u << 10Ë

	)

1251 
	#PIO_LSR_P11
 (0x1u << 11Ë

	)

1252 
	#PIO_LSR_P12
 (0x1u << 12Ë

	)

1253 
	#PIO_LSR_P13
 (0x1u << 13Ë

	)

1254 
	#PIO_LSR_P14
 (0x1u << 14Ë

	)

1255 
	#PIO_LSR_P15
 (0x1u << 15Ë

	)

1256 
	#PIO_LSR_P16
 (0x1u << 16Ë

	)

1257 
	#PIO_LSR_P17
 (0x1u << 17Ë

	)

1258 
	#PIO_LSR_P18
 (0x1u << 18Ë

	)

1259 
	#PIO_LSR_P19
 (0x1u << 19Ë

	)

1260 
	#PIO_LSR_P20
 (0x1u << 20Ë

	)

1261 
	#PIO_LSR_P21
 (0x1u << 21Ë

	)

1262 
	#PIO_LSR_P22
 (0x1u << 22Ë

	)

1263 
	#PIO_LSR_P23
 (0x1u << 23Ë

	)

1264 
	#PIO_LSR_P24
 (0x1u << 24Ë

	)

1265 
	#PIO_LSR_P25
 (0x1u << 25Ë

	)

1266 
	#PIO_LSR_P26
 (0x1u << 26Ë

	)

1267 
	#PIO_LSR_P27
 (0x1u << 27Ë

	)

1268 
	#PIO_LSR_P28
 (0x1u << 28Ë

	)

1269 
	#PIO_LSR_P29
 (0x1u << 29Ë

	)

1270 
	#PIO_LSR_P30
 (0x1u << 30Ë

	)

1271 
	#PIO_LSR_P31
 (0x1u << 31Ë

	)

1273 
	#PIO_ELSR_P0
 (0x1u << 0Ë

	)

1274 
	#PIO_ELSR_P1
 (0x1u << 1Ë

	)

1275 
	#PIO_ELSR_P2
 (0x1u << 2Ë

	)

1276 
	#PIO_ELSR_P3
 (0x1u << 3Ë

	)

1277 
	#PIO_ELSR_P4
 (0x1u << 4Ë

	)

1278 
	#PIO_ELSR_P5
 (0x1u << 5Ë

	)

1279 
	#PIO_ELSR_P6
 (0x1u << 6Ë

	)

1280 
	#PIO_ELSR_P7
 (0x1u << 7Ë

	)

1281 
	#PIO_ELSR_P8
 (0x1u << 8Ë

	)

1282 
	#PIO_ELSR_P9
 (0x1u << 9Ë

	)

1283 
	#PIO_ELSR_P10
 (0x1u << 10Ë

	)

1284 
	#PIO_ELSR_P11
 (0x1u << 11Ë

	)

1285 
	#PIO_ELSR_P12
 (0x1u << 12Ë

	)

1286 
	#PIO_ELSR_P13
 (0x1u << 13Ë

	)

1287 
	#PIO_ELSR_P14
 (0x1u << 14Ë

	)

1288 
	#PIO_ELSR_P15
 (0x1u << 15Ë

	)

1289 
	#PIO_ELSR_P16
 (0x1u << 16Ë

	)

1290 
	#PIO_ELSR_P17
 (0x1u << 17Ë

	)

1291 
	#PIO_ELSR_P18
 (0x1u << 18Ë

	)

1292 
	#PIO_ELSR_P19
 (0x1u << 19Ë

	)

1293 
	#PIO_ELSR_P20
 (0x1u << 20Ë

	)

1294 
	#PIO_ELSR_P21
 (0x1u << 21Ë

	)

1295 
	#PIO_ELSR_P22
 (0x1u << 22Ë

	)

1296 
	#PIO_ELSR_P23
 (0x1u << 23Ë

	)

1297 
	#PIO_ELSR_P24
 (0x1u << 24Ë

	)

1298 
	#PIO_ELSR_P25
 (0x1u << 25Ë

	)

1299 
	#PIO_ELSR_P26
 (0x1u << 26Ë

	)

1300 
	#PIO_ELSR_P27
 (0x1u << 27Ë

	)

1301 
	#PIO_ELSR_P28
 (0x1u << 28Ë

	)

1302 
	#PIO_ELSR_P29
 (0x1u << 29Ë

	)

1303 
	#PIO_ELSR_P30
 (0x1u << 30Ë

	)

1304 
	#PIO_ELSR_P31
 (0x1u << 31Ë

	)

1306 
	#PIO_FELLSR_P0
 (0x1u << 0Ë

	)

1307 
	#PIO_FELLSR_P1
 (0x1u << 1Ë

	)

1308 
	#PIO_FELLSR_P2
 (0x1u << 2Ë

	)

1309 
	#PIO_FELLSR_P3
 (0x1u << 3Ë

	)

1310 
	#PIO_FELLSR_P4
 (0x1u << 4Ë

	)

1311 
	#PIO_FELLSR_P5
 (0x1u << 5Ë

	)

1312 
	#PIO_FELLSR_P6
 (0x1u << 6Ë

	)

1313 
	#PIO_FELLSR_P7
 (0x1u << 7Ë

	)

1314 
	#PIO_FELLSR_P8
 (0x1u << 8Ë

	)

1315 
	#PIO_FELLSR_P9
 (0x1u << 9Ë

	)

1316 
	#PIO_FELLSR_P10
 (0x1u << 10Ë

	)

1317 
	#PIO_FELLSR_P11
 (0x1u << 11Ë

	)

1318 
	#PIO_FELLSR_P12
 (0x1u << 12Ë

	)

1319 
	#PIO_FELLSR_P13
 (0x1u << 13Ë

	)

1320 
	#PIO_FELLSR_P14
 (0x1u << 14Ë

	)

1321 
	#PIO_FELLSR_P15
 (0x1u << 15Ë

	)

1322 
	#PIO_FELLSR_P16
 (0x1u << 16Ë

	)

1323 
	#PIO_FELLSR_P17
 (0x1u << 17Ë

	)

1324 
	#PIO_FELLSR_P18
 (0x1u << 18Ë

	)

1325 
	#PIO_FELLSR_P19
 (0x1u << 19Ë

	)

1326 
	#PIO_FELLSR_P20
 (0x1u << 20Ë

	)

1327 
	#PIO_FELLSR_P21
 (0x1u << 21Ë

	)

1328 
	#PIO_FELLSR_P22
 (0x1u << 22Ë

	)

1329 
	#PIO_FELLSR_P23
 (0x1u << 23Ë

	)

1330 
	#PIO_FELLSR_P24
 (0x1u << 24Ë

	)

1331 
	#PIO_FELLSR_P25
 (0x1u << 25Ë

	)

1332 
	#PIO_FELLSR_P26
 (0x1u << 26Ë

	)

1333 
	#PIO_FELLSR_P27
 (0x1u << 27Ë

	)

1334 
	#PIO_FELLSR_P28
 (0x1u << 28Ë

	)

1335 
	#PIO_FELLSR_P29
 (0x1u << 29Ë

	)

1336 
	#PIO_FELLSR_P30
 (0x1u << 30Ë

	)

1337 
	#PIO_FELLSR_P31
 (0x1u << 31Ë

	)

1339 
	#PIO_REHLSR_P0
 (0x1u << 0Ë

	)

1340 
	#PIO_REHLSR_P1
 (0x1u << 1Ë

	)

1341 
	#PIO_REHLSR_P2
 (0x1u << 2Ë

	)

1342 
	#PIO_REHLSR_P3
 (0x1u << 3Ë

	)

1343 
	#PIO_REHLSR_P4
 (0x1u << 4Ë

	)

1344 
	#PIO_REHLSR_P5
 (0x1u << 5Ë

	)

1345 
	#PIO_REHLSR_P6
 (0x1u << 6Ë

	)

1346 
	#PIO_REHLSR_P7
 (0x1u << 7Ë

	)

1347 
	#PIO_REHLSR_P8
 (0x1u << 8Ë

	)

1348 
	#PIO_REHLSR_P9
 (0x1u << 9Ë

	)

1349 
	#PIO_REHLSR_P10
 (0x1u << 10Ë

	)

1350 
	#PIO_REHLSR_P11
 (0x1u << 11Ë

	)

1351 
	#PIO_REHLSR_P12
 (0x1u << 12Ë

	)

1352 
	#PIO_REHLSR_P13
 (0x1u << 13Ë

	)

1353 
	#PIO_REHLSR_P14
 (0x1u << 14Ë

	)

1354 
	#PIO_REHLSR_P15
 (0x1u << 15Ë

	)

1355 
	#PIO_REHLSR_P16
 (0x1u << 16Ë

	)

1356 
	#PIO_REHLSR_P17
 (0x1u << 17Ë

	)

1357 
	#PIO_REHLSR_P18
 (0x1u << 18Ë

	)

1358 
	#PIO_REHLSR_P19
 (0x1u << 19Ë

	)

1359 
	#PIO_REHLSR_P20
 (0x1u << 20Ë

	)

1360 
	#PIO_REHLSR_P21
 (0x1u << 21Ë

	)

1361 
	#PIO_REHLSR_P22
 (0x1u << 22Ë

	)

1362 
	#PIO_REHLSR_P23
 (0x1u << 23Ë

	)

1363 
	#PIO_REHLSR_P24
 (0x1u << 24Ë

	)

1364 
	#PIO_REHLSR_P25
 (0x1u << 25Ë

	)

1365 
	#PIO_REHLSR_P26
 (0x1u << 26Ë

	)

1366 
	#PIO_REHLSR_P27
 (0x1u << 27Ë

	)

1367 
	#PIO_REHLSR_P28
 (0x1u << 28Ë

	)

1368 
	#PIO_REHLSR_P29
 (0x1u << 29Ë

	)

1369 
	#PIO_REHLSR_P30
 (0x1u << 30Ë

	)

1370 
	#PIO_REHLSR_P31
 (0x1u << 31Ë

	)

1372 
	#PIO_FRLHSR_P0
 (0x1u << 0Ë

	)

1373 
	#PIO_FRLHSR_P1
 (0x1u << 1Ë

	)

1374 
	#PIO_FRLHSR_P2
 (0x1u << 2Ë

	)

1375 
	#PIO_FRLHSR_P3
 (0x1u << 3Ë

	)

1376 
	#PIO_FRLHSR_P4
 (0x1u << 4Ë

	)

1377 
	#PIO_FRLHSR_P5
 (0x1u << 5Ë

	)

1378 
	#PIO_FRLHSR_P6
 (0x1u << 6Ë

	)

1379 
	#PIO_FRLHSR_P7
 (0x1u << 7Ë

	)

1380 
	#PIO_FRLHSR_P8
 (0x1u << 8Ë

	)

1381 
	#PIO_FRLHSR_P9
 (0x1u << 9Ë

	)

1382 
	#PIO_FRLHSR_P10
 (0x1u << 10Ë

	)

1383 
	#PIO_FRLHSR_P11
 (0x1u << 11Ë

	)

1384 
	#PIO_FRLHSR_P12
 (0x1u << 12Ë

	)

1385 
	#PIO_FRLHSR_P13
 (0x1u << 13Ë

	)

1386 
	#PIO_FRLHSR_P14
 (0x1u << 14Ë

	)

1387 
	#PIO_FRLHSR_P15
 (0x1u << 15Ë

	)

1388 
	#PIO_FRLHSR_P16
 (0x1u << 16Ë

	)

1389 
	#PIO_FRLHSR_P17
 (0x1u << 17Ë

	)

1390 
	#PIO_FRLHSR_P18
 (0x1u << 18Ë

	)

1391 
	#PIO_FRLHSR_P19
 (0x1u << 19Ë

	)

1392 
	#PIO_FRLHSR_P20
 (0x1u << 20Ë

	)

1393 
	#PIO_FRLHSR_P21
 (0x1u << 21Ë

	)

1394 
	#PIO_FRLHSR_P22
 (0x1u << 22Ë

	)

1395 
	#PIO_FRLHSR_P23
 (0x1u << 23Ë

	)

1396 
	#PIO_FRLHSR_P24
 (0x1u << 24Ë

	)

1397 
	#PIO_FRLHSR_P25
 (0x1u << 25Ë

	)

1398 
	#PIO_FRLHSR_P26
 (0x1u << 26Ë

	)

1399 
	#PIO_FRLHSR_P27
 (0x1u << 27Ë

	)

1400 
	#PIO_FRLHSR_P28
 (0x1u << 28Ë

	)

1401 
	#PIO_FRLHSR_P29
 (0x1u << 29Ë

	)

1402 
	#PIO_FRLHSR_P30
 (0x1u << 30Ë

	)

1403 
	#PIO_FRLHSR_P31
 (0x1u << 31Ë

	)

1405 
	#PIO_LOCKSR_P0
 (0x1u << 0Ë

	)

1406 
	#PIO_LOCKSR_P1
 (0x1u << 1Ë

	)

1407 
	#PIO_LOCKSR_P2
 (0x1u << 2Ë

	)

1408 
	#PIO_LOCKSR_P3
 (0x1u << 3Ë

	)

1409 
	#PIO_LOCKSR_P4
 (0x1u << 4Ë

	)

1410 
	#PIO_LOCKSR_P5
 (0x1u << 5Ë

	)

1411 
	#PIO_LOCKSR_P6
 (0x1u << 6Ë

	)

1412 
	#PIO_LOCKSR_P7
 (0x1u << 7Ë

	)

1413 
	#PIO_LOCKSR_P8
 (0x1u << 8Ë

	)

1414 
	#PIO_LOCKSR_P9
 (0x1u << 9Ë

	)

1415 
	#PIO_LOCKSR_P10
 (0x1u << 10Ë

	)

1416 
	#PIO_LOCKSR_P11
 (0x1u << 11Ë

	)

1417 
	#PIO_LOCKSR_P12
 (0x1u << 12Ë

	)

1418 
	#PIO_LOCKSR_P13
 (0x1u << 13Ë

	)

1419 
	#PIO_LOCKSR_P14
 (0x1u << 14Ë

	)

1420 
	#PIO_LOCKSR_P15
 (0x1u << 15Ë

	)

1421 
	#PIO_LOCKSR_P16
 (0x1u << 16Ë

	)

1422 
	#PIO_LOCKSR_P17
 (0x1u << 17Ë

	)

1423 
	#PIO_LOCKSR_P18
 (0x1u << 18Ë

	)

1424 
	#PIO_LOCKSR_P19
 (0x1u << 19Ë

	)

1425 
	#PIO_LOCKSR_P20
 (0x1u << 20Ë

	)

1426 
	#PIO_LOCKSR_P21
 (0x1u << 21Ë

	)

1427 
	#PIO_LOCKSR_P22
 (0x1u << 22Ë

	)

1428 
	#PIO_LOCKSR_P23
 (0x1u << 23Ë

	)

1429 
	#PIO_LOCKSR_P24
 (0x1u << 24Ë

	)

1430 
	#PIO_LOCKSR_P25
 (0x1u << 25Ë

	)

1431 
	#PIO_LOCKSR_P26
 (0x1u << 26Ë

	)

1432 
	#PIO_LOCKSR_P27
 (0x1u << 27Ë

	)

1433 
	#PIO_LOCKSR_P28
 (0x1u << 28Ë

	)

1434 
	#PIO_LOCKSR_P29
 (0x1u << 29Ë

	)

1435 
	#PIO_LOCKSR_P30
 (0x1u << 30Ë

	)

1436 
	#PIO_LOCKSR_P31
 (0x1u << 31Ë

	)

1438 
	#PIO_WPMR_WPEN
 (0x1u << 0Ë

	)

1439 
	#PIO_WPMR_WPKEY_Pos
 8

	)

1440 
	#PIO_WPMR_WPKEY_Msk
 (0xffffffu << 
PIO_WPMR_WPKEY_Pos
Ë

	)

1441 
	#PIO_WPMR_WPKEY
(
vÆue
Ë((
PIO_WPMR_WPKEY_Msk
 & ((vÆueË<< 
PIO_WPMR_WPKEY_Pos
)))

	)

1443 
	#PIO_WPSR_WPVS
 (0x1u << 0Ë

	)

1444 
	#PIO_WPSR_WPVSRC_Pos
 8

	)

1445 
	#PIO_WPSR_WPVSRC_Msk
 (0xffffu << 
PIO_WPSR_WPVSRC_Pos
Ë

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_pmc.h

45 #i‚de‡
_SAM3XA_PMC_COMPONENT_


46 
	#_SAM3XA_PMC_COMPONENT_


	)

54 #i‡!(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

57 
WoReg
 
	mPMC_SCER
;

58 
WoReg
 
	mPMC_SCDR
;

59 
RoReg
 
	mPMC_SCSR
;

60 
RoReg
 
	mRe£rved1
[1];

61 
WoReg
 
	mPMC_PCER0
;

62 
WoReg
 
	mPMC_PCDR0
;

63 
RoReg
 
	mPMC_PCSR0
;

64 
RwReg
 
	mCKGR_UCKR
;

65 
RwReg
 
	mCKGR_MOR
;

66 
RoReg
 
	mCKGR_MCFR
;

67 
RwReg
 
	mCKGR_PLLAR
;

68 
RoReg
 
	mRe£rved2
[1];

69 
RwReg
 
	mPMC_MCKR
;

70 
RoReg
 
	mRe£rved3
[1];

71 
RwReg
 
	mPMC_USB
;

72 
RoReg
 
	mRe£rved4
[1];

73 
RwReg
 
	mPMC_PCK
[3];

74 
RoReg
 
	mRe£rved5
[5];

75 
WoReg
 
	mPMC_IER
;

76 
WoReg
 
	mPMC_IDR
;

77 
RoReg
 
	mPMC_SR
;

78 
RoReg
 
	mPMC_IMR
;

79 
RwReg
 
	mPMC_FSMR
;

80 
RwReg
 
	mPMC_FSPR
;

81 
WoReg
 
	mPMC_FOCR
;

82 
RoReg
 
	mRe£rved6
[26];

83 
RwReg
 
	mPMC_WPMR
;

84 
RoReg
 
	mPMC_WPSR
;

85 
RoReg
 
	mRe£rved7
[5];

86 
WoReg
 
	mPMC_PCER1
;

87 
WoReg
 
	mPMC_PCDR1
;

88 
RoReg
 
	mPMC_PCSR1
;

89 
RwReg
 
	mPMC_PCR
;

90 } 
	tPmc
;

93 
	#PMC_SCER_UOTGCLK
 (0x1u << 5Ë

	)

94 
	#PMC_SCER_PCK0
 (0x1u << 8Ë

	)

95 
	#PMC_SCER_PCK1
 (0x1u << 9Ë

	)

96 
	#PMC_SCER_PCK2
 (0x1u << 10Ë

	)

98 
	#PMC_SCDR_UOTGCLK
 (0x1u << 5Ë

	)

99 
	#PMC_SCDR_PCK0
 (0x1u << 8Ë

	)

100 
	#PMC_SCDR_PCK1
 (0x1u << 9Ë

	)

101 
	#PMC_SCDR_PCK2
 (0x1u << 10Ë

	)

103 
	#PMC_SCSR_UOTGCLK
 (0x1u << 5Ë

	)

104 
	#PMC_SCSR_PCK0
 (0x1u << 8Ë

	)

105 
	#PMC_SCSR_PCK1
 (0x1u << 9Ë

	)

106 
	#PMC_SCSR_PCK2
 (0x1u << 10Ë

	)

108 
	#PMC_PCER0_PID2
 (0x1u << 2Ë

	)

109 
	#PMC_PCER0_PID3
 (0x1u << 3Ë

	)

110 
	#PMC_PCER0_PID4
 (0x1u << 4Ë

	)

111 
	#PMC_PCER0_PID5
 (0x1u << 5Ë

	)

112 
	#PMC_PCER0_PID6
 (0x1u << 6Ë

	)

113 
	#PMC_PCER0_PID7
 (0x1u << 7Ë

	)

114 
	#PMC_PCER0_PID8
 (0x1u << 8Ë

	)

115 
	#PMC_PCER0_PID9
 (0x1u << 9Ë

	)

116 
	#PMC_PCER0_PID10
 (0x1u << 10Ë

	)

117 
	#PMC_PCER0_PID11
 (0x1u << 11Ë

	)

118 
	#PMC_PCER0_PID12
 (0x1u << 12Ë

	)

119 
	#PMC_PCER0_PID13
 (0x1u << 13Ë

	)

120 
	#PMC_PCER0_PID14
 (0x1u << 14Ë

	)

121 
	#PMC_PCER0_PID15
 (0x1u << 15Ë

	)

122 
	#PMC_PCER0_PID16
 (0x1u << 16Ë

	)

123 
	#PMC_PCER0_PID17
 (0x1u << 17Ë

	)

124 
	#PMC_PCER0_PID18
 (0x1u << 18Ë

	)

125 
	#PMC_PCER0_PID19
 (0x1u << 19Ë

	)

126 
	#PMC_PCER0_PID20
 (0x1u << 20Ë

	)

127 
	#PMC_PCER0_PID21
 (0x1u << 21Ë

	)

128 
	#PMC_PCER0_PID22
 (0x1u << 22Ë

	)

129 
	#PMC_PCER0_PID23
 (0x1u << 23Ë

	)

130 
	#PMC_PCER0_PID24
 (0x1u << 24Ë

	)

131 
	#PMC_PCER0_PID25
 (0x1u << 25Ë

	)

132 
	#PMC_PCER0_PID26
 (0x1u << 26Ë

	)

133 
	#PMC_PCER0_PID27
 (0x1u << 27Ë

	)

134 
	#PMC_PCER0_PID28
 (0x1u << 28Ë

	)

135 
	#PMC_PCER0_PID29
 (0x1u << 29Ë

	)

136 
	#PMC_PCER0_PID30
 (0x1u << 30Ë

	)

137 
	#PMC_PCER0_PID31
 (0x1u << 31Ë

	)

139 
	#PMC_PCDR0_PID2
 (0x1u << 2Ë

	)

140 
	#PMC_PCDR0_PID3
 (0x1u << 3Ë

	)

141 
	#PMC_PCDR0_PID4
 (0x1u << 4Ë

	)

142 
	#PMC_PCDR0_PID5
 (0x1u << 5Ë

	)

143 
	#PMC_PCDR0_PID6
 (0x1u << 6Ë

	)

144 
	#PMC_PCDR0_PID7
 (0x1u << 7Ë

	)

145 
	#PMC_PCDR0_PID8
 (0x1u << 8Ë

	)

146 
	#PMC_PCDR0_PID9
 (0x1u << 9Ë

	)

147 
	#PMC_PCDR0_PID10
 (0x1u << 10Ë

	)

148 
	#PMC_PCDR0_PID11
 (0x1u << 11Ë

	)

149 
	#PMC_PCDR0_PID12
 (0x1u << 12Ë

	)

150 
	#PMC_PCDR0_PID13
 (0x1u << 13Ë

	)

151 
	#PMC_PCDR0_PID14
 (0x1u << 14Ë

	)

152 
	#PMC_PCDR0_PID15
 (0x1u << 15Ë

	)

153 
	#PMC_PCDR0_PID16
 (0x1u << 16Ë

	)

154 
	#PMC_PCDR0_PID17
 (0x1u << 17Ë

	)

155 
	#PMC_PCDR0_PID18
 (0x1u << 18Ë

	)

156 
	#PMC_PCDR0_PID19
 (0x1u << 19Ë

	)

157 
	#PMC_PCDR0_PID20
 (0x1u << 20Ë

	)

158 
	#PMC_PCDR0_PID21
 (0x1u << 21Ë

	)

159 
	#PMC_PCDR0_PID22
 (0x1u << 22Ë

	)

160 
	#PMC_PCDR0_PID23
 (0x1u << 23Ë

	)

161 
	#PMC_PCDR0_PID24
 (0x1u << 24Ë

	)

162 
	#PMC_PCDR0_PID25
 (0x1u << 25Ë

	)

163 
	#PMC_PCDR0_PID26
 (0x1u << 26Ë

	)

164 
	#PMC_PCDR0_PID27
 (0x1u << 27Ë

	)

165 
	#PMC_PCDR0_PID28
 (0x1u << 28Ë

	)

166 
	#PMC_PCDR0_PID29
 (0x1u << 29Ë

	)

167 
	#PMC_PCDR0_PID30
 (0x1u << 30Ë

	)

168 
	#PMC_PCDR0_PID31
 (0x1u << 31Ë

	)

170 
	#PMC_PCSR0_PID2
 (0x1u << 2Ë

	)

171 
	#PMC_PCSR0_PID3
 (0x1u << 3Ë

	)

172 
	#PMC_PCSR0_PID4
 (0x1u << 4Ë

	)

173 
	#PMC_PCSR0_PID5
 (0x1u << 5Ë

	)

174 
	#PMC_PCSR0_PID6
 (0x1u << 6Ë

	)

175 
	#PMC_PCSR0_PID7
 (0x1u << 7Ë

	)

176 
	#PMC_PCSR0_PID8
 (0x1u << 8Ë

	)

177 
	#PMC_PCSR0_PID9
 (0x1u << 9Ë

	)

178 
	#PMC_PCSR0_PID10
 (0x1u << 10Ë

	)

179 
	#PMC_PCSR0_PID11
 (0x1u << 11Ë

	)

180 
	#PMC_PCSR0_PID12
 (0x1u << 12Ë

	)

181 
	#PMC_PCSR0_PID13
 (0x1u << 13Ë

	)

182 
	#PMC_PCSR0_PID14
 (0x1u << 14Ë

	)

183 
	#PMC_PCSR0_PID15
 (0x1u << 15Ë

	)

184 
	#PMC_PCSR0_PID16
 (0x1u << 16Ë

	)

185 
	#PMC_PCSR0_PID17
 (0x1u << 17Ë

	)

186 
	#PMC_PCSR0_PID18
 (0x1u << 18Ë

	)

187 
	#PMC_PCSR0_PID19
 (0x1u << 19Ë

	)

188 
	#PMC_PCSR0_PID20
 (0x1u << 20Ë

	)

189 
	#PMC_PCSR0_PID21
 (0x1u << 21Ë

	)

190 
	#PMC_PCSR0_PID22
 (0x1u << 22Ë

	)

191 
	#PMC_PCSR0_PID23
 (0x1u << 23Ë

	)

192 
	#PMC_PCSR0_PID24
 (0x1u << 24Ë

	)

193 
	#PMC_PCSR0_PID25
 (0x1u << 25Ë

	)

194 
	#PMC_PCSR0_PID26
 (0x1u << 26Ë

	)

195 
	#PMC_PCSR0_PID27
 (0x1u << 27Ë

	)

196 
	#PMC_PCSR0_PID28
 (0x1u << 28Ë

	)

197 
	#PMC_PCSR0_PID29
 (0x1u << 29Ë

	)

198 
	#PMC_PCSR0_PID30
 (0x1u << 30Ë

	)

199 
	#PMC_PCSR0_PID31
 (0x1u << 31Ë

	)

201 
	#CKGR_UCKR_UPLLEN
 (0x1u << 16Ë

	)

202 
	#CKGR_UCKR_UPLLCOUNT_Pos
 20

	)

203 
	#CKGR_UCKR_UPLLCOUNT_Msk
 (0xfu << 
CKGR_UCKR_UPLLCOUNT_Pos
Ë

	)

204 
	#CKGR_UCKR_UPLLCOUNT
(
vÆue
Ë((
CKGR_UCKR_UPLLCOUNT_Msk
 & ((vÆueË<< 
CKGR_UCKR_UPLLCOUNT_Pos
)))

	)

206 
	#CKGR_MOR_MOSCXTEN
 (0x1u << 0Ë

	)

207 
	#CKGR_MOR_MOSCXTBY
 (0x1u << 1Ë

	)

208 
	#CKGR_MOR_MOSCRCEN
 (0x1u << 3Ë

	)

209 
	#CKGR_MOR_MOSCRCF_Pos
 4

	)

210 
	#CKGR_MOR_MOSCRCF_Msk
 (0x7u << 
CKGR_MOR_MOSCRCF_Pos
Ë

	)

211 
	#CKGR_MOR_MOSCRCF_4_MHz
 (0x0u << 4Ë

	)

212 
	#CKGR_MOR_MOSCRCF_8_MHz
 (0x1u << 4Ë

	)

213 
	#CKGR_MOR_MOSCRCF_12_MHz
 (0x2u << 4Ë

	)

214 
	#CKGR_MOR_MOSCXTST_Pos
 8

	)

215 
	#CKGR_MOR_MOSCXTST_Msk
 (0xffu << 
CKGR_MOR_MOSCXTST_Pos
Ë

	)

216 
	#CKGR_MOR_MOSCXTST
(
vÆue
Ë((
CKGR_MOR_MOSCXTST_Msk
 & ((vÆueË<< 
CKGR_MOR_MOSCXTST_Pos
)))

	)

217 
	#CKGR_MOR_KEY_Pos
 16

	)

218 
	#CKGR_MOR_KEY_Msk
 (0xffu << 
CKGR_MOR_KEY_Pos
Ë

	)

219 
	#CKGR_MOR_KEY
(
vÆue
Ë((
CKGR_MOR_KEY_Msk
 & ((vÆueË<< 
CKGR_MOR_KEY_Pos
)))

	)

220 
	#CKGR_MOR_MOSCSEL
 (0x1u << 24Ë

	)

221 
	#CKGR_MOR_CFDEN
 (0x1u << 25Ë

	)

223 
	#CKGR_MCFR_MAINF_Pos
 0

	)

224 
	#CKGR_MCFR_MAINF_Msk
 (0xffffu << 
CKGR_MCFR_MAINF_Pos
Ë

	)

225 
	#CKGR_MCFR_MAINFRDY
 (0x1u << 16Ë

	)

227 
	#CKGR_PLLAR_DIVA_Pos
 0

	)

228 
	#CKGR_PLLAR_DIVA_Msk
 (0xffu << 
CKGR_PLLAR_DIVA_Pos
Ë

	)

229 
	#CKGR_PLLAR_DIVA
(
vÆue
Ë((
CKGR_PLLAR_DIVA_Msk
 & ((vÆueË<< 
CKGR_PLLAR_DIVA_Pos
)))

	)

230 
	#CKGR_PLLAR_PLLACOUNT_Pos
 8

	)

231 
	#CKGR_PLLAR_PLLACOUNT_Msk
 (0x3fu << 
CKGR_PLLAR_PLLACOUNT_Pos
Ë

	)

232 
	#CKGR_PLLAR_PLLACOUNT
(
vÆue
Ë((
CKGR_PLLAR_PLLACOUNT_Msk
 & ((vÆueË<< 
CKGR_PLLAR_PLLACOUNT_Pos
)))

	)

233 
	#CKGR_PLLAR_MULA_Pos
 16

	)

234 
	#CKGR_PLLAR_MULA_Msk
 (0x7ffu << 
CKGR_PLLAR_MULA_Pos
Ë

	)

235 
	#CKGR_PLLAR_MULA
(
vÆue
Ë((
CKGR_PLLAR_MULA_Msk
 & ((vÆueË<< 
CKGR_PLLAR_MULA_Pos
)))

	)

236 
	#CKGR_PLLAR_ONE
 (0x1u << 29Ë

	)

238 
	#PMC_MCKR_CSS_Pos
 0

	)

239 
	#PMC_MCKR_CSS_Msk
 (0x3u << 
PMC_MCKR_CSS_Pos
Ë

	)

240 
	#PMC_MCKR_CSS_SLOW_CLK
 (0x0u << 0Ë

	)

241 
	#PMC_MCKR_CSS_MAIN_CLK
 (0x1u << 0Ë

	)

242 
	#PMC_MCKR_CSS_PLLA_CLK
 (0x2u << 0Ë

	)

243 
	#PMC_MCKR_CSS_UPLL_CLK
 (0x3u << 0Ë

	)

244 
	#PMC_MCKR_PRES_Pos
 4

	)

245 
	#PMC_MCKR_PRES_Msk
 (0x7u << 
PMC_MCKR_PRES_Pos
Ë

	)

246 
	#PMC_MCKR_PRES_CLK_1
 (0x0u << 4Ë

	)

247 
	#PMC_MCKR_PRES_CLK_2
 (0x1u << 4Ë

	)

248 
	#PMC_MCKR_PRES_CLK_4
 (0x2u << 4Ë

	)

249 
	#PMC_MCKR_PRES_CLK_8
 (0x3u << 4Ë

	)

250 
	#PMC_MCKR_PRES_CLK_16
 (0x4u << 4Ë

	)

251 
	#PMC_MCKR_PRES_CLK_32
 (0x5u << 4Ë

	)

252 
	#PMC_MCKR_PRES_CLK_64
 (0x6u << 4Ë

	)

253 
	#PMC_MCKR_PRES_CLK_3
 (0x7u << 4Ë

	)

254 
	#PMC_MCKR_PLLADIV2
 (0x1u << 12Ë

	)

255 
	#PMC_MCKR_UPLLDIV2
 (0x1u << 13Ë

	)

257 
	#PMC_USB_USBS
 (0x1u << 0Ë

	)

258 
	#PMC_USB_USBDIV_Pos
 8

	)

259 
	#PMC_USB_USBDIV_Msk
 (0xfu << 
PMC_USB_USBDIV_Pos
Ë

	)

260 
	#PMC_USB_USBDIV
(
vÆue
Ë((
PMC_USB_USBDIV_Msk
 & ((vÆueË<< 
PMC_USB_USBDIV_Pos
)))

	)

262 
	#PMC_PCK_CSS_Pos
 0

	)

263 
	#PMC_PCK_CSS_Msk
 (0x7u << 
PMC_PCK_CSS_Pos
Ë

	)

264 
	#PMC_PCK_CSS_SLOW_CLK
 (0x0u << 0Ë

	)

265 
	#PMC_PCK_CSS_MAIN_CLK
 (0x1u << 0Ë

	)

266 
	#PMC_PCK_CSS_PLLA_CLK
 (0x2u << 0Ë

	)

267 
	#PMC_PCK_CSS_UPLL_CLK
 (0x3u << 0Ë

	)

268 
	#PMC_PCK_CSS_MCK
 (0x4u << 0Ë

	)

269 
	#PMC_PCK_PRES_Pos
 4

	)

270 
	#PMC_PCK_PRES_Msk
 (0x7u << 
PMC_PCK_PRES_Pos
Ë

	)

271 
	#PMC_PCK_PRES_CLK_1
 (0x0u << 4Ë

	)

272 
	#PMC_PCK_PRES_CLK_2
 (0x1u << 4Ë

	)

273 
	#PMC_PCK_PRES_CLK_4
 (0x2u << 4Ë

	)

274 
	#PMC_PCK_PRES_CLK_8
 (0x3u << 4Ë

	)

275 
	#PMC_PCK_PRES_CLK_16
 (0x4u << 4Ë

	)

276 
	#PMC_PCK_PRES_CLK_32
 (0x5u << 4Ë

	)

277 
	#PMC_PCK_PRES_CLK_64
 (0x6u << 4Ë

	)

279 
	#PMC_IER_MOSCXTS
 (0x1u << 0Ë

	)

280 
	#PMC_IER_LOCKA
 (0x1u << 1Ë

	)

281 
	#PMC_IER_MCKRDY
 (0x1u << 3Ë

	)

282 
	#PMC_IER_LOCKU
 (0x1u << 6Ë

	)

283 
	#PMC_IER_PCKRDY0
 (0x1u << 8Ë

	)

284 
	#PMC_IER_PCKRDY1
 (0x1u << 9Ë

	)

285 
	#PMC_IER_PCKRDY2
 (0x1u << 10Ë

	)

286 
	#PMC_IER_MOSCSELS
 (0x1u << 16Ë

	)

287 
	#PMC_IER_MOSCRCS
 (0x1u << 17Ë

	)

288 
	#PMC_IER_CFDEV
 (0x1u << 18Ë

	)

290 
	#PMC_IDR_MOSCXTS
 (0x1u << 0Ë

	)

291 
	#PMC_IDR_LOCKA
 (0x1u << 1Ë

	)

292 
	#PMC_IDR_MCKRDY
 (0x1u << 3Ë

	)

293 
	#PMC_IDR_LOCKU
 (0x1u << 6Ë

	)

294 
	#PMC_IDR_PCKRDY0
 (0x1u << 8Ë

	)

295 
	#PMC_IDR_PCKRDY1
 (0x1u << 9Ë

	)

296 
	#PMC_IDR_PCKRDY2
 (0x1u << 10Ë

	)

297 
	#PMC_IDR_MOSCSELS
 (0x1u << 16Ë

	)

298 
	#PMC_IDR_MOSCRCS
 (0x1u << 17Ë

	)

299 
	#PMC_IDR_CFDEV
 (0x1u << 18Ë

	)

301 
	#PMC_SR_MOSCXTS
 (0x1u << 0Ë

	)

302 
	#PMC_SR_LOCKA
 (0x1u << 1Ë

	)

303 
	#PMC_SR_MCKRDY
 (0x1u << 3Ë

	)

304 
	#PMC_SR_LOCKU
 (0x1u << 6Ë

	)

305 
	#PMC_SR_OSCSELS
 (0x1u << 7Ë

	)

306 
	#PMC_SR_PCKRDY0
 (0x1u << 8Ë

	)

307 
	#PMC_SR_PCKRDY1
 (0x1u << 9Ë

	)

308 
	#PMC_SR_PCKRDY2
 (0x1u << 10Ë

	)

309 
	#PMC_SR_MOSCSELS
 (0x1u << 16Ë

	)

310 
	#PMC_SR_MOSCRCS
 (0x1u << 17Ë

	)

311 
	#PMC_SR_CFDEV
 (0x1u << 18Ë

	)

312 
	#PMC_SR_CFDS
 (0x1u << 19Ë

	)

313 
	#PMC_SR_FOS
 (0x1u << 20Ë

	)

315 
	#PMC_IMR_MOSCXTS
 (0x1u << 0Ë

	)

316 
	#PMC_IMR_LOCKA
 (0x1u << 1Ë

	)

317 
	#PMC_IMR_MCKRDY
 (0x1u << 3Ë

	)

318 
	#PMC_IMR_LOCKU
 (0x1u << 6Ë

	)

319 
	#PMC_IMR_PCKRDY0
 (0x1u << 8Ë

	)

320 
	#PMC_IMR_PCKRDY1
 (0x1u << 9Ë

	)

321 
	#PMC_IMR_PCKRDY2
 (0x1u << 10Ë

	)

322 
	#PMC_IMR_MOSCSELS
 (0x1u << 16Ë

	)

323 
	#PMC_IMR_MOSCRCS
 (0x1u << 17Ë

	)

324 
	#PMC_IMR_CFDEV
 (0x1u << 18Ë

	)

326 
	#PMC_FSMR_FSTT0
 (0x1u << 0Ë

	)

327 
	#PMC_FSMR_FSTT1
 (0x1u << 1Ë

	)

328 
	#PMC_FSMR_FSTT2
 (0x1u << 2Ë

	)

329 
	#PMC_FSMR_FSTT3
 (0x1u << 3Ë

	)

330 
	#PMC_FSMR_FSTT4
 (0x1u << 4Ë

	)

331 
	#PMC_FSMR_FSTT5
 (0x1u << 5Ë

	)

332 
	#PMC_FSMR_FSTT6
 (0x1u << 6Ë

	)

333 
	#PMC_FSMR_FSTT7
 (0x1u << 7Ë

	)

334 
	#PMC_FSMR_FSTT8
 (0x1u << 8Ë

	)

335 
	#PMC_FSMR_FSTT9
 (0x1u << 9Ë

	)

336 
	#PMC_FSMR_FSTT10
 (0x1u << 10Ë

	)

337 
	#PMC_FSMR_FSTT11
 (0x1u << 11Ë

	)

338 
	#PMC_FSMR_FSTT12
 (0x1u << 12Ë

	)

339 
	#PMC_FSMR_FSTT13
 (0x1u << 13Ë

	)

340 
	#PMC_FSMR_FSTT14
 (0x1u << 14Ë

	)

341 
	#PMC_FSMR_FSTT15
 (0x1u << 15Ë

	)

342 
	#PMC_FSMR_RTTAL
 (0x1u << 16Ë

	)

343 
	#PMC_FSMR_RTCAL
 (0x1u << 17Ë

	)

344 
	#PMC_FSMR_USBAL
 (0x1u << 18Ë

	)

345 
	#PMC_FSMR_LPM
 (0x1u << 20Ë

	)

347 
	#PMC_FSPR_FSTP0
 (0x1u << 0Ë

	)

348 
	#PMC_FSPR_FSTP1
 (0x1u << 1Ë

	)

349 
	#PMC_FSPR_FSTP2
 (0x1u << 2Ë

	)

350 
	#PMC_FSPR_FSTP3
 (0x1u << 3Ë

	)

351 
	#PMC_FSPR_FSTP4
 (0x1u << 4Ë

	)

352 
	#PMC_FSPR_FSTP5
 (0x1u << 5Ë

	)

353 
	#PMC_FSPR_FSTP6
 (0x1u << 6Ë

	)

354 
	#PMC_FSPR_FSTP7
 (0x1u << 7Ë

	)

355 
	#PMC_FSPR_FSTP8
 (0x1u << 8Ë

	)

356 
	#PMC_FSPR_FSTP9
 (0x1u << 9Ë

	)

357 
	#PMC_FSPR_FSTP10
 (0x1u << 10Ë

	)

358 
	#PMC_FSPR_FSTP11
 (0x1u << 11Ë

	)

359 
	#PMC_FSPR_FSTP12
 (0x1u << 12Ë

	)

360 
	#PMC_FSPR_FSTP13
 (0x1u << 13Ë

	)

361 
	#PMC_FSPR_FSTP14
 (0x1u << 14Ë

	)

362 
	#PMC_FSPR_FSTP15
 (0x1u << 15Ë

	)

364 
	#PMC_FOCR_FOCLR
 (0x1u << 0Ë

	)

366 
	#PMC_WPMR_WPEN
 (0x1u << 0Ë

	)

367 
	#PMC_WPMR_WPKEY_Pos
 8

	)

368 
	#PMC_WPMR_WPKEY_Msk
 (0xffffffu << 
PMC_WPMR_WPKEY_Pos
Ë

	)

369 
	#PMC_WPMR_WPKEY
(
vÆue
Ë((
PMC_WPMR_WPKEY_Msk
 & ((vÆueË<< 
PMC_WPMR_WPKEY_Pos
)))

	)

371 
	#PMC_WPSR_WPVS
 (0x1u << 0Ë

	)

372 
	#PMC_WPSR_WPVSRC_Pos
 8

	)

373 
	#PMC_WPSR_WPVSRC_Msk
 (0xffffu << 
PMC_WPSR_WPVSRC_Pos
Ë

	)

375 
	#PMC_PCER1_PID32
 (0x1u << 0Ë

	)

376 
	#PMC_PCER1_PID33
 (0x1u << 1Ë

	)

377 
	#PMC_PCER1_PID34
 (0x1u << 2Ë

	)

378 
	#PMC_PCER1_PID35
 (0x1u << 3Ë

	)

379 
	#PMC_PCER1_PID36
 (0x1u << 4Ë

	)

380 
	#PMC_PCER1_PID37
 (0x1u << 5Ë

	)

381 
	#PMC_PCER1_PID38
 (0x1u << 6Ë

	)

382 
	#PMC_PCER1_PID39
 (0x1u << 7Ë

	)

383 
	#PMC_PCER1_PID40
 (0x1u << 8Ë

	)

384 
	#PMC_PCER1_PID41
 (0x1u << 9Ë

	)

385 
	#PMC_PCER1_PID42
 (0x1u << 10Ë

	)

386 
	#PMC_PCER1_PID43
 (0x1u << 11Ë

	)

387 
	#PMC_PCER1_PID44
 (0x1u << 12Ë

	)

389 
	#PMC_PCDR1_PID32
 (0x1u << 0Ë

	)

390 
	#PMC_PCDR1_PID33
 (0x1u << 1Ë

	)

391 
	#PMC_PCDR1_PID34
 (0x1u << 2Ë

	)

392 
	#PMC_PCDR1_PID35
 (0x1u << 3Ë

	)

393 
	#PMC_PCDR1_PID36
 (0x1u << 4Ë

	)

394 
	#PMC_PCDR1_PID37
 (0x1u << 5Ë

	)

395 
	#PMC_PCDR1_PID38
 (0x1u << 6Ë

	)

396 
	#PMC_PCDR1_PID39
 (0x1u << 7Ë

	)

397 
	#PMC_PCDR1_PID40
 (0x1u << 8Ë

	)

398 
	#PMC_PCDR1_PID41
 (0x1u << 9Ë

	)

399 
	#PMC_PCDR1_PID42
 (0x1u << 10Ë

	)

400 
	#PMC_PCDR1_PID43
 (0x1u << 11Ë

	)

401 
	#PMC_PCDR1_PID44
 (0x1u << 12Ë

	)

403 
	#PMC_PCSR1_PID32
 (0x1u << 0Ë

	)

404 
	#PMC_PCSR1_PID33
 (0x1u << 1Ë

	)

405 
	#PMC_PCSR1_PID34
 (0x1u << 2Ë

	)

406 
	#PMC_PCSR1_PID35
 (0x1u << 3Ë

	)

407 
	#PMC_PCSR1_PID36
 (0x1u << 4Ë

	)

408 
	#PMC_PCSR1_PID37
 (0x1u << 5Ë

	)

409 
	#PMC_PCSR1_PID38
 (0x1u << 6Ë

	)

410 
	#PMC_PCSR1_PID39
 (0x1u << 7Ë

	)

411 
	#PMC_PCSR1_PID40
 (0x1u << 8Ë

	)

412 
	#PMC_PCSR1_PID41
 (0x1u << 9Ë

	)

413 
	#PMC_PCSR1_PID42
 (0x1u << 10Ë

	)

414 
	#PMC_PCSR1_PID43
 (0x1u << 11Ë

	)

415 
	#PMC_PCSR1_PID44
 (0x1u << 12Ë

	)

417 
	#PMC_PCR_PID_Pos
 0

	)

418 
	#PMC_PCR_PID_Msk
 (0x3fu << 
PMC_PCR_PID_Pos
Ë

	)

419 
	#PMC_PCR_PID
(
vÆue
Ë((
PMC_PCR_PID_Msk
 & ((vÆueË<< 
PMC_PCR_PID_Pos
)))

	)

420 
	#PMC_PCR_CMD
 (0x1u << 12Ë

	)

421 
	#PMC_PCR_DIV_Pos
 16

	)

422 
	#PMC_PCR_DIV_Msk
 (0x3u << 
PMC_PCR_DIV_Pos
Ë

	)

423 
	#PMC_PCR_DIV_PERIPH_DIV_MCK
 (0x0u << 16Ë

	)

424 
	#PMC_PCR_DIV_PERIPH_DIV2_MCK
 (0x1u << 16Ë

	)

425 
	#PMC_PCR_DIV_PERIPH_DIV4_MCK
 (0x2u << 16Ë

	)

426 
	#PMC_PCR_EN
 (0x1u << 28Ë

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_pwm.h

45 #i‚de‡
_SAM3XA_PWM_COMPONENT_


46 
	#_SAM3XA_PWM_COMPONENT_


	)

54 #i‡!(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

57 
RwReg
 
	mPWM_CMR
;

58 
RwReg
 
	mPWM_CDTY
;

59 
RwReg
 
	mPWM_CDTYUPD
;

60 
RwReg
 
	mPWM_CPRD
;

61 
RwReg
 
	mPWM_CPRDUPD
;

62 
RwReg
 
	mPWM_CCNT
;

63 
RwReg
 
	mPWM_DT
;

64 
RwReg
 
	mPWM_DTUPD
;

65 } 
	tPwmCh_num
;

68 
RwReg
 
	mPWM_CMPV
;

69 
RwReg
 
	mPWM_CMPVUPD
;

70 
RwReg
 
	mPWM_CMPM
;

71 
RwReg
 
	mPWM_CMPMUPD
;

72 } 
	tPwmCmp
;

74 
	#PWMCMP_NUMBER
 8

	)

75 
	#PWMCH_NUM_NUMBER
 8

	)

77 
RwReg
 
	mPWM_CLK
;

78 
WoReg
 
	mPWM_ENA
;

79 
WoReg
 
	mPWM_DIS
;

80 
RoReg
 
	mPWM_SR
;

81 
WoReg
 
	mPWM_IER1
;

82 
WoReg
 
	mPWM_IDR1
;

83 
RoReg
 
	mPWM_IMR1
;

84 
RoReg
 
	mPWM_ISR1
;

85 
RwReg
 
	mPWM_SCM
;

86 
RoReg
 
	mRe£rved1
[1];

87 
RwReg
 
	mPWM_SCUC
;

88 
RwReg
 
	mPWM_SCUP
;

89 
WoReg
 
	mPWM_SCUPUPD
;

90 
WoReg
 
	mPWM_IER2
;

91 
WoReg
 
	mPWM_IDR2
;

92 
RoReg
 
	mPWM_IMR2
;

93 
RoReg
 
	mPWM_ISR2
;

94 
RwReg
 
	mPWM_OOV
;

95 
RwReg
 
	mPWM_OS
;

96 
WoReg
 
	mPWM_OSS
;

97 
WoReg
 
	mPWM_OSC
;

98 
WoReg
 
	mPWM_OSSUPD
;

99 
WoReg
 
	mPWM_OSCUPD
;

100 
RwReg
 
	mPWM_FMR
;

101 
RoReg
 
	mPWM_FSR
;

102 
WoReg
 
	mPWM_FCR
;

103 
RwReg
 
	mPWM_FPV
;

104 
RwReg
 
	mPWM_FPE1
;

105 
RwReg
 
	mPWM_FPE2
;

106 
RoReg
 
	mRe£rved2
[2];

107 
RwReg
 
	mPWM_ELMR
[2];

108 
RoReg
 
	mRe£rved3
[11];

109 
RwReg
 
	mPWM_SMMR
;

110 
RoReg
 
	mRe£rved4
[12];

111 
WoReg
 
	mPWM_WPCR
;

112 
RoReg
 
	mPWM_WPSR
;

113 
RoReg
 
	mRe£rved5
[7];

114 
RwReg
 
	mPWM_TPR
;

115 
RwReg
 
	mPWM_TCR
;

116 
RoReg
 
	mRe£rved6
[2];

117 
RwReg
 
	mPWM_TNPR
;

118 
RwReg
 
	mPWM_TNCR
;

119 
WoReg
 
	mPWM_PTCR
;

120 
RoReg
 
	mPWM_PTSR
;

121 
RoReg
 
	mRe£rved7
[2];

122 
PwmCmp
 
	mPWM_CMP
[
PWMCMP_NUMBER
];

123 
RoReg
 
	mRe£rved8
[20];

124 
PwmCh_num
 
	mPWM_CH_NUM
[
PWMCH_NUM_NUMBER
];

125 } 
	tPwm
;

128 
	#PWM_CLK_DIVA_Pos
 0

	)

129 
	#PWM_CLK_DIVA_Msk
 (0xffu << 
PWM_CLK_DIVA_Pos
Ë

	)

130 
	#PWM_CLK_DIVA
(
vÆue
Ë((
PWM_CLK_DIVA_Msk
 & ((vÆueË<< 
PWM_CLK_DIVA_Pos
)))

	)

131 
	#PWM_CLK_PREA_Pos
 8

	)

132 
	#PWM_CLK_PREA_Msk
 (0xfu << 
PWM_CLK_PREA_Pos
Ë

	)

133 
	#PWM_CLK_PREA
(
vÆue
Ë((
PWM_CLK_PREA_Msk
 & ((vÆueË<< 
PWM_CLK_PREA_Pos
)))

	)

134 
	#PWM_CLK_DIVB_Pos
 16

	)

135 
	#PWM_CLK_DIVB_Msk
 (0xffu << 
PWM_CLK_DIVB_Pos
Ë

	)

136 
	#PWM_CLK_DIVB
(
vÆue
Ë((
PWM_CLK_DIVB_Msk
 & ((vÆueË<< 
PWM_CLK_DIVB_Pos
)))

	)

137 
	#PWM_CLK_PREB_Pos
 24

	)

138 
	#PWM_CLK_PREB_Msk
 (0xfu << 
PWM_CLK_PREB_Pos
Ë

	)

139 
	#PWM_CLK_PREB
(
vÆue
Ë((
PWM_CLK_PREB_Msk
 & ((vÆueË<< 
PWM_CLK_PREB_Pos
)))

	)

141 
	#PWM_ENA_CHID0
 (0x1u << 0Ë

	)

142 
	#PWM_ENA_CHID1
 (0x1u << 1Ë

	)

143 
	#PWM_ENA_CHID2
 (0x1u << 2Ë

	)

144 
	#PWM_ENA_CHID3
 (0x1u << 3Ë

	)

145 
	#PWM_ENA_CHID4
 (0x1u << 4Ë

	)

146 
	#PWM_ENA_CHID5
 (0x1u << 5Ë

	)

147 
	#PWM_ENA_CHID6
 (0x1u << 6Ë

	)

148 
	#PWM_ENA_CHID7
 (0x1u << 7Ë

	)

150 
	#PWM_DIS_CHID0
 (0x1u << 0Ë

	)

151 
	#PWM_DIS_CHID1
 (0x1u << 1Ë

	)

152 
	#PWM_DIS_CHID2
 (0x1u << 2Ë

	)

153 
	#PWM_DIS_CHID3
 (0x1u << 3Ë

	)

154 
	#PWM_DIS_CHID4
 (0x1u << 4Ë

	)

155 
	#PWM_DIS_CHID5
 (0x1u << 5Ë

	)

156 
	#PWM_DIS_CHID6
 (0x1u << 6Ë

	)

157 
	#PWM_DIS_CHID7
 (0x1u << 7Ë

	)

159 
	#PWM_SR_CHID0
 (0x1u << 0Ë

	)

160 
	#PWM_SR_CHID1
 (0x1u << 1Ë

	)

161 
	#PWM_SR_CHID2
 (0x1u << 2Ë

	)

162 
	#PWM_SR_CHID3
 (0x1u << 3Ë

	)

163 
	#PWM_SR_CHID4
 (0x1u << 4Ë

	)

164 
	#PWM_SR_CHID5
 (0x1u << 5Ë

	)

165 
	#PWM_SR_CHID6
 (0x1u << 6Ë

	)

166 
	#PWM_SR_CHID7
 (0x1u << 7Ë

	)

168 
	#PWM_IER1_CHID0
 (0x1u << 0Ë

	)

169 
	#PWM_IER1_CHID1
 (0x1u << 1Ë

	)

170 
	#PWM_IER1_CHID2
 (0x1u << 2Ë

	)

171 
	#PWM_IER1_CHID3
 (0x1u << 3Ë

	)

172 
	#PWM_IER1_CHID4
 (0x1u << 4Ë

	)

173 
	#PWM_IER1_CHID5
 (0x1u << 5Ë

	)

174 
	#PWM_IER1_CHID6
 (0x1u << 6Ë

	)

175 
	#PWM_IER1_CHID7
 (0x1u << 7Ë

	)

176 
	#PWM_IER1_FCHID0
 (0x1u << 16Ë

	)

177 
	#PWM_IER1_FCHID1
 (0x1u << 17Ë

	)

178 
	#PWM_IER1_FCHID2
 (0x1u << 18Ë

	)

179 
	#PWM_IER1_FCHID3
 (0x1u << 19Ë

	)

180 
	#PWM_IER1_FCHID4
 (0x1u << 20Ë

	)

181 
	#PWM_IER1_FCHID5
 (0x1u << 21Ë

	)

182 
	#PWM_IER1_FCHID6
 (0x1u << 22Ë

	)

183 
	#PWM_IER1_FCHID7
 (0x1u << 23Ë

	)

185 
	#PWM_IDR1_CHID0
 (0x1u << 0Ë

	)

186 
	#PWM_IDR1_CHID1
 (0x1u << 1Ë

	)

187 
	#PWM_IDR1_CHID2
 (0x1u << 2Ë

	)

188 
	#PWM_IDR1_CHID3
 (0x1u << 3Ë

	)

189 
	#PWM_IDR1_CHID4
 (0x1u << 4Ë

	)

190 
	#PWM_IDR1_CHID5
 (0x1u << 5Ë

	)

191 
	#PWM_IDR1_CHID6
 (0x1u << 6Ë

	)

192 
	#PWM_IDR1_CHID7
 (0x1u << 7Ë

	)

193 
	#PWM_IDR1_FCHID0
 (0x1u << 16Ë

	)

194 
	#PWM_IDR1_FCHID1
 (0x1u << 17Ë

	)

195 
	#PWM_IDR1_FCHID2
 (0x1u << 18Ë

	)

196 
	#PWM_IDR1_FCHID3
 (0x1u << 19Ë

	)

197 
	#PWM_IDR1_FCHID4
 (0x1u << 20Ë

	)

198 
	#PWM_IDR1_FCHID5
 (0x1u << 21Ë

	)

199 
	#PWM_IDR1_FCHID6
 (0x1u << 22Ë

	)

200 
	#PWM_IDR1_FCHID7
 (0x1u << 23Ë

	)

202 
	#PWM_IMR1_CHID0
 (0x1u << 0Ë

	)

203 
	#PWM_IMR1_CHID1
 (0x1u << 1Ë

	)

204 
	#PWM_IMR1_CHID2
 (0x1u << 2Ë

	)

205 
	#PWM_IMR1_CHID3
 (0x1u << 3Ë

	)

206 
	#PWM_IMR1_CHID4
 (0x1u << 4Ë

	)

207 
	#PWM_IMR1_CHID5
 (0x1u << 5Ë

	)

208 
	#PWM_IMR1_CHID6
 (0x1u << 6Ë

	)

209 
	#PWM_IMR1_CHID7
 (0x1u << 7Ë

	)

210 
	#PWM_IMR1_FCHID0
 (0x1u << 16Ë

	)

211 
	#PWM_IMR1_FCHID1
 (0x1u << 17Ë

	)

212 
	#PWM_IMR1_FCHID2
 (0x1u << 18Ë

	)

213 
	#PWM_IMR1_FCHID3
 (0x1u << 19Ë

	)

214 
	#PWM_IMR1_FCHID4
 (0x1u << 20Ë

	)

215 
	#PWM_IMR1_FCHID5
 (0x1u << 21Ë

	)

216 
	#PWM_IMR1_FCHID6
 (0x1u << 22Ë

	)

217 
	#PWM_IMR1_FCHID7
 (0x1u << 23Ë

	)

219 
	#PWM_ISR1_CHID0
 (0x1u << 0Ë

	)

220 
	#PWM_ISR1_CHID1
 (0x1u << 1Ë

	)

221 
	#PWM_ISR1_CHID2
 (0x1u << 2Ë

	)

222 
	#PWM_ISR1_CHID3
 (0x1u << 3Ë

	)

223 
	#PWM_ISR1_CHID4
 (0x1u << 4Ë

	)

224 
	#PWM_ISR1_CHID5
 (0x1u << 5Ë

	)

225 
	#PWM_ISR1_CHID6
 (0x1u << 6Ë

	)

226 
	#PWM_ISR1_CHID7
 (0x1u << 7Ë

	)

227 
	#PWM_ISR1_FCHID0
 (0x1u << 16Ë

	)

228 
	#PWM_ISR1_FCHID1
 (0x1u << 17Ë

	)

229 
	#PWM_ISR1_FCHID2
 (0x1u << 18Ë

	)

230 
	#PWM_ISR1_FCHID3
 (0x1u << 19Ë

	)

231 
	#PWM_ISR1_FCHID4
 (0x1u << 20Ë

	)

232 
	#PWM_ISR1_FCHID5
 (0x1u << 21Ë

	)

233 
	#PWM_ISR1_FCHID6
 (0x1u << 22Ë

	)

234 
	#PWM_ISR1_FCHID7
 (0x1u << 23Ë

	)

236 
	#PWM_SCM_SYNC0
 (0x1u << 0Ë

	)

237 
	#PWM_SCM_SYNC1
 (0x1u << 1Ë

	)

238 
	#PWM_SCM_SYNC2
 (0x1u << 2Ë

	)

239 
	#PWM_SCM_SYNC3
 (0x1u << 3Ë

	)

240 
	#PWM_SCM_SYNC4
 (0x1u << 4Ë

	)

241 
	#PWM_SCM_SYNC5
 (0x1u << 5Ë

	)

242 
	#PWM_SCM_SYNC6
 (0x1u << 6Ë

	)

243 
	#PWM_SCM_SYNC7
 (0x1u << 7Ë

	)

244 
	#PWM_SCM_UPDM_Pos
 16

	)

245 
	#PWM_SCM_UPDM_Msk
 (0x3u << 
PWM_SCM_UPDM_Pos
Ë

	)

246 
	#PWM_SCM_UPDM_MODE0
 (0x0u << 16Ë

	)

247 
	#PWM_SCM_UPDM_MODE1
 (0x1u << 16Ë

	)

248 
	#PWM_SCM_UPDM_MODE2
 (0x2u << 16Ë

	)

249 
	#PWM_SCM_PTRM
 (0x1u << 20Ë

	)

250 
	#PWM_SCM_PTRCS_Pos
 21

	)

251 
	#PWM_SCM_PTRCS_Msk
 (0x7u << 
PWM_SCM_PTRCS_Pos
Ë

	)

252 
	#PWM_SCM_PTRCS
(
vÆue
Ë((
PWM_SCM_PTRCS_Msk
 & ((vÆueË<< 
PWM_SCM_PTRCS_Pos
)))

	)

254 
	#PWM_SCUC_UPDULOCK
 (0x1u << 0Ë

	)

256 
	#PWM_SCUP_UPR_Pos
 0

	)

257 
	#PWM_SCUP_UPR_Msk
 (0xfu << 
PWM_SCUP_UPR_Pos
Ë

	)

258 
	#PWM_SCUP_UPR
(
vÆue
Ë((
PWM_SCUP_UPR_Msk
 & ((vÆueË<< 
PWM_SCUP_UPR_Pos
)))

	)

259 
	#PWM_SCUP_UPRCNT_Pos
 4

	)

260 
	#PWM_SCUP_UPRCNT_Msk
 (0xfu << 
PWM_SCUP_UPRCNT_Pos
Ë

	)

261 
	#PWM_SCUP_UPRCNT
(
vÆue
Ë((
PWM_SCUP_UPRCNT_Msk
 & ((vÆueË<< 
PWM_SCUP_UPRCNT_Pos
)))

	)

263 
	#PWM_SCUPUPD_UPRUPD_Pos
 0

	)

264 
	#PWM_SCUPUPD_UPRUPD_Msk
 (0xfu << 
PWM_SCUPUPD_UPRUPD_Pos
Ë

	)

265 
	#PWM_SCUPUPD_UPRUPD
(
vÆue
Ë((
PWM_SCUPUPD_UPRUPD_Msk
 & ((vÆueË<< 
PWM_SCUPUPD_UPRUPD_Pos
)))

	)

267 
	#PWM_IER2_WRDY
 (0x1u << 0Ë

	)

268 
	#PWM_IER2_ENDTX
 (0x1u << 1Ë

	)

269 
	#PWM_IER2_TXBUFE
 (0x1u << 2Ë

	)

270 
	#PWM_IER2_UNRE
 (0x1u << 3Ë

	)

271 
	#PWM_IER2_CMPM0
 (0x1u << 8Ë

	)

272 
	#PWM_IER2_CMPM1
 (0x1u << 9Ë

	)

273 
	#PWM_IER2_CMPM2
 (0x1u << 10Ë

	)

274 
	#PWM_IER2_CMPM3
 (0x1u << 11Ë

	)

275 
	#PWM_IER2_CMPM4
 (0x1u << 12Ë

	)

276 
	#PWM_IER2_CMPM5
 (0x1u << 13Ë

	)

277 
	#PWM_IER2_CMPM6
 (0x1u << 14Ë

	)

278 
	#PWM_IER2_CMPM7
 (0x1u << 15Ë

	)

279 
	#PWM_IER2_CMPU0
 (0x1u << 16Ë

	)

280 
	#PWM_IER2_CMPU1
 (0x1u << 17Ë

	)

281 
	#PWM_IER2_CMPU2
 (0x1u << 18Ë

	)

282 
	#PWM_IER2_CMPU3
 (0x1u << 19Ë

	)

283 
	#PWM_IER2_CMPU4
 (0x1u << 20Ë

	)

284 
	#PWM_IER2_CMPU5
 (0x1u << 21Ë

	)

285 
	#PWM_IER2_CMPU6
 (0x1u << 22Ë

	)

286 
	#PWM_IER2_CMPU7
 (0x1u << 23Ë

	)

288 
	#PWM_IDR2_WRDY
 (0x1u << 0Ë

	)

289 
	#PWM_IDR2_ENDTX
 (0x1u << 1Ë

	)

290 
	#PWM_IDR2_TXBUFE
 (0x1u << 2Ë

	)

291 
	#PWM_IDR2_UNRE
 (0x1u << 3Ë

	)

292 
	#PWM_IDR2_CMPM0
 (0x1u << 8Ë

	)

293 
	#PWM_IDR2_CMPM1
 (0x1u << 9Ë

	)

294 
	#PWM_IDR2_CMPM2
 (0x1u << 10Ë

	)

295 
	#PWM_IDR2_CMPM3
 (0x1u << 11Ë

	)

296 
	#PWM_IDR2_CMPM4
 (0x1u << 12Ë

	)

297 
	#PWM_IDR2_CMPM5
 (0x1u << 13Ë

	)

298 
	#PWM_IDR2_CMPM6
 (0x1u << 14Ë

	)

299 
	#PWM_IDR2_CMPM7
 (0x1u << 15Ë

	)

300 
	#PWM_IDR2_CMPU0
 (0x1u << 16Ë

	)

301 
	#PWM_IDR2_CMPU1
 (0x1u << 17Ë

	)

302 
	#PWM_IDR2_CMPU2
 (0x1u << 18Ë

	)

303 
	#PWM_IDR2_CMPU3
 (0x1u << 19Ë

	)

304 
	#PWM_IDR2_CMPU4
 (0x1u << 20Ë

	)

305 
	#PWM_IDR2_CMPU5
 (0x1u << 21Ë

	)

306 
	#PWM_IDR2_CMPU6
 (0x1u << 22Ë

	)

307 
	#PWM_IDR2_CMPU7
 (0x1u << 23Ë

	)

309 
	#PWM_IMR2_WRDY
 (0x1u << 0Ë

	)

310 
	#PWM_IMR2_ENDTX
 (0x1u << 1Ë

	)

311 
	#PWM_IMR2_TXBUFE
 (0x1u << 2Ë

	)

312 
	#PWM_IMR2_UNRE
 (0x1u << 3Ë

	)

313 
	#PWM_IMR2_CMPM0
 (0x1u << 8Ë

	)

314 
	#PWM_IMR2_CMPM1
 (0x1u << 9Ë

	)

315 
	#PWM_IMR2_CMPM2
 (0x1u << 10Ë

	)

316 
	#PWM_IMR2_CMPM3
 (0x1u << 11Ë

	)

317 
	#PWM_IMR2_CMPM4
 (0x1u << 12Ë

	)

318 
	#PWM_IMR2_CMPM5
 (0x1u << 13Ë

	)

319 
	#PWM_IMR2_CMPM6
 (0x1u << 14Ë

	)

320 
	#PWM_IMR2_CMPM7
 (0x1u << 15Ë

	)

321 
	#PWM_IMR2_CMPU0
 (0x1u << 16Ë

	)

322 
	#PWM_IMR2_CMPU1
 (0x1u << 17Ë

	)

323 
	#PWM_IMR2_CMPU2
 (0x1u << 18Ë

	)

324 
	#PWM_IMR2_CMPU3
 (0x1u << 19Ë

	)

325 
	#PWM_IMR2_CMPU4
 (0x1u << 20Ë

	)

326 
	#PWM_IMR2_CMPU5
 (0x1u << 21Ë

	)

327 
	#PWM_IMR2_CMPU6
 (0x1u << 22Ë

	)

328 
	#PWM_IMR2_CMPU7
 (0x1u << 23Ë

	)

330 
	#PWM_ISR2_WRDY
 (0x1u << 0Ë

	)

331 
	#PWM_ISR2_ENDTX
 (0x1u << 1Ë

	)

332 
	#PWM_ISR2_TXBUFE
 (0x1u << 2Ë

	)

333 
	#PWM_ISR2_UNRE
 (0x1u << 3Ë

	)

334 
	#PWM_ISR2_CMPM0
 (0x1u << 8Ë

	)

335 
	#PWM_ISR2_CMPM1
 (0x1u << 9Ë

	)

336 
	#PWM_ISR2_CMPM2
 (0x1u << 10Ë

	)

337 
	#PWM_ISR2_CMPM3
 (0x1u << 11Ë

	)

338 
	#PWM_ISR2_CMPM4
 (0x1u << 12Ë

	)

339 
	#PWM_ISR2_CMPM5
 (0x1u << 13Ë

	)

340 
	#PWM_ISR2_CMPM6
 (0x1u << 14Ë

	)

341 
	#PWM_ISR2_CMPM7
 (0x1u << 15Ë

	)

342 
	#PWM_ISR2_CMPU0
 (0x1u << 16Ë

	)

343 
	#PWM_ISR2_CMPU1
 (0x1u << 17Ë

	)

344 
	#PWM_ISR2_CMPU2
 (0x1u << 18Ë

	)

345 
	#PWM_ISR2_CMPU3
 (0x1u << 19Ë

	)

346 
	#PWM_ISR2_CMPU4
 (0x1u << 20Ë

	)

347 
	#PWM_ISR2_CMPU5
 (0x1u << 21Ë

	)

348 
	#PWM_ISR2_CMPU6
 (0x1u << 22Ë

	)

349 
	#PWM_ISR2_CMPU7
 (0x1u << 23Ë

	)

351 
	#PWM_OOV_OOVH0
 (0x1u << 0Ë

	)

352 
	#PWM_OOV_OOVH1
 (0x1u << 1Ë

	)

353 
	#PWM_OOV_OOVH2
 (0x1u << 2Ë

	)

354 
	#PWM_OOV_OOVH3
 (0x1u << 3Ë

	)

355 
	#PWM_OOV_OOVH4
 (0x1u << 4Ë

	)

356 
	#PWM_OOV_OOVH5
 (0x1u << 5Ë

	)

357 
	#PWM_OOV_OOVH6
 (0x1u << 6Ë

	)

358 
	#PWM_OOV_OOVH7
 (0x1u << 7Ë

	)

359 
	#PWM_OOV_OOVL0
 (0x1u << 16Ë

	)

360 
	#PWM_OOV_OOVL1
 (0x1u << 17Ë

	)

361 
	#PWM_OOV_OOVL2
 (0x1u << 18Ë

	)

362 
	#PWM_OOV_OOVL3
 (0x1u << 19Ë

	)

363 
	#PWM_OOV_OOVL4
 (0x1u << 20Ë

	)

364 
	#PWM_OOV_OOVL5
 (0x1u << 21Ë

	)

365 
	#PWM_OOV_OOVL6
 (0x1u << 22Ë

	)

366 
	#PWM_OOV_OOVL7
 (0x1u << 23Ë

	)

368 
	#PWM_OS_OSH0
 (0x1u << 0Ë

	)

369 
	#PWM_OS_OSH1
 (0x1u << 1Ë

	)

370 
	#PWM_OS_OSH2
 (0x1u << 2Ë

	)

371 
	#PWM_OS_OSH3
 (0x1u << 3Ë

	)

372 
	#PWM_OS_OSH4
 (0x1u << 4Ë

	)

373 
	#PWM_OS_OSH5
 (0x1u << 5Ë

	)

374 
	#PWM_OS_OSH6
 (0x1u << 6Ë

	)

375 
	#PWM_OS_OSH7
 (0x1u << 7Ë

	)

376 
	#PWM_OS_OSL0
 (0x1u << 16Ë

	)

377 
	#PWM_OS_OSL1
 (0x1u << 17Ë

	)

378 
	#PWM_OS_OSL2
 (0x1u << 18Ë

	)

379 
	#PWM_OS_OSL3
 (0x1u << 19Ë

	)

380 
	#PWM_OS_OSL4
 (0x1u << 20Ë

	)

381 
	#PWM_OS_OSL5
 (0x1u << 21Ë

	)

382 
	#PWM_OS_OSL6
 (0x1u << 22Ë

	)

383 
	#PWM_OS_OSL7
 (0x1u << 23Ë

	)

385 
	#PWM_OSS_OSSH0
 (0x1u << 0Ë

	)

386 
	#PWM_OSS_OSSH1
 (0x1u << 1Ë

	)

387 
	#PWM_OSS_OSSH2
 (0x1u << 2Ë

	)

388 
	#PWM_OSS_OSSH3
 (0x1u << 3Ë

	)

389 
	#PWM_OSS_OSSH4
 (0x1u << 4Ë

	)

390 
	#PWM_OSS_OSSH5
 (0x1u << 5Ë

	)

391 
	#PWM_OSS_OSSH6
 (0x1u << 6Ë

	)

392 
	#PWM_OSS_OSSH7
 (0x1u << 7Ë

	)

393 
	#PWM_OSS_OSSL0
 (0x1u << 16Ë

	)

394 
	#PWM_OSS_OSSL1
 (0x1u << 17Ë

	)

395 
	#PWM_OSS_OSSL2
 (0x1u << 18Ë

	)

396 
	#PWM_OSS_OSSL3
 (0x1u << 19Ë

	)

397 
	#PWM_OSS_OSSL4
 (0x1u << 20Ë

	)

398 
	#PWM_OSS_OSSL5
 (0x1u << 21Ë

	)

399 
	#PWM_OSS_OSSL6
 (0x1u << 22Ë

	)

400 
	#PWM_OSS_OSSL7
 (0x1u << 23Ë

	)

402 
	#PWM_OSC_OSCH0
 (0x1u << 0Ë

	)

403 
	#PWM_OSC_OSCH1
 (0x1u << 1Ë

	)

404 
	#PWM_OSC_OSCH2
 (0x1u << 2Ë

	)

405 
	#PWM_OSC_OSCH3
 (0x1u << 3Ë

	)

406 
	#PWM_OSC_OSCH4
 (0x1u << 4Ë

	)

407 
	#PWM_OSC_OSCH5
 (0x1u << 5Ë

	)

408 
	#PWM_OSC_OSCH6
 (0x1u << 6Ë

	)

409 
	#PWM_OSC_OSCH7
 (0x1u << 7Ë

	)

410 
	#PWM_OSC_OSCL0
 (0x1u << 16Ë

	)

411 
	#PWM_OSC_OSCL1
 (0x1u << 17Ë

	)

412 
	#PWM_OSC_OSCL2
 (0x1u << 18Ë

	)

413 
	#PWM_OSC_OSCL3
 (0x1u << 19Ë

	)

414 
	#PWM_OSC_OSCL4
 (0x1u << 20Ë

	)

415 
	#PWM_OSC_OSCL5
 (0x1u << 21Ë

	)

416 
	#PWM_OSC_OSCL6
 (0x1u << 22Ë

	)

417 
	#PWM_OSC_OSCL7
 (0x1u << 23Ë

	)

419 
	#PWM_OSSUPD_OSSUPH0
 (0x1u << 0Ë

	)

420 
	#PWM_OSSUPD_OSSUPH1
 (0x1u << 1Ë

	)

421 
	#PWM_OSSUPD_OSSUPH2
 (0x1u << 2Ë

	)

422 
	#PWM_OSSUPD_OSSUPH3
 (0x1u << 3Ë

	)

423 
	#PWM_OSSUPD_OSSUPH4
 (0x1u << 4Ë

	)

424 
	#PWM_OSSUPD_OSSUPH5
 (0x1u << 5Ë

	)

425 
	#PWM_OSSUPD_OSSUPH6
 (0x1u << 6Ë

	)

426 
	#PWM_OSSUPD_OSSUPH7
 (0x1u << 7Ë

	)

427 
	#PWM_OSSUPD_OSSUPL0
 (0x1u << 16Ë

	)

428 
	#PWM_OSSUPD_OSSUPL1
 (0x1u << 17Ë

	)

429 
	#PWM_OSSUPD_OSSUPL2
 (0x1u << 18Ë

	)

430 
	#PWM_OSSUPD_OSSUPL3
 (0x1u << 19Ë

	)

431 
	#PWM_OSSUPD_OSSUPL4
 (0x1u << 20Ë

	)

432 
	#PWM_OSSUPD_OSSUPL5
 (0x1u << 21Ë

	)

433 
	#PWM_OSSUPD_OSSUPL6
 (0x1u << 22Ë

	)

434 
	#PWM_OSSUPD_OSSUPL7
 (0x1u << 23Ë

	)

436 
	#PWM_OSCUPD_OSCUPH0
 (0x1u << 0Ë

	)

437 
	#PWM_OSCUPD_OSCUPH1
 (0x1u << 1Ë

	)

438 
	#PWM_OSCUPD_OSCUPH2
 (0x1u << 2Ë

	)

439 
	#PWM_OSCUPD_OSCUPH3
 (0x1u << 3Ë

	)

440 
	#PWM_OSCUPD_OSCUPH4
 (0x1u << 4Ë

	)

441 
	#PWM_OSCUPD_OSCUPH5
 (0x1u << 5Ë

	)

442 
	#PWM_OSCUPD_OSCUPH6
 (0x1u << 6Ë

	)

443 
	#PWM_OSCUPD_OSCUPH7
 (0x1u << 7Ë

	)

444 
	#PWM_OSCUPD_OSCUPL0
 (0x1u << 16Ë

	)

445 
	#PWM_OSCUPD_OSCUPL1
 (0x1u << 17Ë

	)

446 
	#PWM_OSCUPD_OSCUPL2
 (0x1u << 18Ë

	)

447 
	#PWM_OSCUPD_OSCUPL3
 (0x1u << 19Ë

	)

448 
	#PWM_OSCUPD_OSCUPL4
 (0x1u << 20Ë

	)

449 
	#PWM_OSCUPD_OSCUPL5
 (0x1u << 21Ë

	)

450 
	#PWM_OSCUPD_OSCUPDL6
 (0x1u << 22Ë

	)

451 
	#PWM_OSCUPD_OSCUPL7
 (0x1u << 23Ë

	)

453 
	#PWM_FMR_FPOL_Pos
 0

	)

454 
	#PWM_FMR_FPOL_Msk
 (0xffu << 
PWM_FMR_FPOL_Pos
Ë

	)

455 
	#PWM_FMR_FPOL
(
vÆue
Ë((
PWM_FMR_FPOL_Msk
 & ((vÆueË<< 
PWM_FMR_FPOL_Pos
)))

	)

456 
	#PWM_FMR_FMOD_Pos
 8

	)

457 
	#PWM_FMR_FMOD_Msk
 (0xffu << 
PWM_FMR_FMOD_Pos
Ë

	)

458 
	#PWM_FMR_FMOD
(
vÆue
Ë((
PWM_FMR_FMOD_Msk
 & ((vÆueË<< 
PWM_FMR_FMOD_Pos
)))

	)

459 
	#PWM_FMR_FFIL_Pos
 16

	)

460 
	#PWM_FMR_FFIL_Msk
 (0xffu << 
PWM_FMR_FFIL_Pos
Ë

	)

461 
	#PWM_FMR_FFIL
(
vÆue
Ë((
PWM_FMR_FFIL_Msk
 & ((vÆueË<< 
PWM_FMR_FFIL_Pos
)))

	)

463 
	#PWM_FSR_FIV_Pos
 0

	)

464 
	#PWM_FSR_FIV_Msk
 (0xffu << 
PWM_FSR_FIV_Pos
Ë

	)

465 
	#PWM_FSR_FS_Pos
 8

	)

466 
	#PWM_FSR_FS_Msk
 (0xffu << 
PWM_FSR_FS_Pos
Ë

	)

468 
	#PWM_FCR_FCLR_Pos
 0

	)

469 
	#PWM_FCR_FCLR_Msk
 (0xffu << 
PWM_FCR_FCLR_Pos
Ë

	)

470 
	#PWM_FCR_FCLR
(
vÆue
Ë((
PWM_FCR_FCLR_Msk
 & ((vÆueË<< 
PWM_FCR_FCLR_Pos
)))

	)

472 
	#PWM_FPV_FPVH0
 (0x1u << 0Ë

	)

473 
	#PWM_FPV_FPVH1
 (0x1u << 1Ë

	)

474 
	#PWM_FPV_FPVH2
 (0x1u << 2Ë

	)

475 
	#PWM_FPV_FPVH3
 (0x1u << 3Ë

	)

476 
	#PWM_FPV_FPVH4
 (0x1u << 4Ë

	)

477 
	#PWM_FPV_FPVH5
 (0x1u << 5Ë

	)

478 
	#PWM_FPV_FPVH6
 (0x1u << 6Ë

	)

479 
	#PWM_FPV_FPVH7
 (0x1u << 7Ë

	)

480 
	#PWM_FPV_FPVL0
 (0x1u << 16Ë

	)

481 
	#PWM_FPV_FPVL1
 (0x1u << 17Ë

	)

482 
	#PWM_FPV_FPVL2
 (0x1u << 18Ë

	)

483 
	#PWM_FPV_FPVL3
 (0x1u << 19Ë

	)

484 
	#PWM_FPV_FPVL4
 (0x1u << 20Ë

	)

485 
	#PWM_FPV_FPVL5
 (0x1u << 21Ë

	)

486 
	#PWM_FPV_FPVL6
 (0x1u << 22Ë

	)

487 
	#PWM_FPV_FPVL7
 (0x1u << 23Ë

	)

489 
	#PWM_FPE1_FPE0_Pos
 0

	)

490 
	#PWM_FPE1_FPE0_Msk
 (0xffu << 
PWM_FPE1_FPE0_Pos
Ë

	)

491 
	#PWM_FPE1_FPE0
(
vÆue
Ë((
PWM_FPE1_FPE0_Msk
 & ((vÆueË<< 
PWM_FPE1_FPE0_Pos
)))

	)

492 
	#PWM_FPE1_FPE1_Pos
 8

	)

493 
	#PWM_FPE1_FPE1_Msk
 (0xffu << 
PWM_FPE1_FPE1_Pos
Ë

	)

494 
	#PWM_FPE1_FPE1
(
vÆue
Ë((
PWM_FPE1_FPE1_Msk
 & ((vÆueË<< 
PWM_FPE1_FPE1_Pos
)))

	)

495 
	#PWM_FPE1_FPE2_Pos
 16

	)

496 
	#PWM_FPE1_FPE2_Msk
 (0xffu << 
PWM_FPE1_FPE2_Pos
Ë

	)

497 
	#PWM_FPE1_FPE2
(
vÆue
Ë((
PWM_FPE1_FPE2_Msk
 & ((vÆueË<< 
PWM_FPE1_FPE2_Pos
)))

	)

498 
	#PWM_FPE1_FPE3_Pos
 24

	)

499 
	#PWM_FPE1_FPE3_Msk
 (0xffu << 
PWM_FPE1_FPE3_Pos
Ë

	)

500 
	#PWM_FPE1_FPE3
(
vÆue
Ë((
PWM_FPE1_FPE3_Msk
 & ((vÆueË<< 
PWM_FPE1_FPE3_Pos
)))

	)

502 
	#PWM_FPE2_FPE4_Pos
 0

	)

503 
	#PWM_FPE2_FPE4_Msk
 (0xffu << 
PWM_FPE2_FPE4_Pos
Ë

	)

504 
	#PWM_FPE2_FPE4
(
vÆue
Ë((
PWM_FPE2_FPE4_Msk
 & ((vÆueË<< 
PWM_FPE2_FPE4_Pos
)))

	)

505 
	#PWM_FPE2_FPE5_Pos
 8

	)

506 
	#PWM_FPE2_FPE5_Msk
 (0xffu << 
PWM_FPE2_FPE5_Pos
Ë

	)

507 
	#PWM_FPE2_FPE5
(
vÆue
Ë((
PWM_FPE2_FPE5_Msk
 & ((vÆueË<< 
PWM_FPE2_FPE5_Pos
)))

	)

508 
	#PWM_FPE2_FPE6_Pos
 16

	)

509 
	#PWM_FPE2_FPE6_Msk
 (0xffu << 
PWM_FPE2_FPE6_Pos
Ë

	)

510 
	#PWM_FPE2_FPE6
(
vÆue
Ë((
PWM_FPE2_FPE6_Msk
 & ((vÆueË<< 
PWM_FPE2_FPE6_Pos
)))

	)

511 
	#PWM_FPE2_FPE7_Pos
 24

	)

512 
	#PWM_FPE2_FPE7_Msk
 (0xffu << 
PWM_FPE2_FPE7_Pos
Ë

	)

513 
	#PWM_FPE2_FPE7
(
vÆue
Ë((
PWM_FPE2_FPE7_Msk
 & ((vÆueË<< 
PWM_FPE2_FPE7_Pos
)))

	)

515 
	#PWM_ELMR_CSEL0
 (0x1u << 0Ë

	)

516 
	#PWM_ELMR_CSEL1
 (0x1u << 1Ë

	)

517 
	#PWM_ELMR_CSEL2
 (0x1u << 2Ë

	)

518 
	#PWM_ELMR_CSEL3
 (0x1u << 3Ë

	)

519 
	#PWM_ELMR_CSEL4
 (0x1u << 4Ë

	)

520 
	#PWM_ELMR_CSEL5
 (0x1u << 5Ë

	)

521 
	#PWM_ELMR_CSEL6
 (0x1u << 6Ë

	)

522 
	#PWM_ELMR_CSEL7
 (0x1u << 7Ë

	)

524 
	#PWM_SMMR_GCEN0
 (0x1u << 0Ë

	)

525 
	#PWM_SMMR_GCEN1
 (0x1u << 1Ë

	)

526 
	#PWM_SMMR_GCEN2
 (0x1u << 2Ë

	)

527 
	#PWM_SMMR_GCEN3
 (0x1u << 3Ë

	)

528 
	#PWM_SMMR_DOWN0
 (0x1u << 16Ë

	)

529 
	#PWM_SMMR_DOWN1
 (0x1u << 17Ë

	)

530 
	#PWM_SMMR_DOWN2
 (0x1u << 18Ë

	)

531 
	#PWM_SMMR_DOWN3
 (0x1u << 19Ë

	)

533 
	#PWM_WPCR_WPCMD_Pos
 0

	)

534 
	#PWM_WPCR_WPCMD_Msk
 (0x3u << 
PWM_WPCR_WPCMD_Pos
Ë

	)

535 
	#PWM_WPCR_WPCMD
(
vÆue
Ë((
PWM_WPCR_WPCMD_Msk
 & ((vÆueË<< 
PWM_WPCR_WPCMD_Pos
)))

	)

536 
	#PWM_WPCR_WPRG0
 (0x1u << 2Ë

	)

537 
	#PWM_WPCR_WPRG1
 (0x1u << 3Ë

	)

538 
	#PWM_WPCR_WPRG2
 (0x1u << 4Ë

	)

539 
	#PWM_WPCR_WPRG3
 (0x1u << 5Ë

	)

540 
	#PWM_WPCR_WPRG4
 (0x1u << 6Ë

	)

541 
	#PWM_WPCR_WPRG5
 (0x1u << 7Ë

	)

542 
	#PWM_WPCR_WPKEY_Pos
 8

	)

543 
	#PWM_WPCR_WPKEY_Msk
 (0xffffffu << 
PWM_WPCR_WPKEY_Pos
Ë

	)

544 
	#PWM_WPCR_WPKEY
(
vÆue
Ë((
PWM_WPCR_WPKEY_Msk
 & ((vÆueË<< 
PWM_WPCR_WPKEY_Pos
)))

	)

546 
	#PWM_WPSR_WPSWS0
 (0x1u << 0Ë

	)

547 
	#PWM_WPSR_WPSWS1
 (0x1u << 1Ë

	)

548 
	#PWM_WPSR_WPSWS2
 (0x1u << 2Ë

	)

549 
	#PWM_WPSR_WPSWS3
 (0x1u << 3Ë

	)

550 
	#PWM_WPSR_WPSWS4
 (0x1u << 4Ë

	)

551 
	#PWM_WPSR_WPSWS5
 (0x1u << 5Ë

	)

552 
	#PWM_WPSR_WPVS
 (0x1u << 7Ë

	)

553 
	#PWM_WPSR_WPHWS0
 (0x1u << 8Ë

	)

554 
	#PWM_WPSR_WPHWS1
 (0x1u << 9Ë

	)

555 
	#PWM_WPSR_WPHWS2
 (0x1u << 10Ë

	)

556 
	#PWM_WPSR_WPHWS3
 (0x1u << 11Ë

	)

557 
	#PWM_WPSR_WPHWS4
 (0x1u << 12Ë

	)

558 
	#PWM_WPSR_WPHWS5
 (0x1u << 13Ë

	)

559 
	#PWM_WPSR_WPVSRC_Pos
 16

	)

560 
	#PWM_WPSR_WPVSRC_Msk
 (0xffffu << 
PWM_WPSR_WPVSRC_Pos
Ë

	)

562 
	#PWM_TPR_TXPTR_Pos
 0

	)

563 
	#PWM_TPR_TXPTR_Msk
 (0xffffffffu << 
PWM_TPR_TXPTR_Pos
Ë

	)

564 
	#PWM_TPR_TXPTR
(
vÆue
Ë((
PWM_TPR_TXPTR_Msk
 & ((vÆueË<< 
PWM_TPR_TXPTR_Pos
)))

	)

566 
	#PWM_TCR_TXCTR_Pos
 0

	)

567 
	#PWM_TCR_TXCTR_Msk
 (0xffffu << 
PWM_TCR_TXCTR_Pos
Ë

	)

568 
	#PWM_TCR_TXCTR
(
vÆue
Ë((
PWM_TCR_TXCTR_Msk
 & ((vÆueË<< 
PWM_TCR_TXCTR_Pos
)))

	)

570 
	#PWM_TNPR_TXNPTR_Pos
 0

	)

571 
	#PWM_TNPR_TXNPTR_Msk
 (0xffffffffu << 
PWM_TNPR_TXNPTR_Pos
Ë

	)

572 
	#PWM_TNPR_TXNPTR
(
vÆue
Ë((
PWM_TNPR_TXNPTR_Msk
 & ((vÆueË<< 
PWM_TNPR_TXNPTR_Pos
)))

	)

574 
	#PWM_TNCR_TXNCTR_Pos
 0

	)

575 
	#PWM_TNCR_TXNCTR_Msk
 (0xffffu << 
PWM_TNCR_TXNCTR_Pos
Ë

	)

576 
	#PWM_TNCR_TXNCTR
(
vÆue
Ë((
PWM_TNCR_TXNCTR_Msk
 & ((vÆueË<< 
PWM_TNCR_TXNCTR_Pos
)))

	)

578 
	#PWM_PTCR_RXTEN
 (0x1u << 0Ë

	)

579 
	#PWM_PTCR_RXTDIS
 (0x1u << 1Ë

	)

580 
	#PWM_PTCR_TXTEN
 (0x1u << 8Ë

	)

581 
	#PWM_PTCR_TXTDIS
 (0x1u << 9Ë

	)

583 
	#PWM_PTSR_RXTEN
 (0x1u << 0Ë

	)

584 
	#PWM_PTSR_TXTEN
 (0x1u << 8Ë

	)

586 
	#PWM_CMPV_CV_Pos
 0

	)

587 
	#PWM_CMPV_CV_Msk
 (0xffffffu << 
PWM_CMPV_CV_Pos
Ë

	)

588 
	#PWM_CMPV_CV
(
vÆue
Ë((
PWM_CMPV_CV_Msk
 & ((vÆueË<< 
PWM_CMPV_CV_Pos
)))

	)

589 
	#PWM_CMPV_CVM
 (0x1u << 24Ë

	)

591 
	#PWM_CMPVUPD_CVUPD_Pos
 0

	)

592 
	#PWM_CMPVUPD_CVUPD_Msk
 (0xffffffu << 
PWM_CMPVUPD_CVUPD_Pos
Ë

	)

593 
	#PWM_CMPVUPD_CVUPD
(
vÆue
Ë((
PWM_CMPVUPD_CVUPD_Msk
 & ((vÆueË<< 
PWM_CMPVUPD_CVUPD_Pos
)))

	)

594 
	#PWM_CMPVUPD_CVMUPD
 (0x1u << 24Ë

	)

596 
	#PWM_CMPM_CEN
 (0x1u << 0Ë

	)

597 
	#PWM_CMPM_CTR_Pos
 4

	)

598 
	#PWM_CMPM_CTR_Msk
 (0xfu << 
PWM_CMPM_CTR_Pos
Ë

	)

599 
	#PWM_CMPM_CTR
(
vÆue
Ë((
PWM_CMPM_CTR_Msk
 & ((vÆueË<< 
PWM_CMPM_CTR_Pos
)))

	)

600 
	#PWM_CMPM_CPR_Pos
 8

	)

601 
	#PWM_CMPM_CPR_Msk
 (0xfu << 
PWM_CMPM_CPR_Pos
Ë

	)

602 
	#PWM_CMPM_CPR
(
vÆue
Ë((
PWM_CMPM_CPR_Msk
 & ((vÆueË<< 
PWM_CMPM_CPR_Pos
)))

	)

603 
	#PWM_CMPM_CPRCNT_Pos
 12

	)

604 
	#PWM_CMPM_CPRCNT_Msk
 (0xfu << 
PWM_CMPM_CPRCNT_Pos
Ë

	)

605 
	#PWM_CMPM_CPRCNT
(
vÆue
Ë((
PWM_CMPM_CPRCNT_Msk
 & ((vÆueË<< 
PWM_CMPM_CPRCNT_Pos
)))

	)

606 
	#PWM_CMPM_CUPR_Pos
 16

	)

607 
	#PWM_CMPM_CUPR_Msk
 (0xfu << 
PWM_CMPM_CUPR_Pos
Ë

	)

608 
	#PWM_CMPM_CUPR
(
vÆue
Ë((
PWM_CMPM_CUPR_Msk
 & ((vÆueË<< 
PWM_CMPM_CUPR_Pos
)))

	)

609 
	#PWM_CMPM_CUPRCNT_Pos
 20

	)

610 
	#PWM_CMPM_CUPRCNT_Msk
 (0xfu << 
PWM_CMPM_CUPRCNT_Pos
Ë

	)

611 
	#PWM_CMPM_CUPRCNT
(
vÆue
Ë((
PWM_CMPM_CUPRCNT_Msk
 & ((vÆueË<< 
PWM_CMPM_CUPRCNT_Pos
)))

	)

613 
	#PWM_CMPMUPD_CENUPD
 (0x1u << 0Ë

	)

614 
	#PWM_CMPMUPD_CTRUPD_Pos
 4

	)

615 
	#PWM_CMPMUPD_CTRUPD_Msk
 (0xfu << 
PWM_CMPMUPD_CTRUPD_Pos
Ë

	)

616 
	#PWM_CMPMUPD_CTRUPD
(
vÆue
Ë((
PWM_CMPMUPD_CTRUPD_Msk
 & ((vÆueË<< 
PWM_CMPMUPD_CTRUPD_Pos
)))

	)

617 
	#PWM_CMPMUPD_CPRUPD_Pos
 8

	)

618 
	#PWM_CMPMUPD_CPRUPD_Msk
 (0xfu << 
PWM_CMPMUPD_CPRUPD_Pos
Ë

	)

619 
	#PWM_CMPMUPD_CPRUPD
(
vÆue
Ë((
PWM_CMPMUPD_CPRUPD_Msk
 & ((vÆueË<< 
PWM_CMPMUPD_CPRUPD_Pos
)))

	)

620 
	#PWM_CMPMUPD_CUPRUPD_Pos
 16

	)

621 
	#PWM_CMPMUPD_CUPRUPD_Msk
 (0xfu << 
PWM_CMPMUPD_CUPRUPD_Pos
Ë

	)

622 
	#PWM_CMPMUPD_CUPRUPD
(
vÆue
Ë((
PWM_CMPMUPD_CUPRUPD_Msk
 & ((vÆueË<< 
PWM_CMPMUPD_CUPRUPD_Pos
)))

	)

624 
	#PWM_CMR_CPRE_Pos
 0

	)

625 
	#PWM_CMR_CPRE_Msk
 (0xfu << 
PWM_CMR_CPRE_Pos
Ë

	)

626 
	#PWM_CMR_CPRE_MCK
 (0x0u << 0Ë

	)

627 
	#PWM_CMR_CPRE_MCK_DIV_2
 (0x1u << 0Ë

	)

628 
	#PWM_CMR_CPRE_MCK_DIV_4
 (0x2u << 0Ë

	)

629 
	#PWM_CMR_CPRE_MCK_DIV_8
 (0x3u << 0Ë

	)

630 
	#PWM_CMR_CPRE_MCK_DIV_16
 (0x4u << 0Ë

	)

631 
	#PWM_CMR_CPRE_MCK_DIV_32
 (0x5u << 0Ë

	)

632 
	#PWM_CMR_CPRE_MCK_DIV_64
 (0x6u << 0Ë

	)

633 
	#PWM_CMR_CPRE_MCK_DIV_128
 (0x7u << 0Ë

	)

634 
	#PWM_CMR_CPRE_MCK_DIV_256
 (0x8u << 0Ë

	)

635 
	#PWM_CMR_CPRE_MCK_DIV_512
 (0x9u << 0Ë

	)

636 
	#PWM_CMR_CPRE_MCK_DIV_1024
 (0xAu << 0Ë

	)

637 
	#PWM_CMR_CPRE_CLKA
 (0xBu << 0Ë

	)

638 
	#PWM_CMR_CPRE_CLKB
 (0xCu << 0Ë

	)

639 
	#PWM_CMR_CALG
 (0x1u << 8Ë

	)

640 
	#PWM_CMR_CPOL
 (0x1u << 9Ë

	)

641 
	#PWM_CMR_CES
 (0x1u << 10Ë

	)

642 
	#PWM_CMR_DTE
 (0x1u << 16Ë

	)

643 
	#PWM_CMR_DTHI
 (0x1u << 17Ë

	)

644 
	#PWM_CMR_DTLI
 (0x1u << 18Ë

	)

646 
	#PWM_CDTY_CDTY_Pos
 0

	)

647 
	#PWM_CDTY_CDTY_Msk
 (0xffffffu << 
PWM_CDTY_CDTY_Pos
Ë

	)

648 
	#PWM_CDTY_CDTY
(
vÆue
Ë((
PWM_CDTY_CDTY_Msk
 & ((vÆueË<< 
PWM_CDTY_CDTY_Pos
)))

	)

650 
	#PWM_CDTYUPD_CDTYUPD_Pos
 0

	)

651 
	#PWM_CDTYUPD_CDTYUPD_Msk
 (0xffffffu << 
PWM_CDTYUPD_CDTYUPD_Pos
Ë

	)

652 
	#PWM_CDTYUPD_CDTYUPD
(
vÆue
Ë((
PWM_CDTYUPD_CDTYUPD_Msk
 & ((vÆueË<< 
PWM_CDTYUPD_CDTYUPD_Pos
)))

	)

654 
	#PWM_CPRD_CPRD_Pos
 0

	)

655 
	#PWM_CPRD_CPRD_Msk
 (0xffffffu << 
PWM_CPRD_CPRD_Pos
Ë

	)

656 
	#PWM_CPRD_CPRD
(
vÆue
Ë((
PWM_CPRD_CPRD_Msk
 & ((vÆueË<< 
PWM_CPRD_CPRD_Pos
)))

	)

658 
	#PWM_CPRDUPD_CPRDUPD_Pos
 0

	)

659 
	#PWM_CPRDUPD_CPRDUPD_Msk
 (0xffffffu << 
PWM_CPRDUPD_CPRDUPD_Pos
Ë

	)

660 
	#PWM_CPRDUPD_CPRDUPD
(
vÆue
Ë((
PWM_CPRDUPD_CPRDUPD_Msk
 & ((vÆueË<< 
PWM_CPRDUPD_CPRDUPD_Pos
)))

	)

662 
	#PWM_CCNT_CNT_Pos
 0

	)

663 
	#PWM_CCNT_CNT_Msk
 (0xffffffu << 
PWM_CCNT_CNT_Pos
Ë

	)

665 
	#PWM_DT_DTH_Pos
 0

	)

666 
	#PWM_DT_DTH_Msk
 (0xffffu << 
PWM_DT_DTH_Pos
Ë

	)

667 
	#PWM_DT_DTH
(
vÆue
Ë((
PWM_DT_DTH_Msk
 & ((vÆueË<< 
PWM_DT_DTH_Pos
)))

	)

668 
	#PWM_DT_DTL_Pos
 16

	)

669 
	#PWM_DT_DTL_Msk
 (0xffffu << 
PWM_DT_DTL_Pos
Ë

	)

670 
	#PWM_DT_DTL
(
vÆue
Ë((
PWM_DT_DTL_Msk
 & ((vÆueË<< 
PWM_DT_DTL_Pos
)))

	)

672 
	#PWM_DTUPD_DTHUPD_Pos
 0

	)

673 
	#PWM_DTUPD_DTHUPD_Msk
 (0xffffu << 
PWM_DTUPD_DTHUPD_Pos
Ë

	)

674 
	#PWM_DTUPD_DTHUPD
(
vÆue
Ë((
PWM_DTUPD_DTHUPD_Msk
 & ((vÆueË<< 
PWM_DTUPD_DTHUPD_Pos
)))

	)

675 
	#PWM_DTUPD_DTLUPD_Pos
 16

	)

676 
	#PWM_DTUPD_DTLUPD_Msk
 (0xffffu << 
PWM_DTUPD_DTLUPD_Pos
Ë

	)

677 
	#PWM_DTUPD_DTLUPD
(
vÆue
Ë((
PWM_DTUPD_DTLUPD_Msk
 & ((vÆueË<< 
PWM_DTUPD_DTLUPD_Pos
)))

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_rstc.h

45 #i‚de‡
_SAM3XA_RSTC_COMPONENT_


46 
	#_SAM3XA_RSTC_COMPONENT_


	)

54 #i‡!(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

57 
WoReg
 
	mRSTC_CR
;

58 
RoReg
 
	mRSTC_SR
;

59 
RwReg
 
	mRSTC_MR
;

60 } 
	tR°c
;

63 
	#RSTC_CR_PROCRST
 (0x1u << 0Ë

	)

64 
	#RSTC_CR_PERRST
 (0x1u << 2Ë

	)

65 
	#RSTC_CR_EXTRST
 (0x1u << 3Ë

	)

66 
	#RSTC_CR_KEY_Pos
 24

	)

67 
	#RSTC_CR_KEY_Msk
 (0xffu << 
RSTC_CR_KEY_Pos
Ë

	)

68 
	#RSTC_CR_KEY
(
vÆue
Ë((
RSTC_CR_KEY_Msk
 & ((vÆueË<< 
RSTC_CR_KEY_Pos
)))

	)

70 
	#RSTC_SR_URSTS
 (0x1u << 0Ë

	)

71 
	#RSTC_SR_RSTTYP_Pos
 8

	)

72 
	#RSTC_SR_RSTTYP_Msk
 (0x7u << 
RSTC_SR_RSTTYP_Pos
Ë

	)

73 
	#RSTC_SR_NRSTL
 (0x1u << 16Ë

	)

74 
	#RSTC_SR_SRCMP
 (0x1u << 17Ë

	)

76 
	#RSTC_MR_URSTEN
 (0x1u << 0Ë

	)

77 
	#RSTC_MR_URSTIEN
 (0x1u << 4Ë

	)

78 
	#RSTC_MR_ERSTL_Pos
 8

	)

79 
	#RSTC_MR_ERSTL_Msk
 (0xfu << 
RSTC_MR_ERSTL_Pos
Ë

	)

80 
	#RSTC_MR_ERSTL
(
vÆue
Ë((
RSTC_MR_ERSTL_Msk
 & ((vÆueË<< 
RSTC_MR_ERSTL_Pos
)))

	)

81 
	#RSTC_MR_KEY_Pos
 24

	)

82 
	#RSTC_MR_KEY_Msk
 (0xffu << 
RSTC_MR_KEY_Pos
Ë

	)

83 
	#RSTC_MR_KEY
(
vÆue
Ë((
RSTC_MR_KEY_Msk
 & ((vÆueË<< 
RSTC_MR_KEY_Pos
)))

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_rtc.h

45 #i‚de‡
_SAM3XA_RTC_COMPONENT_


46 
	#_SAM3XA_RTC_COMPONENT_


	)

54 #i‡!(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

57 
RwReg
 
	mRTC_CR
;

58 
RwReg
 
	mRTC_MR
;

59 
RwReg
 
	mRTC_TIMR
;

60 
RwReg
 
	mRTC_CALR
;

61 
RwReg
 
	mRTC_TIMALR
;

62 
RwReg
 
	mRTC_CALALR
;

63 
RoReg
 
	mRTC_SR
;

64 
WoReg
 
	mRTC_SCCR
;

65 
WoReg
 
	mRTC_IER
;

66 
WoReg
 
	mRTC_IDR
;

67 
RoReg
 
	mRTC_IMR
;

68 
RoReg
 
	mRTC_VER
;

69 
RoReg
 
	mRe£rved1
[45];

70 
RwReg
 
	mRTC_WPMR
;

71 } 
	tRtc
;

74 
	#RTC_CR_UPDTIM
 (0x1u << 0Ë

	)

75 
	#RTC_CR_UPDCAL
 (0x1u << 1Ë

	)

76 
	#RTC_CR_TIMEVSEL_Pos
 8

	)

77 
	#RTC_CR_TIMEVSEL_Msk
 (0x3u << 
RTC_CR_TIMEVSEL_Pos
Ë

	)

78 
	#RTC_CR_TIMEVSEL_MINUTE
 (0x0u << 8Ë

	)

79 
	#RTC_CR_TIMEVSEL_HOUR
 (0x1u << 8Ë

	)

80 
	#RTC_CR_TIMEVSEL_MIDNIGHT
 (0x2u << 8Ë

	)

81 
	#RTC_CR_TIMEVSEL_NOON
 (0x3u << 8Ë

	)

82 
	#RTC_CR_CALEVSEL_Pos
 16

	)

83 
	#RTC_CR_CALEVSEL_Msk
 (0x3u << 
RTC_CR_CALEVSEL_Pos
Ë

	)

84 
	#RTC_CR_CALEVSEL_WEEK
 (0x0u << 16Ë

	)

85 
	#RTC_CR_CALEVSEL_MONTH
 (0x1u << 16Ë

	)

86 
	#RTC_CR_CALEVSEL_YEAR
 (0x2u << 16Ë

	)

88 
	#RTC_MR_HRMOD
 (0x1u << 0Ë

	)

90 
	#RTC_TIMR_SEC_Pos
 0

	)

91 
	#RTC_TIMR_SEC_Msk
 (0x7fu << 
RTC_TIMR_SEC_Pos
Ë

	)

92 
	#RTC_TIMR_SEC
(
vÆue
Ë((
RTC_TIMR_SEC_Msk
 & ((vÆueË<< 
RTC_TIMR_SEC_Pos
)))

	)

93 
	#RTC_TIMR_MIN_Pos
 8

	)

94 
	#RTC_TIMR_MIN_Msk
 (0x7fu << 
RTC_TIMR_MIN_Pos
Ë

	)

95 
	#RTC_TIMR_MIN
(
vÆue
Ë((
RTC_TIMR_MIN_Msk
 & ((vÆueË<< 
RTC_TIMR_MIN_Pos
)))

	)

96 
	#RTC_TIMR_HOUR_Pos
 16

	)

97 
	#RTC_TIMR_HOUR_Msk
 (0x3fu << 
RTC_TIMR_HOUR_Pos
Ë

	)

98 
	#RTC_TIMR_HOUR
(
vÆue
Ë((
RTC_TIMR_HOUR_Msk
 & ((vÆueË<< 
RTC_TIMR_HOUR_Pos
)))

	)

99 
	#RTC_TIMR_AMPM
 (0x1u << 22Ë

	)

101 
	#RTC_CALR_CENT_Pos
 0

	)

102 
	#RTC_CALR_CENT_Msk
 (0x7fu << 
RTC_CALR_CENT_Pos
Ë

	)

103 
	#RTC_CALR_CENT
(
vÆue
Ë((
RTC_CALR_CENT_Msk
 & ((vÆueË<< 
RTC_CALR_CENT_Pos
)))

	)

104 
	#RTC_CALR_YEAR_Pos
 8

	)

105 
	#RTC_CALR_YEAR_Msk
 (0xffu << 
RTC_CALR_YEAR_Pos
Ë

	)

106 
	#RTC_CALR_YEAR
(
vÆue
Ë((
RTC_CALR_YEAR_Msk
 & ((vÆueË<< 
RTC_CALR_YEAR_Pos
)))

	)

107 
	#RTC_CALR_MONTH_Pos
 16

	)

108 
	#RTC_CALR_MONTH_Msk
 (0x1fu << 
RTC_CALR_MONTH_Pos
Ë

	)

109 
	#RTC_CALR_MONTH
(
vÆue
Ë((
RTC_CALR_MONTH_Msk
 & ((vÆueË<< 
RTC_CALR_MONTH_Pos
)))

	)

110 
	#RTC_CALR_DAY_Pos
 21

	)

111 
	#RTC_CALR_DAY_Msk
 (0x7u << 
RTC_CALR_DAY_Pos
Ë

	)

112 
	#RTC_CALR_DAY
(
vÆue
Ë((
RTC_CALR_DAY_Msk
 & ((vÆueË<< 
RTC_CALR_DAY_Pos
)))

	)

113 
	#RTC_CALR_DATE_Pos
 24

	)

114 
	#RTC_CALR_DATE_Msk
 (0x3fu << 
RTC_CALR_DATE_Pos
Ë

	)

115 
	#RTC_CALR_DATE
(
vÆue
Ë((
RTC_CALR_DATE_Msk
 & ((vÆueË<< 
RTC_CALR_DATE_Pos
)))

	)

117 
	#RTC_TIMALR_SEC_Pos
 0

	)

118 
	#RTC_TIMALR_SEC_Msk
 (0x7fu << 
RTC_TIMALR_SEC_Pos
Ë

	)

119 
	#RTC_TIMALR_SEC
(
vÆue
Ë((
RTC_TIMALR_SEC_Msk
 & ((vÆueË<< 
RTC_TIMALR_SEC_Pos
)))

	)

120 
	#RTC_TIMALR_SECEN
 (0x1u << 7Ë

	)

121 
	#RTC_TIMALR_MIN_Pos
 8

	)

122 
	#RTC_TIMALR_MIN_Msk
 (0x7fu << 
RTC_TIMALR_MIN_Pos
Ë

	)

123 
	#RTC_TIMALR_MIN
(
vÆue
Ë((
RTC_TIMALR_MIN_Msk
 & ((vÆueË<< 
RTC_TIMALR_MIN_Pos
)))

	)

124 
	#RTC_TIMALR_MINEN
 (0x1u << 15Ë

	)

125 
	#RTC_TIMALR_HOUR_Pos
 16

	)

126 
	#RTC_TIMALR_HOUR_Msk
 (0x3fu << 
RTC_TIMALR_HOUR_Pos
Ë

	)

127 
	#RTC_TIMALR_HOUR
(
vÆue
Ë((
RTC_TIMALR_HOUR_Msk
 & ((vÆueË<< 
RTC_TIMALR_HOUR_Pos
)))

	)

128 
	#RTC_TIMALR_AMPM
 (0x1u << 22Ë

	)

129 
	#RTC_TIMALR_HOUREN
 (0x1u << 23Ë

	)

131 
	#RTC_CALALR_MONTH_Pos
 16

	)

132 
	#RTC_CALALR_MONTH_Msk
 (0x1fu << 
RTC_CALALR_MONTH_Pos
Ë

	)

133 
	#RTC_CALALR_MONTH
(
vÆue
Ë((
RTC_CALALR_MONTH_Msk
 & ((vÆueË<< 
RTC_CALALR_MONTH_Pos
)))

	)

134 
	#RTC_CALALR_MTHEN
 (0x1u << 23Ë

	)

135 
	#RTC_CALALR_DATE_Pos
 24

	)

136 
	#RTC_CALALR_DATE_Msk
 (0x3fu << 
RTC_CALALR_DATE_Pos
Ë

	)

137 
	#RTC_CALALR_DATE
(
vÆue
Ë((
RTC_CALALR_DATE_Msk
 & ((vÆueË<< 
RTC_CALALR_DATE_Pos
)))

	)

138 
	#RTC_CALALR_DATEEN
 (0x1u << 31Ë

	)

140 
	#RTC_SR_ACKUPD
 (0x1u << 0Ë

	)

141 
	#RTC_SR_ALARM
 (0x1u << 1Ë

	)

142 
	#RTC_SR_SEC
 (0x1u << 2Ë

	)

143 
	#RTC_SR_TIMEV
 (0x1u << 3Ë

	)

144 
	#RTC_SR_CALEV
 (0x1u << 4Ë

	)

146 
	#RTC_SCCR_ACKCLR
 (0x1u << 0Ë

	)

147 
	#RTC_SCCR_ALRCLR
 (0x1u << 1Ë

	)

148 
	#RTC_SCCR_SECCLR
 (0x1u << 2Ë

	)

149 
	#RTC_SCCR_TIMCLR
 (0x1u << 3Ë

	)

150 
	#RTC_SCCR_CALCLR
 (0x1u << 4Ë

	)

152 
	#RTC_IER_ACKEN
 (0x1u << 0Ë

	)

153 
	#RTC_IER_ALREN
 (0x1u << 1Ë

	)

154 
	#RTC_IER_SECEN
 (0x1u << 2Ë

	)

155 
	#RTC_IER_TIMEN
 (0x1u << 3Ë

	)

156 
	#RTC_IER_CALEN
 (0x1u << 4Ë

	)

158 
	#RTC_IDR_ACKDIS
 (0x1u << 0Ë

	)

159 
	#RTC_IDR_ALRDIS
 (0x1u << 1Ë

	)

160 
	#RTC_IDR_SECDIS
 (0x1u << 2Ë

	)

161 
	#RTC_IDR_TIMDIS
 (0x1u << 3Ë

	)

162 
	#RTC_IDR_CALDIS
 (0x1u << 4Ë

	)

164 
	#RTC_IMR_ACK
 (0x1u << 0Ë

	)

165 
	#RTC_IMR_ALR
 (0x1u << 1Ë

	)

166 
	#RTC_IMR_SEC
 (0x1u << 2Ë

	)

167 
	#RTC_IMR_TIM
 (0x1u << 3Ë

	)

168 
	#RTC_IMR_CAL
 (0x1u << 4Ë

	)

170 
	#RTC_VER_NVTIM
 (0x1u << 0Ë

	)

171 
	#RTC_VER_NVCAL
 (0x1u << 1Ë

	)

172 
	#RTC_VER_NVTIMALR
 (0x1u << 2Ë

	)

173 
	#RTC_VER_NVCALALR
 (0x1u << 3Ë

	)

175 
	#RTC_WPMR_WPEN
 (0x1u << 0Ë

	)

176 
	#RTC_WPMR_WPKEY_Pos
 8

	)

177 
	#RTC_WPMR_WPKEY_Msk
 (0xffffffu << 
RTC_WPMR_WPKEY_Pos
Ë

	)

178 
	#RTC_WPMR_WPKEY
(
vÆue
Ë((
RTC_WPMR_WPKEY_Msk
 & ((vÆueË<< 
RTC_WPMR_WPKEY_Pos
)))

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_rtt.h

45 #i‚de‡
_SAM3XA_RTT_COMPONENT_


46 
	#_SAM3XA_RTT_COMPONENT_


	)

54 #i‡!(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

57 
RwReg
 
	mRTT_MR
;

58 
RwReg
 
	mRTT_AR
;

59 
RoReg
 
	mRTT_VR
;

60 
RoReg
 
	mRTT_SR
;

61 } 
	tRâ
;

64 
	#RTT_MR_RTPRES_Pos
 0

	)

65 
	#RTT_MR_RTPRES_Msk
 (0xffffu << 
RTT_MR_RTPRES_Pos
Ë

	)

66 
	#RTT_MR_RTPRES
(
vÆue
Ë((
RTT_MR_RTPRES_Msk
 & ((vÆueË<< 
RTT_MR_RTPRES_Pos
)))

	)

67 
	#RTT_MR_ALMIEN
 (0x1u << 16Ë

	)

68 
	#RTT_MR_RTTINCIEN
 (0x1u << 17Ë

	)

69 
	#RTT_MR_RTTRST
 (0x1u << 18Ë

	)

71 
	#RTT_AR_ALMV_Pos
 0

	)

72 
	#RTT_AR_ALMV_Msk
 (0xffffffffu << 
RTT_AR_ALMV_Pos
Ë

	)

73 
	#RTT_AR_ALMV
(
vÆue
Ë((
RTT_AR_ALMV_Msk
 & ((vÆueË<< 
RTT_AR_ALMV_Pos
)))

	)

75 
	#RTT_VR_CRTV_Pos
 0

	)

76 
	#RTT_VR_CRTV_Msk
 (0xffffffffu << 
RTT_VR_CRTV_Pos
Ë

	)

78 
	#RTT_SR_ALMS
 (0x1u << 0Ë

	)

79 
	#RTT_SR_RTTINC
 (0x1u << 1Ë

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_sdramc.h

45 #i‚de‡
_SAM3XA_SDRAMC_COMPONENT_


46 
	#_SAM3XA_SDRAMC_COMPONENT_


	)

54 #i‡!(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

57 
RwReg
 
	mSDRAMC_MR
;

58 
RwReg
 
	mSDRAMC_TR
;

59 
RwReg
 
	mSDRAMC_CR
;

60 
RoReg
 
	mRe£rved1
[1];

61 
RwReg
 
	mSDRAMC_LPR
;

62 
WoReg
 
	mSDRAMC_IER
;

63 
WoReg
 
	mSDRAMC_IDR
;

64 
RoReg
 
	mSDRAMC_IMR
;

65 
RoReg
 
	mSDRAMC_ISR
;

66 
RwReg
 
	mSDRAMC_MDR
;

67 
RwReg
 
	mSDRAMC_CR1
;

68 
RwReg
 
	mSDRAMC_OCMS
;

69 } 
	tSdømc
;

72 
	#SDRAMC_MR_MODE_Pos
 0

	)

73 
	#SDRAMC_MR_MODE_Msk
 (0x7u << 
SDRAMC_MR_MODE_Pos
Ë

	)

74 
	#SDRAMC_MR_MODE_NORMAL
 (0x0u << 0Ë

	)

75 
	#SDRAMC_MR_MODE_NOP
 (0x1u << 0Ë

	)

76 
	#SDRAMC_MR_MODE_ALLBANKS_PRECHARGE
 (0x2u << 0Ë

	)

77 
	#SDRAMC_MR_MODE_LOAD_MODEREG
 (0x3u << 0Ë

	)

78 
	#SDRAMC_MR_MODE_AUTO_REFRESH
 (0x4u << 0Ë

	)

79 
	#SDRAMC_MR_MODE_EXT_LOAD_MODEREG
 (0x5u << 0Ë

	)

80 
	#SDRAMC_MR_MODE_DEEP_POWERDOWN
 (0x6u << 0Ë

	)

82 
	#SDRAMC_TR_COUNT_Pos
 0

	)

83 
	#SDRAMC_TR_COUNT_Msk
 (0xfffu << 
SDRAMC_TR_COUNT_Pos
Ë

	)

84 
	#SDRAMC_TR_COUNT
(
vÆue
Ë((
SDRAMC_TR_COUNT_Msk
 & ((vÆueË<< 
SDRAMC_TR_COUNT_Pos
)))

	)

86 
	#SDRAMC_CR_NC_Pos
 0

	)

87 
	#SDRAMC_CR_NC_Msk
 (0x3u << 
SDRAMC_CR_NC_Pos
Ë

	)

88 
	#SDRAMC_CR_NC_COL8
 (0x0u << 0Ë

	)

89 
	#SDRAMC_CR_NC_COL9
 (0x1u << 0Ë

	)

90 
	#SDRAMC_CR_NC_COL10
 (0x2u << 0Ë

	)

91 
	#SDRAMC_CR_NC_COL11
 (0x3u << 0Ë

	)

92 
	#SDRAMC_CR_NR_Pos
 2

	)

93 
	#SDRAMC_CR_NR_Msk
 (0x3u << 
SDRAMC_CR_NR_Pos
Ë

	)

94 
	#SDRAMC_CR_NR_ROW11
 (0x0u << 2Ë

	)

95 
	#SDRAMC_CR_NR_ROW12
 (0x1u << 2Ë

	)

96 
	#SDRAMC_CR_NR_ROW13
 (0x2u << 2Ë

	)

97 
	#SDRAMC_CR_NB
 (0x1u << 4Ë

	)

98 
	#SDRAMC_CR_NB_BANK2
 (0x0u << 4Ë

	)

99 
	#SDRAMC_CR_NB_BANK4
 (0x1u << 4Ë

	)

100 
	#SDRAMC_CR_CAS_Pos
 5

	)

101 
	#SDRAMC_CR_CAS_Msk
 (0x3u << 
SDRAMC_CR_CAS_Pos
Ë

	)

102 
	#SDRAMC_CR_CAS_LATENCY1
 (0x1u << 5Ë

	)

103 
	#SDRAMC_CR_CAS_LATENCY2
 (0x2u << 5Ë

	)

104 
	#SDRAMC_CR_CAS_LATENCY3
 (0x3u << 5Ë

	)

105 
	#SDRAMC_CR_DBW
 (0x1u << 7Ë

	)

106 
	#SDRAMC_CR_TWR_Pos
 8

	)

107 
	#SDRAMC_CR_TWR_Msk
 (0xfu << 
SDRAMC_CR_TWR_Pos
Ë

	)

108 
	#SDRAMC_CR_TWR
(
vÆue
Ë((
SDRAMC_CR_TWR_Msk
 & ((vÆueË<< 
SDRAMC_CR_TWR_Pos
)))

	)

109 
	#SDRAMC_CR_TRC_TRFC_Pos
 12

	)

110 
	#SDRAMC_CR_TRC_TRFC_Msk
 (0xfu << 
SDRAMC_CR_TRC_TRFC_Pos
Ë

	)

111 
	#SDRAMC_CR_TRC_TRFC
(
vÆue
Ë((
SDRAMC_CR_TRC_TRFC_Msk
 & ((vÆueË<< 
SDRAMC_CR_TRC_TRFC_Pos
)))

	)

112 
	#SDRAMC_CR_TRP_Pos
 16

	)

113 
	#SDRAMC_CR_TRP_Msk
 (0xfu << 
SDRAMC_CR_TRP_Pos
Ë

	)

114 
	#SDRAMC_CR_TRP
(
vÆue
Ë((
SDRAMC_CR_TRP_Msk
 & ((vÆueË<< 
SDRAMC_CR_TRP_Pos
)))

	)

115 
	#SDRAMC_CR_TRCD_Pos
 20

	)

116 
	#SDRAMC_CR_TRCD_Msk
 (0xfu << 
SDRAMC_CR_TRCD_Pos
Ë

	)

117 
	#SDRAMC_CR_TRCD
(
vÆue
Ë((
SDRAMC_CR_TRCD_Msk
 & ((vÆueË<< 
SDRAMC_CR_TRCD_Pos
)))

	)

118 
	#SDRAMC_CR_TRAS_Pos
 24

	)

119 
	#SDRAMC_CR_TRAS_Msk
 (0xfu << 
SDRAMC_CR_TRAS_Pos
Ë

	)

120 
	#SDRAMC_CR_TRAS
(
vÆue
Ë((
SDRAMC_CR_TRAS_Msk
 & ((vÆueË<< 
SDRAMC_CR_TRAS_Pos
)))

	)

121 
	#SDRAMC_CR_TXSR_Pos
 28

	)

122 
	#SDRAMC_CR_TXSR_Msk
 (0xfu << 
SDRAMC_CR_TXSR_Pos
Ë

	)

123 
	#SDRAMC_CR_TXSR
(
vÆue
Ë((
SDRAMC_CR_TXSR_Msk
 & ((vÆueË<< 
SDRAMC_CR_TXSR_Pos
)))

	)

125 
	#SDRAMC_LPR_LPCB_Pos
 0

	)

126 
	#SDRAMC_LPR_LPCB_Msk
 (0x3u << 
SDRAMC_LPR_LPCB_Pos
Ë

	)

127 
	#SDRAMC_LPR_LPCB_DISABLED
 (0x0u << 0Ë

	)

128 
	#SDRAMC_LPR_LPCB_SELF_REFRESH
 (0x1u << 0Ë

	)

129 
	#SDRAMC_LPR_LPCB_POWER_DOWN
 (0x2u << 0Ë

	)

130 
	#SDRAMC_LPR_LPCB_DEEP_POWER_DOWN
 (0x3u << 0Ë

	)

131 
	#SDRAMC_LPR_PASR_Pos
 4

	)

132 
	#SDRAMC_LPR_PASR_Msk
 (0x7u << 
SDRAMC_LPR_PASR_Pos
Ë

	)

133 
	#SDRAMC_LPR_PASR
(
vÆue
Ë((
SDRAMC_LPR_PASR_Msk
 & ((vÆueË<< 
SDRAMC_LPR_PASR_Pos
)))

	)

134 
	#SDRAMC_LPR_TCSR_Pos
 8

	)

135 
	#SDRAMC_LPR_TCSR_Msk
 (0x3u << 
SDRAMC_LPR_TCSR_Pos
Ë

	)

136 
	#SDRAMC_LPR_TCSR
(
vÆue
Ë((
SDRAMC_LPR_TCSR_Msk
 & ((vÆueË<< 
SDRAMC_LPR_TCSR_Pos
)))

	)

137 
	#SDRAMC_LPR_DS_Pos
 10

	)

138 
	#SDRAMC_LPR_DS_Msk
 (0x3u << 
SDRAMC_LPR_DS_Pos
Ë

	)

139 
	#SDRAMC_LPR_DS
(
vÆue
Ë((
SDRAMC_LPR_DS_Msk
 & ((vÆueË<< 
SDRAMC_LPR_DS_Pos
)))

	)

140 
	#SDRAMC_LPR_TIMEOUT_Pos
 12

	)

141 
	#SDRAMC_LPR_TIMEOUT_Msk
 (0x3u << 
SDRAMC_LPR_TIMEOUT_Pos
Ë

	)

142 
	#SDRAMC_LPR_TIMEOUT_LP_LAST_XFER
 (0x0u << 12Ë

	)

143 
	#SDRAMC_LPR_TIMEOUT_LP_LAST_XFER_64
 (0x1u << 12Ë

	)

144 
	#SDRAMC_LPR_TIMEOUT_LP_LAST_XFER_128
 (0x2u << 12Ë

	)

146 
	#SDRAMC_IER_RES
 (0x1u << 0Ë

	)

148 
	#SDRAMC_IDR_RES
 (0x1u << 0Ë

	)

150 
	#SDRAMC_IMR_RES
 (0x1u << 0Ë

	)

152 
	#SDRAMC_ISR_RES
 (0x1u << 0Ë

	)

154 
	#SDRAMC_MDR_MD_Pos
 0

	)

155 
	#SDRAMC_MDR_MD_Msk
 (0x3u << 
SDRAMC_MDR_MD_Pos
Ë

	)

156 
	#SDRAMC_MDR_MD_SDRAM
 (0x0u << 0Ë

	)

157 
	#SDRAMC_MDR_MD_LPSDRAM
 (0x1u << 0Ë

	)

159 
	#SDRAMC_CR1_NC_Pos
 0

	)

160 
	#SDRAMC_CR1_NC_Msk
 (0x3u << 
SDRAMC_CR1_NC_Pos
Ë

	)

161 
	#SDRAMC_CR1_NC_COL8
 (0x0u << 0Ë

	)

162 
	#SDRAMC_CR1_NC_COL9
 (0x1u << 0Ë

	)

163 
	#SDRAMC_CR1_NC_COL10
 (0x2u << 0Ë

	)

164 
	#SDRAMC_CR1_NC_COL11
 (0x3u << 0Ë

	)

165 
	#SDRAMC_CR1_NR_Pos
 2

	)

166 
	#SDRAMC_CR1_NR_Msk
 (0x3u << 
SDRAMC_CR1_NR_Pos
Ë

	)

167 
	#SDRAMC_CR1_NR_ROW11
 (0x0u << 2Ë

	)

168 
	#SDRAMC_CR1_NR_ROW12
 (0x1u << 2Ë

	)

169 
	#SDRAMC_CR1_NR_ROW13
 (0x2u << 2Ë

	)

170 
	#SDRAMC_CR1_NB
 (0x1u << 4Ë

	)

171 
	#SDRAMC_CR1_NB_BANK2
 (0x0u << 4Ë

	)

172 
	#SDRAMC_CR1_NB_BANK4
 (0x1u << 4Ë

	)

173 
	#SDRAMC_CR1_CAS_Pos
 5

	)

174 
	#SDRAMC_CR1_CAS_Msk
 (0x3u << 
SDRAMC_CR1_CAS_Pos
Ë

	)

175 
	#SDRAMC_CR1_CAS_LATENCY1
 (0x1u << 5Ë

	)

176 
	#SDRAMC_CR1_CAS_LATENCY2
 (0x2u << 5Ë

	)

177 
	#SDRAMC_CR1_CAS_LATENCY3
 (0x3u << 5Ë

	)

178 
	#SDRAMC_CR1_DBW
 (0x1u << 7Ë

	)

179 
	#SDRAMC_CR1_TWR_Pos
 8

	)

180 
	#SDRAMC_CR1_TWR_Msk
 (0xfu << 
SDRAMC_CR1_TWR_Pos
Ë

	)

181 
	#SDRAMC_CR1_TWR
(
vÆue
Ë((
SDRAMC_CR1_TWR_Msk
 & ((vÆueË<< 
SDRAMC_CR1_TWR_Pos
)))

	)

182 
	#SDRAMC_CR1_TRC_TRFC_Pos
 12

	)

183 
	#SDRAMC_CR1_TRC_TRFC_Msk
 (0xfu << 
SDRAMC_CR1_TRC_TRFC_Pos
Ë

	)

184 
	#SDRAMC_CR1_TRC_TRFC
(
vÆue
Ë((
SDRAMC_CR1_TRC_TRFC_Msk
 & ((vÆueË<< 
SDRAMC_CR1_TRC_TRFC_Pos
)))

	)

185 
	#SDRAMC_CR1_TRP_Pos
 16

	)

186 
	#SDRAMC_CR1_TRP_Msk
 (0xfu << 
SDRAMC_CR1_TRP_Pos
Ë

	)

187 
	#SDRAMC_CR1_TRP
(
vÆue
Ë((
SDRAMC_CR1_TRP_Msk
 & ((vÆueË<< 
SDRAMC_CR1_TRP_Pos
)))

	)

188 
	#SDRAMC_CR1_TRCD_Pos
 20

	)

189 
	#SDRAMC_CR1_TRCD_Msk
 (0xfu << 
SDRAMC_CR1_TRCD_Pos
Ë

	)

190 
	#SDRAMC_CR1_TRCD
(
vÆue
Ë((
SDRAMC_CR1_TRCD_Msk
 & ((vÆueË<< 
SDRAMC_CR1_TRCD_Pos
)))

	)

191 
	#SDRAMC_CR1_TRAS_Pos
 24

	)

192 
	#SDRAMC_CR1_TRAS_Msk
 (0xfu << 
SDRAMC_CR1_TRAS_Pos
Ë

	)

193 
	#SDRAMC_CR1_TRAS
(
vÆue
Ë((
SDRAMC_CR1_TRAS_Msk
 & ((vÆueË<< 
SDRAMC_CR1_TRAS_Pos
)))

	)

194 
	#SDRAMC_CR1_TXSR_Pos
 28

	)

195 
	#SDRAMC_CR1_TXSR_Msk
 (0xfu << 
SDRAMC_CR1_TXSR_Pos
Ë

	)

196 
	#SDRAMC_CR1_TXSR
(
vÆue
Ë((
SDRAMC_CR1_TXSR_Msk
 & ((vÆueË<< 
SDRAMC_CR1_TXSR_Pos
)))

	)

198 
	#SDRAMC_OCMS_SDR_SE
 (0x1u << 0Ë

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_smc.h

45 #i‚de‡
_SAM3XA_SMC_COMPONENT_


46 
	#_SAM3XA_SMC_COMPONENT_


	)

54 #i‡!(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

57 
RwReg
 
	mSMC_SETUP
;

58 
RwReg
 
	mSMC_PULSE
;

59 
RwReg
 
	mSMC_CYCLE
;

60 
RwReg
 
	mSMC_TIMINGS
;

61 
RwReg
 
	mSMC_MODE
;

62 } 
	tSmcCs_numbî
;

64 
	#SMCCS_NUMBER_NUMBER
 8

	)

66 
RwReg
 
	mSMC_CFG
;

67 
WoReg
 
	mSMC_CTRL
;

68 
RoReg
 
	mSMC_SR
;

69 
WoReg
 
	mSMC_IER
;

70 
WoReg
 
	mSMC_IDR
;

71 
RoReg
 
	mSMC_IMR
;

72 
RwReg
 
	mSMC_ADDR
;

73 
RwReg
 
	mSMC_BANK
;

74 
WoReg
 
	mSMC_ECC_CTRL
;

75 
RwReg
 
	mSMC_ECC_MD
;

76 
RoReg
 
	mSMC_ECC_SR1
;

77 
RoReg
 
	mSMC_ECC_PR0
;

78 
RoReg
 
	mSMC_ECC_PR1
;

79 
RoReg
 
	mSMC_ECC_SR2
;

80 
RoReg
 
	mSMC_ECC_PR2
;

81 
RoReg
 
	mSMC_ECC_PR3
;

82 
RoReg
 
	mSMC_ECC_PR4
;

83 
RoReg
 
	mSMC_ECC_PR5
;

84 
RoReg
 
	mSMC_ECC_PR6
;

85 
RoReg
 
	mSMC_ECC_PR7
;

86 
RoReg
 
	mSMC_ECC_PR8
;

87 
RoReg
 
	mSMC_ECC_PR9
;

88 
RoReg
 
	mSMC_ECC_PR10
;

89 
RoReg
 
	mSMC_ECC_PR11
;

90 
RoReg
 
	mSMC_ECC_PR12
;

91 
RoReg
 
	mSMC_ECC_PR13
;

92 
RoReg
 
	mSMC_ECC_PR14
;

93 
RoReg
 
	mSMC_ECC_PR15
;

94 
SmcCs_numbî
 
	mSMC_CS_NUMBER
[
SMCCS_NUMBER_NUMBER
];

95 
RwReg
 
	mSMC_OCMS
;

96 
WoReg
 
	mSMC_KEY1
;

97 
WoReg
 
	mSMC_KEY2
;

98 
RoReg
 
	mRe£rved1
[50];

99 
WoReg
 
	mSMC_WPCR
;

100 
RoReg
 
	mSMC_WPSR
;

101 } 
	tSmc
;

104 
	#SMC_CFG_PAGESIZE_Pos
 0

	)

105 
	#SMC_CFG_PAGESIZE_Msk
 (0x3u << 
SMC_CFG_PAGESIZE_Pos
Ë

	)

106 
	#SMC_CFG_PAGESIZE_PS512_16
 (0x0u << 0Ë

	)

107 
	#SMC_CFG_PAGESIZE_PS1024_32
 (0x1u << 0Ë

	)

108 
	#SMC_CFG_PAGESIZE_PS2048_64
 (0x2u << 0Ë

	)

109 
	#SMC_CFG_PAGESIZE_PS4096_128
 (0x3u << 0Ë

	)

110 
	#SMC_CFG_WSPARE
 (0x1u << 8Ë

	)

111 
	#SMC_CFG_RSPARE
 (0x1u << 9Ë

	)

112 
	#SMC_CFG_EDGECTRL
 (0x1u << 12Ë

	)

113 
	#SMC_CFG_RBEDGE
 (0x1u << 13Ë

	)

114 
	#SMC_CFG_DTOCYC_Pos
 16

	)

115 
	#SMC_CFG_DTOCYC_Msk
 (0xfu << 
SMC_CFG_DTOCYC_Pos
Ë

	)

116 
	#SMC_CFG_DTOCYC
(
vÆue
Ë((
SMC_CFG_DTOCYC_Msk
 & ((vÆueË<< 
SMC_CFG_DTOCYC_Pos
)))

	)

117 
	#SMC_CFG_DTOMUL_Pos
 20

	)

118 
	#SMC_CFG_DTOMUL_Msk
 (0x7u << 
SMC_CFG_DTOMUL_Pos
Ë

	)

119 
	#SMC_CFG_DTOMUL_X1
 (0x0u << 20Ë

	)

120 
	#SMC_CFG_DTOMUL_X16
 (0x1u << 20Ë

	)

121 
	#SMC_CFG_DTOMUL_X128
 (0x2u << 20Ë

	)

122 
	#SMC_CFG_DTOMUL_X256
 (0x3u << 20Ë

	)

123 
	#SMC_CFG_DTOMUL_X1024
 (0x4u << 20Ë

	)

124 
	#SMC_CFG_DTOMUL_X4096
 (0x5u << 20Ë

	)

125 
	#SMC_CFG_DTOMUL_X65536
 (0x6u << 20Ë

	)

126 
	#SMC_CFG_DTOMUL_X1048576
 (0x7u << 20Ë

	)

128 
	#SMC_CTRL_NFCEN
 (0x1u << 0Ë

	)

129 
	#SMC_CTRL_NFCDIS
 (0x1u << 1Ë

	)

131 
	#SMC_SR_SMCSTS
 (0x1u << 0Ë

	)

132 
	#SMC_SR_RB_RISE
 (0x1u << 4Ë

	)

133 
	#SMC_SR_RB_FALL
 (0x1u << 5Ë

	)

134 
	#SMC_SR_NFCBUSY
 (0x1u << 8Ë

	)

135 
	#SMC_SR_NFCWR
 (0x1u << 11Ë

	)

136 
	#SMC_SR_NFCSID_Pos
 12

	)

137 
	#SMC_SR_NFCSID_Msk
 (0x7u << 
SMC_SR_NFCSID_Pos
Ë

	)

138 
	#SMC_SR_XFRDONE
 (0x1u << 16Ë

	)

139 
	#SMC_SR_CMDDONE
 (0x1u << 17Ë

	)

140 
	#SMC_SR_DTOE
 (0x1u << 20Ë

	)

141 
	#SMC_SR_UNDEF
 (0x1u << 21Ë

	)

142 
	#SMC_SR_AWB
 (0x1u << 22Ë

	)

143 
	#SMC_SR_NFCASE
 (0x1u << 23Ë

	)

144 
	#SMC_SR_RB_EDGE0
 (0x1u << 24Ë

	)

146 
	#SMC_IER_RB_RISE
 (0x1u << 4Ë

	)

147 
	#SMC_IER_RB_FALL
 (0x1u << 5Ë

	)

148 
	#SMC_IER_XFRDONE
 (0x1u << 16Ë

	)

149 
	#SMC_IER_CMDDONE
 (0x1u << 17Ë

	)

150 
	#SMC_IER_DTOE
 (0x1u << 20Ë

	)

151 
	#SMC_IER_UNDEF
 (0x1u << 21Ë

	)

152 
	#SMC_IER_AWB
 (0x1u << 22Ë

	)

153 
	#SMC_IER_NFCASE
 (0x1u << 23Ë

	)

154 
	#SMC_IER_RB_EDGE0
 (0x1u << 24Ë

	)

156 
	#SMC_IDR_RB_RISE
 (0x1u << 4Ë

	)

157 
	#SMC_IDR_RB_FALL
 (0x1u << 5Ë

	)

158 
	#SMC_IDR_XFRDONE
 (0x1u << 16Ë

	)

159 
	#SMC_IDR_CMDDONE
 (0x1u << 17Ë

	)

160 
	#SMC_IDR_DTOE
 (0x1u << 20Ë

	)

161 
	#SMC_IDR_UNDEF
 (0x1u << 21Ë

	)

162 
	#SMC_IDR_AWB
 (0x1u << 22Ë

	)

163 
	#SMC_IDR_NFCASE
 (0x1u << 23Ë

	)

164 
	#SMC_IDR_RB_EDGE0
 (0x1u << 24Ë

	)

166 
	#SMC_IMR_RB_RISE
 (0x1u << 4Ë

	)

167 
	#SMC_IMR_RB_FALL
 (0x1u << 5Ë

	)

168 
	#SMC_IMR_XFRDONE
 (0x1u << 16Ë

	)

169 
	#SMC_IMR_CMDDONE
 (0x1u << 17Ë

	)

170 
	#SMC_IMR_DTOE
 (0x1u << 20Ë

	)

171 
	#SMC_IMR_UNDEF
 (0x1u << 21Ë

	)

172 
	#SMC_IMR_AWB
 (0x1u << 22Ë

	)

173 
	#SMC_IMR_NFCASE
 (0x1u << 23Ë

	)

174 
	#SMC_IMR_RB_EDGE0
 (0x1u << 24Ë

	)

176 
	#SMC_ADDR_ADDR_CYCLE0_Pos
 0

	)

177 
	#SMC_ADDR_ADDR_CYCLE0_Msk
 (0xffu << 
SMC_ADDR_ADDR_CYCLE0_Pos
Ë

	)

178 
	#SMC_ADDR_ADDR_CYCLE0
(
vÆue
Ë((
SMC_ADDR_ADDR_CYCLE0_Msk
 & ((vÆueË<< 
SMC_ADDR_ADDR_CYCLE0_Pos
)))

	)

180 
	#SMC_BANK_BANK_Pos
 0

	)

181 
	#SMC_BANK_BANK_Msk
 (0x7u << 
SMC_BANK_BANK_Pos
Ë

	)

182 
	#SMC_BANK_BANK
(
vÆue
Ë((
SMC_BANK_BANK_Msk
 & ((vÆueË<< 
SMC_BANK_BANK_Pos
)))

	)

184 
	#SMC_ECC_CTRL_RST
 (0x1u << 0Ë

	)

185 
	#SMC_ECC_CTRL_SWRST
 (0x1u << 1Ë

	)

187 
	#SMC_ECC_MD_ECC_PAGESIZE_Pos
 0

	)

188 
	#SMC_ECC_MD_ECC_PAGESIZE_Msk
 (0x3u << 
SMC_ECC_MD_ECC_PAGESIZE_Pos
Ë

	)

189 
	#SMC_ECC_MD_ECC_PAGESIZE_PS512_16
 (0x0u << 0Ë

	)

190 
	#SMC_ECC_MD_ECC_PAGESIZE_PS1024_32
 (0x1u << 0Ë

	)

191 
	#SMC_ECC_MD_ECC_PAGESIZE_PS2048_64
 (0x2u << 0Ë

	)

192 
	#SMC_ECC_MD_ECC_PAGESIZE_PS4096_128
 (0x3u << 0Ë

	)

193 
	#SMC_ECC_MD_TYPCORREC_Pos
 4

	)

194 
	#SMC_ECC_MD_TYPCORREC_Msk
 (0x3u << 
SMC_ECC_MD_TYPCORREC_Pos
Ë

	)

195 
	#SMC_ECC_MD_TYPCORREC_CPAGE
 (0x0u << 4Ë

	)

196 
	#SMC_ECC_MD_TYPCORREC_C256B
 (0x1u << 4Ë

	)

197 
	#SMC_ECC_MD_TYPCORREC_C512B
 (0x2u << 4Ë

	)

199 
	#SMC_ECC_SR1_RECERR0
 (0x1u << 0Ë

	)

200 
	#SMC_ECC_SR1_ECCERR0_Pos
 1

	)

201 
	#SMC_ECC_SR1_ECCERR0_Msk
 (0x3u << 
SMC_ECC_SR1_ECCERR0_Pos
Ë

	)

202 
	#SMC_ECC_SR1_RECERR1
 (0x1u << 4Ë

	)

203 
	#SMC_ECC_SR1_ECCERR1
 (0x1u << 5Ë

	)

204 
	#SMC_ECC_SR1_MULERR1
 (0x1u << 6Ë

	)

205 
	#SMC_ECC_SR1_RECERR2
 (0x1u << 8Ë

	)

206 
	#SMC_ECC_SR1_ECCERR2
 (0x1u << 9Ë

	)

207 
	#SMC_ECC_SR1_MULERR2
 (0x1u << 10Ë

	)

208 
	#SMC_ECC_SR1_RECERR3
 (0x1u << 12Ë

	)

209 
	#SMC_ECC_SR1_ECCERR3
 (0x1u << 13Ë

	)

210 
	#SMC_ECC_SR1_MULERR3
 (0x1u << 14Ë

	)

211 
	#SMC_ECC_SR1_RECERR4
 (0x1u << 16Ë

	)

212 
	#SMC_ECC_SR1_ECCERR4_Pos
 17

	)

213 
	#SMC_ECC_SR1_ECCERR4_Msk
 (0x3u << 
SMC_ECC_SR1_ECCERR4_Pos
Ë

	)

214 
	#SMC_ECC_SR1_RECERR5
 (0x1u << 20Ë

	)

215 
	#SMC_ECC_SR1_ECCERR5_Pos
 21

	)

216 
	#SMC_ECC_SR1_ECCERR5_Msk
 (0x3u << 
SMC_ECC_SR1_ECCERR5_Pos
Ë

	)

217 
	#SMC_ECC_SR1_RECERR6
 (0x1u << 24Ë

	)

218 
	#SMC_ECC_SR1_ECCERR6_Pos
 25

	)

219 
	#SMC_ECC_SR1_ECCERR6_Msk
 (0x3u << 
SMC_ECC_SR1_ECCERR6_Pos
Ë

	)

220 
	#SMC_ECC_SR1_RECERR7
 (0x1u << 28Ë

	)

221 
	#SMC_ECC_SR1_ECCERR7_Pos
 29

	)

222 
	#SMC_ECC_SR1_ECCERR7_Msk
 (0x3u << 
SMC_ECC_SR1_ECCERR7_Pos
Ë

	)

224 
	#SMC_ECC_PR0_BITADDR_Pos
 0

	)

225 
	#SMC_ECC_PR0_BITADDR_Msk
 (0xfu << 
SMC_ECC_PR0_BITADDR_Pos
Ë

	)

226 
	#SMC_ECC_PR0_WORDADDR_Pos
 4

	)

227 
	#SMC_ECC_PR0_WORDADDR_Msk
 (0xfffu << 
SMC_ECC_PR0_WORDADDR_Pos
Ë

	)

228 
	#SMC_ECC_PR0_BITADDR_W9BIT_Pos
 0

	)

229 
	#SMC_ECC_PR0_BITADDR_W9BIT_Msk
 (0x7u << 
SMC_ECC_PR0_BITADDR_W9BIT_Pos
Ë

	)

230 
	#SMC_ECC_PR0_WORDADDR_W9BIT_Pos
 3

	)

231 
	#SMC_ECC_PR0_WORDADDR_W9BIT_Msk
 (0x1ffu << 
SMC_ECC_PR0_WORDADDR_W9BIT_Pos
Ë

	)

232 
	#SMC_ECC_PR0_NPARITY_Pos
 12

	)

233 
	#SMC_ECC_PR0_NPARITY_Msk
 (0xfffu << 
SMC_ECC_PR0_NPARITY_Pos
Ë

	)

234 
	#SMC_ECC_PR0_BITADDR_W8BIT_Pos
 0

	)

235 
	#SMC_ECC_PR0_BITADDR_W8BIT_Msk
 (0x7u << 
SMC_ECC_PR0_BITADDR_W8BIT_Pos
Ë

	)

236 
	#SMC_ECC_PR0_WORDADDR_W8BIT_Pos
 3

	)

237 
	#SMC_ECC_PR0_WORDADDR_W8BIT_Msk
 (0xffu << 
SMC_ECC_PR0_WORDADDR_W8BIT_Pos
Ë

	)

238 
	#SMC_ECC_PR0_NPARITY_W8BIT_Pos
 12

	)

239 
	#SMC_ECC_PR0_NPARITY_W8BIT_Msk
 (0x7ffu << 
SMC_ECC_PR0_NPARITY_W8BIT_Pos
Ë

	)

241 
	#SMC_ECC_PR1_NPARITY_Pos
 0

	)

242 
	#SMC_ECC_PR1_NPARITY_Msk
 (0xffffu << 
SMC_ECC_PR1_NPARITY_Pos
Ë

	)

243 
	#SMC_ECC_PR1_BITADDR_Pos
 0

	)

244 
	#SMC_ECC_PR1_BITADDR_Msk
 (0x7u << 
SMC_ECC_PR1_BITADDR_Pos
Ë

	)

245 
	#SMC_ECC_PR1_WORDADDR_Pos
 3

	)

246 
	#SMC_ECC_PR1_WORDADDR_Msk
 (0x1ffu << 
SMC_ECC_PR1_WORDADDR_Pos
Ë

	)

247 
	#SMC_ECC_PR1_NPARITY_W9BIT_Pos
 12

	)

248 
	#SMC_ECC_PR1_NPARITY_W9BIT_Msk
 (0xfffu << 
SMC_ECC_PR1_NPARITY_W9BIT_Pos
Ë

	)

249 
	#SMC_ECC_PR1_WORDADDR_W8BIT_Pos
 3

	)

250 
	#SMC_ECC_PR1_WORDADDR_W8BIT_Msk
 (0xffu << 
SMC_ECC_PR1_WORDADDR_W8BIT_Pos
Ë

	)

251 
	#SMC_ECC_PR1_NPARITY_W8BIT_Pos
 12

	)

252 
	#SMC_ECC_PR1_NPARITY_W8BIT_Msk
 (0x7ffu << 
SMC_ECC_PR1_NPARITY_W8BIT_Pos
Ë

	)

254 
	#SMC_ECC_SR2_RECERR8
 (0x1u << 0Ë

	)

255 
	#SMC_ECC_SR2_ECCERR8_Pos
 1

	)

256 
	#SMC_ECC_SR2_ECCERR8_Msk
 (0x3u << 
SMC_ECC_SR2_ECCERR8_Pos
Ë

	)

257 
	#SMC_ECC_SR2_RECERR9
 (0x1u << 4Ë

	)

258 
	#SMC_ECC_SR2_ECCERR9
 (0x1u << 5Ë

	)

259 
	#SMC_ECC_SR2_MULERR9
 (0x1u << 6Ë

	)

260 
	#SMC_ECC_SR2_RECERR10
 (0x1u << 8Ë

	)

261 
	#SMC_ECC_SR2_ECCERR10
 (0x1u << 9Ë

	)

262 
	#SMC_ECC_SR2_MULERR10
 (0x1u << 10Ë

	)

263 
	#SMC_ECC_SR2_RECERR11
 (0x1u << 12Ë

	)

264 
	#SMC_ECC_SR2_ECCERR11
 (0x1u << 13Ë

	)

265 
	#SMC_ECC_SR2_MULERR11
 (0x1u << 14Ë

	)

266 
	#SMC_ECC_SR2_RECERR12
 (0x1u << 16Ë

	)

267 
	#SMC_ECC_SR2_ECCERR12_Pos
 17

	)

268 
	#SMC_ECC_SR2_ECCERR12_Msk
 (0x3u << 
SMC_ECC_SR2_ECCERR12_Pos
Ë

	)

269 
	#SMC_ECC_SR2_RECERR13
 (0x1u << 20Ë

	)

270 
	#SMC_ECC_SR2_ECCERR13_Pos
 21

	)

271 
	#SMC_ECC_SR2_ECCERR13_Msk
 (0x3u << 
SMC_ECC_SR2_ECCERR13_Pos
Ë

	)

272 
	#SMC_ECC_SR2_RECERR14
 (0x1u << 24Ë

	)

273 
	#SMC_ECC_SR2_ECCERR14_Pos
 25

	)

274 
	#SMC_ECC_SR2_ECCERR14_Msk
 (0x3u << 
SMC_ECC_SR2_ECCERR14_Pos
Ë

	)

275 
	#SMC_ECC_SR2_RECERR15
 (0x1u << 28Ë

	)

276 
	#SMC_ECC_SR2_ECCERR15_Pos
 29

	)

277 
	#SMC_ECC_SR2_ECCERR15_Msk
 (0x3u << 
SMC_ECC_SR2_ECCERR15_Pos
Ë

	)

279 
	#SMC_ECC_PR2_BITADDR_Pos
 0

	)

280 
	#SMC_ECC_PR2_BITADDR_Msk
 (0x7u << 
SMC_ECC_PR2_BITADDR_Pos
Ë

	)

281 
	#SMC_ECC_PR2_WORDADDR_Pos
 3

	)

282 
	#SMC_ECC_PR2_WORDADDR_Msk
 (0x1ffu << 
SMC_ECC_PR2_WORDADDR_Pos
Ë

	)

283 
	#SMC_ECC_PR2_NPARITY_Pos
 12

	)

284 
	#SMC_ECC_PR2_NPARITY_Msk
 (0xfffu << 
SMC_ECC_PR2_NPARITY_Pos
Ë

	)

285 
	#SMC_ECC_PR2_WORDADDR_W8BIT_Pos
 3

	)

286 
	#SMC_ECC_PR2_WORDADDR_W8BIT_Msk
 (0xffu << 
SMC_ECC_PR2_WORDADDR_W8BIT_Pos
Ë

	)

287 
	#SMC_ECC_PR2_NPARITY_W8BIT_Pos
 12

	)

288 
	#SMC_ECC_PR2_NPARITY_W8BIT_Msk
 (0x7ffu << 
SMC_ECC_PR2_NPARITY_W8BIT_Pos
Ë

	)

290 
	#SMC_ECC_PR3_BITADDR_Pos
 0

	)

291 
	#SMC_ECC_PR3_BITADDR_Msk
 (0x7u << 
SMC_ECC_PR3_BITADDR_Pos
Ë

	)

292 
	#SMC_ECC_PR3_WORDADDR_Pos
 3

	)

293 
	#SMC_ECC_PR3_WORDADDR_Msk
 (0x1ffu << 
SMC_ECC_PR3_WORDADDR_Pos
Ë

	)

294 
	#SMC_ECC_PR3_NPARITY_Pos
 12

	)

295 
	#SMC_ECC_PR3_NPARITY_Msk
 (0xfffu << 
SMC_ECC_PR3_NPARITY_Pos
Ë

	)

296 
	#SMC_ECC_PR3_WORDADDR_W8BIT_Pos
 3

	)

297 
	#SMC_ECC_PR3_WORDADDR_W8BIT_Msk
 (0xffu << 
SMC_ECC_PR3_WORDADDR_W8BIT_Pos
Ë

	)

298 
	#SMC_ECC_PR3_NPARITY_W8BIT_Pos
 12

	)

299 
	#SMC_ECC_PR3_NPARITY_W8BIT_Msk
 (0x7ffu << 
SMC_ECC_PR3_NPARITY_W8BIT_Pos
Ë

	)

301 
	#SMC_ECC_PR4_BITADDR_Pos
 0

	)

302 
	#SMC_ECC_PR4_BITADDR_Msk
 (0x7u << 
SMC_ECC_PR4_BITADDR_Pos
Ë

	)

303 
	#SMC_ECC_PR4_WORDADDR_Pos
 3

	)

304 
	#SMC_ECC_PR4_WORDADDR_Msk
 (0x1ffu << 
SMC_ECC_PR4_WORDADDR_Pos
Ë

	)

305 
	#SMC_ECC_PR4_NPARITY_Pos
 12

	)

306 
	#SMC_ECC_PR4_NPARITY_Msk
 (0xfffu << 
SMC_ECC_PR4_NPARITY_Pos
Ë

	)

307 
	#SMC_ECC_PR4_WORDADDR_W8BIT_Pos
 3

	)

308 
	#SMC_ECC_PR4_WORDADDR_W8BIT_Msk
 (0xffu << 
SMC_ECC_PR4_WORDADDR_W8BIT_Pos
Ë

	)

309 
	#SMC_ECC_PR4_NPARITY_W8BIT_Pos
 12

	)

310 
	#SMC_ECC_PR4_NPARITY_W8BIT_Msk
 (0x7ffu << 
SMC_ECC_PR4_NPARITY_W8BIT_Pos
Ë

	)

312 
	#SMC_ECC_PR5_BITADDR_Pos
 0

	)

313 
	#SMC_ECC_PR5_BITADDR_Msk
 (0x7u << 
SMC_ECC_PR5_BITADDR_Pos
Ë

	)

314 
	#SMC_ECC_PR5_WORDADDR_Pos
 3

	)

315 
	#SMC_ECC_PR5_WORDADDR_Msk
 (0x1ffu << 
SMC_ECC_PR5_WORDADDR_Pos
Ë

	)

316 
	#SMC_ECC_PR5_NPARITY_Pos
 12

	)

317 
	#SMC_ECC_PR5_NPARITY_Msk
 (0xfffu << 
SMC_ECC_PR5_NPARITY_Pos
Ë

	)

318 
	#SMC_ECC_PR5_WORDADDR_W8BIT_Pos
 3

	)

319 
	#SMC_ECC_PR5_WORDADDR_W8BIT_Msk
 (0xffu << 
SMC_ECC_PR5_WORDADDR_W8BIT_Pos
Ë

	)

320 
	#SMC_ECC_PR5_NPARITY_W8BIT_Pos
 12

	)

321 
	#SMC_ECC_PR5_NPARITY_W8BIT_Msk
 (0x7ffu << 
SMC_ECC_PR5_NPARITY_W8BIT_Pos
Ë

	)

323 
	#SMC_ECC_PR6_BITADDR_Pos
 0

	)

324 
	#SMC_ECC_PR6_BITADDR_Msk
 (0x7u << 
SMC_ECC_PR6_BITADDR_Pos
Ë

	)

325 
	#SMC_ECC_PR6_WORDADDR_Pos
 3

	)

326 
	#SMC_ECC_PR6_WORDADDR_Msk
 (0x1ffu << 
SMC_ECC_PR6_WORDADDR_Pos
Ë

	)

327 
	#SMC_ECC_PR6_NPARITY_Pos
 12

	)

328 
	#SMC_ECC_PR6_NPARITY_Msk
 (0xfffu << 
SMC_ECC_PR6_NPARITY_Pos
Ë

	)

329 
	#SMC_ECC_PR6_WORDADDR_W8BIT_Pos
 3

	)

330 
	#SMC_ECC_PR6_WORDADDR_W8BIT_Msk
 (0xffu << 
SMC_ECC_PR6_WORDADDR_W8BIT_Pos
Ë

	)

331 
	#SMC_ECC_PR6_NPARITY_W8BIT_Pos
 12

	)

332 
	#SMC_ECC_PR6_NPARITY_W8BIT_Msk
 (0x7ffu << 
SMC_ECC_PR6_NPARITY_W8BIT_Pos
Ë

	)

334 
	#SMC_ECC_PR7_BITADDR_Pos
 0

	)

335 
	#SMC_ECC_PR7_BITADDR_Msk
 (0x7u << 
SMC_ECC_PR7_BITADDR_Pos
Ë

	)

336 
	#SMC_ECC_PR7_WORDADDR_Pos
 3

	)

337 
	#SMC_ECC_PR7_WORDADDR_Msk
 (0x1ffu << 
SMC_ECC_PR7_WORDADDR_Pos
Ë

	)

338 
	#SMC_ECC_PR7_NPARITY_Pos
 12

	)

339 
	#SMC_ECC_PR7_NPARITY_Msk
 (0xfffu << 
SMC_ECC_PR7_NPARITY_Pos
Ë

	)

340 
	#SMC_ECC_PR7_WORDADDR_W8BIT_Pos
 3

	)

341 
	#SMC_ECC_PR7_WORDADDR_W8BIT_Msk
 (0xffu << 
SMC_ECC_PR7_WORDADDR_W8BIT_Pos
Ë

	)

342 
	#SMC_ECC_PR7_NPARITY_W8BIT_Pos
 12

	)

343 
	#SMC_ECC_PR7_NPARITY_W8BIT_Msk
 (0x7ffu << 
SMC_ECC_PR7_NPARITY_W8BIT_Pos
Ë

	)

345 
	#SMC_ECC_PR8_BITADDR_Pos
 0

	)

346 
	#SMC_ECC_PR8_BITADDR_Msk
 (0x7u << 
SMC_ECC_PR8_BITADDR_Pos
Ë

	)

347 
	#SMC_ECC_PR8_WORDADDR_Pos
 3

	)

348 
	#SMC_ECC_PR8_WORDADDR_Msk
 (0xffu << 
SMC_ECC_PR8_WORDADDR_Pos
Ë

	)

349 
	#SMC_ECC_PR8_NPARITY_Pos
 12

	)

350 
	#SMC_ECC_PR8_NPARITY_Msk
 (0x7ffu << 
SMC_ECC_PR8_NPARITY_Pos
Ë

	)

352 
	#SMC_ECC_PR9_BITADDR_Pos
 0

	)

353 
	#SMC_ECC_PR9_BITADDR_Msk
 (0x7u << 
SMC_ECC_PR9_BITADDR_Pos
Ë

	)

354 
	#SMC_ECC_PR9_WORDADDR_Pos
 3

	)

355 
	#SMC_ECC_PR9_WORDADDR_Msk
 (0xffu << 
SMC_ECC_PR9_WORDADDR_Pos
Ë

	)

356 
	#SMC_ECC_PR9_NPARITY_Pos
 12

	)

357 
	#SMC_ECC_PR9_NPARITY_Msk
 (0x7ffu << 
SMC_ECC_PR9_NPARITY_Pos
Ë

	)

359 
	#SMC_ECC_PR10_BITADDR_Pos
 0

	)

360 
	#SMC_ECC_PR10_BITADDR_Msk
 (0x7u << 
SMC_ECC_PR10_BITADDR_Pos
Ë

	)

361 
	#SMC_ECC_PR10_WORDADDR_Pos
 3

	)

362 
	#SMC_ECC_PR10_WORDADDR_Msk
 (0xffu << 
SMC_ECC_PR10_WORDADDR_Pos
Ë

	)

363 
	#SMC_ECC_PR10_NPARITY_Pos
 12

	)

364 
	#SMC_ECC_PR10_NPARITY_Msk
 (0x7ffu << 
SMC_ECC_PR10_NPARITY_Pos
Ë

	)

366 
	#SMC_ECC_PR11_BITADDR_Pos
 0

	)

367 
	#SMC_ECC_PR11_BITADDR_Msk
 (0x7u << 
SMC_ECC_PR11_BITADDR_Pos
Ë

	)

368 
	#SMC_ECC_PR11_WORDADDR_Pos
 3

	)

369 
	#SMC_ECC_PR11_WORDADDR_Msk
 (0xffu << 
SMC_ECC_PR11_WORDADDR_Pos
Ë

	)

370 
	#SMC_ECC_PR11_NPARITY_Pos
 12

	)

371 
	#SMC_ECC_PR11_NPARITY_Msk
 (0x7ffu << 
SMC_ECC_PR11_NPARITY_Pos
Ë

	)

373 
	#SMC_ECC_PR12_BITADDR_Pos
 0

	)

374 
	#SMC_ECC_PR12_BITADDR_Msk
 (0x7u << 
SMC_ECC_PR12_BITADDR_Pos
Ë

	)

375 
	#SMC_ECC_PR12_WORDADDR_Pos
 3

	)

376 
	#SMC_ECC_PR12_WORDADDR_Msk
 (0xffu << 
SMC_ECC_PR12_WORDADDR_Pos
Ë

	)

377 
	#SMC_ECC_PR12_NPARITY_Pos
 12

	)

378 
	#SMC_ECC_PR12_NPARITY_Msk
 (0x7ffu << 
SMC_ECC_PR12_NPARITY_Pos
Ë

	)

380 
	#SMC_ECC_PR13_BITADDR_Pos
 0

	)

381 
	#SMC_ECC_PR13_BITADDR_Msk
 (0x7u << 
SMC_ECC_PR13_BITADDR_Pos
Ë

	)

382 
	#SMC_ECC_PR13_WORDADDR_Pos
 3

	)

383 
	#SMC_ECC_PR13_WORDADDR_Msk
 (0xffu << 
SMC_ECC_PR13_WORDADDR_Pos
Ë

	)

384 
	#SMC_ECC_PR13_NPARITY_Pos
 12

	)

385 
	#SMC_ECC_PR13_NPARITY_Msk
 (0x7ffu << 
SMC_ECC_PR13_NPARITY_Pos
Ë

	)

387 
	#SMC_ECC_PR14_BITADDR_Pos
 0

	)

388 
	#SMC_ECC_PR14_BITADDR_Msk
 (0x7u << 
SMC_ECC_PR14_BITADDR_Pos
Ë

	)

389 
	#SMC_ECC_PR14_WORDADDR_Pos
 3

	)

390 
	#SMC_ECC_PR14_WORDADDR_Msk
 (0xffu << 
SMC_ECC_PR14_WORDADDR_Pos
Ë

	)

391 
	#SMC_ECC_PR14_NPARITY_Pos
 12

	)

392 
	#SMC_ECC_PR14_NPARITY_Msk
 (0x7ffu << 
SMC_ECC_PR14_NPARITY_Pos
Ë

	)

394 
	#SMC_ECC_PR15_BITADDR_Pos
 0

	)

395 
	#SMC_ECC_PR15_BITADDR_Msk
 (0x7u << 
SMC_ECC_PR15_BITADDR_Pos
Ë

	)

396 
	#SMC_ECC_PR15_WORDADDR_Pos
 3

	)

397 
	#SMC_ECC_PR15_WORDADDR_Msk
 (0xffu << 
SMC_ECC_PR15_WORDADDR_Pos
Ë

	)

398 
	#SMC_ECC_PR15_NPARITY_Pos
 12

	)

399 
	#SMC_ECC_PR15_NPARITY_Msk
 (0x7ffu << 
SMC_ECC_PR15_NPARITY_Pos
Ë

	)

401 
	#SMC_SETUP_NWE_SETUP_Pos
 0

	)

402 
	#SMC_SETUP_NWE_SETUP_Msk
 (0x3fu << 
SMC_SETUP_NWE_SETUP_Pos
Ë

	)

403 
	#SMC_SETUP_NWE_SETUP
(
vÆue
Ë((
SMC_SETUP_NWE_SETUP_Msk
 & ((vÆueË<< 
SMC_SETUP_NWE_SETUP_Pos
)))

	)

404 
	#SMC_SETUP_NCS_WR_SETUP_Pos
 8

	)

405 
	#SMC_SETUP_NCS_WR_SETUP_Msk
 (0x3fu << 
SMC_SETUP_NCS_WR_SETUP_Pos
Ë

	)

406 
	#SMC_SETUP_NCS_WR_SETUP
(
vÆue
Ë((
SMC_SETUP_NCS_WR_SETUP_Msk
 & ((vÆueË<< 
SMC_SETUP_NCS_WR_SETUP_Pos
)))

	)

407 
	#SMC_SETUP_NRD_SETUP_Pos
 16

	)

408 
	#SMC_SETUP_NRD_SETUP_Msk
 (0x3fu << 
SMC_SETUP_NRD_SETUP_Pos
Ë

	)

409 
	#SMC_SETUP_NRD_SETUP
(
vÆue
Ë((
SMC_SETUP_NRD_SETUP_Msk
 & ((vÆueË<< 
SMC_SETUP_NRD_SETUP_Pos
)))

	)

410 
	#SMC_SETUP_NCS_RD_SETUP_Pos
 24

	)

411 
	#SMC_SETUP_NCS_RD_SETUP_Msk
 (0x3fu << 
SMC_SETUP_NCS_RD_SETUP_Pos
Ë

	)

412 
	#SMC_SETUP_NCS_RD_SETUP
(
vÆue
Ë((
SMC_SETUP_NCS_RD_SETUP_Msk
 & ((vÆueË<< 
SMC_SETUP_NCS_RD_SETUP_Pos
)))

	)

414 
	#SMC_PULSE_NWE_PULSE_Pos
 0

	)

415 
	#SMC_PULSE_NWE_PULSE_Msk
 (0x3fu << 
SMC_PULSE_NWE_PULSE_Pos
Ë

	)

416 
	#SMC_PULSE_NWE_PULSE
(
vÆue
Ë((
SMC_PULSE_NWE_PULSE_Msk
 & ((vÆueË<< 
SMC_PULSE_NWE_PULSE_Pos
)))

	)

417 
	#SMC_PULSE_NCS_WR_PULSE_Pos
 8

	)

418 
	#SMC_PULSE_NCS_WR_PULSE_Msk
 (0x3fu << 
SMC_PULSE_NCS_WR_PULSE_Pos
Ë

	)

419 
	#SMC_PULSE_NCS_WR_PULSE
(
vÆue
Ë((
SMC_PULSE_NCS_WR_PULSE_Msk
 & ((vÆueË<< 
SMC_PULSE_NCS_WR_PULSE_Pos
)))

	)

420 
	#SMC_PULSE_NRD_PULSE_Pos
 16

	)

421 
	#SMC_PULSE_NRD_PULSE_Msk
 (0x3fu << 
SMC_PULSE_NRD_PULSE_Pos
Ë

	)

422 
	#SMC_PULSE_NRD_PULSE
(
vÆue
Ë((
SMC_PULSE_NRD_PULSE_Msk
 & ((vÆueË<< 
SMC_PULSE_NRD_PULSE_Pos
)))

	)

423 
	#SMC_PULSE_NCS_RD_PULSE_Pos
 24

	)

424 
	#SMC_PULSE_NCS_RD_PULSE_Msk
 (0x3fu << 
SMC_PULSE_NCS_RD_PULSE_Pos
Ë

	)

425 
	#SMC_PULSE_NCS_RD_PULSE
(
vÆue
Ë((
SMC_PULSE_NCS_RD_PULSE_Msk
 & ((vÆueË<< 
SMC_PULSE_NCS_RD_PULSE_Pos
)))

	)

427 
	#SMC_CYCLE_NWE_CYCLE_Pos
 0

	)

428 
	#SMC_CYCLE_NWE_CYCLE_Msk
 (0x1ffu << 
SMC_CYCLE_NWE_CYCLE_Pos
Ë

	)

429 
	#SMC_CYCLE_NWE_CYCLE
(
vÆue
Ë((
SMC_CYCLE_NWE_CYCLE_Msk
 & ((vÆueË<< 
SMC_CYCLE_NWE_CYCLE_Pos
)))

	)

430 
	#SMC_CYCLE_NRD_CYCLE_Pos
 16

	)

431 
	#SMC_CYCLE_NRD_CYCLE_Msk
 (0x1ffu << 
SMC_CYCLE_NRD_CYCLE_Pos
Ë

	)

432 
	#SMC_CYCLE_NRD_CYCLE
(
vÆue
Ë((
SMC_CYCLE_NRD_CYCLE_Msk
 & ((vÆueË<< 
SMC_CYCLE_NRD_CYCLE_Pos
)))

	)

434 
	#SMC_TIMINGS_TCLR_Pos
 0

	)

435 
	#SMC_TIMINGS_TCLR_Msk
 (0xfu << 
SMC_TIMINGS_TCLR_Pos
Ë

	)

436 
	#SMC_TIMINGS_TCLR
(
vÆue
Ë((
SMC_TIMINGS_TCLR_Msk
 & ((vÆueË<< 
SMC_TIMINGS_TCLR_Pos
)))

	)

437 
	#SMC_TIMINGS_TADL_Pos
 4

	)

438 
	#SMC_TIMINGS_TADL_Msk
 (0xfu << 
SMC_TIMINGS_TADL_Pos
Ë

	)

439 
	#SMC_TIMINGS_TADL
(
vÆue
Ë((
SMC_TIMINGS_TADL_Msk
 & ((vÆueË<< 
SMC_TIMINGS_TADL_Pos
)))

	)

440 
	#SMC_TIMINGS_TAR_Pos
 8

	)

441 
	#SMC_TIMINGS_TAR_Msk
 (0xfu << 
SMC_TIMINGS_TAR_Pos
Ë

	)

442 
	#SMC_TIMINGS_TAR
(
vÆue
Ë((
SMC_TIMINGS_TAR_Msk
 & ((vÆueË<< 
SMC_TIMINGS_TAR_Pos
)))

	)

443 
	#SMC_TIMINGS_OCMS
 (0x1u << 12Ë

	)

444 
	#SMC_TIMINGS_TRR_Pos
 16

	)

445 
	#SMC_TIMINGS_TRR_Msk
 (0xfu << 
SMC_TIMINGS_TRR_Pos
Ë

	)

446 
	#SMC_TIMINGS_TRR
(
vÆue
Ë((
SMC_TIMINGS_TRR_Msk
 & ((vÆueË<< 
SMC_TIMINGS_TRR_Pos
)))

	)

447 
	#SMC_TIMINGS_TWB_Pos
 24

	)

448 
	#SMC_TIMINGS_TWB_Msk
 (0xfu << 
SMC_TIMINGS_TWB_Pos
Ë

	)

449 
	#SMC_TIMINGS_TWB
(
vÆue
Ë((
SMC_TIMINGS_TWB_Msk
 & ((vÆueË<< 
SMC_TIMINGS_TWB_Pos
)))

	)

450 
	#SMC_TIMINGS_RBNSEL_Pos
 28

	)

451 
	#SMC_TIMINGS_RBNSEL_Msk
 (0x7u << 
SMC_TIMINGS_RBNSEL_Pos
Ë

	)

452 
	#SMC_TIMINGS_RBNSEL
(
vÆue
Ë((
SMC_TIMINGS_RBNSEL_Msk
 & ((vÆueË<< 
SMC_TIMINGS_RBNSEL_Pos
)))

	)

453 
	#SMC_TIMINGS_NFSEL
 (0x1u << 31Ë

	)

455 
	#SMC_MODE_READ_MODE
 (0x1u << 0Ë

	)

456 
	#SMC_MODE_READ_MODE_NCS_CTRL
 (0x0u << 0Ë

	)

457 
	#SMC_MODE_READ_MODE_NRD_CTRL
 (0x1u << 0Ë

	)

458 
	#SMC_MODE_WRITE_MODE
 (0x1u << 1Ë

	)

459 
	#SMC_MODE_WRITE_MODE_NCS_CTRL
 (0x0u << 1Ë

	)

460 
	#SMC_MODE_WRITE_MODE_NWE_CTRL
 (0x1u << 1Ë

	)

461 
	#SMC_MODE_EXNW_MODE_Pos
 4

	)

462 
	#SMC_MODE_EXNW_MODE_Msk
 (0x3u << 
SMC_MODE_EXNW_MODE_Pos
Ë

	)

463 
	#SMC_MODE_EXNW_MODE_DISABLED
 (0x0u << 4Ë

	)

464 
	#SMC_MODE_EXNW_MODE_FROZEN
 (0x2u << 4Ë

	)

465 
	#SMC_MODE_EXNW_MODE_READY
 (0x3u << 4Ë

	)

466 
	#SMC_MODE_BAT
 (0x1u << 8Ë

	)

467 
	#SMC_MODE_DBW
 (0x1u << 12Ë

	)

468 
	#SMC_MODE_DBW_BIT_8
 (0x0u << 12Ë

	)

469 
	#SMC_MODE_DBW_BIT_16
 (0x1u << 12Ë

	)

470 
	#SMC_MODE_TDF_CYCLES_Pos
 16

	)

471 
	#SMC_MODE_TDF_CYCLES_Msk
 (0xfu << 
SMC_MODE_TDF_CYCLES_Pos
Ë

	)

472 
	#SMC_MODE_TDF_CYCLES
(
vÆue
Ë((
SMC_MODE_TDF_CYCLES_Msk
 & ((vÆueË<< 
SMC_MODE_TDF_CYCLES_Pos
)))

	)

473 
	#SMC_MODE_TDF_MODE
 (0x1u << 20Ë

	)

475 
	#SMC_OCMS_SMSE
 (0x1u << 0Ë

	)

476 
	#SMC_OCMS_SRSE
 (0x1u << 1Ë

	)

478 
	#SMC_KEY1_KEY1_Pos
 0

	)

479 
	#SMC_KEY1_KEY1_Msk
 (0xffffffffu << 
SMC_KEY1_KEY1_Pos
Ë

	)

480 
	#SMC_KEY1_KEY1
(
vÆue
Ë((
SMC_KEY1_KEY1_Msk
 & ((vÆueË<< 
SMC_KEY1_KEY1_Pos
)))

	)

482 
	#SMC_KEY2_KEY2_Pos
 0

	)

483 
	#SMC_KEY2_KEY2_Msk
 (0xffffffffu << 
SMC_KEY2_KEY2_Pos
Ë

	)

484 
	#SMC_KEY2_KEY2
(
vÆue
Ë((
SMC_KEY2_KEY2_Msk
 & ((vÆueË<< 
SMC_KEY2_KEY2_Pos
)))

	)

486 
	#SMC_WPCR_WP_EN
 (0x1u << 0Ë

	)

487 
	#SMC_WPCR_WP_KEY_Pos
 8

	)

488 
	#SMC_WPCR_WP_KEY_Msk
 (0xffffffu << 
SMC_WPCR_WP_KEY_Pos
Ë

	)

489 
	#SMC_WPCR_WP_KEY
(
vÆue
Ë((
SMC_WPCR_WP_KEY_Msk
 & ((vÆueË<< 
SMC_WPCR_WP_KEY_Pos
)))

	)

491 
	#SMC_WPSR_WP_VS_Pos
 0

	)

492 
	#SMC_WPSR_WP_VS_Msk
 (0xfu << 
SMC_WPSR_WP_VS_Pos
Ë

	)

493 
	#SMC_WPSR_WP_VSRC_Pos
 8

	)

494 
	#SMC_WPSR_WP_VSRC_Msk
 (0xffffu << 
SMC_WPSR_WP_VSRC_Pos
Ë

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_spi.h

45 #i‚de‡
_SAM3XA_SPI_COMPONENT_


46 
	#_SAM3XA_SPI_COMPONENT_


	)

54 #i‡!(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

57 
WoReg
 
	mSPI_CR
;

58 
RwReg
 
	mSPI_MR
;

59 
RoReg
 
	mSPI_RDR
;

60 
WoReg
 
	mSPI_TDR
;

61 
RoReg
 
	mSPI_SR
;

62 
WoReg
 
	mSPI_IER
;

63 
WoReg
 
	mSPI_IDR
;

64 
RoReg
 
	mSPI_IMR
;

65 
RoReg
 
	mRe£rved1
[4];

66 
RwReg
 
	mSPI_CSR
[4];

67 
RoReg
 
	mRe£rved2
[41];

68 
RwReg
 
	mSPI_WPMR
;

69 
RoReg
 
	mSPI_WPSR
;

70 } 
	tSpi
;

73 
	#SPI_CR_SPIEN
 (0x1u << 0Ë

	)

74 
	#SPI_CR_SPIDIS
 (0x1u << 1Ë

	)

75 
	#SPI_CR_SWRST
 (0x1u << 7Ë

	)

76 
	#SPI_CR_LASTXFER
 (0x1u << 24Ë

	)

78 
	#SPI_MR_MSTR
 (0x1u << 0Ë

	)

79 
	#SPI_MR_PS
 (0x1u << 1Ë

	)

80 
	#SPI_MR_PCSDEC
 (0x1u << 2Ë

	)

81 
	#SPI_MR_MODFDIS
 (0x1u << 4Ë

	)

82 
	#SPI_MR_WDRBT
 (0x1u << 5Ë

	)

83 
	#SPI_MR_LLB
 (0x1u << 7Ë

	)

84 
	#SPI_MR_PCS_Pos
 16

	)

85 
	#SPI_MR_PCS_Msk
 (0xfu << 
SPI_MR_PCS_Pos
Ë

	)

86 
	#SPI_MR_PCS
(
vÆue
Ë((
SPI_MR_PCS_Msk
 & ((vÆueË<< 
SPI_MR_PCS_Pos
)))

	)

87 
	#SPI_MR_DLYBCS_Pos
 24

	)

88 
	#SPI_MR_DLYBCS_Msk
 (0xffu << 
SPI_MR_DLYBCS_Pos
Ë

	)

89 
	#SPI_MR_DLYBCS
(
vÆue
Ë((
SPI_MR_DLYBCS_Msk
 & ((vÆueË<< 
SPI_MR_DLYBCS_Pos
)))

	)

91 
	#SPI_RDR_RD_Pos
 0

	)

92 
	#SPI_RDR_RD_Msk
 (0xffffu << 
SPI_RDR_RD_Pos
Ë

	)

93 
	#SPI_RDR_PCS_Pos
 16

	)

94 
	#SPI_RDR_PCS_Msk
 (0xfu << 
SPI_RDR_PCS_Pos
Ë

	)

96 
	#SPI_TDR_TD_Pos
 0

	)

97 
	#SPI_TDR_TD_Msk
 (0xffffu << 
SPI_TDR_TD_Pos
Ë

	)

98 
	#SPI_TDR_TD
(
vÆue
Ë((
SPI_TDR_TD_Msk
 & ((vÆueË<< 
SPI_TDR_TD_Pos
)))

	)

99 
	#SPI_TDR_PCS_Pos
 16

	)

100 
	#SPI_TDR_PCS_Msk
 (0xfu << 
SPI_TDR_PCS_Pos
Ë

	)

101 
	#SPI_TDR_PCS
(
vÆue
Ë((
SPI_TDR_PCS_Msk
 & ((vÆueË<< 
SPI_TDR_PCS_Pos
)))

	)

102 
	#SPI_TDR_LASTXFER
 (0x1u << 24Ë

	)

104 
	#SPI_SR_RDRF
 (0x1u << 0Ë

	)

105 
	#SPI_SR_TDRE
 (0x1u << 1Ë

	)

106 
	#SPI_SR_MODF
 (0x1u << 2Ë

	)

107 
	#SPI_SR_OVRES
 (0x1u << 3Ë

	)

108 
	#SPI_SR_NSSR
 (0x1u << 8Ë

	)

109 
	#SPI_SR_TXEMPTY
 (0x1u << 9Ë

	)

110 
	#SPI_SR_UNDES
 (0x1u << 10Ë

	)

111 
	#SPI_SR_SPIENS
 (0x1u << 16Ë

	)

113 
	#SPI_IER_RDRF
 (0x1u << 0Ë

	)

114 
	#SPI_IER_TDRE
 (0x1u << 1Ë

	)

115 
	#SPI_IER_MODF
 (0x1u << 2Ë

	)

116 
	#SPI_IER_OVRES
 (0x1u << 3Ë

	)

117 
	#SPI_IER_NSSR
 (0x1u << 8Ë

	)

118 
	#SPI_IER_TXEMPTY
 (0x1u << 9Ë

	)

119 
	#SPI_IER_UNDES
 (0x1u << 10Ë

	)

121 
	#SPI_IDR_RDRF
 (0x1u << 0Ë

	)

122 
	#SPI_IDR_TDRE
 (0x1u << 1Ë

	)

123 
	#SPI_IDR_MODF
 (0x1u << 2Ë

	)

124 
	#SPI_IDR_OVRES
 (0x1u << 3Ë

	)

125 
	#SPI_IDR_NSSR
 (0x1u << 8Ë

	)

126 
	#SPI_IDR_TXEMPTY
 (0x1u << 9Ë

	)

127 
	#SPI_IDR_UNDES
 (0x1u << 10Ë

	)

129 
	#SPI_IMR_RDRF
 (0x1u << 0Ë

	)

130 
	#SPI_IMR_TDRE
 (0x1u << 1Ë

	)

131 
	#SPI_IMR_MODF
 (0x1u << 2Ë

	)

132 
	#SPI_IMR_OVRES
 (0x1u << 3Ë

	)

133 
	#SPI_IMR_NSSR
 (0x1u << 8Ë

	)

134 
	#SPI_IMR_TXEMPTY
 (0x1u << 9Ë

	)

135 
	#SPI_IMR_UNDES
 (0x1u << 10Ë

	)

137 
	#SPI_CSR_CPOL
 (0x1u << 0Ë

	)

138 
	#SPI_CSR_NCPHA
 (0x1u << 1Ë

	)

139 
	#SPI_CSR_CSNAAT
 (0x1u << 2Ë

	)

140 
	#SPI_CSR_CSAAT
 (0x1u << 3Ë

	)

141 
	#SPI_CSR_BITS_Pos
 4

	)

142 
	#SPI_CSR_BITS_Msk
 (0xfu << 
SPI_CSR_BITS_Pos
Ë

	)

143 
	#SPI_CSR_BITS_8_BIT
 (0x0u << 4Ë

	)

144 
	#SPI_CSR_BITS_9_BIT
 (0x1u << 4Ë

	)

145 
	#SPI_CSR_BITS_10_BIT
 (0x2u << 4Ë

	)

146 
	#SPI_CSR_BITS_11_BIT
 (0x3u << 4Ë

	)

147 
	#SPI_CSR_BITS_12_BIT
 (0x4u << 4Ë

	)

148 
	#SPI_CSR_BITS_13_BIT
 (0x5u << 4Ë

	)

149 
	#SPI_CSR_BITS_14_BIT
 (0x6u << 4Ë

	)

150 
	#SPI_CSR_BITS_15_BIT
 (0x7u << 4Ë

	)

151 
	#SPI_CSR_BITS_16_BIT
 (0x8u << 4Ë

	)

152 
	#SPI_CSR_SCBR_Pos
 8

	)

153 
	#SPI_CSR_SCBR_Msk
 (0xffu << 
SPI_CSR_SCBR_Pos
Ë

	)

154 
	#SPI_CSR_SCBR
(
vÆue
Ë((
SPI_CSR_SCBR_Msk
 & ((vÆueË<< 
SPI_CSR_SCBR_Pos
)))

	)

155 
	#SPI_CSR_DLYBS_Pos
 16

	)

156 
	#SPI_CSR_DLYBS_Msk
 (0xffu << 
SPI_CSR_DLYBS_Pos
Ë

	)

157 
	#SPI_CSR_DLYBS
(
vÆue
Ë((
SPI_CSR_DLYBS_Msk
 & ((vÆueË<< 
SPI_CSR_DLYBS_Pos
)))

	)

158 
	#SPI_CSR_DLYBCT_Pos
 24

	)

159 
	#SPI_CSR_DLYBCT_Msk
 (0xffu << 
SPI_CSR_DLYBCT_Pos
Ë

	)

160 
	#SPI_CSR_DLYBCT
(
vÆue
Ë((
SPI_CSR_DLYBCT_Msk
 & ((vÆueË<< 
SPI_CSR_DLYBCT_Pos
)))

	)

162 
	#SPI_WPMR_WPEN
 (0x1u << 0Ë

	)

163 
	#SPI_WPMR_WPKEY_Pos
 8

	)

164 
	#SPI_WPMR_WPKEY_Msk
 (0xffffffu << 
SPI_WPMR_WPKEY_Pos
Ë

	)

165 
	#SPI_WPMR_WPKEY
(
vÆue
Ë((
SPI_WPMR_WPKEY_Msk
 & ((vÆueË<< 
SPI_WPMR_WPKEY_Pos
)))

	)

167 
	#SPI_WPSR_WPVS
 (0x7u << 0Ë

	)

168 
	#SPI_WPSR_WPVS_Pos
 0

	)

169 
	#SPI_WPSR_WPVS_Msk
 (0x1u << 
SPI_WPSR_WPVS_Pos
Ë

	)

170 
	#SPI_WPSR_WPVSRC_Pos
 8

	)

171 
	#SPI_WPSR_WPVSRC_Msk
 (0xffu << 
SPI_WPSR_WPVSRC_Pos
Ë

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_ssc.h

45 #i‚de‡
_SAM3XA_SSC_COMPONENT_


46 
	#_SAM3XA_SSC_COMPONENT_


	)

54 #i‡!(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

57 
WoReg
 
	mSSC_CR
;

58 
RwReg
 
	mSSC_CMR
;

59 
RoReg
 
	mRe£rved1
[2];

60 
RwReg
 
	mSSC_RCMR
;

61 
RwReg
 
	mSSC_RFMR
;

62 
RwReg
 
	mSSC_TCMR
;

63 
RwReg
 
	mSSC_TFMR
;

64 
RoReg
 
	mSSC_RHR
;

65 
WoReg
 
	mSSC_THR
;

66 
RoReg
 
	mRe£rved2
[2];

67 
RoReg
 
	mSSC_RSHR
;

68 
RwReg
 
	mSSC_TSHR
;

69 
RwReg
 
	mSSC_RC0R
;

70 
RwReg
 
	mSSC_RC1R
;

71 
RoReg
 
	mSSC_SR
;

72 
WoReg
 
	mSSC_IER
;

73 
WoReg
 
	mSSC_IDR
;

74 
RoReg
 
	mSSC_IMR
;

75 
RoReg
 
	mRe£rved3
[37];

76 
RwReg
 
	mSSC_WPMR
;

77 
RoReg
 
	mSSC_WPSR
;

78 } 
	tSsc
;

81 
	#SSC_CR_RXEN
 (0x1u << 0Ë

	)

82 
	#SSC_CR_RXDIS
 (0x1u << 1Ë

	)

83 
	#SSC_CR_TXEN
 (0x1u << 8Ë

	)

84 
	#SSC_CR_TXDIS
 (0x1u << 9Ë

	)

85 
	#SSC_CR_SWRST
 (0x1u << 15Ë

	)

87 
	#SSC_CMR_DIV_Pos
 0

	)

88 
	#SSC_CMR_DIV_Msk
 (0xfffu << 
SSC_CMR_DIV_Pos
Ë

	)

89 
	#SSC_CMR_DIV
(
vÆue
Ë((
SSC_CMR_DIV_Msk
 & ((vÆueË<< 
SSC_CMR_DIV_Pos
)))

	)

91 
	#SSC_RCMR_CKS_Pos
 0

	)

92 
	#SSC_RCMR_CKS_Msk
 (0x3u << 
SSC_RCMR_CKS_Pos
Ë

	)

93 
	#SSC_RCMR_CKS_MCK
 (0x0u << 0Ë

	)

94 
	#SSC_RCMR_CKS_TK
 (0x1u << 0Ë

	)

95 
	#SSC_RCMR_CKS_RK
 (0x2u << 0Ë

	)

96 
	#SSC_RCMR_CKO_Pos
 2

	)

97 
	#SSC_RCMR_CKO_Msk
 (0x7u << 
SSC_RCMR_CKO_Pos
Ë

	)

98 
	#SSC_RCMR_CKO_NONE
 (0x0u << 2Ë

	)

99 
	#SSC_RCMR_CKO_CONTINUOUS
 (0x1u << 2Ë

	)

100 
	#SSC_RCMR_CKO_TRANSFER
 (0x2u << 2Ë

	)

101 
	#SSC_RCMR_CKI
 (0x1u << 5Ë

	)

102 
	#SSC_RCMR_CKG_Pos
 6

	)

103 
	#SSC_RCMR_CKG_Msk
 (0x3u << 
SSC_RCMR_CKG_Pos
Ë

	)

104 
	#SSC_RCMR_CKG_NONE
 (0x0u << 6Ë

	)

105 
	#SSC_RCMR_CKG_CONTINUOUS
 (0x1u << 6Ë

	)

106 
	#SSC_RCMR_CKG_TRANSFER
 (0x2u << 6Ë

	)

107 
	#SSC_RCMR_START_Pos
 8

	)

108 
	#SSC_RCMR_START_Msk
 (0xfu << 
SSC_RCMR_START_Pos
Ë

	)

109 
	#SSC_RCMR_START_CONTINUOUS
 (0x0u << 8Ë

	)

110 
	#SSC_RCMR_START_TRANSMIT
 (0x1u << 8Ë

	)

111 
	#SSC_RCMR_START_RF_LOW
 (0x2u << 8Ë

	)

112 
	#SSC_RCMR_START_RF_HIGH
 (0x3u << 8Ë

	)

113 
	#SSC_RCMR_START_RF_FALLING
 (0x4u << 8Ë

	)

114 
	#SSC_RCMR_START_RF_RISING
 (0x5u << 8Ë

	)

115 
	#SSC_RCMR_START_RF_LEVEL
 (0x6u << 8Ë

	)

116 
	#SSC_RCMR_START_RF_EDGE
 (0x7u << 8Ë

	)

117 
	#SSC_RCMR_START_CMP_0
 (0x8u << 8Ë

	)

118 
	#SSC_RCMR_STOP
 (0x1u << 12Ë

	)

119 
	#SSC_RCMR_STTDLY_Pos
 16

	)

120 
	#SSC_RCMR_STTDLY_Msk
 (0xffu << 
SSC_RCMR_STTDLY_Pos
Ë

	)

121 
	#SSC_RCMR_STTDLY
(
vÆue
Ë((
SSC_RCMR_STTDLY_Msk
 & ((vÆueË<< 
SSC_RCMR_STTDLY_Pos
)))

	)

122 
	#SSC_RCMR_PERIOD_Pos
 24

	)

123 
	#SSC_RCMR_PERIOD_Msk
 (0xffu << 
SSC_RCMR_PERIOD_Pos
Ë

	)

124 
	#SSC_RCMR_PERIOD
(
vÆue
Ë((
SSC_RCMR_PERIOD_Msk
 & ((vÆueË<< 
SSC_RCMR_PERIOD_Pos
)))

	)

126 
	#SSC_RFMR_DATLEN_Pos
 0

	)

127 
	#SSC_RFMR_DATLEN_Msk
 (0x1fu << 
SSC_RFMR_DATLEN_Pos
Ë

	)

128 
	#SSC_RFMR_DATLEN
(
vÆue
Ë((
SSC_RFMR_DATLEN_Msk
 & ((vÆueË<< 
SSC_RFMR_DATLEN_Pos
)))

	)

129 
	#SSC_RFMR_LOOP
 (0x1u << 5Ë

	)

130 
	#SSC_RFMR_MSBF
 (0x1u << 7Ë

	)

131 
	#SSC_RFMR_DATNB_Pos
 8

	)

132 
	#SSC_RFMR_DATNB_Msk
 (0xfu << 
SSC_RFMR_DATNB_Pos
Ë

	)

133 
	#SSC_RFMR_DATNB
(
vÆue
Ë((
SSC_RFMR_DATNB_Msk
 & ((vÆueË<< 
SSC_RFMR_DATNB_Pos
)))

	)

134 
	#SSC_RFMR_FSLEN_Pos
 16

	)

135 
	#SSC_RFMR_FSLEN_Msk
 (0xfu << 
SSC_RFMR_FSLEN_Pos
Ë

	)

136 
	#SSC_RFMR_FSLEN
(
vÆue
Ë((
SSC_RFMR_FSLEN_Msk
 & ((vÆueË<< 
SSC_RFMR_FSLEN_Pos
)))

	)

137 
	#SSC_RFMR_FSOS_Pos
 20

	)

138 
	#SSC_RFMR_FSOS_Msk
 (0x7u << 
SSC_RFMR_FSOS_Pos
Ë

	)

139 
	#SSC_RFMR_FSOS_NONE
 (0x0u << 20Ë

	)

140 
	#SSC_RFMR_FSOS_NEGATIVE
 (0x1u << 20Ë

	)

141 
	#SSC_RFMR_FSOS_POSITIVE
 (0x2u << 20Ë

	)

142 
	#SSC_RFMR_FSOS_LOW
 (0x3u << 20Ë

	)

143 
	#SSC_RFMR_FSOS_HIGH
 (0x4u << 20Ë

	)

144 
	#SSC_RFMR_FSOS_TOGGLING
 (0x5u << 20Ë

	)

145 
	#SSC_RFMR_FSEDGE
 (0x1u << 24Ë

	)

146 
	#SSC_RFMR_FSEDGE_POSITIVE
 (0x0u << 24Ë

	)

147 
	#SSC_RFMR_FSEDGE_NEGATIVE
 (0x1u << 24Ë

	)

148 
	#SSC_RFMR_FSLEN_EXT_Pos
 28

	)

149 
	#SSC_RFMR_FSLEN_EXT_Msk
 (0xfu << 
SSC_RFMR_FSLEN_EXT_Pos
Ë

	)

150 
	#SSC_RFMR_FSLEN_EXT
(
vÆue
Ë((
SSC_RFMR_FSLEN_EXT_Msk
 & ((vÆueË<< 
SSC_RFMR_FSLEN_EXT_Pos
)))

	)

152 
	#SSC_TCMR_CKS_Pos
 0

	)

153 
	#SSC_TCMR_CKS_Msk
 (0x3u << 
SSC_TCMR_CKS_Pos
Ë

	)

154 
	#SSC_TCMR_CKS_MCK
 (0x0u << 0Ë

	)

155 
	#SSC_TCMR_CKS_TK
 (0x1u << 0Ë

	)

156 
	#SSC_TCMR_CKS_RK
 (0x2u << 0Ë

	)

157 
	#SSC_TCMR_CKO_Pos
 2

	)

158 
	#SSC_TCMR_CKO_Msk
 (0x7u << 
SSC_TCMR_CKO_Pos
Ë

	)

159 
	#SSC_TCMR_CKO_NONE
 (0x0u << 2Ë

	)

160 
	#SSC_TCMR_CKO_CONTINUOUS
 (0x1u << 2Ë

	)

161 
	#SSC_TCMR_CKO_TRANSFER
 (0x2u << 2Ë

	)

162 
	#SSC_TCMR_CKI
 (0x1u << 5Ë

	)

163 
	#SSC_TCMR_CKG_Pos
 6

	)

164 
	#SSC_TCMR_CKG_Msk
 (0x3u << 
SSC_TCMR_CKG_Pos
Ë

	)

165 
	#SSC_TCMR_CKG_NONE
 (0x0u << 6Ë

	)

166 
	#SSC_TCMR_CKG_CONTINUOUS
 (0x1u << 6Ë

	)

167 
	#SSC_TCMR_CKG_TRANSFER
 (0x2u << 6Ë

	)

168 
	#SSC_TCMR_START_Pos
 8

	)

169 
	#SSC_TCMR_START_Msk
 (0xfu << 
SSC_TCMR_START_Pos
Ë

	)

170 
	#SSC_TCMR_START_CONTINUOUS
 (0x0u << 8Ë

	)

171 
	#SSC_TCMR_START_RECEIVE
 (0x1u << 8Ë

	)

172 
	#SSC_TCMR_START_RF_LOW
 (0x2u << 8Ë

	)

173 
	#SSC_TCMR_START_RF_HIGH
 (0x3u << 8Ë

	)

174 
	#SSC_TCMR_START_RF_FALLING
 (0x4u << 8Ë

	)

175 
	#SSC_TCMR_START_RF_RISING
 (0x5u << 8Ë

	)

176 
	#SSC_TCMR_START_RF_LEVEL
 (0x6u << 8Ë

	)

177 
	#SSC_TCMR_START_RF_EDGE
 (0x7u << 8Ë

	)

178 
	#SSC_TCMR_START_CMP_0
 (0x8u << 8Ë

	)

179 
	#SSC_TCMR_STTDLY_Pos
 16

	)

180 
	#SSC_TCMR_STTDLY_Msk
 (0xffu << 
SSC_TCMR_STTDLY_Pos
Ë

	)

181 
	#SSC_TCMR_STTDLY
(
vÆue
Ë((
SSC_TCMR_STTDLY_Msk
 & ((vÆueË<< 
SSC_TCMR_STTDLY_Pos
)))

	)

182 
	#SSC_TCMR_PERIOD_Pos
 24

	)

183 
	#SSC_TCMR_PERIOD_Msk
 (0xffu << 
SSC_TCMR_PERIOD_Pos
Ë

	)

184 
	#SSC_TCMR_PERIOD
(
vÆue
Ë((
SSC_TCMR_PERIOD_Msk
 & ((vÆueË<< 
SSC_TCMR_PERIOD_Pos
)))

	)

186 
	#SSC_TFMR_DATLEN_Pos
 0

	)

187 
	#SSC_TFMR_DATLEN_Msk
 (0x1fu << 
SSC_TFMR_DATLEN_Pos
Ë

	)

188 
	#SSC_TFMR_DATLEN
(
vÆue
Ë((
SSC_TFMR_DATLEN_Msk
 & ((vÆueË<< 
SSC_TFMR_DATLEN_Pos
)))

	)

189 
	#SSC_TFMR_DATDEF
 (0x1u << 5Ë

	)

190 
	#SSC_TFMR_MSBF
 (0x1u << 7Ë

	)

191 
	#SSC_TFMR_DATNB_Pos
 8

	)

192 
	#SSC_TFMR_DATNB_Msk
 (0xfu << 
SSC_TFMR_DATNB_Pos
Ë

	)

193 
	#SSC_TFMR_DATNB
(
vÆue
Ë((
SSC_TFMR_DATNB_Msk
 & ((vÆueË<< 
SSC_TFMR_DATNB_Pos
)))

	)

194 
	#SSC_TFMR_FSLEN_Pos
 16

	)

195 
	#SSC_TFMR_FSLEN_Msk
 (0xfu << 
SSC_TFMR_FSLEN_Pos
Ë

	)

196 
	#SSC_TFMR_FSLEN
(
vÆue
Ë((
SSC_TFMR_FSLEN_Msk
 & ((vÆueË<< 
SSC_TFMR_FSLEN_Pos
)))

	)

197 
	#SSC_TFMR_FSOS_Pos
 20

	)

198 
	#SSC_TFMR_FSOS_Msk
 (0x7u << 
SSC_TFMR_FSOS_Pos
Ë

	)

199 
	#SSC_TFMR_FSOS_NONE
 (0x0u << 20Ë

	)

200 
	#SSC_TFMR_FSOS_NEGATIVE
 (0x1u << 20Ë

	)

201 
	#SSC_TFMR_FSOS_POSITIVE
 (0x2u << 20Ë

	)

202 
	#SSC_TFMR_FSOS_LOW
 (0x3u << 20Ë

	)

203 
	#SSC_TFMR_FSOS_HIGH
 (0x4u << 20Ë

	)

204 
	#SSC_TFMR_FSOS_TOGGLING
 (0x5u << 20Ë

	)

205 
	#SSC_TFMR_FSDEN
 (0x1u << 23Ë

	)

206 
	#SSC_TFMR_FSEDGE
 (0x1u << 24Ë

	)

207 
	#SSC_TFMR_FSEDGE_POSITIVE
 (0x0u << 24Ë

	)

208 
	#SSC_TFMR_FSEDGE_NEGATIVE
 (0x1u << 24Ë

	)

209 
	#SSC_TFMR_FSLEN_EXT_Pos
 28

	)

210 
	#SSC_TFMR_FSLEN_EXT_Msk
 (0xfu << 
SSC_TFMR_FSLEN_EXT_Pos
Ë

	)

211 
	#SSC_TFMR_FSLEN_EXT
(
vÆue
Ë((
SSC_TFMR_FSLEN_EXT_Msk
 & ((vÆueË<< 
SSC_TFMR_FSLEN_EXT_Pos
)))

	)

213 
	#SSC_RHR_RDAT_Pos
 0

	)

214 
	#SSC_RHR_RDAT_Msk
 (0xffffffffu << 
SSC_RHR_RDAT_Pos
Ë

	)

216 
	#SSC_THR_TDAT_Pos
 0

	)

217 
	#SSC_THR_TDAT_Msk
 (0xffffffffu << 
SSC_THR_TDAT_Pos
Ë

	)

218 
	#SSC_THR_TDAT
(
vÆue
Ë((
SSC_THR_TDAT_Msk
 & ((vÆueË<< 
SSC_THR_TDAT_Pos
)))

	)

220 
	#SSC_RSHR_RSDAT_Pos
 0

	)

221 
	#SSC_RSHR_RSDAT_Msk
 (0xffffu << 
SSC_RSHR_RSDAT_Pos
Ë

	)

223 
	#SSC_TSHR_TSDAT_Pos
 0

	)

224 
	#SSC_TSHR_TSDAT_Msk
 (0xffffu << 
SSC_TSHR_TSDAT_Pos
Ë

	)

225 
	#SSC_TSHR_TSDAT
(
vÆue
Ë((
SSC_TSHR_TSDAT_Msk
 & ((vÆueË<< 
SSC_TSHR_TSDAT_Pos
)))

	)

227 
	#SSC_RC0R_CP0_Pos
 0

	)

228 
	#SSC_RC0R_CP0_Msk
 (0xffffu << 
SSC_RC0R_CP0_Pos
Ë

	)

229 
	#SSC_RC0R_CP0
(
vÆue
Ë((
SSC_RC0R_CP0_Msk
 & ((vÆueË<< 
SSC_RC0R_CP0_Pos
)))

	)

231 
	#SSC_RC1R_CP1_Pos
 0

	)

232 
	#SSC_RC1R_CP1_Msk
 (0xffffu << 
SSC_RC1R_CP1_Pos
Ë

	)

233 
	#SSC_RC1R_CP1
(
vÆue
Ë((
SSC_RC1R_CP1_Msk
 & ((vÆueË<< 
SSC_RC1R_CP1_Pos
)))

	)

235 
	#SSC_SR_TXRDY
 (0x1u << 0Ë

	)

236 
	#SSC_SR_TXEMPTY
 (0x1u << 1Ë

	)

237 
	#SSC_SR_RXRDY
 (0x1u << 4Ë

	)

238 
	#SSC_SR_OVRUN
 (0x1u << 5Ë

	)

239 
	#SSC_SR_CP0
 (0x1u << 8Ë

	)

240 
	#SSC_SR_CP1
 (0x1u << 9Ë

	)

241 
	#SSC_SR_TXSYN
 (0x1u << 10Ë

	)

242 
	#SSC_SR_RXSYN
 (0x1u << 11Ë

	)

243 
	#SSC_SR_TXEN
 (0x1u << 16Ë

	)

244 
	#SSC_SR_RXEN
 (0x1u << 17Ë

	)

246 
	#SSC_IER_TXRDY
 (0x1u << 0Ë

	)

247 
	#SSC_IER_TXEMPTY
 (0x1u << 1Ë

	)

248 
	#SSC_IER_RXRDY
 (0x1u << 4Ë

	)

249 
	#SSC_IER_OVRUN
 (0x1u << 5Ë

	)

250 
	#SSC_IER_CP0
 (0x1u << 8Ë

	)

251 
	#SSC_IER_CP1
 (0x1u << 9Ë

	)

252 
	#SSC_IER_TXSYN
 (0x1u << 10Ë

	)

253 
	#SSC_IER_RXSYN
 (0x1u << 11Ë

	)

255 
	#SSC_IDR_TXRDY
 (0x1u << 0Ë

	)

256 
	#SSC_IDR_TXEMPTY
 (0x1u << 1Ë

	)

257 
	#SSC_IDR_RXRDY
 (0x1u << 4Ë

	)

258 
	#SSC_IDR_OVRUN
 (0x1u << 5Ë

	)

259 
	#SSC_IDR_CP0
 (0x1u << 8Ë

	)

260 
	#SSC_IDR_CP1
 (0x1u << 9Ë

	)

261 
	#SSC_IDR_TXSYN
 (0x1u << 10Ë

	)

262 
	#SSC_IDR_RXSYN
 (0x1u << 11Ë

	)

264 
	#SSC_IMR_TXRDY
 (0x1u << 0Ë

	)

265 
	#SSC_IMR_TXEMPTY
 (0x1u << 1Ë

	)

266 
	#SSC_IMR_RXRDY
 (0x1u << 4Ë

	)

267 
	#SSC_IMR_OVRUN
 (0x1u << 5Ë

	)

268 
	#SSC_IMR_CP0
 (0x1u << 8Ë

	)

269 
	#SSC_IMR_CP1
 (0x1u << 9Ë

	)

270 
	#SSC_IMR_TXSYN
 (0x1u << 10Ë

	)

271 
	#SSC_IMR_RXSYN
 (0x1u << 11Ë

	)

273 
	#SSC_WPMR_WPEN
 (0x1u << 0Ë

	)

274 
	#SSC_WPMR_WPKEY_Pos
 8

	)

275 
	#SSC_WPMR_WPKEY_Msk
 (0xffffffu << 
SSC_WPMR_WPKEY_Pos
Ë

	)

276 
	#SSC_WPMR_WPKEY
(
vÆue
Ë((
SSC_WPMR_WPKEY_Msk
 & ((vÆueË<< 
SSC_WPMR_WPKEY_Pos
)))

	)

278 
	#SSC_WPSR_WPVS
 (0x1u << 0Ë

	)

279 
	#SSC_WPSR_WPVSRC_Pos
 8

	)

280 
	#SSC_WPSR_WPVSRC_Msk
 (0xffffu << 
SSC_WPSR_WPVSRC_Pos
Ë

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_supc.h

45 #i‚de‡
_SAM3XA_SUPC_COMPONENT_


46 
	#_SAM3XA_SUPC_COMPONENT_


	)

54 #i‡!(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

57 
WoReg
 
	mSUPC_CR
;

58 
RwReg
 
	mSUPC_SMMR
;

59 
RwReg
 
	mSUPC_MR
;

60 
RwReg
 
	mSUPC_WUMR
;

61 
RwReg
 
	mSUPC_WUIR
;

62 
RoReg
 
	mSUPC_SR
;

63 } 
	tSupc
;

66 
	#SUPC_CR_VROFF
 (0x1u << 2Ë

	)

67 
	#SUPC_CR_VROFF_NO_EFFECT
 (0x0u << 2Ë

	)

68 
	#SUPC_CR_VROFF_STOP_VREG
 (0x1u << 2Ë

	)

69 
	#SUPC_CR_XTALSEL
 (0x1u << 3Ë

	)

70 
	#SUPC_CR_XTALSEL_NO_EFFECT
 (0x0u << 3Ë

	)

71 
	#SUPC_CR_XTALSEL_CRYSTAL_SEL
 (0x1u << 3Ë

	)

72 
	#SUPC_CR_KEY_Pos
 24

	)

73 
	#SUPC_CR_KEY_Msk
 (0xffu << 
SUPC_CR_KEY_Pos
Ë

	)

74 
	#SUPC_CR_KEY
(
vÆue
Ë((
SUPC_CR_KEY_Msk
 & ((vÆueË<< 
SUPC_CR_KEY_Pos
)))

	)

76 
	#SUPC_SMMR_SMTH_Pos
 0

	)

77 
	#SUPC_SMMR_SMTH_Msk
 (0xfu << 
SUPC_SMMR_SMTH_Pos
Ë

	)

78 
	#SUPC_SMMR_SMTH_1_9V
 (0x0u << 0Ë

	)

79 
	#SUPC_SMMR_SMTH_2_0V
 (0x1u << 0Ë

	)

80 
	#SUPC_SMMR_SMTH_2_1V
 (0x2u << 0Ë

	)

81 
	#SUPC_SMMR_SMTH_2_2V
 (0x3u << 0Ë

	)

82 
	#SUPC_SMMR_SMTH_2_3V
 (0x4u << 0Ë

	)

83 
	#SUPC_SMMR_SMTH_2_4V
 (0x5u << 0Ë

	)

84 
	#SUPC_SMMR_SMTH_2_5V
 (0x6u << 0Ë

	)

85 
	#SUPC_SMMR_SMTH_2_6V
 (0x7u << 0Ë

	)

86 
	#SUPC_SMMR_SMTH_2_7V
 (0x8u << 0Ë

	)

87 
	#SUPC_SMMR_SMTH_2_8V
 (0x9u << 0Ë

	)

88 
	#SUPC_SMMR_SMTH_2_9V
 (0xAu << 0Ë

	)

89 
	#SUPC_SMMR_SMTH_3_0V
 (0xBu << 0Ë

	)

90 
	#SUPC_SMMR_SMTH_3_1V
 (0xCu << 0Ë

	)

91 
	#SUPC_SMMR_SMTH_3_2V
 (0xDu << 0Ë

	)

92 
	#SUPC_SMMR_SMTH_3_3V
 (0xEu << 0Ë

	)

93 
	#SUPC_SMMR_SMTH_3_4V
 (0xFu << 0Ë

	)

94 
	#SUPC_SMMR_SMSMPL_Pos
 8

	)

95 
	#SUPC_SMMR_SMSMPL_Msk
 (0x7u << 
SUPC_SMMR_SMSMPL_Pos
Ë

	)

96 
	#SUPC_SMMR_SMSMPL_SMD
 (0x0u << 8Ë

	)

97 
	#SUPC_SMMR_SMSMPL_CSM
 (0x1u << 8Ë

	)

98 
	#SUPC_SMMR_SMSMPL_32SLCK
 (0x2u << 8Ë

	)

99 
	#SUPC_SMMR_SMSMPL_256SLCK
 (0x3u << 8Ë

	)

100 
	#SUPC_SMMR_SMSMPL_2048SLCK
 (0x4u << 8Ë

	)

101 
	#SUPC_SMMR_SMRSTEN
 (0x1u << 12Ë

	)

102 
	#SUPC_SMMR_SMRSTEN_NOT_ENABLE
 (0x0u << 12Ë

	)

103 
	#SUPC_SMMR_SMRSTEN_ENABLE
 (0x1u << 12Ë

	)

104 
	#SUPC_SMMR_SMIEN
 (0x1u << 13Ë

	)

105 
	#SUPC_SMMR_SMIEN_NOT_ENABLE
 (0x0u << 13Ë

	)

106 
	#SUPC_SMMR_SMIEN_ENABLE
 (0x1u << 13Ë

	)

108 
	#SUPC_MR_BODRSTEN
 (0x1u << 12Ë

	)

109 
	#SUPC_MR_BODRSTEN_NOT_ENABLE
 (0x0u << 12Ë

	)

110 
	#SUPC_MR_BODRSTEN_ENABLE
 (0x1u << 12Ë

	)

111 
	#SUPC_MR_BODDIS
 (0x1u << 13Ë

	)

112 
	#SUPC_MR_BODDIS_ENABLE
 (0x0u << 13Ë

	)

113 
	#SUPC_MR_BODDIS_DISABLE
 (0x1u << 13Ë

	)

114 
	#SUPC_MR_VDDIORDYONREG
 (0x1u << 14Ë

	)

115 
	#SUPC_MR_OSCBYPASS
 (0x1u << 20Ë

	)

116 
	#SUPC_MR_OSCBYPASS_NO_EFFECT
 (0x0u << 20Ë

	)

117 
	#SUPC_MR_OSCBYPASS_BYPASS
 (0x1u << 20Ë

	)

118 
	#SUPC_MR_KEY_Pos
 24

	)

119 
	#SUPC_MR_KEY_Msk
 (0xffu << 
SUPC_MR_KEY_Pos
Ë

	)

120 
	#SUPC_MR_KEY
(
vÆue
Ë((
SUPC_MR_KEY_Msk
 & ((vÆueË<< 
SUPC_MR_KEY_Pos
)))

	)

122 
	#SUPC_WUMR_FWUPEN
 (0x1u << 0Ë

	)

123 
	#SUPC_WUMR_FWUPEN_NOT_ENABLE
 (0x0u << 0Ë

	)

124 
	#SUPC_WUMR_FWUPEN_ENABLE
 (0x1u << 0Ë

	)

125 
	#SUPC_WUMR_SMEN
 (0x1u << 1Ë

	)

126 
	#SUPC_WUMR_SMEN_NOT_ENABLE
 (0x0u << 1Ë

	)

127 
	#SUPC_WUMR_SMEN_ENABLE
 (0x1u << 1Ë

	)

128 
	#SUPC_WUMR_RTTEN
 (0x1u << 2Ë

	)

129 
	#SUPC_WUMR_RTTEN_NOT_ENABLE
 (0x0u << 2Ë

	)

130 
	#SUPC_WUMR_RTTEN_ENABLE
 (0x1u << 2Ë

	)

131 
	#SUPC_WUMR_RTCEN
 (0x1u << 3Ë

	)

132 
	#SUPC_WUMR_RTCEN_NOT_ENABLE
 (0x0u << 3Ë

	)

133 
	#SUPC_WUMR_RTCEN_ENABLE
 (0x1u << 3Ë

	)

134 
	#SUPC_WUMR_FWUPDBC_Pos
 8

	)

135 
	#SUPC_WUMR_FWUPDBC_Msk
 (0x7u << 
SUPC_WUMR_FWUPDBC_Pos
Ë

	)

136 
	#SUPC_WUMR_FWUPDBC_IMMEDIATE
 (0x0u << 8Ë

	)

137 
	#SUPC_WUMR_FWUPDBC_3_SCLK
 (0x1u << 8Ë

	)

138 
	#SUPC_WUMR_FWUPDBC_32_SCLK
 (0x2u << 8Ë

	)

139 
	#SUPC_WUMR_FWUPDBC_512_SCLK
 (0x3u << 8Ë

	)

140 
	#SUPC_WUMR_FWUPDBC_4096_SCLK
 (0x4u << 8Ë

	)

141 
	#SUPC_WUMR_FWUPDBC_32768_SCLK
 (0x5u << 8Ë

	)

142 
	#SUPC_WUMR_WKUPDBC_Pos
 12

	)

143 
	#SUPC_WUMR_WKUPDBC_Msk
 (0x7u << 
SUPC_WUMR_WKUPDBC_Pos
Ë

	)

144 
	#SUPC_WUMR_WKUPDBC_IMMEDIATE
 (0x0u << 12Ë

	)

145 
	#SUPC_WUMR_WKUPDBC_3_SCLK
 (0x1u << 12Ë

	)

146 
	#SUPC_WUMR_WKUPDBC_32_SCLK
 (0x2u << 12Ë

	)

147 
	#SUPC_WUMR_WKUPDBC_512_SCLK
 (0x3u << 12Ë

	)

148 
	#SUPC_WUMR_WKUPDBC_4096_SCLK
 (0x4u << 12Ë

	)

149 
	#SUPC_WUMR_WKUPDBC_32768_SCLK
 (0x5u << 12Ë

	)

151 
	#SUPC_WUIR_WKUPEN0
 (0x1u << 0Ë

	)

152 
	#SUPC_WUIR_WKUPEN0_NOT_ENABLE
 (0x0u << 0Ë

	)

153 
	#SUPC_WUIR_WKUPEN0_ENABLE
 (0x1u << 0Ë

	)

154 
	#SUPC_WUIR_WKUPEN1
 (0x1u << 1Ë

	)

155 
	#SUPC_WUIR_WKUPEN1_NOT_ENABLE
 (0x0u << 1Ë

	)

156 
	#SUPC_WUIR_WKUPEN1_ENABLE
 (0x1u << 1Ë

	)

157 
	#SUPC_WUIR_WKUPEN2
 (0x1u << 2Ë

	)

158 
	#SUPC_WUIR_WKUPEN2_NOT_ENABLE
 (0x0u << 2Ë

	)

159 
	#SUPC_WUIR_WKUPEN2_ENABLE
 (0x1u << 2Ë

	)

160 
	#SUPC_WUIR_WKUPEN3
 (0x1u << 3Ë

	)

161 
	#SUPC_WUIR_WKUPEN3_NOT_ENABLE
 (0x0u << 3Ë

	)

162 
	#SUPC_WUIR_WKUPEN3_ENABLE
 (0x1u << 3Ë

	)

163 
	#SUPC_WUIR_WKUPEN4
 (0x1u << 4Ë

	)

164 
	#SUPC_WUIR_WKUPEN4_NOT_ENABLE
 (0x0u << 4Ë

	)

165 
	#SUPC_WUIR_WKUPEN4_ENABLE
 (0x1u << 4Ë

	)

166 
	#SUPC_WUIR_WKUPEN5
 (0x1u << 5Ë

	)

167 
	#SUPC_WUIR_WKUPEN5_NOT_ENABLE
 (0x0u << 5Ë

	)

168 
	#SUPC_WUIR_WKUPEN5_ENABLE
 (0x1u << 5Ë

	)

169 
	#SUPC_WUIR_WKUPEN6
 (0x1u << 6Ë

	)

170 
	#SUPC_WUIR_WKUPEN6_NOT_ENABLE
 (0x0u << 6Ë

	)

171 
	#SUPC_WUIR_WKUPEN6_ENABLE
 (0x1u << 6Ë

	)

172 
	#SUPC_WUIR_WKUPEN7
 (0x1u << 7Ë

	)

173 
	#SUPC_WUIR_WKUPEN7_NOT_ENABLE
 (0x0u << 7Ë

	)

174 
	#SUPC_WUIR_WKUPEN7_ENABLE
 (0x1u << 7Ë

	)

175 
	#SUPC_WUIR_WKUPEN8
 (0x1u << 8Ë

	)

176 
	#SUPC_WUIR_WKUPEN8_NOT_ENABLE
 (0x0u << 8Ë

	)

177 
	#SUPC_WUIR_WKUPEN8_ENABLE
 (0x1u << 8Ë

	)

178 
	#SUPC_WUIR_WKUPEN9
 (0x1u << 9Ë

	)

179 
	#SUPC_WUIR_WKUPEN9_NOT_ENABLE
 (0x0u << 9Ë

	)

180 
	#SUPC_WUIR_WKUPEN9_ENABLE
 (0x1u << 9Ë

	)

181 
	#SUPC_WUIR_WKUPEN10
 (0x1u << 10Ë

	)

182 
	#SUPC_WUIR_WKUPEN10_NOT_ENABLE
 (0x0u << 10Ë

	)

183 
	#SUPC_WUIR_WKUPEN10_ENABLE
 (0x1u << 10Ë

	)

184 
	#SUPC_WUIR_WKUPEN11
 (0x1u << 11Ë

	)

185 
	#SUPC_WUIR_WKUPEN11_NOT_ENABLE
 (0x0u << 11Ë

	)

186 
	#SUPC_WUIR_WKUPEN11_ENABLE
 (0x1u << 11Ë

	)

187 
	#SUPC_WUIR_WKUPEN12
 (0x1u << 12Ë

	)

188 
	#SUPC_WUIR_WKUPEN12_NOT_ENABLE
 (0x0u << 12Ë

	)

189 
	#SUPC_WUIR_WKUPEN12_ENABLE
 (0x1u << 12Ë

	)

190 
	#SUPC_WUIR_WKUPEN13
 (0x1u << 13Ë

	)

191 
	#SUPC_WUIR_WKUPEN13_NOT_ENABLE
 (0x0u << 13Ë

	)

192 
	#SUPC_WUIR_WKUPEN13_ENABLE
 (0x1u << 13Ë

	)

193 
	#SUPC_WUIR_WKUPEN14
 (0x1u << 14Ë

	)

194 
	#SUPC_WUIR_WKUPEN14_NOT_ENABLE
 (0x0u << 14Ë

	)

195 
	#SUPC_WUIR_WKUPEN14_ENABLE
 (0x1u << 14Ë

	)

196 
	#SUPC_WUIR_WKUPEN15
 (0x1u << 15Ë

	)

197 
	#SUPC_WUIR_WKUPEN15_NOT_ENABLE
 (0x0u << 15Ë

	)

198 
	#SUPC_WUIR_WKUPEN15_ENABLE
 (0x1u << 15Ë

	)

199 
	#SUPC_WUIR_WKUPT0
 (0x1u << 16Ë

	)

200 
	#SUPC_WUIR_WKUPT0_HIGH_TO_LOW
 (0x0u << 16Ë

	)

201 
	#SUPC_WUIR_WKUPT0_LOW_TO_HIGH
 (0x1u << 16Ë

	)

202 
	#SUPC_WUIR_WKUPT1
 (0x1u << 17Ë

	)

203 
	#SUPC_WUIR_WKUPT1_HIGH_TO_LOW
 (0x0u << 17Ë

	)

204 
	#SUPC_WUIR_WKUPT1_LOW_TO_HIGH
 (0x1u << 17Ë

	)

205 
	#SUPC_WUIR_WKUPT2
 (0x1u << 18Ë

	)

206 
	#SUPC_WUIR_WKUPT2_HIGH_TO_LOW
 (0x0u << 18Ë

	)

207 
	#SUPC_WUIR_WKUPT2_LOW_TO_HIGH
 (0x1u << 18Ë

	)

208 
	#SUPC_WUIR_WKUPT3
 (0x1u << 19Ë

	)

209 
	#SUPC_WUIR_WKUPT3_HIGH_TO_LOW
 (0x0u << 19Ë

	)

210 
	#SUPC_WUIR_WKUPT3_LOW_TO_HIGH
 (0x1u << 19Ë

	)

211 
	#SUPC_WUIR_WKUPT4
 (0x1u << 20Ë

	)

212 
	#SUPC_WUIR_WKUPT4_HIGH_TO_LOW
 (0x0u << 20Ë

	)

213 
	#SUPC_WUIR_WKUPT4_LOW_TO_HIGH
 (0x1u << 20Ë

	)

214 
	#SUPC_WUIR_WKUPT5
 (0x1u << 21Ë

	)

215 
	#SUPC_WUIR_WKUPT5_HIGH_TO_LOW
 (0x0u << 21Ë

	)

216 
	#SUPC_WUIR_WKUPT5_LOW_TO_HIGH
 (0x1u << 21Ë

	)

217 
	#SUPC_WUIR_WKUPT6
 (0x1u << 22Ë

	)

218 
	#SUPC_WUIR_WKUPT6_HIGH_TO_LOW
 (0x0u << 22Ë

	)

219 
	#SUPC_WUIR_WKUPT6_LOW_TO_HIGH
 (0x1u << 22Ë

	)

220 
	#SUPC_WUIR_WKUPT7
 (0x1u << 23Ë

	)

221 
	#SUPC_WUIR_WKUPT7_HIGH_TO_LOW
 (0x0u << 23Ë

	)

222 
	#SUPC_WUIR_WKUPT7_LOW_TO_HIGH
 (0x1u << 23Ë

	)

223 
	#SUPC_WUIR_WKUPT8
 (0x1u << 24Ë

	)

224 
	#SUPC_WUIR_WKUPT8_HIGH_TO_LOW
 (0x0u << 24Ë

	)

225 
	#SUPC_WUIR_WKUPT8_LOW_TO_HIGH
 (0x1u << 24Ë

	)

226 
	#SUPC_WUIR_WKUPT9
 (0x1u << 25Ë

	)

227 
	#SUPC_WUIR_WKUPT9_HIGH_TO_LOW
 (0x0u << 25Ë

	)

228 
	#SUPC_WUIR_WKUPT9_LOW_TO_HIGH
 (0x1u << 25Ë

	)

229 
	#SUPC_WUIR_WKUPT10
 (0x1u << 26Ë

	)

230 
	#SUPC_WUIR_WKUPT10_HIGH_TO_LOW
 (0x0u << 26Ë

	)

231 
	#SUPC_WUIR_WKUPT10_LOW_TO_HIGH
 (0x1u << 26Ë

	)

232 
	#SUPC_WUIR_WKUPT11
 (0x1u << 27Ë

	)

233 
	#SUPC_WUIR_WKUPT11_HIGH_TO_LOW
 (0x0u << 27Ë

	)

234 
	#SUPC_WUIR_WKUPT11_LOW_TO_HIGH
 (0x1u << 27Ë

	)

235 
	#SUPC_WUIR_WKUPT12
 (0x1u << 28Ë

	)

236 
	#SUPC_WUIR_WKUPT12_HIGH_TO_LOW
 (0x0u << 28Ë

	)

237 
	#SUPC_WUIR_WKUPT12_LOW_TO_HIGH
 (0x1u << 28Ë

	)

238 
	#SUPC_WUIR_WKUPT13
 (0x1u << 29Ë

	)

239 
	#SUPC_WUIR_WKUPT13_HIGH_TO_LOW
 (0x0u << 29Ë

	)

240 
	#SUPC_WUIR_WKUPT13_LOW_TO_HIGH
 (0x1u << 29Ë

	)

241 
	#SUPC_WUIR_WKUPT14
 (0x1u << 30Ë

	)

242 
	#SUPC_WUIR_WKUPT14_HIGH_TO_LOW
 (0x0u << 30Ë

	)

243 
	#SUPC_WUIR_WKUPT14_LOW_TO_HIGH
 (0x1u << 30Ë

	)

244 
	#SUPC_WUIR_WKUPT15
 (0x1u << 31Ë

	)

245 
	#SUPC_WUIR_WKUPT15_HIGH_TO_LOW
 (0x0u << 31Ë

	)

246 
	#SUPC_WUIR_WKUPT15_LOW_TO_HIGH
 (0x1u << 31Ë

	)

248 
	#SUPC_SR_FWUPS
 (0x1u << 0Ë

	)

249 
	#SUPC_SR_FWUPS_NO
 (0x0u << 0Ë

	)

250 
	#SUPC_SR_FWUPS_PRESENT
 (0x1u << 0Ë

	)

251 
	#SUPC_SR_WKUPS
 (0x1u << 1Ë

	)

252 
	#SUPC_SR_WKUPS_NO
 (0x0u << 1Ë

	)

253 
	#SUPC_SR_WKUPS_PRESENT
 (0x1u << 1Ë

	)

254 
	#SUPC_SR_SMWS
 (0x1u << 2Ë

	)

255 
	#SUPC_SR_SMWS_NO
 (0x0u << 2Ë

	)

256 
	#SUPC_SR_SMWS_PRESENT
 (0x1u << 2Ë

	)

257 
	#SUPC_SR_BODRSTS
 (0x1u << 3Ë

	)

258 
	#SUPC_SR_BODRSTS_NO
 (0x0u << 3Ë

	)

259 
	#SUPC_SR_BODRSTS_PRESENT
 (0x1u << 3Ë

	)

260 
	#SUPC_SR_SMRSTS
 (0x1u << 4Ë

	)

261 
	#SUPC_SR_SMRSTS_NO
 (0x0u << 4Ë

	)

262 
	#SUPC_SR_SMRSTS_PRESENT
 (0x1u << 4Ë

	)

263 
	#SUPC_SR_SMS
 (0x1u << 5Ë

	)

264 
	#SUPC_SR_SMS_NO
 (0x0u << 5Ë

	)

265 
	#SUPC_SR_SMS_PRESENT
 (0x1u << 5Ë

	)

266 
	#SUPC_SR_SMOS
 (0x1u << 6Ë

	)

267 
	#SUPC_SR_SMOS_HIGH
 (0x0u << 6Ë

	)

268 
	#SUPC_SR_SMOS_LOW
 (0x1u << 6Ë

	)

269 
	#SUPC_SR_OSCSEL
 (0x1u << 7Ë

	)

270 
	#SUPC_SR_OSCSEL_RC
 (0x0u << 7Ë

	)

271 
	#SUPC_SR_OSCSEL_CRYST
 (0x1u << 7Ë

	)

272 
	#SUPC_SR_FWUPIS
 (0x1u << 12Ë

	)

273 
	#SUPC_SR_FWUPIS_LOW
 (0x0u << 12Ë

	)

274 
	#SUPC_SR_FWUPIS_HIGH
 (0x1u << 12Ë

	)

275 
	#SUPC_SR_WKUPIS0
 (0x1u << 16Ë

	)

276 
	#SUPC_SR_WKUPIS0_DIS
 (0x0u << 16Ë

	)

277 
	#SUPC_SR_WKUPIS0_EN
 (0x1u << 16Ë

	)

278 
	#SUPC_SR_WKUPIS1
 (0x1u << 17Ë

	)

279 
	#SUPC_SR_WKUPIS1_DIS
 (0x0u << 17Ë

	)

280 
	#SUPC_SR_WKUPIS1_EN
 (0x1u << 17Ë

	)

281 
	#SUPC_SR_WKUPIS2
 (0x1u << 18Ë

	)

282 
	#SUPC_SR_WKUPIS2_DIS
 (0x0u << 18Ë

	)

283 
	#SUPC_SR_WKUPIS2_EN
 (0x1u << 18Ë

	)

284 
	#SUPC_SR_WKUPIS3
 (0x1u << 19Ë

	)

285 
	#SUPC_SR_WKUPIS3_DIS
 (0x0u << 19Ë

	)

286 
	#SUPC_SR_WKUPIS3_EN
 (0x1u << 19Ë

	)

287 
	#SUPC_SR_WKUPIS4
 (0x1u << 20Ë

	)

288 
	#SUPC_SR_WKUPIS4_DIS
 (0x0u << 20Ë

	)

289 
	#SUPC_SR_WKUPIS4_EN
 (0x1u << 20Ë

	)

290 
	#SUPC_SR_WKUPIS5
 (0x1u << 21Ë

	)

291 
	#SUPC_SR_WKUPIS5_DIS
 (0x0u << 21Ë

	)

292 
	#SUPC_SR_WKUPIS5_EN
 (0x1u << 21Ë

	)

293 
	#SUPC_SR_WKUPIS6
 (0x1u << 22Ë

	)

294 
	#SUPC_SR_WKUPIS6_DIS
 (0x0u << 22Ë

	)

295 
	#SUPC_SR_WKUPIS6_EN
 (0x1u << 22Ë

	)

296 
	#SUPC_SR_WKUPIS7
 (0x1u << 23Ë

	)

297 
	#SUPC_SR_WKUPIS7_DIS
 (0x0u << 23Ë

	)

298 
	#SUPC_SR_WKUPIS7_EN
 (0x1u << 23Ë

	)

299 
	#SUPC_SR_WKUPIS8
 (0x1u << 24Ë

	)

300 
	#SUPC_SR_WKUPIS8_DIS
 (0x0u << 24Ë

	)

301 
	#SUPC_SR_WKUPIS8_EN
 (0x1u << 24Ë

	)

302 
	#SUPC_SR_WKUPIS9
 (0x1u << 25Ë

	)

303 
	#SUPC_SR_WKUPIS9_DIS
 (0x0u << 25Ë

	)

304 
	#SUPC_SR_WKUPIS9_EN
 (0x1u << 25Ë

	)

305 
	#SUPC_SR_WKUPIS10
 (0x1u << 26Ë

	)

306 
	#SUPC_SR_WKUPIS10_DIS
 (0x0u << 26Ë

	)

307 
	#SUPC_SR_WKUPIS10_EN
 (0x1u << 26Ë

	)

308 
	#SUPC_SR_WKUPIS11
 (0x1u << 27Ë

	)

309 
	#SUPC_SR_WKUPIS11_DIS
 (0x0u << 27Ë

	)

310 
	#SUPC_SR_WKUPIS11_EN
 (0x1u << 27Ë

	)

311 
	#SUPC_SR_WKUPIS12
 (0x1u << 28Ë

	)

312 
	#SUPC_SR_WKUPIS12_DIS
 (0x0u << 28Ë

	)

313 
	#SUPC_SR_WKUPIS12_EN
 (0x1u << 28Ë

	)

314 
	#SUPC_SR_WKUPIS13
 (0x1u << 29Ë

	)

315 
	#SUPC_SR_WKUPIS13_DIS
 (0x0u << 29Ë

	)

316 
	#SUPC_SR_WKUPIS13_EN
 (0x1u << 29Ë

	)

317 
	#SUPC_SR_WKUPIS14
 (0x1u << 30Ë

	)

318 
	#SUPC_SR_WKUPIS14_DIS
 (0x0u << 30Ë

	)

319 
	#SUPC_SR_WKUPIS14_EN
 (0x1u << 30Ë

	)

320 
	#SUPC_SR_WKUPIS15
 (0x1u << 31Ë

	)

321 
	#SUPC_SR_WKUPIS15_DIS
 (0x0u << 31Ë

	)

322 
	#SUPC_SR_WKUPIS15_EN
 (0x1u << 31Ë

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_tc.h

45 #i‚de‡
_SAM3XA_TC_COMPONENT_


46 
	#_SAM3XA_TC_COMPONENT_


	)

54 #i‡!(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

57 
RwReg
 
	mTC_CCR
;

58 
RwReg
 
	mTC_CMR
;

59 
RwReg
 
	mTC_SMMR
;

60 
RoReg
 
	mRe£rved1
[1];

61 
RwReg
 
	mTC_CV
;

62 
RwReg
 
	mTC_RA
;

63 
RwReg
 
	mTC_RB
;

64 
RwReg
 
	mTC_RC
;

65 
RwReg
 
	mTC_SR
;

66 
RwReg
 
	mTC_IER
;

67 
RwReg
 
	mTC_IDR
;

68 
RwReg
 
	mTC_IMR
;

69 
RoReg
 
	mRe£rved2
[4];

70 } 
	tTcCh™√l
;

72 
	#TCCHANNEL_NUMBER
 3

	)

74 
TcCh™√l
 
	mTC_CHANNEL
[
TCCHANNEL_NUMBER
];

75 
WoReg
 
	mTC_BCR
;

76 
RwReg
 
	mTC_BMR
;

77 
WoReg
 
	mTC_QIER
;

78 
WoReg
 
	mTC_QIDR
;

79 
RoReg
 
	mTC_QIMR
;

80 
RoReg
 
	mTC_QISR
;

81 
RwReg
 
	mTC_FMR
;

82 
RoReg
 
	mRe£rved1
[2];

83 
RwReg
 
	mTC_WPMR
;

84 } 
	tTc
;

87 
	#TC_CCR_CLKEN
 (0x1u << 0Ë

	)

88 
	#TC_CCR_CLKDIS
 (0x1u << 1Ë

	)

89 
	#TC_CCR_SWTRG
 (0x1u << 2Ë

	)

91 
	#TC_CMR_TCCLKS_Pos
 0

	)

92 
	#TC_CMR_TCCLKS_Msk
 (0x7u << 
TC_CMR_TCCLKS_Pos
Ë

	)

93 
	#TC_CMR_TCCLKS_TIMER_CLOCK1
 (0x0u << 0Ë

	)

94 
	#TC_CMR_TCCLKS_TIMER_CLOCK2
 (0x1u << 0Ë

	)

95 
	#TC_CMR_TCCLKS_TIMER_CLOCK3
 (0x2u << 0Ë

	)

96 
	#TC_CMR_TCCLKS_TIMER_CLOCK4
 (0x3u << 0Ë

	)

97 
	#TC_CMR_TCCLKS_TIMER_CLOCK5
 (0x4u << 0Ë

	)

98 
	#TC_CMR_TCCLKS_XC0
 (0x5u << 0Ë

	)

99 
	#TC_CMR_TCCLKS_XC1
 (0x6u << 0Ë

	)

100 
	#TC_CMR_TCCLKS_XC2
 (0x7u << 0Ë

	)

101 
	#TC_CMR_CLKI
 (0x1u << 3Ë

	)

102 
	#TC_CMR_BURST_Pos
 4

	)

103 
	#TC_CMR_BURST_Msk
 (0x3u << 
TC_CMR_BURST_Pos
Ë

	)

104 
	#TC_CMR_BURST_NONE
 (0x0u << 4Ë

	)

105 
	#TC_CMR_BURST_XC0
 (0x1u << 4Ë

	)

106 
	#TC_CMR_BURST_XC1
 (0x2u << 4Ë

	)

107 
	#TC_CMR_BURST_XC2
 (0x3u << 4Ë

	)

108 
	#TC_CMR_LDBSTOP
 (0x1u << 6Ë

	)

109 
	#TC_CMR_LDBDIS
 (0x1u << 7Ë

	)

110 
	#TC_CMR_ETRGEDG_Pos
 8

	)

111 
	#TC_CMR_ETRGEDG_Msk
 (0x3u << 
TC_CMR_ETRGEDG_Pos
Ë

	)

112 
	#TC_CMR_ETRGEDG_NONE
 (0x0u << 8Ë

	)

113 
	#TC_CMR_ETRGEDG_RISING
 (0x1u << 8Ë

	)

114 
	#TC_CMR_ETRGEDG_FALLING
 (0x2u << 8Ë

	)

115 
	#TC_CMR_ETRGEDG_EDGE
 (0x3u << 8Ë

	)

116 
	#TC_CMR_ABETRG
 (0x1u << 10Ë

	)

117 
	#TC_CMR_CPCTRG
 (0x1u << 14Ë

	)

118 
	#TC_CMR_WAVE
 (0x1u << 15Ë

	)

119 
	#TC_CMR_LDRA_Pos
 16

	)

120 
	#TC_CMR_LDRA_Msk
 (0x3u << 
TC_CMR_LDRA_Pos
Ë

	)

121 
	#TC_CMR_LDRA_NONE
 (0x0u << 16Ë

	)

122 
	#TC_CMR_LDRA_RISING
 (0x1u << 16Ë

	)

123 
	#TC_CMR_LDRA_FALLING
 (0x2u << 16Ë

	)

124 
	#TC_CMR_LDRA_EDGE
 (0x3u << 16Ë

	)

125 
	#TC_CMR_LDRB_Pos
 18

	)

126 
	#TC_CMR_LDRB_Msk
 (0x3u << 
TC_CMR_LDRB_Pos
Ë

	)

127 
	#TC_CMR_LDRB_NONE
 (0x0u << 18Ë

	)

128 
	#TC_CMR_LDRB_RISING
 (0x1u << 18Ë

	)

129 
	#TC_CMR_LDRB_FALLING
 (0x2u << 18Ë

	)

130 
	#TC_CMR_LDRB_EDGE
 (0x3u << 18Ë

	)

131 
	#TC_CMR_CPCSTOP
 (0x1u << 6Ë

	)

132 
	#TC_CMR_CPCDIS
 (0x1u << 7Ë

	)

133 
	#TC_CMR_EEVTEDG_Pos
 8

	)

134 
	#TC_CMR_EEVTEDG_Msk
 (0x3u << 
TC_CMR_EEVTEDG_Pos
Ë

	)

135 
	#TC_CMR_EEVTEDG_NONE
 (0x0u << 8Ë

	)

136 
	#TC_CMR_EEVTEDG_RISING
 (0x1u << 8Ë

	)

137 
	#TC_CMR_EEVTEDG_FALLING
 (0x2u << 8Ë

	)

138 
	#TC_CMR_EEVTEDG_EDGE
 (0x3u << 8Ë

	)

139 
	#TC_CMR_EEVT_Pos
 10

	)

140 
	#TC_CMR_EEVT_Msk
 (0x3u << 
TC_CMR_EEVT_Pos
Ë

	)

141 
	#TC_CMR_EEVT_TIOB
 (0x0u << 10Ë

	)

142 
	#TC_CMR_EEVT_XC0
 (0x1u << 10Ë

	)

143 
	#TC_CMR_EEVT_XC1
 (0x2u << 10Ë

	)

144 
	#TC_CMR_EEVT_XC2
 (0x3u << 10Ë

	)

145 
	#TC_CMR_ENETRG
 (0x1u << 12Ë

	)

146 
	#TC_CMR_WAVSEL_Pos
 13

	)

147 
	#TC_CMR_WAVSEL_Msk
 (0x3u << 
TC_CMR_WAVSEL_Pos
Ë

	)

148 
	#TC_CMR_WAVSEL_UP
 (0x0u << 13Ë

	)

149 
	#TC_CMR_WAVSEL_UPDOWN
 (0x1u << 13Ë

	)

150 
	#TC_CMR_WAVSEL_UP_RC
 (0x2u << 13Ë

	)

151 
	#TC_CMR_WAVSEL_UPDOWN_RC
 (0x3u << 13Ë

	)

152 
	#TC_CMR_ACPA_Pos
 16

	)

153 
	#TC_CMR_ACPA_Msk
 (0x3u << 
TC_CMR_ACPA_Pos
Ë

	)

154 
	#TC_CMR_ACPA_NONE
 (0x0u << 16Ë

	)

155 
	#TC_CMR_ACPA_SET
 (0x1u << 16Ë

	)

156 
	#TC_CMR_ACPA_CLEAR
 (0x2u << 16Ë

	)

157 
	#TC_CMR_ACPA_TOGGLE
 (0x3u << 16Ë

	)

158 
	#TC_CMR_ACPC_Pos
 18

	)

159 
	#TC_CMR_ACPC_Msk
 (0x3u << 
TC_CMR_ACPC_Pos
Ë

	)

160 
	#TC_CMR_ACPC_NONE
 (0x0u << 18Ë

	)

161 
	#TC_CMR_ACPC_SET
 (0x1u << 18Ë

	)

162 
	#TC_CMR_ACPC_CLEAR
 (0x2u << 18Ë

	)

163 
	#TC_CMR_ACPC_TOGGLE
 (0x3u << 18Ë

	)

164 
	#TC_CMR_AEEVT_Pos
 20

	)

165 
	#TC_CMR_AEEVT_Msk
 (0x3u << 
TC_CMR_AEEVT_Pos
Ë

	)

166 
	#TC_CMR_AEEVT_NONE
 (0x0u << 20Ë

	)

167 
	#TC_CMR_AEEVT_SET
 (0x1u << 20Ë

	)

168 
	#TC_CMR_AEEVT_CLEAR
 (0x2u << 20Ë

	)

169 
	#TC_CMR_AEEVT_TOGGLE
 (0x3u << 20Ë

	)

170 
	#TC_CMR_ASWTRG_Pos
 22

	)

171 
	#TC_CMR_ASWTRG_Msk
 (0x3u << 
TC_CMR_ASWTRG_Pos
Ë

	)

172 
	#TC_CMR_ASWTRG_NONE
 (0x0u << 22Ë

	)

173 
	#TC_CMR_ASWTRG_SET
 (0x1u << 22Ë

	)

174 
	#TC_CMR_ASWTRG_CLEAR
 (0x2u << 22Ë

	)

175 
	#TC_CMR_ASWTRG_TOGGLE
 (0x3u << 22Ë

	)

176 
	#TC_CMR_BCPB_Pos
 24

	)

177 
	#TC_CMR_BCPB_Msk
 (0x3u << 
TC_CMR_BCPB_Pos
Ë

	)

178 
	#TC_CMR_BCPB_NONE
 (0x0u << 24Ë

	)

179 
	#TC_CMR_BCPB_SET
 (0x1u << 24Ë

	)

180 
	#TC_CMR_BCPB_CLEAR
 (0x2u << 24Ë

	)

181 
	#TC_CMR_BCPB_TOGGLE
 (0x3u << 24Ë

	)

182 
	#TC_CMR_BCPC_Pos
 26

	)

183 
	#TC_CMR_BCPC_Msk
 (0x3u << 
TC_CMR_BCPC_Pos
Ë

	)

184 
	#TC_CMR_BCPC_NONE
 (0x0u << 26Ë

	)

185 
	#TC_CMR_BCPC_SET
 (0x1u << 26Ë

	)

186 
	#TC_CMR_BCPC_CLEAR
 (0x2u << 26Ë

	)

187 
	#TC_CMR_BCPC_TOGGLE
 (0x3u << 26Ë

	)

188 
	#TC_CMR_BEEVT_Pos
 28

	)

189 
	#TC_CMR_BEEVT_Msk
 (0x3u << 
TC_CMR_BEEVT_Pos
Ë

	)

190 
	#TC_CMR_BEEVT_NONE
 (0x0u << 28Ë

	)

191 
	#TC_CMR_BEEVT_SET
 (0x1u << 28Ë

	)

192 
	#TC_CMR_BEEVT_CLEAR
 (0x2u << 28Ë

	)

193 
	#TC_CMR_BEEVT_TOGGLE
 (0x3u << 28Ë

	)

194 
	#TC_CMR_BSWTRG_Pos
 30

	)

195 
	#TC_CMR_BSWTRG_Msk
 (0x3u << 
TC_CMR_BSWTRG_Pos
Ë

	)

196 
	#TC_CMR_BSWTRG_NONE
 (0x0u << 30Ë

	)

197 
	#TC_CMR_BSWTRG_SET
 (0x1u << 30Ë

	)

198 
	#TC_CMR_BSWTRG_CLEAR
 (0x2u << 30Ë

	)

199 
	#TC_CMR_BSWTRG_TOGGLE
 (0x3u << 30Ë

	)

201 
	#TC_SMMR_GCEN
 (0x1u << 0Ë

	)

202 
	#TC_SMMR_DOWN
 (0x1u << 1Ë

	)

204 
	#TC_CV_CV_Pos
 0

	)

205 
	#TC_CV_CV_Msk
 (0xffffffffu << 
TC_CV_CV_Pos
Ë

	)

207 
	#TC_RA_RA_Pos
 0

	)

208 
	#TC_RA_RA_Msk
 (0xffffffffu << 
TC_RA_RA_Pos
Ë

	)

209 
	#TC_RA_RA
(
vÆue
Ë((
TC_RA_RA_Msk
 & ((vÆueË<< 
TC_RA_RA_Pos
)))

	)

211 
	#TC_RB_RB_Pos
 0

	)

212 
	#TC_RB_RB_Msk
 (0xffffffffu << 
TC_RB_RB_Pos
Ë

	)

213 
	#TC_RB_RB
(
vÆue
Ë((
TC_RB_RB_Msk
 & ((vÆueË<< 
TC_RB_RB_Pos
)))

	)

215 
	#TC_RC_RC_Pos
 0

	)

216 
	#TC_RC_RC_Msk
 (0xffffffffu << 
TC_RC_RC_Pos
Ë

	)

217 
	#TC_RC_RC
(
vÆue
Ë((
TC_RC_RC_Msk
 & ((vÆueË<< 
TC_RC_RC_Pos
)))

	)

219 
	#TC_SR_COVFS
 (0x1u << 0Ë

	)

220 
	#TC_SR_LOVRS
 (0x1u << 1Ë

	)

221 
	#TC_SR_CPAS
 (0x1u << 2Ë

	)

222 
	#TC_SR_CPBS
 (0x1u << 3Ë

	)

223 
	#TC_SR_CPCS
 (0x1u << 4Ë

	)

224 
	#TC_SR_LDRAS
 (0x1u << 5Ë

	)

225 
	#TC_SR_LDRBS
 (0x1u << 6Ë

	)

226 
	#TC_SR_ETRGS
 (0x1u << 7Ë

	)

227 
	#TC_SR_CLKSTA
 (0x1u << 16Ë

	)

228 
	#TC_SR_MTIOA
 (0x1u << 17Ë

	)

229 
	#TC_SR_MTIOB
 (0x1u << 18Ë

	)

231 
	#TC_IER_COVFS
 (0x1u << 0Ë

	)

232 
	#TC_IER_LOVRS
 (0x1u << 1Ë

	)

233 
	#TC_IER_CPAS
 (0x1u << 2Ë

	)

234 
	#TC_IER_CPBS
 (0x1u << 3Ë

	)

235 
	#TC_IER_CPCS
 (0x1u << 4Ë

	)

236 
	#TC_IER_LDRAS
 (0x1u << 5Ë

	)

237 
	#TC_IER_LDRBS
 (0x1u << 6Ë

	)

238 
	#TC_IER_ETRGS
 (0x1u << 7Ë

	)

240 
	#TC_IDR_COVFS
 (0x1u << 0Ë

	)

241 
	#TC_IDR_LOVRS
 (0x1u << 1Ë

	)

242 
	#TC_IDR_CPAS
 (0x1u << 2Ë

	)

243 
	#TC_IDR_CPBS
 (0x1u << 3Ë

	)

244 
	#TC_IDR_CPCS
 (0x1u << 4Ë

	)

245 
	#TC_IDR_LDRAS
 (0x1u << 5Ë

	)

246 
	#TC_IDR_LDRBS
 (0x1u << 6Ë

	)

247 
	#TC_IDR_ETRGS
 (0x1u << 7Ë

	)

249 
	#TC_IMR_COVFS
 (0x1u << 0Ë

	)

250 
	#TC_IMR_LOVRS
 (0x1u << 1Ë

	)

251 
	#TC_IMR_CPAS
 (0x1u << 2Ë

	)

252 
	#TC_IMR_CPBS
 (0x1u << 3Ë

	)

253 
	#TC_IMR_CPCS
 (0x1u << 4Ë

	)

254 
	#TC_IMR_LDRAS
 (0x1u << 5Ë

	)

255 
	#TC_IMR_LDRBS
 (0x1u << 6Ë

	)

256 
	#TC_IMR_ETRGS
 (0x1u << 7Ë

	)

258 
	#TC_BCR_SYNC
 (0x1u << 0Ë

	)

260 
	#TC_BMR_TC0XC0S_Pos
 0

	)

261 
	#TC_BMR_TC0XC0S_Msk
 (0x3u << 
TC_BMR_TC0XC0S_Pos
Ë

	)

262 
	#TC_BMR_TC0XC0S_TCLK0
 (0x0u << 0Ë

	)

263 
	#TC_BMR_TC0XC0S_TIOA1
 (0x2u << 0Ë

	)

264 
	#TC_BMR_TC0XC0S_TIOA2
 (0x3u << 0Ë

	)

265 
	#TC_BMR_TC1XC1S_Pos
 2

	)

266 
	#TC_BMR_TC1XC1S_Msk
 (0x3u << 
TC_BMR_TC1XC1S_Pos
Ë

	)

267 
	#TC_BMR_TC1XC1S_TCLK1
 (0x0u << 2Ë

	)

268 
	#TC_BMR_TC1XC1S_TIOA0
 (0x2u << 2Ë

	)

269 
	#TC_BMR_TC1XC1S_TIOA2
 (0x3u << 2Ë

	)

270 
	#TC_BMR_TC2XC2S_Pos
 4

	)

271 
	#TC_BMR_TC2XC2S_Msk
 (0x3u << 
TC_BMR_TC2XC2S_Pos
Ë

	)

272 
	#TC_BMR_TC2XC2S_TCLK2
 (0x0u << 4Ë

	)

273 
	#TC_BMR_TC2XC2S_TIOA1
 (0x2u << 4Ë

	)

274 
	#TC_BMR_TC2XC2S_TIOA2
 (0x3u << 4Ë

	)

275 
	#TC_BMR_QDEN
 (0x1u << 8Ë

	)

276 
	#TC_BMR_POSEN
 (0x1u << 9Ë

	)

277 
	#TC_BMR_SPEEDEN
 (0x1u << 10Ë

	)

278 
	#TC_BMR_QDTRANS
 (0x1u << 11Ë

	)

279 
	#TC_BMR_EDGPHA
 (0x1u << 12Ë

	)

280 
	#TC_BMR_INVA
 (0x1u << 13Ë

	)

281 
	#TC_BMR_INVB
 (0x1u << 14Ë

	)

282 
	#TC_BMR_INVIDX
 (0x1u << 15Ë

	)

283 
	#TC_BMR_SWAP
 (0x1u << 16Ë

	)

284 
	#TC_BMR_IDXPHB
 (0x1u << 17Ë

	)

285 
	#TC_BMR_FILTER
 (0x1u << 19Ë

	)

286 
	#TC_BMR_MAXFILT_Pos
 20

	)

287 
	#TC_BMR_MAXFILT_Msk
 (0x3fu << 
TC_BMR_MAXFILT_Pos
Ë

	)

288 
	#TC_BMR_MAXFILT
(
vÆue
Ë((
TC_BMR_MAXFILT_Msk
 & ((vÆueË<< 
TC_BMR_MAXFILT_Pos
)))

	)

290 
	#TC_QIER_IDX
 (0x1u << 0Ë

	)

291 
	#TC_QIER_DIRCHG
 (0x1u << 1Ë

	)

292 
	#TC_QIER_QERR
 (0x1u << 2Ë

	)

294 
	#TC_QIDR_IDX
 (0x1u << 0Ë

	)

295 
	#TC_QIDR_DIRCHG
 (0x1u << 1Ë

	)

296 
	#TC_QIDR_QERR
 (0x1u << 2Ë

	)

298 
	#TC_QIMR_IDX
 (0x1u << 0Ë

	)

299 
	#TC_QIMR_DIRCHG
 (0x1u << 1Ë

	)

300 
	#TC_QIMR_QERR
 (0x1u << 2Ë

	)

302 
	#TC_QISR_IDX
 (0x1u << 0Ë

	)

303 
	#TC_QISR_DIRCHG
 (0x1u << 1Ë

	)

304 
	#TC_QISR_QERR
 (0x1u << 2Ë

	)

305 
	#TC_QISR_DIR
 (0x1u << 8Ë

	)

307 
	#TC_FMR_ENCF0
 (0x1u << 0Ë

	)

308 
	#TC_FMR_ENCF1
 (0x1u << 1Ë

	)

310 
	#TC_WPMR_WPEN
 (0x1u << 0Ë

	)

311 
	#TC_WPMR_WPKEY_Pos
 8

	)

312 
	#TC_WPMR_WPKEY_Msk
 (0xffffffu << 
TC_WPMR_WPKEY_Pos
Ë

	)

313 
	#TC_WPMR_WPKEY
(
vÆue
Ë((
TC_WPMR_WPKEY_Msk
 & ((vÆueË<< 
TC_WPMR_WPKEY_Pos
)))

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_trng.h

45 #i‚de‡
_SAM3XA_TRNG_COMPONENT_


46 
	#_SAM3XA_TRNG_COMPONENT_


	)

54 #i‡!(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

57 
WoReg
 
	mTRNG_CR
;

58 
RoReg
 
	mRe£rved1
[3];

59 
WoReg
 
	mTRNG_IER
;

60 
WoReg
 
	mTRNG_IDR
;

61 
RoReg
 
	mTRNG_IMR
;

62 
RoReg
 
	mTRNG_ISR
;

63 
RoReg
 
	mRe£rved2
[12];

64 
RoReg
 
	mTRNG_ODATA
;

65 } 
	tT∫g
;

68 
	#TRNG_CR_ENABLE
 (0x1u << 0Ë

	)

69 
	#TRNG_CR_KEY_Pos
 8

	)

70 
	#TRNG_CR_KEY_Msk
 (0xffffffu << 
TRNG_CR_KEY_Pos
Ë

	)

71 
	#TRNG_CR_KEY
(
vÆue
Ë((
TRNG_CR_KEY_Msk
 & ((vÆueË<< 
TRNG_CR_KEY_Pos
)))

	)

73 
	#TRNG_IER_DATRDY
 (0x1u << 0Ë

	)

75 
	#TRNG_IDR_DATRDY
 (0x1u << 0Ë

	)

77 
	#TRNG_IMR_DATRDY
 (0x1u << 0Ë

	)

79 
	#TRNG_ISR_DATRDY
 (0x1u << 0Ë

	)

81 
	#TRNG_ODATA_ODATA_Pos
 0

	)

82 
	#TRNG_ODATA_ODATA_Msk
 (0xffffffffu << 
TRNG_ODATA_ODATA_Pos
Ë

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_twi.h

45 #i‚de‡
_SAM3XA_TWI_COMPONENT_


46 
	#_SAM3XA_TWI_COMPONENT_


	)

54 #i‡!(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

57 
WoReg
 
	mTWI_CR
;

58 
RwReg
 
	mTWI_MMR
;

59 
RwReg
 
	mTWI_SMR
;

60 
RwReg
 
	mTWI_IADR
;

61 
RwReg
 
	mTWI_CWGR
;

62 
RoReg
 
	mRe£rved1
[3];

63 
RoReg
 
	mTWI_SR
;

64 
WoReg
 
	mTWI_IER
;

65 
WoReg
 
	mTWI_IDR
;

66 
RoReg
 
	mTWI_IMR
;

67 
RoReg
 
	mTWI_RHR
;

68 
WoReg
 
	mTWI_THR
;

69 
RoReg
 
	mRe£rved2
[50];

70 
RwReg
 
	mTWI_RPR
;

71 
RwReg
 
	mTWI_RCR
;

72 
RwReg
 
	mTWI_TPR
;

73 
RwReg
 
	mTWI_TCR
;

74 
RwReg
 
	mTWI_RNPR
;

75 
RwReg
 
	mTWI_RNCR
;

76 
RwReg
 
	mTWI_TNPR
;

77 
RwReg
 
	mTWI_TNCR
;

78 
WoReg
 
	mTWI_PTCR
;

79 
RoReg
 
	mTWI_PTSR
;

80 } 
	tTwi
;

83 
	#TWI_CR_START
 (0x1u << 0Ë

	)

84 
	#TWI_CR_STOP
 (0x1u << 1Ë

	)

85 
	#TWI_CR_MSEN
 (0x1u << 2Ë

	)

86 
	#TWI_CR_MSDIS
 (0x1u << 3Ë

	)

87 
	#TWI_CR_SVEN
 (0x1u << 4Ë

	)

88 
	#TWI_CR_SVDIS
 (0x1u << 5Ë

	)

89 
	#TWI_CR_QUICK
 (0x1u << 6Ë

	)

90 
	#TWI_CR_SWRST
 (0x1u << 7Ë

	)

92 
	#TWI_MMR_IADRSZ_Pos
 8

	)

93 
	#TWI_MMR_IADRSZ_Msk
 (0x3u << 
TWI_MMR_IADRSZ_Pos
Ë

	)

94 
	#TWI_MMR_IADRSZ_NONE
 (0x0u << 8Ë

	)

95 
	#TWI_MMR_IADRSZ_1_BYTE
 (0x1u << 8Ë

	)

96 
	#TWI_MMR_IADRSZ_2_BYTE
 (0x2u << 8Ë

	)

97 
	#TWI_MMR_IADRSZ_3_BYTE
 (0x3u << 8Ë

	)

98 
	#TWI_MMR_MREAD
 (0x1u << 12Ë

	)

99 
	#TWI_MMR_DADR_Pos
 16

	)

100 
	#TWI_MMR_DADR_Msk
 (0x7fu << 
TWI_MMR_DADR_Pos
Ë

	)

101 
	#TWI_MMR_DADR
(
vÆue
Ë((
TWI_MMR_DADR_Msk
 & ((vÆueË<< 
TWI_MMR_DADR_Pos
)))

	)

103 
	#TWI_SMR_SADR_Pos
 16

	)

104 
	#TWI_SMR_SADR_Msk
 (0x7fu << 
TWI_SMR_SADR_Pos
Ë

	)

105 
	#TWI_SMR_SADR
(
vÆue
Ë((
TWI_SMR_SADR_Msk
 & ((vÆueË<< 
TWI_SMR_SADR_Pos
)))

	)

107 
	#TWI_IADR_IADR_Pos
 0

	)

108 
	#TWI_IADR_IADR_Msk
 (0xffffffu << 
TWI_IADR_IADR_Pos
Ë

	)

109 
	#TWI_IADR_IADR
(
vÆue
Ë((
TWI_IADR_IADR_Msk
 & ((vÆueË<< 
TWI_IADR_IADR_Pos
)))

	)

111 
	#TWI_CWGR_CLDIV_Pos
 0

	)

112 
	#TWI_CWGR_CLDIV_Msk
 (0xffu << 
TWI_CWGR_CLDIV_Pos
Ë

	)

113 
	#TWI_CWGR_CLDIV
(
vÆue
Ë((
TWI_CWGR_CLDIV_Msk
 & ((vÆueË<< 
TWI_CWGR_CLDIV_Pos
)))

	)

114 
	#TWI_CWGR_CHDIV_Pos
 8

	)

115 
	#TWI_CWGR_CHDIV_Msk
 (0xffu << 
TWI_CWGR_CHDIV_Pos
Ë

	)

116 
	#TWI_CWGR_CHDIV
(
vÆue
Ë((
TWI_CWGR_CHDIV_Msk
 & ((vÆueË<< 
TWI_CWGR_CHDIV_Pos
)))

	)

117 
	#TWI_CWGR_CKDIV_Pos
 16

	)

118 
	#TWI_CWGR_CKDIV_Msk
 (0x7u << 
TWI_CWGR_CKDIV_Pos
Ë

	)

119 
	#TWI_CWGR_CKDIV
(
vÆue
Ë((
TWI_CWGR_CKDIV_Msk
 & ((vÆueË<< 
TWI_CWGR_CKDIV_Pos
)))

	)

121 
	#TWI_SR_TXCOMP
 (0x1u << 0Ë

	)

122 
	#TWI_SR_RXRDY
 (0x1u << 1Ë

	)

123 
	#TWI_SR_TXRDY
 (0x1u << 2Ë

	)

124 
	#TWI_SR_SVREAD
 (0x1u << 3Ë

	)

125 
	#TWI_SR_SVACC
 (0x1u << 4Ë

	)

126 
	#TWI_SR_GACC
 (0x1u << 5Ë

	)

127 
	#TWI_SR_OVRE
 (0x1u << 6Ë

	)

128 
	#TWI_SR_NACK
 (0x1u << 8Ë

	)

129 
	#TWI_SR_ARBLST
 (0x1u << 9Ë

	)

130 
	#TWI_SR_SCLWS
 (0x1u << 10Ë

	)

131 
	#TWI_SR_EOSACC
 (0x1u << 11Ë

	)

132 
	#TWI_SR_ENDRX
 (0x1u << 12Ë

	)

133 
	#TWI_SR_ENDTX
 (0x1u << 13Ë

	)

134 
	#TWI_SR_RXBUFF
 (0x1u << 14Ë

	)

135 
	#TWI_SR_TXBUFE
 (0x1u << 15Ë

	)

137 
	#TWI_IER_TXCOMP
 (0x1u << 0Ë

	)

138 
	#TWI_IER_RXRDY
 (0x1u << 1Ë

	)

139 
	#TWI_IER_TXRDY
 (0x1u << 2Ë

	)

140 
	#TWI_IER_SVACC
 (0x1u << 4Ë

	)

141 
	#TWI_IER_GACC
 (0x1u << 5Ë

	)

142 
	#TWI_IER_OVRE
 (0x1u << 6Ë

	)

143 
	#TWI_IER_NACK
 (0x1u << 8Ë

	)

144 
	#TWI_IER_ARBLST
 (0x1u << 9Ë

	)

145 
	#TWI_IER_SCL_WS
 (0x1u << 10Ë

	)

146 
	#TWI_IER_EOSACC
 (0x1u << 11Ë

	)

147 
	#TWI_IER_ENDRX
 (0x1u << 12Ë

	)

148 
	#TWI_IER_ENDTX
 (0x1u << 13Ë

	)

149 
	#TWI_IER_RXBUFF
 (0x1u << 14Ë

	)

150 
	#TWI_IER_TXBUFE
 (0x1u << 15Ë

	)

152 
	#TWI_IDR_TXCOMP
 (0x1u << 0Ë

	)

153 
	#TWI_IDR_RXRDY
 (0x1u << 1Ë

	)

154 
	#TWI_IDR_TXRDY
 (0x1u << 2Ë

	)

155 
	#TWI_IDR_SVACC
 (0x1u << 4Ë

	)

156 
	#TWI_IDR_GACC
 (0x1u << 5Ë

	)

157 
	#TWI_IDR_OVRE
 (0x1u << 6Ë

	)

158 
	#TWI_IDR_NACK
 (0x1u << 8Ë

	)

159 
	#TWI_IDR_ARBLST
 (0x1u << 9Ë

	)

160 
	#TWI_IDR_SCL_WS
 (0x1u << 10Ë

	)

161 
	#TWI_IDR_EOSACC
 (0x1u << 11Ë

	)

162 
	#TWI_IDR_ENDRX
 (0x1u << 12Ë

	)

163 
	#TWI_IDR_ENDTX
 (0x1u << 13Ë

	)

164 
	#TWI_IDR_RXBUFF
 (0x1u << 14Ë

	)

165 
	#TWI_IDR_TXBUFE
 (0x1u << 15Ë

	)

167 
	#TWI_IMR_TXCOMP
 (0x1u << 0Ë

	)

168 
	#TWI_IMR_RXRDY
 (0x1u << 1Ë

	)

169 
	#TWI_IMR_TXRDY
 (0x1u << 2Ë

	)

170 
	#TWI_IMR_SVACC
 (0x1u << 4Ë

	)

171 
	#TWI_IMR_GACC
 (0x1u << 5Ë

	)

172 
	#TWI_IMR_OVRE
 (0x1u << 6Ë

	)

173 
	#TWI_IMR_NACK
 (0x1u << 8Ë

	)

174 
	#TWI_IMR_ARBLST
 (0x1u << 9Ë

	)

175 
	#TWI_IMR_SCL_WS
 (0x1u << 10Ë

	)

176 
	#TWI_IMR_EOSACC
 (0x1u << 11Ë

	)

177 
	#TWI_IMR_ENDRX
 (0x1u << 12Ë

	)

178 
	#TWI_IMR_ENDTX
 (0x1u << 13Ë

	)

179 
	#TWI_IMR_RXBUFF
 (0x1u << 14Ë

	)

180 
	#TWI_IMR_TXBUFE
 (0x1u << 15Ë

	)

182 
	#TWI_RHR_RXDATA_Pos
 0

	)

183 
	#TWI_RHR_RXDATA_Msk
 (0xffu << 
TWI_RHR_RXDATA_Pos
Ë

	)

185 
	#TWI_THR_TXDATA_Pos
 0

	)

186 
	#TWI_THR_TXDATA_Msk
 (0xffu << 
TWI_THR_TXDATA_Pos
Ë

	)

187 
	#TWI_THR_TXDATA
(
vÆue
Ë((
TWI_THR_TXDATA_Msk
 & ((vÆueË<< 
TWI_THR_TXDATA_Pos
)))

	)

189 
	#TWI_RPR_RXPTR_Pos
 0

	)

190 
	#TWI_RPR_RXPTR_Msk
 (0xffffffffu << 
TWI_RPR_RXPTR_Pos
Ë

	)

191 
	#TWI_RPR_RXPTR
(
vÆue
Ë((
TWI_RPR_RXPTR_Msk
 & ((vÆueË<< 
TWI_RPR_RXPTR_Pos
)))

	)

193 
	#TWI_RCR_RXCTR_Pos
 0

	)

194 
	#TWI_RCR_RXCTR_Msk
 (0xffffu << 
TWI_RCR_RXCTR_Pos
Ë

	)

195 
	#TWI_RCR_RXCTR
(
vÆue
Ë((
TWI_RCR_RXCTR_Msk
 & ((vÆueË<< 
TWI_RCR_RXCTR_Pos
)))

	)

197 
	#TWI_TPR_TXPTR_Pos
 0

	)

198 
	#TWI_TPR_TXPTR_Msk
 (0xffffffffu << 
TWI_TPR_TXPTR_Pos
Ë

	)

199 
	#TWI_TPR_TXPTR
(
vÆue
Ë((
TWI_TPR_TXPTR_Msk
 & ((vÆueË<< 
TWI_TPR_TXPTR_Pos
)))

	)

201 
	#TWI_TCR_TXCTR_Pos
 0

	)

202 
	#TWI_TCR_TXCTR_Msk
 (0xffffu << 
TWI_TCR_TXCTR_Pos
Ë

	)

203 
	#TWI_TCR_TXCTR
(
vÆue
Ë((
TWI_TCR_TXCTR_Msk
 & ((vÆueË<< 
TWI_TCR_TXCTR_Pos
)))

	)

205 
	#TWI_RNPR_RXNPTR_Pos
 0

	)

206 
	#TWI_RNPR_RXNPTR_Msk
 (0xffffffffu << 
TWI_RNPR_RXNPTR_Pos
Ë

	)

207 
	#TWI_RNPR_RXNPTR
(
vÆue
Ë((
TWI_RNPR_RXNPTR_Msk
 & ((vÆueË<< 
TWI_RNPR_RXNPTR_Pos
)))

	)

209 
	#TWI_RNCR_RXNCTR_Pos
 0

	)

210 
	#TWI_RNCR_RXNCTR_Msk
 (0xffffu << 
TWI_RNCR_RXNCTR_Pos
Ë

	)

211 
	#TWI_RNCR_RXNCTR
(
vÆue
Ë((
TWI_RNCR_RXNCTR_Msk
 & ((vÆueË<< 
TWI_RNCR_RXNCTR_Pos
)))

	)

213 
	#TWI_TNPR_TXNPTR_Pos
 0

	)

214 
	#TWI_TNPR_TXNPTR_Msk
 (0xffffffffu << 
TWI_TNPR_TXNPTR_Pos
Ë

	)

215 
	#TWI_TNPR_TXNPTR
(
vÆue
Ë((
TWI_TNPR_TXNPTR_Msk
 & ((vÆueË<< 
TWI_TNPR_TXNPTR_Pos
)))

	)

217 
	#TWI_TNCR_TXNCTR_Pos
 0

	)

218 
	#TWI_TNCR_TXNCTR_Msk
 (0xffffu << 
TWI_TNCR_TXNCTR_Pos
Ë

	)

219 
	#TWI_TNCR_TXNCTR
(
vÆue
Ë((
TWI_TNCR_TXNCTR_Msk
 & ((vÆueË<< 
TWI_TNCR_TXNCTR_Pos
)))

	)

221 
	#TWI_PTCR_RXTEN
 (0x1u << 0Ë

	)

222 
	#TWI_PTCR_RXTDIS
 (0x1u << 1Ë

	)

223 
	#TWI_PTCR_TXTEN
 (0x1u << 8Ë

	)

224 
	#TWI_PTCR_TXTDIS
 (0x1u << 9Ë

	)

226 
	#TWI_PTSR_RXTEN
 (0x1u << 0Ë

	)

227 
	#TWI_PTSR_TXTEN
 (0x1u << 8Ë

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_uart.h

45 #i‚de‡
_SAM3XA_UART_COMPONENT_


46 
	#_SAM3XA_UART_COMPONENT_


	)

54 #i‡!(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

57 
WoReg
 
	mUART_CR
;

58 
RwReg
 
	mUART_MR
;

59 
WoReg
 
	mUART_IER
;

60 
WoReg
 
	mUART_IDR
;

61 
RoReg
 
	mUART_IMR
;

62 
RoReg
 
	mUART_SR
;

63 
RoReg
 
	mUART_RHR
;

64 
WoReg
 
	mUART_THR
;

65 
RwReg
 
	mUART_BRGR
;

66 
RoReg
 
	mRe£rved1
[55];

67 
RwReg
 
	mUART_RPR
;

68 
RwReg
 
	mUART_RCR
;

69 
RwReg
 
	mUART_TPR
;

70 
RwReg
 
	mUART_TCR
;

71 
RwReg
 
	mUART_RNPR
;

72 
RwReg
 
	mUART_RNCR
;

73 
RwReg
 
	mUART_TNPR
;

74 
RwReg
 
	mUART_TNCR
;

75 
WoReg
 
	mUART_PTCR
;

76 
RoReg
 
	mUART_PTSR
;

77 } 
	tU¨t
;

80 
	#UART_CR_RSTRX
 (0x1u << 2Ë

	)

81 
	#UART_CR_RSTTX
 (0x1u << 3Ë

	)

82 
	#UART_CR_RXEN
 (0x1u << 4Ë

	)

83 
	#UART_CR_RXDIS
 (0x1u << 5Ë

	)

84 
	#UART_CR_TXEN
 (0x1u << 6Ë

	)

85 
	#UART_CR_TXDIS
 (0x1u << 7Ë

	)

86 
	#UART_CR_RSTSTA
 (0x1u << 8Ë

	)

88 
	#UART_MR_PAR_Pos
 9

	)

89 
	#UART_MR_PAR_Msk
 (0x7u << 
UART_MR_PAR_Pos
Ë

	)

90 
	#UART_MR_PAR_EVEN
 (0x0u << 9Ë

	)

91 
	#UART_MR_PAR_ODD
 (0x1u << 9Ë

	)

92 
	#UART_MR_PAR_SPACE
 (0x2u << 9Ë

	)

93 
	#UART_MR_PAR_MARK
 (0x3u << 9Ë

	)

94 
	#UART_MR_PAR_NO
 (0x4u << 9Ë

	)

95 
	#UART_MR_CHMODE_Pos
 14

	)

96 
	#UART_MR_CHMODE_Msk
 (0x3u << 
UART_MR_CHMODE_Pos
Ë

	)

97 
	#UART_MR_CHMODE_NORMAL
 (0x0u << 14Ë

	)

98 
	#UART_MR_CHMODE_AUTOMATIC
 (0x1u << 14Ë

	)

99 
	#UART_MR_CHMODE_LOCAL_LOOPBACK
 (0x2u << 14Ë

	)

100 
	#UART_MR_CHMODE_REMOTE_LOOPBACK
 (0x3u << 14Ë

	)

102 
	#UART_IER_RXRDY
 (0x1u << 0Ë

	)

103 
	#UART_IER_TXRDY
 (0x1u << 1Ë

	)

104 
	#UART_IER_ENDRX
 (0x1u << 3Ë

	)

105 
	#UART_IER_ENDTX
 (0x1u << 4Ë

	)

106 
	#UART_IER_OVRE
 (0x1u << 5Ë

	)

107 
	#UART_IER_FRAME
 (0x1u << 6Ë

	)

108 
	#UART_IER_PARE
 (0x1u << 7Ë

	)

109 
	#UART_IER_TXEMPTY
 (0x1u << 9Ë

	)

110 
	#UART_IER_TXBUFE
 (0x1u << 11Ë

	)

111 
	#UART_IER_RXBUFF
 (0x1u << 12Ë

	)

113 
	#UART_IDR_RXRDY
 (0x1u << 0Ë

	)

114 
	#UART_IDR_TXRDY
 (0x1u << 1Ë

	)

115 
	#UART_IDR_ENDRX
 (0x1u << 3Ë

	)

116 
	#UART_IDR_ENDTX
 (0x1u << 4Ë

	)

117 
	#UART_IDR_OVRE
 (0x1u << 5Ë

	)

118 
	#UART_IDR_FRAME
 (0x1u << 6Ë

	)

119 
	#UART_IDR_PARE
 (0x1u << 7Ë

	)

120 
	#UART_IDR_TXEMPTY
 (0x1u << 9Ë

	)

121 
	#UART_IDR_TXBUFE
 (0x1u << 11Ë

	)

122 
	#UART_IDR_RXBUFF
 (0x1u << 12Ë

	)

124 
	#UART_IMR_RXRDY
 (0x1u << 0Ë

	)

125 
	#UART_IMR_TXRDY
 (0x1u << 1Ë

	)

126 
	#UART_IMR_ENDRX
 (0x1u << 3Ë

	)

127 
	#UART_IMR_ENDTX
 (0x1u << 4Ë

	)

128 
	#UART_IMR_OVRE
 (0x1u << 5Ë

	)

129 
	#UART_IMR_FRAME
 (0x1u << 6Ë

	)

130 
	#UART_IMR_PARE
 (0x1u << 7Ë

	)

131 
	#UART_IMR_TXEMPTY
 (0x1u << 9Ë

	)

132 
	#UART_IMR_TXBUFE
 (0x1u << 11Ë

	)

133 
	#UART_IMR_RXBUFF
 (0x1u << 12Ë

	)

135 
	#UART_SR_RXRDY
 (0x1u << 0Ë

	)

136 
	#UART_SR_TXRDY
 (0x1u << 1Ë

	)

137 
	#UART_SR_ENDRX
 (0x1u << 3Ë

	)

138 
	#UART_SR_ENDTX
 (0x1u << 4Ë

	)

139 
	#UART_SR_OVRE
 (0x1u << 5Ë

	)

140 
	#UART_SR_FRAME
 (0x1u << 6Ë

	)

141 
	#UART_SR_PARE
 (0x1u << 7Ë

	)

142 
	#UART_SR_TXEMPTY
 (0x1u << 9Ë

	)

143 
	#UART_SR_TXBUFE
 (0x1u << 11Ë

	)

144 
	#UART_SR_RXBUFF
 (0x1u << 12Ë

	)

146 
	#UART_RHR_RXCHR_Pos
 0

	)

147 
	#UART_RHR_RXCHR_Msk
 (0xffu << 
UART_RHR_RXCHR_Pos
Ë

	)

149 
	#UART_THR_TXCHR_Pos
 0

	)

150 
	#UART_THR_TXCHR_Msk
 (0xffu << 
UART_THR_TXCHR_Pos
Ë

	)

151 
	#UART_THR_TXCHR
(
vÆue
Ë((
UART_THR_TXCHR_Msk
 & ((vÆueË<< 
UART_THR_TXCHR_Pos
)))

	)

153 
	#UART_BRGR_CD_Pos
 0

	)

154 
	#UART_BRGR_CD_Msk
 (0xffffu << 
UART_BRGR_CD_Pos
Ë

	)

155 
	#UART_BRGR_CD
(
vÆue
Ë((
UART_BRGR_CD_Msk
 & ((vÆueË<< 
UART_BRGR_CD_Pos
)))

	)

157 
	#UART_RPR_RXPTR_Pos
 0

	)

158 
	#UART_RPR_RXPTR_Msk
 (0xffffffffu << 
UART_RPR_RXPTR_Pos
Ë

	)

159 
	#UART_RPR_RXPTR
(
vÆue
Ë((
UART_RPR_RXPTR_Msk
 & ((vÆueË<< 
UART_RPR_RXPTR_Pos
)))

	)

161 
	#UART_RCR_RXCTR_Pos
 0

	)

162 
	#UART_RCR_RXCTR_Msk
 (0xffffu << 
UART_RCR_RXCTR_Pos
Ë

	)

163 
	#UART_RCR_RXCTR
(
vÆue
Ë((
UART_RCR_RXCTR_Msk
 & ((vÆueË<< 
UART_RCR_RXCTR_Pos
)))

	)

165 
	#UART_TPR_TXPTR_Pos
 0

	)

166 
	#UART_TPR_TXPTR_Msk
 (0xffffffffu << 
UART_TPR_TXPTR_Pos
Ë

	)

167 
	#UART_TPR_TXPTR
(
vÆue
Ë((
UART_TPR_TXPTR_Msk
 & ((vÆueË<< 
UART_TPR_TXPTR_Pos
)))

	)

169 
	#UART_TCR_TXCTR_Pos
 0

	)

170 
	#UART_TCR_TXCTR_Msk
 (0xffffu << 
UART_TCR_TXCTR_Pos
Ë

	)

171 
	#UART_TCR_TXCTR
(
vÆue
Ë((
UART_TCR_TXCTR_Msk
 & ((vÆueË<< 
UART_TCR_TXCTR_Pos
)))

	)

173 
	#UART_RNPR_RXNPTR_Pos
 0

	)

174 
	#UART_RNPR_RXNPTR_Msk
 (0xffffffffu << 
UART_RNPR_RXNPTR_Pos
Ë

	)

175 
	#UART_RNPR_RXNPTR
(
vÆue
Ë((
UART_RNPR_RXNPTR_Msk
 & ((vÆueË<< 
UART_RNPR_RXNPTR_Pos
)))

	)

177 
	#UART_RNCR_RXNCTR_Pos
 0

	)

178 
	#UART_RNCR_RXNCTR_Msk
 (0xffffu << 
UART_RNCR_RXNCTR_Pos
Ë

	)

179 
	#UART_RNCR_RXNCTR
(
vÆue
Ë((
UART_RNCR_RXNCTR_Msk
 & ((vÆueË<< 
UART_RNCR_RXNCTR_Pos
)))

	)

181 
	#UART_TNPR_TXNPTR_Pos
 0

	)

182 
	#UART_TNPR_TXNPTR_Msk
 (0xffffffffu << 
UART_TNPR_TXNPTR_Pos
Ë

	)

183 
	#UART_TNPR_TXNPTR
(
vÆue
Ë((
UART_TNPR_TXNPTR_Msk
 & ((vÆueË<< 
UART_TNPR_TXNPTR_Pos
)))

	)

185 
	#UART_TNCR_TXNCTR_Pos
 0

	)

186 
	#UART_TNCR_TXNCTR_Msk
 (0xffffu << 
UART_TNCR_TXNCTR_Pos
Ë

	)

187 
	#UART_TNCR_TXNCTR
(
vÆue
Ë((
UART_TNCR_TXNCTR_Msk
 & ((vÆueË<< 
UART_TNCR_TXNCTR_Pos
)))

	)

189 
	#UART_PTCR_RXTEN
 (0x1u << 0Ë

	)

190 
	#UART_PTCR_RXTDIS
 (0x1u << 1Ë

	)

191 
	#UART_PTCR_TXTEN
 (0x1u << 8Ë

	)

192 
	#UART_PTCR_TXTDIS
 (0x1u << 9Ë

	)

194 
	#UART_PTSR_RXTEN
 (0x1u << 0Ë

	)

195 
	#UART_PTSR_TXTEN
 (0x1u << 8Ë

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_uotghs.h

45 #i‚de‡
_SAM3XA_UOTGHS_COMPONENT_


46 
	#_SAM3XA_UOTGHS_COMPONENT_


	)

54 #i‡!(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

57 
RwReg
 
	mUOTGHS_DEVDMANXTDSC
;

58 
RwReg
 
	mUOTGHS_DEVDMAADDRESS
;

59 
RwReg
 
	mUOTGHS_DEVDMACONTROL
;

60 
RwReg
 
	mUOTGHS_DEVDMASTATUS
;

61 } 
	tUŸghsDevdma
;

64 
RwReg
 
	mUOTGHS_HSTDMANXTDSC
;

65 
RwReg
 
	mUOTGHS_HSTDMAADDRESS
;

66 
RwReg
 
	mUOTGHS_HSTDMACONTROL
;

67 
RwReg
 
	mUOTGHS_HSTDMASTATUS
;

68 } 
	tUŸghsH°dma
;

70 
	#UOTGHSDEVDMA_NUMBER
 7

	)

71 
	#UOTGHSHSTDMA_NUMBER
 7

	)

73 
RwReg
 
	mUOTGHS_DEVCTRL
;

74 
RoReg
 
	mUOTGHS_DEVISR
;

75 
WoReg
 
	mUOTGHS_DEVICR
;

76 
WoReg
 
	mUOTGHS_DEVIFR
;

77 
RoReg
 
	mUOTGHS_DEVIMR
;

78 
WoReg
 
	mUOTGHS_DEVIDR
;

79 
WoReg
 
	mUOTGHS_DEVIER
;

80 
RwReg
 
	mUOTGHS_DEVEPT
;

81 
RoReg
 
	mUOTGHS_DEVFNUM
;

82 
RoReg
 
	mRe£rved1
[55];

83 
RwReg
 
	mUOTGHS_DEVEPTCFG
[10];

84 
RoReg
 
	mRe£rved2
[2];

85 
RoReg
 
	mUOTGHS_DEVEPTISR
[10];

86 
RoReg
 
	mRe£rved3
[2];

87 
WoReg
 
	mUOTGHS_DEVEPTICR
[10];

88 
RoReg
 
	mRe£rved4
[2];

89 
WoReg
 
	mUOTGHS_DEVEPTIFR
[10];

90 
RoReg
 
	mRe£rved5
[2];

91 
RoReg
 
	mUOTGHS_DEVEPTIMR
[10];

92 
RoReg
 
	mRe£rved6
[2];

93 
WoReg
 
	mUOTGHS_DEVEPTIER
[10];

94 
RoReg
 
	mRe£rved7
[2];

95 
WoReg
 
	mUOTGHS_DEVEPTIDR
[10];

96 
RoReg
 
	mRe£rved8
[50];

97 
UŸghsDevdma
 
	mUOTGHS_DEVDMA
[
UOTGHSDEVDMA_NUMBER
];

98 
RoReg
 
	mRe£rved9
[32];

99 
RwReg
 
	mUOTGHS_HSTCTRL
;

100 
RoReg
 
	mUOTGHS_HSTISR
;

101 
WoReg
 
	mUOTGHS_HSTICR
;

102 
WoReg
 
	mUOTGHS_HSTIFR
;

103 
RoReg
 
	mUOTGHS_HSTIMR
;

104 
WoReg
 
	mUOTGHS_HSTIDR
;

105 
WoReg
 
	mUOTGHS_HSTIER
;

106 
RwReg
 
	mUOTGHS_HSTPIP
;

107 
RwReg
 
	mUOTGHS_HSTFNUM
;

108 
RwReg
 
	mUOTGHS_HSTADDR1
;

109 
RwReg
 
	mUOTGHS_HSTADDR2
;

110 
RwReg
 
	mUOTGHS_HSTADDR3
;

111 
RoReg
 
	mRe£rved10
[52];

112 
RwReg
 
	mUOTGHS_HSTPIPCFG
[10];

113 
RoReg
 
	mRe£rved11
[2];

114 
RoReg
 
	mUOTGHS_HSTPIPISR
[10];

115 
RoReg
 
	mRe£rved12
[2];

116 
WoReg
 
	mUOTGHS_HSTPIPICR
[10];

117 
RoReg
 
	mRe£rved13
[2];

118 
WoReg
 
	mUOTGHS_HSTPIPIFR
[10];

119 
RoReg
 
	mRe£rved14
[2];

120 
RoReg
 
	mUOTGHS_HSTPIPIMR
[10];

121 
RoReg
 
	mRe£rved15
[2];

122 
WoReg
 
	mUOTGHS_HSTPIPIER
[10];

123 
RoReg
 
	mRe£rved16
[2];

124 
WoReg
 
	mUOTGHS_HSTPIPIDR
[10];

125 
RoReg
 
	mRe£rved17
[2];

126 
RwReg
 
	mUOTGHS_HSTPIPINRQ
[10];

127 
RoReg
 
	mRe£rved18
[2];

128 
RwReg
 
	mUOTGHS_HSTPIPERR
[10];

129 
RoReg
 
	mRe£rved19
[26];

130 
UŸghsH°dma
 
	mUOTGHS_HSTDMA
[
UOTGHSHSTDMA_NUMBER
];

131 
RoReg
 
	mRe£rved20
[32];

132 
RwReg
 
	mUOTGHS_CTRL
;

133 
RoReg
 
	mUOTGHS_SR
;

134 
WoReg
 
	mUOTGHS_SCR
;

135 
WoReg
 
	mUOTGHS_SFR
;

136 
RoReg
 
	mRe£rved21
[7];

137 
RoReg
 
	mUOTGHS_FSM
;

138 } 
	tUŸghs
;

141 
	#UOTGHS_DEVCTRL_UADD_Pos
 0

	)

142 
	#UOTGHS_DEVCTRL_UADD_Msk
 (0x7fu << 
UOTGHS_DEVCTRL_UADD_Pos
Ë

	)

143 
	#UOTGHS_DEVCTRL_UADD
(
vÆue
Ë((
UOTGHS_DEVCTRL_UADD_Msk
 & ((vÆueË<< 
UOTGHS_DEVCTRL_UADD_Pos
)))

	)

144 
	#UOTGHS_DEVCTRL_ADDEN
 (0x1u << 7Ë

	)

145 
	#UOTGHS_DEVCTRL_DETACH
 (0x1u << 8Ë

	)

146 
	#UOTGHS_DEVCTRL_RMWKUP
 (0x1u << 9Ë

	)

147 
	#UOTGHS_DEVCTRL_SPDCONF_Pos
 10

	)

148 
	#UOTGHS_DEVCTRL_SPDCONF_Msk
 (0x3u << 
UOTGHS_DEVCTRL_SPDCONF_Pos
Ë

	)

149 
	#UOTGHS_DEVCTRL_SPDCONF_NORMAL
 (0x0u << 10Ë

	)

150 
	#UOTGHS_DEVCTRL_SPDCONF_LOW_POWER
 (0x1u << 10Ë

	)

151 
	#UOTGHS_DEVCTRL_SPDCONF_HIGH_SPEED
 (0x2u << 10Ë

	)

152 
	#UOTGHS_DEVCTRL_SPDCONF_FORCED_FS
 (0x3u << 10Ë

	)

153 
	#UOTGHS_DEVCTRL_LS
 (0x1u << 12Ë

	)

154 
	#UOTGHS_DEVCTRL_TSTJ
 (0x1u << 13Ë

	)

155 
	#UOTGHS_DEVCTRL_TSTK
 (0x1u << 14Ë

	)

156 
	#UOTGHS_DEVCTRL_TSTPCKT
 (0x1u << 15Ë

	)

157 
	#UOTGHS_DEVCTRL_OPMODE2
 (0x1u << 16Ë

	)

159 
	#UOTGHS_DEVISR_SUSP
 (0x1u << 0Ë

	)

160 
	#UOTGHS_DEVISR_MSOF
 (0x1u << 1Ë

	)

161 
	#UOTGHS_DEVISR_SOF
 (0x1u << 2Ë

	)

162 
	#UOTGHS_DEVISR_EORST
 (0x1u << 3Ë

	)

163 
	#UOTGHS_DEVISR_WAKEUP
 (0x1u << 4Ë

	)

164 
	#UOTGHS_DEVISR_EORSM
 (0x1u << 5Ë

	)

165 
	#UOTGHS_DEVISR_UPRSM
 (0x1u << 6Ë

	)

166 
	#UOTGHS_DEVISR_PEP_0
 (0x1u << 12Ë

	)

167 
	#UOTGHS_DEVISR_PEP_1
 (0x1u << 13Ë

	)

168 
	#UOTGHS_DEVISR_PEP_2
 (0x1u << 14Ë

	)

169 
	#UOTGHS_DEVISR_PEP_3
 (0x1u << 15Ë

	)

170 
	#UOTGHS_DEVISR_PEP_4
 (0x1u << 16Ë

	)

171 
	#UOTGHS_DEVISR_PEP_5
 (0x1u << 17Ë

	)

172 
	#UOTGHS_DEVISR_PEP_6
 (0x1u << 18Ë

	)

173 
	#UOTGHS_DEVISR_PEP_7
 (0x1u << 19Ë

	)

174 
	#UOTGHS_DEVISR_PEP_8
 (0x1u << 20Ë

	)

175 
	#UOTGHS_DEVISR_PEP_9
 (0x1u << 21Ë

	)

176 
	#UOTGHS_DEVISR_DMA_1
 (0x1u << 25Ë

	)

177 
	#UOTGHS_DEVISR_DMA_2
 (0x1u << 26Ë

	)

178 
	#UOTGHS_DEVISR_DMA_3
 (0x1u << 27Ë

	)

179 
	#UOTGHS_DEVISR_DMA_4
 (0x1u << 28Ë

	)

180 
	#UOTGHS_DEVISR_DMA_5
 (0x1u << 29Ë

	)

181 
	#UOTGHS_DEVISR_DMA_6
 (0x1u << 30Ë

	)

183 
	#UOTGHS_DEVICR_SUSPC
 (0x1u << 0Ë

	)

184 
	#UOTGHS_DEVICR_MSOFC
 (0x1u << 1Ë

	)

185 
	#UOTGHS_DEVICR_SOFC
 (0x1u << 2Ë

	)

186 
	#UOTGHS_DEVICR_EORSTC
 (0x1u << 3Ë

	)

187 
	#UOTGHS_DEVICR_WAKEUPC
 (0x1u << 4Ë

	)

188 
	#UOTGHS_DEVICR_EORSMC
 (0x1u << 5Ë

	)

189 
	#UOTGHS_DEVICR_UPRSMC
 (0x1u << 6Ë

	)

191 
	#UOTGHS_DEVIFR_SUSPS
 (0x1u << 0Ë

	)

192 
	#UOTGHS_DEVIFR_MSOFS
 (0x1u << 1Ë

	)

193 
	#UOTGHS_DEVIFR_SOFS
 (0x1u << 2Ë

	)

194 
	#UOTGHS_DEVIFR_EORSTS
 (0x1u << 3Ë

	)

195 
	#UOTGHS_DEVIFR_WAKEUPS
 (0x1u << 4Ë

	)

196 
	#UOTGHS_DEVIFR_EORSMS
 (0x1u << 5Ë

	)

197 
	#UOTGHS_DEVIFR_UPRSMS
 (0x1u << 6Ë

	)

198 
	#UOTGHS_DEVIFR_DMA_1
 (0x1u << 25Ë

	)

199 
	#UOTGHS_DEVIFR_DMA_2
 (0x1u << 26Ë

	)

200 
	#UOTGHS_DEVIFR_DMA_3
 (0x1u << 27Ë

	)

201 
	#UOTGHS_DEVIFR_DMA_4
 (0x1u << 28Ë

	)

202 
	#UOTGHS_DEVIFR_DMA_5
 (0x1u << 29Ë

	)

203 
	#UOTGHS_DEVIFR_DMA_6
 (0x1u << 30Ë

	)

205 
	#UOTGHS_DEVIMR_SUSPE
 (0x1u << 0Ë

	)

206 
	#UOTGHS_DEVIMR_MSOFE
 (0x1u << 1Ë

	)

207 
	#UOTGHS_DEVIMR_SOFE
 (0x1u << 2Ë

	)

208 
	#UOTGHS_DEVIMR_EORSTE
 (0x1u << 3Ë

	)

209 
	#UOTGHS_DEVIMR_WAKEUPE
 (0x1u << 4Ë

	)

210 
	#UOTGHS_DEVIMR_EORSME
 (0x1u << 5Ë

	)

211 
	#UOTGHS_DEVIMR_UPRSME
 (0x1u << 6Ë

	)

212 
	#UOTGHS_DEVIMR_PEP_0
 (0x1u << 12Ë

	)

213 
	#UOTGHS_DEVIMR_PEP_1
 (0x1u << 13Ë

	)

214 
	#UOTGHS_DEVIMR_PEP_2
 (0x1u << 14Ë

	)

215 
	#UOTGHS_DEVIMR_PEP_3
 (0x1u << 15Ë

	)

216 
	#UOTGHS_DEVIMR_PEP_4
 (0x1u << 16Ë

	)

217 
	#UOTGHS_DEVIMR_PEP_5
 (0x1u << 17Ë

	)

218 
	#UOTGHS_DEVIMR_PEP_6
 (0x1u << 18Ë

	)

219 
	#UOTGHS_DEVIMR_PEP_7
 (0x1u << 19Ë

	)

220 
	#UOTGHS_DEVIMR_PEP_8
 (0x1u << 20Ë

	)

221 
	#UOTGHS_DEVIMR_PEP_9
 (0x1u << 21Ë

	)

222 
	#UOTGHS_DEVIMR_DMA_1
 (0x1u << 25Ë

	)

223 
	#UOTGHS_DEVIMR_DMA_2
 (0x1u << 26Ë

	)

224 
	#UOTGHS_DEVIMR_DMA_3
 (0x1u << 27Ë

	)

225 
	#UOTGHS_DEVIMR_DMA_4
 (0x1u << 28Ë

	)

226 
	#UOTGHS_DEVIMR_DMA_5
 (0x1u << 29Ë

	)

227 
	#UOTGHS_DEVIMR_DMA_6
 (0x1u << 30Ë

	)

229 
	#UOTGHS_DEVIDR_SUSPEC
 (0x1u << 0Ë

	)

230 
	#UOTGHS_DEVIDR_MSOFEC
 (0x1u << 1Ë

	)

231 
	#UOTGHS_DEVIDR_SOFEC
 (0x1u << 2Ë

	)

232 
	#UOTGHS_DEVIDR_EORSTEC
 (0x1u << 3Ë

	)

233 
	#UOTGHS_DEVIDR_WAKEUPEC
 (0x1u << 4Ë

	)

234 
	#UOTGHS_DEVIDR_EORSMEC
 (0x1u << 5Ë

	)

235 
	#UOTGHS_DEVIDR_UPRSMEC
 (0x1u << 6Ë

	)

236 
	#UOTGHS_DEVIDR_PEP_0
 (0x1u << 12Ë

	)

237 
	#UOTGHS_DEVIDR_PEP_1
 (0x1u << 13Ë

	)

238 
	#UOTGHS_DEVIDR_PEP_2
 (0x1u << 14Ë

	)

239 
	#UOTGHS_DEVIDR_PEP_3
 (0x1u << 15Ë

	)

240 
	#UOTGHS_DEVIDR_PEP_4
 (0x1u << 16Ë

	)

241 
	#UOTGHS_DEVIDR_PEP_5
 (0x1u << 17Ë

	)

242 
	#UOTGHS_DEVIDR_PEP_6
 (0x1u << 18Ë

	)

243 
	#UOTGHS_DEVIDR_PEP_7
 (0x1u << 19Ë

	)

244 
	#UOTGHS_DEVIDR_PEP_8
 (0x1u << 20Ë

	)

245 
	#UOTGHS_DEVIDR_PEP_9
 (0x1u << 21Ë

	)

246 
	#UOTGHS_DEVIDR_DMA_1
 (0x1u << 25Ë

	)

247 
	#UOTGHS_DEVIDR_DMA_2
 (0x1u << 26Ë

	)

248 
	#UOTGHS_DEVIDR_DMA_3
 (0x1u << 27Ë

	)

249 
	#UOTGHS_DEVIDR_DMA_4
 (0x1u << 28Ë

	)

250 
	#UOTGHS_DEVIDR_DMA_5
 (0x1u << 29Ë

	)

251 
	#UOTGHS_DEVIDR_DMA_6
 (0x1u << 30Ë

	)

253 
	#UOTGHS_DEVIER_SUSPES
 (0x1u << 0Ë

	)

254 
	#UOTGHS_DEVIER_MSOFES
 (0x1u << 1Ë

	)

255 
	#UOTGHS_DEVIER_SOFES
 (0x1u << 2Ë

	)

256 
	#UOTGHS_DEVIER_EORSTES
 (0x1u << 3Ë

	)

257 
	#UOTGHS_DEVIER_WAKEUPES
 (0x1u << 4Ë

	)

258 
	#UOTGHS_DEVIER_EORSMES
 (0x1u << 5Ë

	)

259 
	#UOTGHS_DEVIER_UPRSMES
 (0x1u << 6Ë

	)

260 
	#UOTGHS_DEVIER_PEP_0
 (0x1u << 12Ë

	)

261 
	#UOTGHS_DEVIER_PEP_1
 (0x1u << 13Ë

	)

262 
	#UOTGHS_DEVIER_PEP_2
 (0x1u << 14Ë

	)

263 
	#UOTGHS_DEVIER_PEP_3
 (0x1u << 15Ë

	)

264 
	#UOTGHS_DEVIER_PEP_4
 (0x1u << 16Ë

	)

265 
	#UOTGHS_DEVIER_PEP_5
 (0x1u << 17Ë

	)

266 
	#UOTGHS_DEVIER_PEP_6
 (0x1u << 18Ë

	)

267 
	#UOTGHS_DEVIER_PEP_7
 (0x1u << 19Ë

	)

268 
	#UOTGHS_DEVIER_PEP_8
 (0x1u << 20Ë

	)

269 
	#UOTGHS_DEVIER_PEP_9
 (0x1u << 21Ë

	)

270 
	#UOTGHS_DEVIER_DMA_1
 (0x1u << 25Ë

	)

271 
	#UOTGHS_DEVIER_DMA_2
 (0x1u << 26Ë

	)

272 
	#UOTGHS_DEVIER_DMA_3
 (0x1u << 27Ë

	)

273 
	#UOTGHS_DEVIER_DMA_4
 (0x1u << 28Ë

	)

274 
	#UOTGHS_DEVIER_DMA_5
 (0x1u << 29Ë

	)

275 
	#UOTGHS_DEVIER_DMA_6
 (0x1u << 30Ë

	)

277 
	#UOTGHS_DEVEPT_EPEN0
 (0x1u << 0Ë

	)

278 
	#UOTGHS_DEVEPT_EPEN1
 (0x1u << 1Ë

	)

279 
	#UOTGHS_DEVEPT_EPEN2
 (0x1u << 2Ë

	)

280 
	#UOTGHS_DEVEPT_EPEN3
 (0x1u << 3Ë

	)

281 
	#UOTGHS_DEVEPT_EPEN4
 (0x1u << 4Ë

	)

282 
	#UOTGHS_DEVEPT_EPEN5
 (0x1u << 5Ë

	)

283 
	#UOTGHS_DEVEPT_EPEN6
 (0x1u << 6Ë

	)

284 
	#UOTGHS_DEVEPT_EPEN7
 (0x1u << 7Ë

	)

285 
	#UOTGHS_DEVEPT_EPEN8
 (0x1u << 8Ë

	)

286 
	#UOTGHS_DEVEPT_EPRST0
 (0x1u << 16Ë

	)

287 
	#UOTGHS_DEVEPT_EPRST1
 (0x1u << 17Ë

	)

288 
	#UOTGHS_DEVEPT_EPRST2
 (0x1u << 18Ë

	)

289 
	#UOTGHS_DEVEPT_EPRST3
 (0x1u << 19Ë

	)

290 
	#UOTGHS_DEVEPT_EPRST4
 (0x1u << 20Ë

	)

291 
	#UOTGHS_DEVEPT_EPRST5
 (0x1u << 21Ë

	)

292 
	#UOTGHS_DEVEPT_EPRST6
 (0x1u << 22Ë

	)

293 
	#UOTGHS_DEVEPT_EPRST7
 (0x1u << 23Ë

	)

294 
	#UOTGHS_DEVEPT_EPRST8
 (0x1u << 24Ë

	)

296 
	#UOTGHS_DEVFNUM_MFNUM_Pos
 0

	)

297 
	#UOTGHS_DEVFNUM_MFNUM_Msk
 (0x7u << 
UOTGHS_DEVFNUM_MFNUM_Pos
Ë

	)

298 
	#UOTGHS_DEVFNUM_FNUM_Pos
 3

	)

299 
	#UOTGHS_DEVFNUM_FNUM_Msk
 (0x7ffu << 
UOTGHS_DEVFNUM_FNUM_Pos
Ë

	)

300 
	#UOTGHS_DEVFNUM_FNCERR
 (0x1u << 15Ë

	)

302 
	#UOTGHS_DEVEPTCFG_ALLOC
 (0x1u << 1Ë

	)

303 
	#UOTGHS_DEVEPTCFG_EPBK_Pos
 2

	)

304 
	#UOTGHS_DEVEPTCFG_EPBK_Msk
 (0x3u << 
UOTGHS_DEVEPTCFG_EPBK_Pos
Ë

	)

305 
	#UOTGHS_DEVEPTCFG_EPBK_1_BANK
 (0x0u << 2Ë

	)

306 
	#UOTGHS_DEVEPTCFG_EPBK_2_BANK
 (0x1u << 2Ë

	)

307 
	#UOTGHS_DEVEPTCFG_EPBK_3_BANK
 (0x2u << 2Ë

	)

308 
	#UOTGHS_DEVEPTCFG_EPSIZE_Pos
 4

	)

309 
	#UOTGHS_DEVEPTCFG_EPSIZE_Msk
 (0x7u << 
UOTGHS_DEVEPTCFG_EPSIZE_Pos
Ë

	)

310 
	#UOTGHS_DEVEPTCFG_EPSIZE_8_BYTE
 (0x0u << 4Ë

	)

311 
	#UOTGHS_DEVEPTCFG_EPSIZE_16_BYTE
 (0x1u << 4Ë

	)

312 
	#UOTGHS_DEVEPTCFG_EPSIZE_32_BYTE
 (0x2u << 4Ë

	)

313 
	#UOTGHS_DEVEPTCFG_EPSIZE_64_BYTE
 (0x3u << 4Ë

	)

314 
	#UOTGHS_DEVEPTCFG_EPSIZE_128_BYTE
 (0x4u << 4Ë

	)

315 
	#UOTGHS_DEVEPTCFG_EPSIZE_256_BYTE
 (0x5u << 4Ë

	)

316 
	#UOTGHS_DEVEPTCFG_EPSIZE_512_BYTE
 (0x6u << 4Ë

	)

317 
	#UOTGHS_DEVEPTCFG_EPSIZE_1024_BYTE
 (0x7u << 4Ë

	)

318 
	#UOTGHS_DEVEPTCFG_EPDIR
 (0x1u << 8Ë

	)

319 
	#UOTGHS_DEVEPTCFG_EPDIR_OUT
 (0x0u << 8Ë

	)

320 
	#UOTGHS_DEVEPTCFG_EPDIR_IN
 (0x1u << 8Ë

	)

321 
	#UOTGHS_DEVEPTCFG_AUTOSW
 (0x1u << 9Ë

	)

322 
	#UOTGHS_DEVEPTCFG_EPTYPE_Pos
 11

	)

323 
	#UOTGHS_DEVEPTCFG_EPTYPE_Msk
 (0x3u << 
UOTGHS_DEVEPTCFG_EPTYPE_Pos
Ë

	)

324 
	#UOTGHS_DEVEPTCFG_EPTYPE_CTRL
 (0x0u << 11Ë

	)

325 
	#UOTGHS_DEVEPTCFG_EPTYPE_ISO
 (0x1u << 11Ë

	)

326 
	#UOTGHS_DEVEPTCFG_EPTYPE_BLK
 (0x2u << 11Ë

	)

327 
	#UOTGHS_DEVEPTCFG_EPTYPE_INTRPT
 (0x3u << 11Ë

	)

328 
	#UOTGHS_DEVEPTCFG_NBTRANS_Pos
 13

	)

329 
	#UOTGHS_DEVEPTCFG_NBTRANS_Msk
 (0x3u << 
UOTGHS_DEVEPTCFG_NBTRANS_Pos
Ë

	)

330 
	#UOTGHS_DEVEPTCFG_NBTRANS_0_TRANS
 (0x0u << 13Ë

	)

331 
	#UOTGHS_DEVEPTCFG_NBTRANS_1_TRANS
 (0x1u << 13Ë

	)

332 
	#UOTGHS_DEVEPTCFG_NBTRANS_2_TRANS
 (0x2u << 13Ë

	)

333 
	#UOTGHS_DEVEPTCFG_NBTRANS_3_TRANS
 (0x3u << 13Ë

	)

335 
	#UOTGHS_DEVEPTISR_TXINI
 (0x1u << 0Ë

	)

336 
	#UOTGHS_DEVEPTISR_RXOUTI
 (0x1u << 1Ë

	)

337 
	#UOTGHS_DEVEPTISR_RXSTPI
 (0x1u << 2Ë

	)

338 
	#UOTGHS_DEVEPTISR_UNDERFI
 (0x1u << 2Ë

	)

339 
	#UOTGHS_DEVEPTISR_NAKOUTI
 (0x1u << 3Ë

	)

340 
	#UOTGHS_DEVEPTISR_HBISOINERRI
 (0x1u << 3Ë

	)

341 
	#UOTGHS_DEVEPTISR_NAKINI
 (0x1u << 4Ë

	)

342 
	#UOTGHS_DEVEPTISR_HBISOFLUSHI
 (0x1u << 4Ë

	)

343 
	#UOTGHS_DEVEPTISR_OVERFI
 (0x1u << 5Ë

	)

344 
	#UOTGHS_DEVEPTISR_STALLEDI
 (0x1u << 6Ë

	)

345 
	#UOTGHS_DEVEPTISR_CRCERRI
 (0x1u << 6Ë

	)

346 
	#UOTGHS_DEVEPTISR_SHORTPACKET
 (0x1u << 7Ë

	)

347 
	#UOTGHS_DEVEPTISR_DTSEQ_Pos
 8

	)

348 
	#UOTGHS_DEVEPTISR_DTSEQ_Msk
 (0x3u << 
UOTGHS_DEVEPTISR_DTSEQ_Pos
Ë

	)

349 
	#UOTGHS_DEVEPTISR_DTSEQ_DATA0
 (0x0u << 8Ë

	)

350 
	#UOTGHS_DEVEPTISR_DTSEQ_DATA1
 (0x1u << 8Ë

	)

351 
	#UOTGHS_DEVEPTISR_DTSEQ_DATA2
 (0x2u << 8Ë

	)

352 
	#UOTGHS_DEVEPTISR_DTSEQ_MDATA
 (0x3u << 8Ë

	)

353 
	#UOTGHS_DEVEPTISR_ERRORTRANS
 (0x1u << 10Ë

	)

354 
	#UOTGHS_DEVEPTISR_NBUSYBK_Pos
 12

	)

355 
	#UOTGHS_DEVEPTISR_NBUSYBK_Msk
 (0x3u << 
UOTGHS_DEVEPTISR_NBUSYBK_Pos
Ë

	)

356 
	#UOTGHS_DEVEPTISR_NBUSYBK_0_BUSY
 (0x0u << 12Ë

	)

357 
	#UOTGHS_DEVEPTISR_NBUSYBK_1_BUSY
 (0x1u << 12Ë

	)

358 
	#UOTGHS_DEVEPTISR_NBUSYBK_2_BUSY
 (0x2u << 12Ë

	)

359 
	#UOTGHS_DEVEPTISR_NBUSYBK_3_BUSY
 (0x3u << 12Ë

	)

360 
	#UOTGHS_DEVEPTISR_CURRBK_Pos
 14

	)

361 
	#UOTGHS_DEVEPTISR_CURRBK_Msk
 (0x3u << 
UOTGHS_DEVEPTISR_CURRBK_Pos
Ë

	)

362 
	#UOTGHS_DEVEPTISR_CURRBK_BANK0
 (0x0u << 14Ë

	)

363 
	#UOTGHS_DEVEPTISR_CURRBK_BANK1
 (0x1u << 14Ë

	)

364 
	#UOTGHS_DEVEPTISR_CURRBK_BANK2
 (0x2u << 14Ë

	)

365 
	#UOTGHS_DEVEPTISR_RWALL
 (0x1u << 16Ë

	)

366 
	#UOTGHS_DEVEPTISR_CTRLDIR
 (0x1u << 17Ë

	)

367 
	#UOTGHS_DEVEPTISR_CFGOK
 (0x1u << 18Ë

	)

368 
	#UOTGHS_DEVEPTISR_BYCT_Pos
 20

	)

369 
	#UOTGHS_DEVEPTISR_BYCT_Msk
 (0x7ffu << 
UOTGHS_DEVEPTISR_BYCT_Pos
Ë

	)

371 
	#UOTGHS_DEVEPTICR_TXINIC
 (0x1u << 0Ë

	)

372 
	#UOTGHS_DEVEPTICR_RXOUTIC
 (0x1u << 1Ë

	)

373 
	#UOTGHS_DEVEPTICR_RXSTPIC
 (0x1u << 2Ë

	)

374 
	#UOTGHS_DEVEPTICR_UNDERFIC
 (0x1u << 2Ë

	)

375 
	#UOTGHS_DEVEPTICR_NAKOUTIC
 (0x1u << 3Ë

	)

376 
	#UOTGHS_DEVEPTICR_HBISOINERRIC
 (0x1u << 3Ë

	)

377 
	#UOTGHS_DEVEPTICR_NAKINIC
 (0x1u << 4Ë

	)

378 
	#UOTGHS_DEVEPTICR_HBISOFLUSHIC
 (0x1u << 4Ë

	)

379 
	#UOTGHS_DEVEPTICR_OVERFIC
 (0x1u << 5Ë

	)

380 
	#UOTGHS_DEVEPTICR_STALLEDIC
 (0x1u << 6Ë

	)

381 
	#UOTGHS_DEVEPTICR_CRCERRIC
 (0x1u << 6Ë

	)

382 
	#UOTGHS_DEVEPTICR_SHORTPACKETC
 (0x1u << 7Ë

	)

384 
	#UOTGHS_DEVEPTIFR_TXINIS
 (0x1u << 0Ë

	)

385 
	#UOTGHS_DEVEPTIFR_RXOUTIS
 (0x1u << 1Ë

	)

386 
	#UOTGHS_DEVEPTIFR_RXSTPIS
 (0x1u << 2Ë

	)

387 
	#UOTGHS_DEVEPTIFR_UNDERFIS
 (0x1u << 2Ë

	)

388 
	#UOTGHS_DEVEPTIFR_NAKOUTIS
 (0x1u << 3Ë

	)

389 
	#UOTGHS_DEVEPTIFR_HBISOINERRIS
 (0x1u << 3Ë

	)

390 
	#UOTGHS_DEVEPTIFR_NAKINIS
 (0x1u << 4Ë

	)

391 
	#UOTGHS_DEVEPTIFR_HBISOFLUSHIS
 (0x1u << 4Ë

	)

392 
	#UOTGHS_DEVEPTIFR_OVERFIS
 (0x1u << 5Ë

	)

393 
	#UOTGHS_DEVEPTIFR_STALLEDIS
 (0x1u << 6Ë

	)

394 
	#UOTGHS_DEVEPTIFR_CRCERRIS
 (0x1u << 6Ë

	)

395 
	#UOTGHS_DEVEPTIFR_SHORTPACKETS
 (0x1u << 7Ë

	)

396 
	#UOTGHS_DEVEPTIFR_NBUSYBKS
 (0x1u << 12Ë

	)

398 
	#UOTGHS_DEVEPTIMR_TXINE
 (0x1u << 0Ë

	)

399 
	#UOTGHS_DEVEPTIMR_RXOUTE
 (0x1u << 1Ë

	)

400 
	#UOTGHS_DEVEPTIMR_RXSTPE
 (0x1u << 2Ë

	)

401 
	#UOTGHS_DEVEPTIMR_UNDERFE
 (0x1u << 2Ë

	)

402 
	#UOTGHS_DEVEPTIMR_NAKOUTE
 (0x1u << 3Ë

	)

403 
	#UOTGHS_DEVEPTIMR_HBISOINERRE
 (0x1u << 3Ë

	)

404 
	#UOTGHS_DEVEPTIMR_NAKINE
 (0x1u << 4Ë

	)

405 
	#UOTGHS_DEVEPTIMR_HBISOFLUSHE
 (0x1u << 4Ë

	)

406 
	#UOTGHS_DEVEPTIMR_OVERFE
 (0x1u << 5Ë

	)

407 
	#UOTGHS_DEVEPTIMR_STALLEDE
 (0x1u << 6Ë

	)

408 
	#UOTGHS_DEVEPTIMR_CRCERRE
 (0x1u << 6Ë

	)

409 
	#UOTGHS_DEVEPTIMR_SHORTPACKETE
 (0x1u << 7Ë

	)

410 
	#UOTGHS_DEVEPTIMR_MDATAE
 (0x1u << 8Ë

	)

411 
	#UOTGHS_DEVEPTIMR_DATAXE
 (0x1u << 9Ë

	)

412 
	#UOTGHS_DEVEPTIMR_ERRORTRANSE
 (0x1u << 10Ë

	)

413 
	#UOTGHS_DEVEPTIMR_NBUSYBKE
 (0x1u << 12Ë

	)

414 
	#UOTGHS_DEVEPTIMR_KILLBK
 (0x1u << 13Ë

	)

415 
	#UOTGHS_DEVEPTIMR_FIFOCON
 (0x1u << 14Ë

	)

416 
	#UOTGHS_DEVEPTIMR_EPDISHDMA
 (0x1u << 16Ë

	)

417 
	#UOTGHS_DEVEPTIMR_NYETDIS
 (0x1u << 17Ë

	)

418 
	#UOTGHS_DEVEPTIMR_RSTDT
 (0x1u << 18Ë

	)

419 
	#UOTGHS_DEVEPTIMR_STALLRQ
 (0x1u << 19Ë

	)

421 
	#UOTGHS_DEVEPTIER_TXINES
 (0x1u << 0Ë

	)

422 
	#UOTGHS_DEVEPTIER_RXOUTES
 (0x1u << 1Ë

	)

423 
	#UOTGHS_DEVEPTIER_RXSTPES
 (0x1u << 2Ë

	)

424 
	#UOTGHS_DEVEPTIER_UNDERFES
 (0x1u << 2Ë

	)

425 
	#UOTGHS_DEVEPTIER_NAKOUTES
 (0x1u << 3Ë

	)

426 
	#UOTGHS_DEVEPTIER_HBISOINERRES
 (0x1u << 3Ë

	)

427 
	#UOTGHS_DEVEPTIER_NAKINES
 (0x1u << 4Ë

	)

428 
	#UOTGHS_DEVEPTIER_HBISOFLUSHES
 (0x1u << 4Ë

	)

429 
	#UOTGHS_DEVEPTIER_OVERFES
 (0x1u << 5Ë

	)

430 
	#UOTGHS_DEVEPTIER_STALLEDES
 (0x1u << 6Ë

	)

431 
	#UOTGHS_DEVEPTIER_CRCERRES
 (0x1u << 6Ë

	)

432 
	#UOTGHS_DEVEPTIER_SHORTPACKETES
 (0x1u << 7Ë

	)

433 
	#UOTGHS_DEVEPTIER_MDATAES
 (0x1u << 8Ë

	)

434 
	#UOTGHS_DEVEPTIER_DATAXES
 (0x1u << 9Ë

	)

435 
	#UOTGHS_DEVEPTIER_ERRORTRANSES
 (0x1u << 10Ë

	)

436 
	#UOTGHS_DEVEPTIER_NBUSYBKES
 (0x1u << 12Ë

	)

437 
	#UOTGHS_DEVEPTIER_KILLBKS
 (0x1u << 13Ë

	)

438 
	#UOTGHS_DEVEPTIER_EPDISHDMAS
 (0x1u << 16Ë

	)

439 
	#UOTGHS_DEVEPTIER_NYETDISS
 (0x1u << 17Ë

	)

440 
	#UOTGHS_DEVEPTIER_RSTDTS
 (0x1u << 18Ë

	)

441 
	#UOTGHS_DEVEPTIER_STALLRQS
 (0x1u << 19Ë

	)

443 
	#UOTGHS_DEVEPTIDR_TXINEC
 (0x1u << 0Ë

	)

444 
	#UOTGHS_DEVEPTIDR_RXOUTEC
 (0x1u << 1Ë

	)

445 
	#UOTGHS_DEVEPTIDR_RXSTPEC
 (0x1u << 2Ë

	)

446 
	#UOTGHS_DEVEPTIDR_UNDERFEC
 (0x1u << 2Ë

	)

447 
	#UOTGHS_DEVEPTIDR_NAKOUTEC
 (0x1u << 3Ë

	)

448 
	#UOTGHS_DEVEPTIDR_HBISOINERREC
 (0x1u << 3Ë

	)

449 
	#UOTGHS_DEVEPTIDR_NAKINEC
 (0x1u << 4Ë

	)

450 
	#UOTGHS_DEVEPTIDR_HBISOFLUSHEC
 (0x1u << 4Ë

	)

451 
	#UOTGHS_DEVEPTIDR_OVERFEC
 (0x1u << 5Ë

	)

452 
	#UOTGHS_DEVEPTIDR_STALLEDEC
 (0x1u << 6Ë

	)

453 
	#UOTGHS_DEVEPTIDR_CRCERREC
 (0x1u << 6Ë

	)

454 
	#UOTGHS_DEVEPTIDR_SHORTPACKETEC
 (0x1u << 7Ë

	)

455 
	#UOTGHS_DEVEPTIDR_MDATEC
 (0x1u << 8Ë

	)

456 
	#UOTGHS_DEVEPTIDR_DATAXEC
 (0x1u << 9Ë

	)

457 
	#UOTGHS_DEVEPTIDR_ERRORTRANSEC
 (0x1u << 10Ë

	)

458 
	#UOTGHS_DEVEPTIDR_NBUSYBKEC
 (0x1u << 12Ë

	)

459 
	#UOTGHS_DEVEPTIDR_FIFOCONC
 (0x1u << 14Ë

	)

460 
	#UOTGHS_DEVEPTIDR_EPDISHDMAC
 (0x1u << 16Ë

	)

461 
	#UOTGHS_DEVEPTIDR_NYETDISC
 (0x1u << 17Ë

	)

462 
	#UOTGHS_DEVEPTIDR_STALLRQC
 (0x1u << 19Ë

	)

464 
	#UOTGHS_DEVDMANXTDSC_NXT_DSC_ADD_Pos
 0

	)

465 
	#UOTGHS_DEVDMANXTDSC_NXT_DSC_ADD_Msk
 (0xffffffffu << 
UOTGHS_DEVDMANXTDSC_NXT_DSC_ADD_Pos
Ë

	)

466 
	#UOTGHS_DEVDMANXTDSC_NXT_DSC_ADD
(
vÆue
Ë((
UOTGHS_DEVDMANXTDSC_NXT_DSC_ADD_Msk
 & ((vÆueË<< 
UOTGHS_DEVDMANXTDSC_NXT_DSC_ADD_Pos
)))

	)

468 
	#UOTGHS_DEVDMAADDRESS_BUFF_ADD_Pos
 0

	)

469 
	#UOTGHS_DEVDMAADDRESS_BUFF_ADD_Msk
 (0xffffffffu << 
UOTGHS_DEVDMAADDRESS_BUFF_ADD_Pos
Ë

	)

470 
	#UOTGHS_DEVDMAADDRESS_BUFF_ADD
(
vÆue
Ë((
UOTGHS_DEVDMAADDRESS_BUFF_ADD_Msk
 & ((vÆueË<< 
UOTGHS_DEVDMAADDRESS_BUFF_ADD_Pos
)))

	)

472 
	#UOTGHS_DEVDMACONTROL_CHANN_ENB
 (0x1u << 0Ë

	)

473 
	#UOTGHS_DEVDMACONTROL_LDNXT_DSC
 (0x1u << 1Ë

	)

474 
	#UOTGHS_DEVDMACONTROL_END_TR_EN
 (0x1u << 2Ë

	)

475 
	#UOTGHS_DEVDMACONTROL_END_B_EN
 (0x1u << 3Ë

	)

476 
	#UOTGHS_DEVDMACONTROL_END_TR_IT
 (0x1u << 4Ë

	)

477 
	#UOTGHS_DEVDMACONTROL_END_BUFFIT
 (0x1u << 5Ë

	)

478 
	#UOTGHS_DEVDMACONTROL_DESC_LD_IT
 (0x1u << 6Ë

	)

479 
	#UOTGHS_DEVDMACONTROL_BURST_LCK
 (0x1u << 7Ë

	)

480 
	#UOTGHS_DEVDMACONTROL_BUFF_LENGTH_Pos
 16

	)

481 
	#UOTGHS_DEVDMACONTROL_BUFF_LENGTH_Msk
 (0xffffu << 
UOTGHS_DEVDMACONTROL_BUFF_LENGTH_Pos
Ë

	)

482 
	#UOTGHS_DEVDMACONTROL_BUFF_LENGTH
(
vÆue
Ë((
UOTGHS_DEVDMACONTROL_BUFF_LENGTH_Msk
 & ((vÆueË<< 
UOTGHS_DEVDMACONTROL_BUFF_LENGTH_Pos
)))

	)

484 
	#UOTGHS_DEVDMASTATUS_CHANN_ENB
 (0x1u << 0Ë

	)

485 
	#UOTGHS_DEVDMASTATUS_CHANN_ACT
 (0x1u << 1Ë

	)

486 
	#UOTGHS_DEVDMASTATUS_END_TR_ST
 (0x1u << 4Ë

	)

487 
	#UOTGHS_DEVDMASTATUS_END_BF_ST
 (0x1u << 5Ë

	)

488 
	#UOTGHS_DEVDMASTATUS_DESC_LDST
 (0x1u << 6Ë

	)

489 
	#UOTGHS_DEVDMASTATUS_BUFF_COUNT_Pos
 16

	)

490 
	#UOTGHS_DEVDMASTATUS_BUFF_COUNT_Msk
 (0xffffu << 
UOTGHS_DEVDMASTATUS_BUFF_COUNT_Pos
Ë

	)

491 
	#UOTGHS_DEVDMASTATUS_BUFF_COUNT
(
vÆue
Ë((
UOTGHS_DEVDMASTATUS_BUFF_COUNT_Msk
 & ((vÆueË<< 
UOTGHS_DEVDMASTATUS_BUFF_COUNT_Pos
)))

	)

493 
	#UOTGHS_HSTCTRL_SOFE
 (0x1u << 8Ë

	)

494 
	#UOTGHS_HSTCTRL_RESET
 (0x1u << 9Ë

	)

495 
	#UOTGHS_HSTCTRL_RESUME
 (0x1u << 10Ë

	)

496 
	#UOTGHS_HSTCTRL_SPDCONF_Pos
 12

	)

497 
	#UOTGHS_HSTCTRL_SPDCONF_Msk
 (0x3u << 
UOTGHS_HSTCTRL_SPDCONF_Pos
Ë

	)

498 
	#UOTGHS_HSTCTRL_SPDCONF_NORMAL
 (0x0u << 12Ë

	)

499 
	#UOTGHS_HSTCTRL_SPDCONF_LOW_POWER
 (0x1u << 12Ë

	)

500 
	#UOTGHS_HSTCTRL_SPDCONF_HIGH_SPEED
 (0x2u << 12Ë

	)

501 
	#UOTGHS_HSTCTRL_SPDCONF_FORCED_FS
 (0x3u << 12Ë

	)

503 
	#UOTGHS_HSTISR_DCONNI
 (0x1u << 0Ë

	)

504 
	#UOTGHS_HSTISR_DDISCI
 (0x1u << 1Ë

	)

505 
	#UOTGHS_HSTISR_RSTI
 (0x1u << 2Ë

	)

506 
	#UOTGHS_HSTISR_RSMEDI
 (0x1u << 3Ë

	)

507 
	#UOTGHS_HSTISR_RXRSMI
 (0x1u << 4Ë

	)

508 
	#UOTGHS_HSTISR_HSOFI
 (0x1u << 5Ë

	)

509 
	#UOTGHS_HSTISR_HWUPI
 (0x1u << 6Ë

	)

510 
	#UOTGHS_HSTISR_PEP_0
 (0x1u << 8Ë

	)

511 
	#UOTGHS_HSTISR_PEP_1
 (0x1u << 9Ë

	)

512 
	#UOTGHS_HSTISR_PEP_2
 (0x1u << 10Ë

	)

513 
	#UOTGHS_HSTISR_PEP_3
 (0x1u << 11Ë

	)

514 
	#UOTGHS_HSTISR_PEP_4
 (0x1u << 12Ë

	)

515 
	#UOTGHS_HSTISR_PEP_5
 (0x1u << 13Ë

	)

516 
	#UOTGHS_HSTISR_PEP_6
 (0x1u << 14Ë

	)

517 
	#UOTGHS_HSTISR_PEP_7
 (0x1u << 15Ë

	)

518 
	#UOTGHS_HSTISR_PEP_8
 (0x1u << 16Ë

	)

519 
	#UOTGHS_HSTISR_PEP_9
 (0x1u << 17Ë

	)

520 
	#UOTGHS_HSTISR_DMA_1
 (0x1u << 25Ë

	)

521 
	#UOTGHS_HSTISR_DMA_2
 (0x1u << 26Ë

	)

522 
	#UOTGHS_HSTISR_DMA_3
 (0x1u << 27Ë

	)

523 
	#UOTGHS_HSTISR_DMA_4
 (0x1u << 28Ë

	)

524 
	#UOTGHS_HSTISR_DMA_5
 (0x1u << 29Ë

	)

525 
	#UOTGHS_HSTISR_DMA_6
 (0x1u << 30Ë

	)

527 
	#UOTGHS_HSTICR_DCONNIC
 (0x1u << 0Ë

	)

528 
	#UOTGHS_HSTICR_DDISCIC
 (0x1u << 1Ë

	)

529 
	#UOTGHS_HSTICR_RSTIC
 (0x1u << 2Ë

	)

530 
	#UOTGHS_HSTICR_RSMEDIC
 (0x1u << 3Ë

	)

531 
	#UOTGHS_HSTICR_RXRSMIC
 (0x1u << 4Ë

	)

532 
	#UOTGHS_HSTICR_HSOFIC
 (0x1u << 5Ë

	)

533 
	#UOTGHS_HSTICR_HWUPIC
 (0x1u << 6Ë

	)

535 
	#UOTGHS_HSTIFR_DCONNIS
 (0x1u << 0Ë

	)

536 
	#UOTGHS_HSTIFR_DDISCIS
 (0x1u << 1Ë

	)

537 
	#UOTGHS_HSTIFR_RSTIS
 (0x1u << 2Ë

	)

538 
	#UOTGHS_HSTIFR_RSMEDIS
 (0x1u << 3Ë

	)

539 
	#UOTGHS_HSTIFR_RXRSMIS
 (0x1u << 4Ë

	)

540 
	#UOTGHS_HSTIFR_HSOFIS
 (0x1u << 5Ë

	)

541 
	#UOTGHS_HSTIFR_HWUPIS
 (0x1u << 6Ë

	)

542 
	#UOTGHS_HSTIFR_DMA_1
 (0x1u << 25Ë

	)

543 
	#UOTGHS_HSTIFR_DMA_2
 (0x1u << 26Ë

	)

544 
	#UOTGHS_HSTIFR_DMA_3
 (0x1u << 27Ë

	)

545 
	#UOTGHS_HSTIFR_DMA_4
 (0x1u << 28Ë

	)

546 
	#UOTGHS_HSTIFR_DMA_5
 (0x1u << 29Ë

	)

547 
	#UOTGHS_HSTIFR_DMA_6
 (0x1u << 30Ë

	)

549 
	#UOTGHS_HSTIMR_DCONNIE
 (0x1u << 0Ë

	)

550 
	#UOTGHS_HSTIMR_DDISCIE
 (0x1u << 1Ë

	)

551 
	#UOTGHS_HSTIMR_RSTIE
 (0x1u << 2Ë

	)

552 
	#UOTGHS_HSTIMR_RSMEDIE
 (0x1u << 3Ë

	)

553 
	#UOTGHS_HSTIMR_RXRSMIE
 (0x1u << 4Ë

	)

554 
	#UOTGHS_HSTIMR_HSOFIE
 (0x1u << 5Ë

	)

555 
	#UOTGHS_HSTIMR_HWUPIE
 (0x1u << 6Ë

	)

556 
	#UOTGHS_HSTIMR_PEP_0
 (0x1u << 8Ë

	)

557 
	#UOTGHS_HSTIMR_PEP_1
 (0x1u << 9Ë

	)

558 
	#UOTGHS_HSTIMR_PEP_2
 (0x1u << 10Ë

	)

559 
	#UOTGHS_HSTIMR_PEP_3
 (0x1u << 11Ë

	)

560 
	#UOTGHS_HSTIMR_PEP_4
 (0x1u << 12Ë

	)

561 
	#UOTGHS_HSTIMR_PEP_5
 (0x1u << 13Ë

	)

562 
	#UOTGHS_HSTIMR_PEP_6
 (0x1u << 14Ë

	)

563 
	#UOTGHS_HSTIMR_PEP_7
 (0x1u << 15Ë

	)

564 
	#UOTGHS_HSTIMR_PEP_8
 (0x1u << 16Ë

	)

565 
	#UOTGHS_HSTIMR_PEP_9
 (0x1u << 17Ë

	)

566 
	#UOTGHS_HSTIMR_DMA_1
 (0x1u << 25Ë

	)

567 
	#UOTGHS_HSTIMR_DMA_2
 (0x1u << 26Ë

	)

568 
	#UOTGHS_HSTIMR_DMA_3
 (0x1u << 27Ë

	)

569 
	#UOTGHS_HSTIMR_DMA_4
 (0x1u << 28Ë

	)

570 
	#UOTGHS_HSTIMR_DMA_5
 (0x1u << 29Ë

	)

571 
	#UOTGHS_HSTIMR_DMA_6
 (0x1u << 30Ë

	)

573 
	#UOTGHS_HSTIDR_DCONNIEC
 (0x1u << 0Ë

	)

574 
	#UOTGHS_HSTIDR_DDISCIEC
 (0x1u << 1Ë

	)

575 
	#UOTGHS_HSTIDR_RSTIEC
 (0x1u << 2Ë

	)

576 
	#UOTGHS_HSTIDR_RSMEDIEC
 (0x1u << 3Ë

	)

577 
	#UOTGHS_HSTIDR_RXRSMIEC
 (0x1u << 4Ë

	)

578 
	#UOTGHS_HSTIDR_HSOFIEC
 (0x1u << 5Ë

	)

579 
	#UOTGHS_HSTIDR_HWUPIEC
 (0x1u << 6Ë

	)

580 
	#UOTGHS_HSTIDR_PEP_0
 (0x1u << 8Ë

	)

581 
	#UOTGHS_HSTIDR_PEP_1
 (0x1u << 9Ë

	)

582 
	#UOTGHS_HSTIDR_PEP_2
 (0x1u << 10Ë

	)

583 
	#UOTGHS_HSTIDR_PEP_3
 (0x1u << 11Ë

	)

584 
	#UOTGHS_HSTIDR_PEP_4
 (0x1u << 12Ë

	)

585 
	#UOTGHS_HSTIDR_PEP_5
 (0x1u << 13Ë

	)

586 
	#UOTGHS_HSTIDR_PEP_6
 (0x1u << 14Ë

	)

587 
	#UOTGHS_HSTIDR_PEP_7
 (0x1u << 15Ë

	)

588 
	#UOTGHS_HSTIDR_PEP_8
 (0x1u << 16Ë

	)

589 
	#UOTGHS_HSTIDR_PEP_9
 (0x1u << 17Ë

	)

590 
	#UOTGHS_HSTIDR_DMA_1
 (0x1u << 25Ë

	)

591 
	#UOTGHS_HSTIDR_DMA_2
 (0x1u << 26Ë

	)

592 
	#UOTGHS_HSTIDR_DMA_3
 (0x1u << 27Ë

	)

593 
	#UOTGHS_HSTIDR_DMA_4
 (0x1u << 28Ë

	)

594 
	#UOTGHS_HSTIDR_DMA_5
 (0x1u << 29Ë

	)

595 
	#UOTGHS_HSTIDR_DMA_6
 (0x1u << 30Ë

	)

597 
	#UOTGHS_HSTIER_DCONNIES
 (0x1u << 0Ë

	)

598 
	#UOTGHS_HSTIER_DDISCIES
 (0x1u << 1Ë

	)

599 
	#UOTGHS_HSTIER_RSTIES
 (0x1u << 2Ë

	)

600 
	#UOTGHS_HSTIER_RSMEDIES
 (0x1u << 3Ë

	)

601 
	#UOTGHS_HSTIER_RXRSMIES
 (0x1u << 4Ë

	)

602 
	#UOTGHS_HSTIER_HSOFIES
 (0x1u << 5Ë

	)

603 
	#UOTGHS_HSTIER_HWUPIES
 (0x1u << 6Ë

	)

604 
	#UOTGHS_HSTIER_PEP_0
 (0x1u << 8Ë

	)

605 
	#UOTGHS_HSTIER_PEP_1
 (0x1u << 9Ë

	)

606 
	#UOTGHS_HSTIER_PEP_2
 (0x1u << 10Ë

	)

607 
	#UOTGHS_HSTIER_PEP_3
 (0x1u << 11Ë

	)

608 
	#UOTGHS_HSTIER_PEP_4
 (0x1u << 12Ë

	)

609 
	#UOTGHS_HSTIER_PEP_5
 (0x1u << 13Ë

	)

610 
	#UOTGHS_HSTIER_PEP_6
 (0x1u << 14Ë

	)

611 
	#UOTGHS_HSTIER_PEP_7
 (0x1u << 15Ë

	)

612 
	#UOTGHS_HSTIER_PEP_8
 (0x1u << 16Ë

	)

613 
	#UOTGHS_HSTIER_PEP_9
 (0x1u << 17Ë

	)

614 
	#UOTGHS_HSTIER_DMA_1
 (0x1u << 25Ë

	)

615 
	#UOTGHS_HSTIER_DMA_2
 (0x1u << 26Ë

	)

616 
	#UOTGHS_HSTIER_DMA_3
 (0x1u << 27Ë

	)

617 
	#UOTGHS_HSTIER_DMA_4
 (0x1u << 28Ë

	)

618 
	#UOTGHS_HSTIER_DMA_5
 (0x1u << 29Ë

	)

619 
	#UOTGHS_HSTIER_DMA_6
 (0x1u << 30Ë

	)

621 
	#UOTGHS_HSTPIP_PEN0
 (0x1u << 0Ë

	)

622 
	#UOTGHS_HSTPIP_PEN1
 (0x1u << 1Ë

	)

623 
	#UOTGHS_HSTPIP_PEN2
 (0x1u << 2Ë

	)

624 
	#UOTGHS_HSTPIP_PEN3
 (0x1u << 3Ë

	)

625 
	#UOTGHS_HSTPIP_PEN4
 (0x1u << 4Ë

	)

626 
	#UOTGHS_HSTPIP_PEN5
 (0x1u << 5Ë

	)

627 
	#UOTGHS_HSTPIP_PEN6
 (0x1u << 6Ë

	)

628 
	#UOTGHS_HSTPIP_PEN7
 (0x1u << 7Ë

	)

629 
	#UOTGHS_HSTPIP_PEN8
 (0x1u << 8Ë

	)

630 
	#UOTGHS_HSTPIP_PRST0
 (0x1u << 16Ë

	)

631 
	#UOTGHS_HSTPIP_PRST1
 (0x1u << 17Ë

	)

632 
	#UOTGHS_HSTPIP_PRST2
 (0x1u << 18Ë

	)

633 
	#UOTGHS_HSTPIP_PRST3
 (0x1u << 19Ë

	)

634 
	#UOTGHS_HSTPIP_PRST4
 (0x1u << 20Ë

	)

635 
	#UOTGHS_HSTPIP_PRST5
 (0x1u << 21Ë

	)

636 
	#UOTGHS_HSTPIP_PRST6
 (0x1u << 22Ë

	)

637 
	#UOTGHS_HSTPIP_PRST7
 (0x1u << 23Ë

	)

638 
	#UOTGHS_HSTPIP_PRST8
 (0x1u << 24Ë

	)

640 
	#UOTGHS_HSTFNUM_MFNUM_Pos
 0

	)

641 
	#UOTGHS_HSTFNUM_MFNUM_Msk
 (0x7u << 
UOTGHS_HSTFNUM_MFNUM_Pos
Ë

	)

642 
	#UOTGHS_HSTFNUM_MFNUM
(
vÆue
Ë((
UOTGHS_HSTFNUM_MFNUM_Msk
 & ((vÆueË<< 
UOTGHS_HSTFNUM_MFNUM_Pos
)))

	)

643 
	#UOTGHS_HSTFNUM_FNUM_Pos
 3

	)

644 
	#UOTGHS_HSTFNUM_FNUM_Msk
 (0x7ffu << 
UOTGHS_HSTFNUM_FNUM_Pos
Ë

	)

645 
	#UOTGHS_HSTFNUM_FNUM
(
vÆue
Ë((
UOTGHS_HSTFNUM_FNUM_Msk
 & ((vÆueË<< 
UOTGHS_HSTFNUM_FNUM_Pos
)))

	)

646 
	#UOTGHS_HSTFNUM_FLENHIGH_Pos
 16

	)

647 
	#UOTGHS_HSTFNUM_FLENHIGH_Msk
 (0xffu << 
UOTGHS_HSTFNUM_FLENHIGH_Pos
Ë

	)

648 
	#UOTGHS_HSTFNUM_FLENHIGH
(
vÆue
Ë((
UOTGHS_HSTFNUM_FLENHIGH_Msk
 & ((vÆueË<< 
UOTGHS_HSTFNUM_FLENHIGH_Pos
)))

	)

650 
	#UOTGHS_HSTADDR1_HSTADDRP0_Pos
 0

	)

651 
	#UOTGHS_HSTADDR1_HSTADDRP0_Msk
 (0x7fu << 
UOTGHS_HSTADDR1_HSTADDRP0_Pos
Ë

	)

652 
	#UOTGHS_HSTADDR1_HSTADDRP0
(
vÆue
Ë((
UOTGHS_HSTADDR1_HSTADDRP0_Msk
 & ((vÆueË<< 
UOTGHS_HSTADDR1_HSTADDRP0_Pos
)))

	)

653 
	#UOTGHS_HSTADDR1_HSTADDRP1_Pos
 8

	)

654 
	#UOTGHS_HSTADDR1_HSTADDRP1_Msk
 (0x7fu << 
UOTGHS_HSTADDR1_HSTADDRP1_Pos
Ë

	)

655 
	#UOTGHS_HSTADDR1_HSTADDRP1
(
vÆue
Ë((
UOTGHS_HSTADDR1_HSTADDRP1_Msk
 & ((vÆueË<< 
UOTGHS_HSTADDR1_HSTADDRP1_Pos
)))

	)

656 
	#UOTGHS_HSTADDR1_HSTADDRP2_Pos
 16

	)

657 
	#UOTGHS_HSTADDR1_HSTADDRP2_Msk
 (0x7fu << 
UOTGHS_HSTADDR1_HSTADDRP2_Pos
Ë

	)

658 
	#UOTGHS_HSTADDR1_HSTADDRP2
(
vÆue
Ë((
UOTGHS_HSTADDR1_HSTADDRP2_Msk
 & ((vÆueË<< 
UOTGHS_HSTADDR1_HSTADDRP2_Pos
)))

	)

659 
	#UOTGHS_HSTADDR1_HSTADDRP3_Pos
 24

	)

660 
	#UOTGHS_HSTADDR1_HSTADDRP3_Msk
 (0x7fu << 
UOTGHS_HSTADDR1_HSTADDRP3_Pos
Ë

	)

661 
	#UOTGHS_HSTADDR1_HSTADDRP3
(
vÆue
Ë((
UOTGHS_HSTADDR1_HSTADDRP3_Msk
 & ((vÆueË<< 
UOTGHS_HSTADDR1_HSTADDRP3_Pos
)))

	)

663 
	#UOTGHS_HSTADDR2_HSTADDRP4_Pos
 0

	)

664 
	#UOTGHS_HSTADDR2_HSTADDRP4_Msk
 (0x7fu << 
UOTGHS_HSTADDR2_HSTADDRP4_Pos
Ë

	)

665 
	#UOTGHS_HSTADDR2_HSTADDRP4
(
vÆue
Ë((
UOTGHS_HSTADDR2_HSTADDRP4_Msk
 & ((vÆueË<< 
UOTGHS_HSTADDR2_HSTADDRP4_Pos
)))

	)

666 
	#UOTGHS_HSTADDR2_HSTADDRP5_Pos
 8

	)

667 
	#UOTGHS_HSTADDR2_HSTADDRP5_Msk
 (0x7fu << 
UOTGHS_HSTADDR2_HSTADDRP5_Pos
Ë

	)

668 
	#UOTGHS_HSTADDR2_HSTADDRP5
(
vÆue
Ë((
UOTGHS_HSTADDR2_HSTADDRP5_Msk
 & ((vÆueË<< 
UOTGHS_HSTADDR2_HSTADDRP5_Pos
)))

	)

669 
	#UOTGHS_HSTADDR2_HSTADDRP6_Pos
 16

	)

670 
	#UOTGHS_HSTADDR2_HSTADDRP6_Msk
 (0x7fu << 
UOTGHS_HSTADDR2_HSTADDRP6_Pos
Ë

	)

671 
	#UOTGHS_HSTADDR2_HSTADDRP6
(
vÆue
Ë((
UOTGHS_HSTADDR2_HSTADDRP6_Msk
 & ((vÆueË<< 
UOTGHS_HSTADDR2_HSTADDRP6_Pos
)))

	)

672 
	#UOTGHS_HSTADDR2_HSTADDRP7_Pos
 24

	)

673 
	#UOTGHS_HSTADDR2_HSTADDRP7_Msk
 (0x7fu << 
UOTGHS_HSTADDR2_HSTADDRP7_Pos
Ë

	)

674 
	#UOTGHS_HSTADDR2_HSTADDRP7
(
vÆue
Ë((
UOTGHS_HSTADDR2_HSTADDRP7_Msk
 & ((vÆueË<< 
UOTGHS_HSTADDR2_HSTADDRP7_Pos
)))

	)

676 
	#UOTGHS_HSTADDR3_HSTADDRP8_Pos
 0

	)

677 
	#UOTGHS_HSTADDR3_HSTADDRP8_Msk
 (0x7fu << 
UOTGHS_HSTADDR3_HSTADDRP8_Pos
Ë

	)

678 
	#UOTGHS_HSTADDR3_HSTADDRP8
(
vÆue
Ë((
UOTGHS_HSTADDR3_HSTADDRP8_Msk
 & ((vÆueË<< 
UOTGHS_HSTADDR3_HSTADDRP8_Pos
)))

	)

679 
	#UOTGHS_HSTADDR3_HSTADDRP9_Pos
 8

	)

680 
	#UOTGHS_HSTADDR3_HSTADDRP9_Msk
 (0x7fu << 
UOTGHS_HSTADDR3_HSTADDRP9_Pos
Ë

	)

681 
	#UOTGHS_HSTADDR3_HSTADDRP9
(
vÆue
Ë((
UOTGHS_HSTADDR3_HSTADDRP9_Msk
 & ((vÆueË<< 
UOTGHS_HSTADDR3_HSTADDRP9_Pos
)))

	)

683 
	#UOTGHS_HSTPIPCFG_ALLOC
 (0x1u << 1Ë

	)

684 
	#UOTGHS_HSTPIPCFG_PBK_Pos
 2

	)

685 
	#UOTGHS_HSTPIPCFG_PBK_Msk
 (0x3u << 
UOTGHS_HSTPIPCFG_PBK_Pos
Ë

	)

686 
	#UOTGHS_HSTPIPCFG_PBK_1_BANK
 (0x0u << 2Ë

	)

687 
	#UOTGHS_HSTPIPCFG_PBK_2_BANK
 (0x1u << 2Ë

	)

688 
	#UOTGHS_HSTPIPCFG_PBK_3_BANK
 (0x2u << 2Ë

	)

689 
	#UOTGHS_HSTPIPCFG_PSIZE_Pos
 4

	)

690 
	#UOTGHS_HSTPIPCFG_PSIZE_Msk
 (0x7u << 
UOTGHS_HSTPIPCFG_PSIZE_Pos
Ë

	)

691 
	#UOTGHS_HSTPIPCFG_PSIZE_8_BYTE
 (0x0u << 4Ë

	)

692 
	#UOTGHS_HSTPIPCFG_PSIZE_16_BYTE
 (0x1u << 4Ë

	)

693 
	#UOTGHS_HSTPIPCFG_PSIZE_32_BYTE
 (0x2u << 4Ë

	)

694 
	#UOTGHS_HSTPIPCFG_PSIZE_64_BYTE
 (0x3u << 4Ë

	)

695 
	#UOTGHS_HSTPIPCFG_PSIZE_128_BYTE
 (0x4u << 4Ë

	)

696 
	#UOTGHS_HSTPIPCFG_PSIZE_256_BYTE
 (0x5u << 4Ë

	)

697 
	#UOTGHS_HSTPIPCFG_PSIZE_512_BYTE
 (0x6u << 4Ë

	)

698 
	#UOTGHS_HSTPIPCFG_PSIZE_1024_BYTE
 (0x7u << 4Ë

	)

699 
	#UOTGHS_HSTPIPCFG_PTOKEN_Pos
 8

	)

700 
	#UOTGHS_HSTPIPCFG_PTOKEN_Msk
 (0x3u << 
UOTGHS_HSTPIPCFG_PTOKEN_Pos
Ë

	)

701 
	#UOTGHS_HSTPIPCFG_PTOKEN_SETUP
 (0x0u << 8Ë

	)

702 
	#UOTGHS_HSTPIPCFG_PTOKEN_IN
 (0x1u << 8Ë

	)

703 
	#UOTGHS_HSTPIPCFG_PTOKEN_OUT
 (0x2u << 8Ë

	)

704 
	#UOTGHS_HSTPIPCFG_AUTOSW
 (0x1u << 10Ë

	)

705 
	#UOTGHS_HSTPIPCFG_PTYPE_Pos
 12

	)

706 
	#UOTGHS_HSTPIPCFG_PTYPE_Msk
 (0x3u << 
UOTGHS_HSTPIPCFG_PTYPE_Pos
Ë

	)

707 
	#UOTGHS_HSTPIPCFG_PTYPE_CTRL
 (0x0u << 12Ë

	)

708 
	#UOTGHS_HSTPIPCFG_PTYPE_ISO
 (0x1u << 12Ë

	)

709 
	#UOTGHS_HSTPIPCFG_PTYPE_BLK
 (0x2u << 12Ë

	)

710 
	#UOTGHS_HSTPIPCFG_PTYPE_INTRPT
 (0x3u << 12Ë

	)

711 
	#UOTGHS_HSTPIPCFG_PEPNUM_Pos
 16

	)

712 
	#UOTGHS_HSTPIPCFG_PEPNUM_Msk
 (0xfu << 
UOTGHS_HSTPIPCFG_PEPNUM_Pos
Ë

	)

713 
	#UOTGHS_HSTPIPCFG_PEPNUM
(
vÆue
Ë((
UOTGHS_HSTPIPCFG_PEPNUM_Msk
 & ((vÆueË<< 
UOTGHS_HSTPIPCFG_PEPNUM_Pos
)))

	)

714 
	#UOTGHS_HSTPIPCFG_PINGEN
 (0x1u << 20Ë

	)

715 
	#UOTGHS_HSTPIPCFG_INTFRQ_Pos
 24

	)

716 
	#UOTGHS_HSTPIPCFG_INTFRQ_Msk
 (0xffu << 
UOTGHS_HSTPIPCFG_INTFRQ_Pos
Ë

	)

717 
	#UOTGHS_HSTPIPCFG_INTFRQ
(
vÆue
Ë((
UOTGHS_HSTPIPCFG_INTFRQ_Msk
 & ((vÆueË<< 
UOTGHS_HSTPIPCFG_INTFRQ_Pos
)))

	)

718 
	#UOTGHS_HSTPIPCFG_BINTERVAL_Pos
 24

	)

719 
	#UOTGHS_HSTPIPCFG_BINTERVAL_Msk
 (0xffu << 
UOTGHS_HSTPIPCFG_BINTERVAL_Pos
Ë

	)

720 
	#UOTGHS_HSTPIPCFG_BINTERVAL
(
vÆue
Ë((
UOTGHS_HSTPIPCFG_BINTERVAL_Msk
 & ((vÆueË<< 
UOTGHS_HSTPIPCFG_BINTERVAL_Pos
)))

	)

722 
	#UOTGHS_HSTPIPISR_RXINI
 (0x1u << 0Ë

	)

723 
	#UOTGHS_HSTPIPISR_TXOUTI
 (0x1u << 1Ë

	)

724 
	#UOTGHS_HSTPIPISR_TXSTPI
 (0x1u << 2Ë

	)

725 
	#UOTGHS_HSTPIPISR_UNDERFI
 (0x1u << 2Ë

	)

726 
	#UOTGHS_HSTPIPISR_PERRI
 (0x1u << 3Ë

	)

727 
	#UOTGHS_HSTPIPISR_NAKEDI
 (0x1u << 4Ë

	)

728 
	#UOTGHS_HSTPIPISR_OVERFI
 (0x1u << 5Ë

	)

729 
	#UOTGHS_HSTPIPISR_RXSTALLDI
 (0x1u << 6Ë

	)

730 
	#UOTGHS_HSTPIPISR_CRCERRI
 (0x1u << 6Ë

	)

731 
	#UOTGHS_HSTPIPISR_SHORTPACKETI
 (0x1u << 7Ë

	)

732 
	#UOTGHS_HSTPIPISR_DTSEQ_Pos
 8

	)

733 
	#UOTGHS_HSTPIPISR_DTSEQ_Msk
 (0x3u << 
UOTGHS_HSTPIPISR_DTSEQ_Pos
Ë

	)

734 
	#UOTGHS_HSTPIPISR_DTSEQ_DATA0
 (0x0u << 8Ë

	)

735 
	#UOTGHS_HSTPIPISR_DTSEQ_DATA1
 (0x1u << 8Ë

	)

736 
	#UOTGHS_HSTPIPISR_NBUSYBK_Pos
 12

	)

737 
	#UOTGHS_HSTPIPISR_NBUSYBK_Msk
 (0x3u << 
UOTGHS_HSTPIPISR_NBUSYBK_Pos
Ë

	)

738 
	#UOTGHS_HSTPIPISR_NBUSYBK_0_BUSY
 (0x0u << 12Ë

	)

739 
	#UOTGHS_HSTPIPISR_NBUSYBK_1_BUSY
 (0x1u << 12Ë

	)

740 
	#UOTGHS_HSTPIPISR_NBUSYBK_2_BUSY
 (0x2u << 12Ë

	)

741 
	#UOTGHS_HSTPIPISR_NBUSYBK_3_BUSY
 (0x3u << 12Ë

	)

742 
	#UOTGHS_HSTPIPISR_CURRBK_Pos
 14

	)

743 
	#UOTGHS_HSTPIPISR_CURRBK_Msk
 (0x3u << 
UOTGHS_HSTPIPISR_CURRBK_Pos
Ë

	)

744 
	#UOTGHS_HSTPIPISR_CURRBK_BANK0
 (0x0u << 14Ë

	)

745 
	#UOTGHS_HSTPIPISR_CURRBK_BANK1
 (0x1u << 14Ë

	)

746 
	#UOTGHS_HSTPIPISR_CURRBK_BANK2
 (0x2u << 14Ë

	)

747 
	#UOTGHS_HSTPIPISR_RWALL
 (0x1u << 16Ë

	)

748 
	#UOTGHS_HSTPIPISR_CFGOK
 (0x1u << 18Ë

	)

749 
	#UOTGHS_HSTPIPISR_PBYCT_Pos
 20

	)

750 
	#UOTGHS_HSTPIPISR_PBYCT_Msk
 (0x7ffu << 
UOTGHS_HSTPIPISR_PBYCT_Pos
Ë

	)

752 
	#UOTGHS_HSTPIPICR_RXINIC
 (0x1u << 0Ë

	)

753 
	#UOTGHS_HSTPIPICR_TXOUTIC
 (0x1u << 1Ë

	)

754 
	#UOTGHS_HSTPIPICR_TXSTPIC
 (0x1u << 2Ë

	)

755 
	#UOTGHS_HSTPIPICR_UNDERFIC
 (0x1u << 2Ë

	)

756 
	#UOTGHS_HSTPIPICR_NAKEDIC
 (0x1u << 4Ë

	)

757 
	#UOTGHS_HSTPIPICR_OVERFIC
 (0x1u << 5Ë

	)

758 
	#UOTGHS_HSTPIPICR_RXSTALLDIC
 (0x1u << 6Ë

	)

759 
	#UOTGHS_HSTPIPICR_CRCERRIC
 (0x1u << 6Ë

	)

760 
	#UOTGHS_HSTPIPICR_SHORTPACKETIC
 (0x1u << 7Ë

	)

762 
	#UOTGHS_HSTPIPIFR_RXINIS
 (0x1u << 0Ë

	)

763 
	#UOTGHS_HSTPIPIFR_TXOUTIS
 (0x1u << 1Ë

	)

764 
	#UOTGHS_HSTPIPIFR_TXSTPIS
 (0x1u << 2Ë

	)

765 
	#UOTGHS_HSTPIPIFR_UNDERFIS
 (0x1u << 2Ë

	)

766 
	#UOTGHS_HSTPIPIFR_PERRIS
 (0x1u << 3Ë

	)

767 
	#UOTGHS_HSTPIPIFR_NAKEDIS
 (0x1u << 4Ë

	)

768 
	#UOTGHS_HSTPIPIFR_OVERFIS
 (0x1u << 5Ë

	)

769 
	#UOTGHS_HSTPIPIFR_RXSTALLDIS
 (0x1u << 6Ë

	)

770 
	#UOTGHS_HSTPIPIFR_CRCERRIS
 (0x1u << 6Ë

	)

771 
	#UOTGHS_HSTPIPIFR_SHORTPACKETIS
 (0x1u << 7Ë

	)

772 
	#UOTGHS_HSTPIPIFR_NBUSYBKS
 (0x1u << 12Ë

	)

774 
	#UOTGHS_HSTPIPIMR_RXINE
 (0x1u << 0Ë

	)

775 
	#UOTGHS_HSTPIPIMR_TXOUTE
 (0x1u << 1Ë

	)

776 
	#UOTGHS_HSTPIPIMR_TXSTPE
 (0x1u << 2Ë

	)

777 
	#UOTGHS_HSTPIPIMR_UNDERFIE
 (0x1u << 2Ë

	)

778 
	#UOTGHS_HSTPIPIMR_PERRE
 (0x1u << 3Ë

	)

779 
	#UOTGHS_HSTPIPIMR_NAKEDE
 (0x1u << 4Ë

	)

780 
	#UOTGHS_HSTPIPIMR_OVERFIE
 (0x1u << 5Ë

	)

781 
	#UOTGHS_HSTPIPIMR_RXSTALLDE
 (0x1u << 6Ë

	)

782 
	#UOTGHS_HSTPIPIMR_CRCERRE
 (0x1u << 6Ë

	)

783 
	#UOTGHS_HSTPIPIMR_SHORTPACKETIE
 (0x1u << 7Ë

	)

784 
	#UOTGHS_HSTPIPIMR_NBUSYBKE
 (0x1u << 12Ë

	)

785 
	#UOTGHS_HSTPIPIMR_FIFOCON
 (0x1u << 14Ë

	)

786 
	#UOTGHS_HSTPIPIMR_PDISHDMA
 (0x1u << 16Ë

	)

787 
	#UOTGHS_HSTPIPIMR_PFREEZE
 (0x1u << 17Ë

	)

788 
	#UOTGHS_HSTPIPIMR_RSTDT
 (0x1u << 18Ë

	)

790 
	#UOTGHS_HSTPIPIER_RXINES
 (0x1u << 0Ë

	)

791 
	#UOTGHS_HSTPIPIER_TXOUTES
 (0x1u << 1Ë

	)

792 
	#UOTGHS_HSTPIPIER_TXSTPES
 (0x1u << 2Ë

	)

793 
	#UOTGHS_HSTPIPIER_UNDERFIES
 (0x1u << 2Ë

	)

794 
	#UOTGHS_HSTPIPIER_PERRES
 (0x1u << 3Ë

	)

795 
	#UOTGHS_HSTPIPIER_NAKEDES
 (0x1u << 4Ë

	)

796 
	#UOTGHS_HSTPIPIER_OVERFIES
 (0x1u << 5Ë

	)

797 
	#UOTGHS_HSTPIPIER_RXSTALLDES
 (0x1u << 6Ë

	)

798 
	#UOTGHS_HSTPIPIER_CRCERRES
 (0x1u << 6Ë

	)

799 
	#UOTGHS_HSTPIPIER_SHORTPACKETIES
 (0x1u << 7Ë

	)

800 
	#UOTGHS_HSTPIPIER_NBUSYBKES
 (0x1u << 12Ë

	)

801 
	#UOTGHS_HSTPIPIER_PDISHDMAS
 (0x1u << 16Ë

	)

802 
	#UOTGHS_HSTPIPIER_PFREEZES
 (0x1u << 17Ë

	)

803 
	#UOTGHS_HSTPIPIER_RSTDTS
 (0x1u << 18Ë

	)

805 
	#UOTGHS_HSTPIPIDR_RXINEC
 (0x1u << 0Ë

	)

806 
	#UOTGHS_HSTPIPIDR_TXOUTEC
 (0x1u << 1Ë

	)

807 
	#UOTGHS_HSTPIPIDR_TXSTPEC
 (0x1u << 2Ë

	)

808 
	#UOTGHS_HSTPIPIDR_UNDERFIEC
 (0x1u << 2Ë

	)

809 
	#UOTGHS_HSTPIPIDR_PERREC
 (0x1u << 3Ë

	)

810 
	#UOTGHS_HSTPIPIDR_NAKEDEC
 (0x1u << 4Ë

	)

811 
	#UOTGHS_HSTPIPIDR_OVERFIEC
 (0x1u << 5Ë

	)

812 
	#UOTGHS_HSTPIPIDR_RXSTALLDEC
 (0x1u << 6Ë

	)

813 
	#UOTGHS_HSTPIPIDR_CRCERREC
 (0x1u << 6Ë

	)

814 
	#UOTGHS_HSTPIPIDR_SHORTPACKETIEC
 (0x1u << 7Ë

	)

815 
	#UOTGHS_HSTPIPIDR_NBUSYBKEC
 (0x1u << 12Ë

	)

816 
	#UOTGHS_HSTPIPIDR_FIFOCONC
 (0x1u << 14Ë

	)

817 
	#UOTGHS_HSTPIPIDR_PDISHDMAC
 (0x1u << 16Ë

	)

818 
	#UOTGHS_HSTPIPIDR_PFREEZEC
 (0x1u << 17Ë

	)

820 
	#UOTGHS_HSTPIPINRQ_INRQ_Pos
 0

	)

821 
	#UOTGHS_HSTPIPINRQ_INRQ_Msk
 (0xffu << 
UOTGHS_HSTPIPINRQ_INRQ_Pos
Ë

	)

822 
	#UOTGHS_HSTPIPINRQ_INRQ
(
vÆue
Ë((
UOTGHS_HSTPIPINRQ_INRQ_Msk
 & ((vÆueË<< 
UOTGHS_HSTPIPINRQ_INRQ_Pos
)))

	)

823 
	#UOTGHS_HSTPIPINRQ_INMODE
 (0x1u << 8Ë

	)

825 
	#UOTGHS_HSTPIPERR_DATATGL
 (0x1u << 0Ë

	)

826 
	#UOTGHS_HSTPIPERR_DATAPID
 (0x1u << 1Ë

	)

827 
	#UOTGHS_HSTPIPERR_PID
 (0x1u << 2Ë

	)

828 
	#UOTGHS_HSTPIPERR_TIMEOUT
 (0x1u << 3Ë

	)

829 
	#UOTGHS_HSTPIPERR_CRC16
 (0x1u << 4Ë

	)

830 
	#UOTGHS_HSTPIPERR_COUNTER_Pos
 5

	)

831 
	#UOTGHS_HSTPIPERR_COUNTER_Msk
 (0x3u << 
UOTGHS_HSTPIPERR_COUNTER_Pos
Ë

	)

832 
	#UOTGHS_HSTPIPERR_COUNTER
(
vÆue
Ë((
UOTGHS_HSTPIPERR_COUNTER_Msk
 & ((vÆueË<< 
UOTGHS_HSTPIPERR_COUNTER_Pos
)))

	)

834 
	#UOTGHS_HSTDMANXTDSC_NXT_DSC_ADD_Pos
 0

	)

835 
	#UOTGHS_HSTDMANXTDSC_NXT_DSC_ADD_Msk
 (0xffffffffu << 
UOTGHS_HSTDMANXTDSC_NXT_DSC_ADD_Pos
Ë

	)

836 
	#UOTGHS_HSTDMANXTDSC_NXT_DSC_ADD
(
vÆue
Ë((
UOTGHS_HSTDMANXTDSC_NXT_DSC_ADD_Msk
 & ((vÆueË<< 
UOTGHS_HSTDMANXTDSC_NXT_DSC_ADD_Pos
)))

	)

838 
	#UOTGHS_HSTDMAADDRESS_BUFF_ADD_Pos
 0

	)

839 
	#UOTGHS_HSTDMAADDRESS_BUFF_ADD_Msk
 (0xffffffffu << 
UOTGHS_HSTDMAADDRESS_BUFF_ADD_Pos
Ë

	)

840 
	#UOTGHS_HSTDMAADDRESS_BUFF_ADD
(
vÆue
Ë((
UOTGHS_HSTDMAADDRESS_BUFF_ADD_Msk
 & ((vÆueË<< 
UOTGHS_HSTDMAADDRESS_BUFF_ADD_Pos
)))

	)

842 
	#UOTGHS_HSTDMACONTROL_CHANN_ENB
 (0x1u << 0Ë

	)

843 
	#UOTGHS_HSTDMACONTROL_LDNXT_DSC
 (0x1u << 1Ë

	)

844 
	#UOTGHS_HSTDMACONTROL_END_TR_EN
 (0x1u << 2Ë

	)

845 
	#UOTGHS_HSTDMACONTROL_END_B_EN
 (0x1u << 3Ë

	)

846 
	#UOTGHS_HSTDMACONTROL_END_TR_IT
 (0x1u << 4Ë

	)

847 
	#UOTGHS_HSTDMACONTROL_END_BUFFIT
 (0x1u << 5Ë

	)

848 
	#UOTGHS_HSTDMACONTROL_DESC_LD_IT
 (0x1u << 6Ë

	)

849 
	#UOTGHS_HSTDMACONTROL_BURST_LCK
 (0x1u << 7Ë

	)

850 
	#UOTGHS_HSTDMACONTROL_BUFF_LENGTH_Pos
 16

	)

851 
	#UOTGHS_HSTDMACONTROL_BUFF_LENGTH_Msk
 (0xffffu << 
UOTGHS_HSTDMACONTROL_BUFF_LENGTH_Pos
Ë

	)

852 
	#UOTGHS_HSTDMACONTROL_BUFF_LENGTH
(
vÆue
Ë((
UOTGHS_HSTDMACONTROL_BUFF_LENGTH_Msk
 & ((vÆueË<< 
UOTGHS_HSTDMACONTROL_BUFF_LENGTH_Pos
)))

	)

854 
	#UOTGHS_HSTDMASTATUS_CHANN_ENB
 (0x1u << 0Ë

	)

855 
	#UOTGHS_HSTDMASTATUS_CHANN_ACT
 (0x1u << 1Ë

	)

856 
	#UOTGHS_HSTDMASTATUS_END_TR_ST
 (0x1u << 4Ë

	)

857 
	#UOTGHS_HSTDMASTATUS_END_BF_ST
 (0x1u << 5Ë

	)

858 
	#UOTGHS_HSTDMASTATUS_DESC_LDST
 (0x1u << 6Ë

	)

859 
	#UOTGHS_HSTDMASTATUS_BUFF_COUNT_Pos
 16

	)

860 
	#UOTGHS_HSTDMASTATUS_BUFF_COUNT_Msk
 (0xffffu << 
UOTGHS_HSTDMASTATUS_BUFF_COUNT_Pos
Ë

	)

861 
	#UOTGHS_HSTDMASTATUS_BUFF_COUNT
(
vÆue
Ë((
UOTGHS_HSTDMASTATUS_BUFF_COUNT_Msk
 & ((vÆueË<< 
UOTGHS_HSTDMASTATUS_BUFF_COUNT_Pos
)))

	)

863 
	#UOTGHS_CTRL_IDTE
 (0x1u << 0Ë

	)

864 
	#UOTGHS_CTRL_VBUSTE
 (0x1u << 1Ë

	)

865 
	#UOTGHS_CTRL_SRPE
 (0x1u << 2Ë

	)

866 
	#UOTGHS_CTRL_VBERRE
 (0x1u << 3Ë

	)

867 
	#UOTGHS_CTRL_BCERRE
 (0x1u << 4Ë

	)

868 
	#UOTGHS_CTRL_ROLEEXE
 (0x1u << 5Ë

	)

869 
	#UOTGHS_CTRL_HNPERRE
 (0x1u << 6Ë

	)

870 
	#UOTGHS_CTRL_STOE
 (0x1u << 7Ë

	)

871 
	#UOTGHS_CTRL_VBUSHWC
 (0x1u << 8Ë

	)

872 
	#UOTGHS_CTRL_SRPSEL
 (0x1u << 9Ë

	)

873 
	#UOTGHS_CTRL_SRPREQ
 (0x1u << 10Ë

	)

874 
	#UOTGHS_CTRL_HNPREQ
 (0x1u << 11Ë

	)

875 
	#UOTGHS_CTRL_OTGPADE
 (0x1u << 12Ë

	)

876 
	#UOTGHS_CTRL_VBUSPO
 (0x1u << 13Ë

	)

877 
	#UOTGHS_CTRL_FRZCLK
 (0x1u << 14Ë

	)

878 
	#UOTGHS_CTRL_USBE
 (0x1u << 15Ë

	)

879 
	#UOTGHS_CTRL_TIMVALUE_Pos
 16

	)

880 
	#UOTGHS_CTRL_TIMVALUE_Msk
 (0x3u << 
UOTGHS_CTRL_TIMVALUE_Pos
Ë

	)

881 
	#UOTGHS_CTRL_TIMVALUE
(
vÆue
Ë((
UOTGHS_CTRL_TIMVALUE_Msk
 & ((vÆueË<< 
UOTGHS_CTRL_TIMVALUE_Pos
)))

	)

882 
	#UOTGHS_CTRL_TIMPAGE_Pos
 20

	)

883 
	#UOTGHS_CTRL_TIMPAGE_Msk
 (0x3u << 
UOTGHS_CTRL_TIMPAGE_Pos
Ë

	)

884 
	#UOTGHS_CTRL_TIMPAGE
(
vÆue
Ë((
UOTGHS_CTRL_TIMPAGE_Msk
 & ((vÆueË<< 
UOTGHS_CTRL_TIMPAGE_Pos
)))

	)

885 
	#UOTGHS_CTRL_UNLOCK
 (0x1u << 22Ë

	)

886 
	#UOTGHS_CTRL_UIDE
 (0x1u << 24Ë

	)

887 
	#UOTGHS_CTRL_UIDE_UIMOD
 (0x0u << 24Ë

	)

888 
	#UOTGHS_CTRL_UIDE_UOTGID
 (0x1u << 24Ë

	)

889 
	#UOTGHS_CTRL_UIMOD
 (0x1u << 25Ë

	)

890 
	#UOTGHS_CTRL_UIMOD_Ho°
 (0x0u << 25Ë

	)

891 
	#UOTGHS_CTRL_UIMOD_Devi˚
 (0x1u << 25Ë

	)

893 
	#UOTGHS_SR_IDTI
 (0x1u << 0Ë

	)

894 
	#UOTGHS_SR_VBUSTI
 (0x1u << 1Ë

	)

895 
	#UOTGHS_SR_SRPI
 (0x1u << 2Ë

	)

896 
	#UOTGHS_SR_VBERRI
 (0x1u << 3Ë

	)

897 
	#UOTGHS_SR_BCERRI
 (0x1u << 4Ë

	)

898 
	#UOTGHS_SR_ROLEEXI
 (0x1u << 5Ë

	)

899 
	#UOTGHS_SR_HNPERRI
 (0x1u << 6Ë

	)

900 
	#UOTGHS_SR_STOI
 (0x1u << 7Ë

	)

901 
	#UOTGHS_SR_VBUSRQ
 (0x1u << 9Ë

	)

902 
	#UOTGHS_SR_ID
 (0x1u << 10Ë

	)

903 
	#UOTGHS_SR_VBUS
 (0x1u << 11Ë

	)

904 
	#UOTGHS_SR_SPEED_Pos
 12

	)

905 
	#UOTGHS_SR_SPEED_Msk
 (0x3u << 
UOTGHS_SR_SPEED_Pos
Ë

	)

906 
	#UOTGHS_SR_SPEED_FULL_SPEED
 (0x0u << 12Ë

	)

907 
	#UOTGHS_SR_SPEED_HIGH_SPEED
 (0x1u << 12Ë

	)

908 
	#UOTGHS_SR_SPEED_LOW_SPEED
 (0x2u << 12Ë

	)

909 
	#UOTGHS_SR_CLKUSABLE
 (0x1u << 14Ë

	)

911 
	#UOTGHS_SCR_IDTIC
 (0x1u << 0Ë

	)

912 
	#UOTGHS_SCR_VBUSTIC
 (0x1u << 1Ë

	)

913 
	#UOTGHS_SCR_SRPIC
 (0x1u << 2Ë

	)

914 
	#UOTGHS_SCR_VBERRIC
 (0x1u << 3Ë

	)

915 
	#UOTGHS_SCR_BCERRIC
 (0x1u << 4Ë

	)

916 
	#UOTGHS_SCR_ROLEEXIC
 (0x1u << 5Ë

	)

917 
	#UOTGHS_SCR_HNPERRIC
 (0x1u << 6Ë

	)

918 
	#UOTGHS_SCR_STOIC
 (0x1u << 7Ë

	)

919 
	#UOTGHS_SCR_VBUSRQC
 (0x1u << 9Ë

	)

921 
	#UOTGHS_SFR_IDTIS
 (0x1u << 0Ë

	)

922 
	#UOTGHS_SFR_VBUSTIS
 (0x1u << 1Ë

	)

923 
	#UOTGHS_SFR_SRPIS
 (0x1u << 2Ë

	)

924 
	#UOTGHS_SFR_VBERRIS
 (0x1u << 3Ë

	)

925 
	#UOTGHS_SFR_BCERRIS
 (0x1u << 4Ë

	)

926 
	#UOTGHS_SFR_ROLEEXIS
 (0x1u << 5Ë

	)

927 
	#UOTGHS_SFR_HNPERRIS
 (0x1u << 6Ë

	)

928 
	#UOTGHS_SFR_STOIS
 (0x1u << 7Ë

	)

929 
	#UOTGHS_SFR_VBUSRQS
 (0x1u << 9Ë

	)

931 
	#UOTGHS_FSM_DRDSTATE_Pos
 0

	)

932 
	#UOTGHS_FSM_DRDSTATE_Msk
 (0xfu << 
UOTGHS_FSM_DRDSTATE_Pos
Ë

	)

933 
	#UOTGHS_FSM_DRDSTATE_A_IDLESTATE
 (0x0u << 0Ë

	)

934 
	#UOTGHS_FSM_DRDSTATE_A_WAIT_VRISE
 (0x1u << 0Ë

	)

935 
	#UOTGHS_FSM_DRDSTATE_A_WAIT_BCON
 (0x2u << 0Ë

	)

936 
	#UOTGHS_FSM_DRDSTATE_A_HOST
 (0x3u << 0Ë

	)

937 
	#UOTGHS_FSM_DRDSTATE_A_SUSPEND
 (0x4u << 0Ë

	)

938 
	#UOTGHS_FSM_DRDSTATE_A_PERIPHERAL
 (0x5u << 0Ë

	)

939 
	#UOTGHS_FSM_DRDSTATE_A_WAIT_VFALL
 (0x6u << 0Ë

	)

940 
	#UOTGHS_FSM_DRDSTATE_A_VBUS_ERR
 (0x7u << 0Ë

	)

941 
	#UOTGHS_FSM_DRDSTATE_A_WAIT_DISCHARGE
 (0x8u << 0Ë

	)

942 
	#UOTGHS_FSM_DRDSTATE_B_IDLE
 (0x9u << 0Ë

	)

943 
	#UOTGHS_FSM_DRDSTATE_B_PERIPHERAL
 (0xAu << 0Ë

	)

944 
	#UOTGHS_FSM_DRDSTATE_B_WAIT_BEGIN_HNP
 (0xBu << 0Ë

	)

945 
	#UOTGHS_FSM_DRDSTATE_B_WAIT_DISCHARGE
 (0xCu << 0Ë

	)

946 
	#UOTGHS_FSM_DRDSTATE_B_WAIT_ACON
 (0xDu << 0Ë

	)

947 
	#UOTGHS_FSM_DRDSTATE_B_HOST
 (0xEu << 0Ë

	)

948 
	#UOTGHS_FSM_DRDSTATE_B_SRP_INIT
 (0xFu << 0Ë

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_usart.h

45 #i‚de‡
_SAM3XA_USART_COMPONENT_


46 
	#_SAM3XA_USART_COMPONENT_


	)

54 #i‡!(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

57 
WoReg
 
	mUS_CR
;

58 
RwReg
 
	mUS_MR
;

59 
WoReg
 
	mUS_IER
;

60 
WoReg
 
	mUS_IDR
;

61 
RoReg
 
	mUS_IMR
;

62 
RoReg
 
	mUS_CSR
;

63 
RoReg
 
	mUS_RHR
;

64 
WoReg
 
	mUS_THR
;

65 
RwReg
 
	mUS_BRGR
;

66 
RwReg
 
	mUS_RTOR
;

67 
RwReg
 
	mUS_TTGR
;

68 
RoReg
 
	mRe£rved1
[5];

69 
RwReg
 
	mUS_FIDI
;

70 
RoReg
 
	mUS_NER
;

71 
RoReg
 
	mRe£rved2
[1];

72 
RwReg
 
	mUS_IF
;

73 
RwReg
 
	mUS_MAN
;

74 
RwReg
 
	mUS_LINMR
;

75 
RwReg
 
	mUS_LINIR
;

76 
RoReg
 
	mRe£rved3
[34];

77 
RwReg
 
	mUS_WPMR
;

78 
RoReg
 
	mUS_WPSR
;

79 
RoReg
 
	mRe£rved4
[5];

80 
RwReg
 
	mUS_RPR
;

81 
RwReg
 
	mUS_RCR
;

82 
RwReg
 
	mUS_TPR
;

83 
RwReg
 
	mUS_TCR
;

84 
RwReg
 
	mUS_RNPR
;

85 
RwReg
 
	mUS_RNCR
;

86 
RwReg
 
	mUS_TNPR
;

87 
RwReg
 
	mUS_TNCR
;

88 
WoReg
 
	mUS_PTCR
;

89 
RoReg
 
	mUS_PTSR
;

90 } 
	tUßπ
;

93 
	#US_CR_RSTRX
 (0x1u << 2Ë

	)

94 
	#US_CR_RSTTX
 (0x1u << 3Ë

	)

95 
	#US_CR_RXEN
 (0x1u << 4Ë

	)

96 
	#US_CR_RXDIS
 (0x1u << 5Ë

	)

97 
	#US_CR_TXEN
 (0x1u << 6Ë

	)

98 
	#US_CR_TXDIS
 (0x1u << 7Ë

	)

99 
	#US_CR_RSTSTA
 (0x1u << 8Ë

	)

100 
	#US_CR_STTBRK
 (0x1u << 9Ë

	)

101 
	#US_CR_STPBRK
 (0x1u << 10Ë

	)

102 
	#US_CR_STTTO
 (0x1u << 11Ë

	)

103 
	#US_CR_SENDA
 (0x1u << 12Ë

	)

104 
	#US_CR_RSTIT
 (0x1u << 13Ë

	)

105 
	#US_CR_RSTNACK
 (0x1u << 14Ë

	)

106 
	#US_CR_RETTO
 (0x1u << 15Ë

	)

107 
	#US_CR_RTSEN
 (0x1u << 18Ë

	)

108 
	#US_CR_FCS
 (0x1u << 18Ë

	)

109 
	#US_CR_RTSDIS
 (0x1u << 19Ë

	)

110 
	#US_CR_RCS
 (0x1u << 19Ë

	)

111 
	#US_CR_LINABT
 (0x1u << 20Ë

	)

112 
	#US_CR_LINWKUP
 (0x1u << 21Ë

	)

114 
	#US_MR_USART_MODE_Pos
 0

	)

115 
	#US_MR_USART_MODE_Msk
 (0xfu << 
US_MR_USART_MODE_Pos
Ë

	)

116 
	#US_MR_USART_MODE_NORMAL
 (0x0u << 0Ë

	)

117 
	#US_MR_USART_MODE_RS485
 (0x1u << 0Ë

	)

118 
	#US_MR_USART_MODE_HW_HANDSHAKING
 (0x2u << 0Ë

	)

119 
	#US_MR_USART_MODE_IS07816_T_0
 (0x4u << 0Ë

	)

120 
	#US_MR_USART_MODE_IS07816_T_1
 (0x6u << 0Ë

	)

121 
	#US_MR_USART_MODE_IRDA
 (0x8u << 0Ë

	)

122 
	#US_MR_USART_MODE_LIN_MASTER
 (0xAu << 0Ë

	)

123 
	#US_MR_USART_MODE_LIN_SLAVE
 (0xBu << 0Ë

	)

124 
	#US_MR_USART_MODE_SPI_MASTER
 (0xEu << 0Ë

	)

125 
	#US_MR_USART_MODE_SPI_SLAVE
 (0xFu << 0Ë

	)

126 
	#US_MR_USCLKS_Pos
 4

	)

127 
	#US_MR_USCLKS_Msk
 (0x3u << 
US_MR_USCLKS_Pos
Ë

	)

128 
	#US_MR_USCLKS_MCK
 (0x0u << 4Ë

	)

129 
	#US_MR_USCLKS_DIV
 (0x1u << 4Ë

	)

130 
	#US_MR_USCLKS_SCK
 (0x3u << 4Ë

	)

131 
	#US_MR_CHRL_Pos
 6

	)

132 
	#US_MR_CHRL_Msk
 (0x3u << 
US_MR_CHRL_Pos
Ë

	)

133 
	#US_MR_CHRL_5_BIT
 (0x0u << 6Ë

	)

134 
	#US_MR_CHRL_6_BIT
 (0x1u << 6Ë

	)

135 
	#US_MR_CHRL_7_BIT
 (0x2u << 6Ë

	)

136 
	#US_MR_CHRL_8_BIT
 (0x3u << 6Ë

	)

137 
	#US_MR_SYNC
 (0x1u << 8Ë

	)

138 
	#US_MR_CPHA
 (0x1u << 8Ë

	)

139 
	#US_MR_PAR_Pos
 9

	)

140 
	#US_MR_PAR_Msk
 (0x7u << 
US_MR_PAR_Pos
Ë

	)

141 
	#US_MR_PAR_EVEN
 (0x0u << 9Ë

	)

142 
	#US_MR_PAR_ODD
 (0x1u << 9Ë

	)

143 
	#US_MR_PAR_SPACE
 (0x2u << 9Ë

	)

144 
	#US_MR_PAR_MARK
 (0x3u << 9Ë

	)

145 
	#US_MR_PAR_NO
 (0x4u << 9Ë

	)

146 
	#US_MR_PAR_MULTIDROP
 (0x6u << 9Ë

	)

147 
	#US_MR_NBSTOP_Pos
 12

	)

148 
	#US_MR_NBSTOP_Msk
 (0x3u << 
US_MR_NBSTOP_Pos
Ë

	)

149 
	#US_MR_NBSTOP_1_BIT
 (0x0u << 12Ë

	)

150 
	#US_MR_NBSTOP_1_5_BIT
 (0x1u << 12Ë

	)

151 
	#US_MR_NBSTOP_2_BIT
 (0x2u << 12Ë

	)

152 
	#US_MR_CHMODE_Pos
 14

	)

153 
	#US_MR_CHMODE_Msk
 (0x3u << 
US_MR_CHMODE_Pos
Ë

	)

154 
	#US_MR_CHMODE_NORMAL
 (0x0u << 14Ë

	)

155 
	#US_MR_CHMODE_AUTOMATIC
 (0x1u << 14Ë

	)

156 
	#US_MR_CHMODE_LOCAL_LOOPBACK
 (0x2u << 14Ë

	)

157 
	#US_MR_CHMODE_REMOTE_LOOPBACK
 (0x3u << 14Ë

	)

158 
	#US_MR_MSBF
 (0x1u << 16Ë

	)

159 
	#US_MR_CPOL
 (0x1u << 16Ë

	)

160 
	#US_MR_MODE9
 (0x1u << 17Ë

	)

161 
	#US_MR_CLKO
 (0x1u << 18Ë

	)

162 
	#US_MR_OVER
 (0x1u << 19Ë

	)

163 
	#US_MR_INACK
 (0x1u << 20Ë

	)

164 
	#US_MR_DSNACK
 (0x1u << 21Ë

	)

165 
	#US_MR_VAR_SYNC
 (0x1u << 22Ë

	)

166 
	#US_MR_INVDATA
 (0x1u << 23Ë

	)

167 
	#US_MR_MAX_ITERATION_Pos
 24

	)

168 
	#US_MR_MAX_ITERATION_Msk
 (0x7u << 
US_MR_MAX_ITERATION_Pos
Ë

	)

169 
	#US_MR_MAX_ITERATION
(
vÆue
Ë((
US_MR_MAX_ITERATION_Msk
 & ((vÆueË<< 
US_MR_MAX_ITERATION_Pos
)))

	)

170 
	#US_MR_FILTER
 (0x1u << 28Ë

	)

171 
	#US_MR_MAN
 (0x1u << 29Ë

	)

172 
	#US_MR_MODSYNC
 (0x1u << 30Ë

	)

173 
	#US_MR_ONEBIT
 (0x1u << 31Ë

	)

175 
	#US_IER_RXRDY
 (0x1u << 0Ë

	)

176 
	#US_IER_TXRDY
 (0x1u << 1Ë

	)

177 
	#US_IER_RXBRK
 (0x1u << 2Ë

	)

178 
	#US_IER_ENDRX
 (0x1u << 3Ë

	)

179 
	#US_IER_ENDTX
 (0x1u << 4Ë

	)

180 
	#US_IER_OVRE
 (0x1u << 5Ë

	)

181 
	#US_IER_FRAME
 (0x1u << 6Ë

	)

182 
	#US_IER_PARE
 (0x1u << 7Ë

	)

183 
	#US_IER_TIMEOUT
 (0x1u << 8Ë

	)

184 
	#US_IER_TXEMPTY
 (0x1u << 9Ë

	)

185 
	#US_IER_ITER
 (0x1u << 10Ë

	)

186 
	#US_IER_UNRE
 (0x1u << 10Ë

	)

187 
	#US_IER_TXBUFE
 (0x1u << 11Ë

	)

188 
	#US_IER_RXBUFF
 (0x1u << 12Ë

	)

189 
	#US_IER_NACK
 (0x1u << 13Ë

	)

190 
	#US_IER_LINBK
 (0x1u << 13Ë

	)

191 
	#US_IER_LINID
 (0x1u << 14Ë

	)

192 
	#US_IER_LINTC
 (0x1u << 15Ë

	)

193 
	#US_IER_CTSIC
 (0x1u << 19Ë

	)

194 
	#US_IER_MANE
 (0x1u << 24Ë

	)

195 
	#US_IER_LINBE
 (0x1u << 25Ë

	)

196 
	#US_IER_LINISFE
 (0x1u << 26Ë

	)

197 
	#US_IER_LINIPE
 (0x1u << 27Ë

	)

198 
	#US_IER_LINCE
 (0x1u << 28Ë

	)

199 
	#US_IER_LINSNRE
 (0x1u << 29Ë

	)

201 
	#US_IDR_RXRDY
 (0x1u << 0Ë

	)

202 
	#US_IDR_TXRDY
 (0x1u << 1Ë

	)

203 
	#US_IDR_RXBRK
 (0x1u << 2Ë

	)

204 
	#US_IDR_ENDRX
 (0x1u << 3Ë

	)

205 
	#US_IDR_ENDTX
 (0x1u << 4Ë

	)

206 
	#US_IDR_OVRE
 (0x1u << 5Ë

	)

207 
	#US_IDR_FRAME
 (0x1u << 6Ë

	)

208 
	#US_IDR_PARE
 (0x1u << 7Ë

	)

209 
	#US_IDR_TIMEOUT
 (0x1u << 8Ë

	)

210 
	#US_IDR_TXEMPTY
 (0x1u << 9Ë

	)

211 
	#US_IDR_ITER
 (0x1u << 10Ë

	)

212 
	#US_IDR_UNRE
 (0x1u << 10Ë

	)

213 
	#US_IDR_TXBUFE
 (0x1u << 11Ë

	)

214 
	#US_IDR_RXBUFF
 (0x1u << 12Ë

	)

215 
	#US_IDR_NACK
 (0x1u << 13Ë

	)

216 
	#US_IDR_LINBK
 (0x1u << 13Ë

	)

217 
	#US_IDR_LINID
 (0x1u << 14Ë

	)

218 
	#US_IDR_LINTC
 (0x1u << 15Ë

	)

219 
	#US_IDR_CTSIC
 (0x1u << 19Ë

	)

220 
	#US_IDR_MANE
 (0x1u << 24Ë

	)

221 
	#US_IDR_LINBE
 (0x1u << 25Ë

	)

222 
	#US_IDR_LINISFE
 (0x1u << 26Ë

	)

223 
	#US_IDR_LINIPE
 (0x1u << 27Ë

	)

224 
	#US_IDR_LINCE
 (0x1u << 28Ë

	)

225 
	#US_IDR_LINSNRE
 (0x1u << 29Ë

	)

227 
	#US_IMR_RXRDY
 (0x1u << 0Ë

	)

228 
	#US_IMR_TXRDY
 (0x1u << 1Ë

	)

229 
	#US_IMR_RXBRK
 (0x1u << 2Ë

	)

230 
	#US_IMR_ENDRX
 (0x1u << 3Ë

	)

231 
	#US_IMR_ENDTX
 (0x1u << 4Ë

	)

232 
	#US_IMR_OVRE
 (0x1u << 5Ë

	)

233 
	#US_IMR_FRAME
 (0x1u << 6Ë

	)

234 
	#US_IMR_PARE
 (0x1u << 7Ë

	)

235 
	#US_IMR_TIMEOUT
 (0x1u << 8Ë

	)

236 
	#US_IMR_TXEMPTY
 (0x1u << 9Ë

	)

237 
	#US_IMR_ITER
 (0x1u << 10Ë

	)

238 
	#US_IMR_UNRE
 (0x1u << 10Ë

	)

239 
	#US_IMR_TXBUFE
 (0x1u << 11Ë

	)

240 
	#US_IMR_RXBUFF
 (0x1u << 12Ë

	)

241 
	#US_IMR_NACK
 (0x1u << 13Ë

	)

242 
	#US_IMR_LINBK
 (0x1u << 13Ë

	)

243 
	#US_IMR_LINID
 (0x1u << 14Ë

	)

244 
	#US_IMR_LINTC
 (0x1u << 15Ë

	)

245 
	#US_IMR_CTSIC
 (0x1u << 19Ë

	)

246 
	#US_IMR_MANE
 (0x1u << 24Ë

	)

247 
	#US_IMR_LINBE
 (0x1u << 25Ë

	)

248 
	#US_IMR_LINISFE
 (0x1u << 26Ë

	)

249 
	#US_IMR_LINIPE
 (0x1u << 27Ë

	)

250 
	#US_IMR_LINCE
 (0x1u << 28Ë

	)

251 
	#US_IMR_LINSNRE
 (0x1u << 29Ë

	)

253 
	#US_CSR_RXRDY
 (0x1u << 0Ë

	)

254 
	#US_CSR_TXRDY
 (0x1u << 1Ë

	)

255 
	#US_CSR_RXBRK
 (0x1u << 2Ë

	)

256 
	#US_CSR_ENDRX
 (0x1u << 3Ë

	)

257 
	#US_CSR_ENDTX
 (0x1u << 4Ë

	)

258 
	#US_CSR_OVRE
 (0x1u << 5Ë

	)

259 
	#US_CSR_FRAME
 (0x1u << 6Ë

	)

260 
	#US_CSR_PARE
 (0x1u << 7Ë

	)

261 
	#US_CSR_TIMEOUT
 (0x1u << 8Ë

	)

262 
	#US_CSR_TXEMPTY
 (0x1u << 9Ë

	)

263 
	#US_CSR_ITER
 (0x1u << 10Ë

	)

264 
	#US_CSR_UNRE
 (0x1u << 10Ë

	)

265 
	#US_CSR_TXBUFE
 (0x1u << 11Ë

	)

266 
	#US_CSR_RXBUFF
 (0x1u << 12Ë

	)

267 
	#US_CSR_NACK
 (0x1u << 13Ë

	)

268 
	#US_CSR_LINBK
 (0x1u << 13Ë

	)

269 
	#US_CSR_LINID
 (0x1u << 14Ë

	)

270 
	#US_CSR_LINTC
 (0x1u << 15Ë

	)

271 
	#US_CSR_CTSIC
 (0x1u << 19Ë

	)

272 
	#US_CSR_CTS
 (0x1u << 23Ë

	)

273 
	#US_CSR_LINBLS
 (0x1u << 23Ë

	)

274 
	#US_CSR_MANERR
 (0x1u << 24Ë

	)

275 
	#US_CSR_LINBE
 (0x1u << 25Ë

	)

276 
	#US_CSR_LINISFE
 (0x1u << 26Ë

	)

277 
	#US_CSR_LINIPE
 (0x1u << 27Ë

	)

278 
	#US_CSR_LINCE
 (0x1u << 28Ë

	)

279 
	#US_CSR_LINSNRE
 (0x1u << 29Ë

	)

281 
	#US_RHR_RXCHR_Pos
 0

	)

282 
	#US_RHR_RXCHR_Msk
 (0x1ffu << 
US_RHR_RXCHR_Pos
Ë

	)

283 
	#US_RHR_RXSYNH
 (0x1u << 15Ë

	)

285 
	#US_THR_TXCHR_Pos
 0

	)

286 
	#US_THR_TXCHR_Msk
 (0x1ffu << 
US_THR_TXCHR_Pos
Ë

	)

287 
	#US_THR_TXCHR
(
vÆue
Ë((
US_THR_TXCHR_Msk
 & ((vÆueË<< 
US_THR_TXCHR_Pos
)))

	)

288 
	#US_THR_TXSYNH
 (0x1u << 15Ë

	)

290 
	#US_BRGR_CD_Pos
 0

	)

291 
	#US_BRGR_CD_Msk
 (0xffffu << 
US_BRGR_CD_Pos
Ë

	)

292 
	#US_BRGR_CD
(
vÆue
Ë((
US_BRGR_CD_Msk
 & ((vÆueË<< 
US_BRGR_CD_Pos
)))

	)

293 
	#US_BRGR_FP_Pos
 16

	)

294 
	#US_BRGR_FP_Msk
 (0x7u << 
US_BRGR_FP_Pos
Ë

	)

295 
	#US_BRGR_FP
(
vÆue
Ë((
US_BRGR_FP_Msk
 & ((vÆueË<< 
US_BRGR_FP_Pos
)))

	)

297 
	#US_RTOR_TO_Pos
 0

	)

298 
	#US_RTOR_TO_Msk
 (0x1ffffu << 
US_RTOR_TO_Pos
Ë

	)

299 
	#US_RTOR_TO
(
vÆue
Ë((
US_RTOR_TO_Msk
 & ((vÆueË<< 
US_RTOR_TO_Pos
)))

	)

301 
	#US_TTGR_TG_Pos
 0

	)

302 
	#US_TTGR_TG_Msk
 (0xffu << 
US_TTGR_TG_Pos
Ë

	)

303 
	#US_TTGR_TG
(
vÆue
Ë((
US_TTGR_TG_Msk
 & ((vÆueË<< 
US_TTGR_TG_Pos
)))

	)

305 
	#US_FIDI_FI_DI_RATIO_Pos
 0

	)

306 
	#US_FIDI_FI_DI_RATIO_Msk
 (0x7ffu << 
US_FIDI_FI_DI_RATIO_Pos
Ë

	)

307 
	#US_FIDI_FI_DI_RATIO
(
vÆue
Ë((
US_FIDI_FI_DI_RATIO_Msk
 & ((vÆueË<< 
US_FIDI_FI_DI_RATIO_Pos
)))

	)

309 
	#US_NER_NB_ERRORS_Pos
 0

	)

310 
	#US_NER_NB_ERRORS_Msk
 (0xffu << 
US_NER_NB_ERRORS_Pos
Ë

	)

312 
	#US_IF_IRDA_FILTER_Pos
 0

	)

313 
	#US_IF_IRDA_FILTER_Msk
 (0xffu << 
US_IF_IRDA_FILTER_Pos
Ë

	)

314 
	#US_IF_IRDA_FILTER
(
vÆue
Ë((
US_IF_IRDA_FILTER_Msk
 & ((vÆueË<< 
US_IF_IRDA_FILTER_Pos
)))

	)

316 
	#US_MAN_TX_PL_Pos
 0

	)

317 
	#US_MAN_TX_PL_Msk
 (0xfu << 
US_MAN_TX_PL_Pos
Ë

	)

318 
	#US_MAN_TX_PL
(
vÆue
Ë((
US_MAN_TX_PL_Msk
 & ((vÆueË<< 
US_MAN_TX_PL_Pos
)))

	)

319 
	#US_MAN_TX_PP_Pos
 8

	)

320 
	#US_MAN_TX_PP_Msk
 (0x3u << 
US_MAN_TX_PP_Pos
Ë

	)

321 
	#US_MAN_TX_PP_ALL_ONE
 (0x0u << 8Ë

	)

322 
	#US_MAN_TX_PP_ALL_ZERO
 (0x1u << 8Ë

	)

323 
	#US_MAN_TX_PP_ZERO_ONE
 (0x2u << 8Ë

	)

324 
	#US_MAN_TX_PP_ONE_ZERO
 (0x3u << 8Ë

	)

325 
	#US_MAN_TX_MPOL
 (0x1u << 12Ë

	)

326 
	#US_MAN_RX_PL_Pos
 16

	)

327 
	#US_MAN_RX_PL_Msk
 (0xfu << 
US_MAN_RX_PL_Pos
Ë

	)

328 
	#US_MAN_RX_PL
(
vÆue
Ë((
US_MAN_RX_PL_Msk
 & ((vÆueË<< 
US_MAN_RX_PL_Pos
)))

	)

329 
	#US_MAN_RX_PP_Pos
 24

	)

330 
	#US_MAN_RX_PP_Msk
 (0x3u << 
US_MAN_RX_PP_Pos
Ë

	)

331 
	#US_MAN_RX_PP_ALL_ONE
 (0x0u << 24Ë

	)

332 
	#US_MAN_RX_PP_ALL_ZERO
 (0x1u << 24Ë

	)

333 
	#US_MAN_RX_PP_ZERO_ONE
 (0x2u << 24Ë

	)

334 
	#US_MAN_RX_PP_ONE_ZERO
 (0x3u << 24Ë

	)

335 
	#US_MAN_RX_MPOL
 (0x1u << 28Ë

	)

336 
	#US_MAN_STUCKTO1
 (0x1u << 29Ë

	)

337 
	#US_MAN_DRIFT
 (0x1u << 30Ë

	)

339 
	#US_LINMR_NACT_Pos
 0

	)

340 
	#US_LINMR_NACT_Msk
 (0x3u << 
US_LINMR_NACT_Pos
Ë

	)

341 
	#US_LINMR_NACT_PUBLISH
 (0x0u << 0Ë

	)

342 
	#US_LINMR_NACT_SUBSCRIBE
 (0x1u << 0Ë

	)

343 
	#US_LINMR_NACT_IGNORE
 (0x2u << 0Ë

	)

344 
	#US_LINMR_PARDIS
 (0x1u << 2Ë

	)

345 
	#US_LINMR_CHKDIS
 (0x1u << 3Ë

	)

346 
	#US_LINMR_CHKTYP
 (0x1u << 4Ë

	)

347 
	#US_LINMR_DLM
 (0x1u << 5Ë

	)

348 
	#US_LINMR_FSDIS
 (0x1u << 6Ë

	)

349 
	#US_LINMR_WKUPTYP
 (0x1u << 7Ë

	)

350 
	#US_LINMR_DLC_Pos
 8

	)

351 
	#US_LINMR_DLC_Msk
 (0xffu << 
US_LINMR_DLC_Pos
Ë

	)

352 
	#US_LINMR_DLC
(
vÆue
Ë((
US_LINMR_DLC_Msk
 & ((vÆueË<< 
US_LINMR_DLC_Pos
)))

	)

353 
	#US_LINMR_PDCM
 (0x1u << 16Ë

	)

355 
	#US_LINIR_IDCHR_Pos
 0

	)

356 
	#US_LINIR_IDCHR_Msk
 (0xffu << 
US_LINIR_IDCHR_Pos
Ë

	)

357 
	#US_LINIR_IDCHR
(
vÆue
Ë((
US_LINIR_IDCHR_Msk
 & ((vÆueË<< 
US_LINIR_IDCHR_Pos
)))

	)

359 
	#US_WPMR_WPEN
 (0x1u << 0Ë

	)

360 
	#US_WPMR_WPKEY_Pos
 8

	)

361 
	#US_WPMR_WPKEY_Msk
 (0xffffffu << 
US_WPMR_WPKEY_Pos
Ë

	)

362 
	#US_WPMR_WPKEY
(
vÆue
Ë((
US_WPMR_WPKEY_Msk
 & ((vÆueË<< 
US_WPMR_WPKEY_Pos
)))

	)

364 
	#US_WPSR_WPVS
 (0x1u << 0Ë

	)

365 
	#US_WPSR_WPVSRC_Pos
 8

	)

366 
	#US_WPSR_WPVSRC_Msk
 (0xffffu << 
US_WPSR_WPVSRC_Pos
Ë

	)

368 
	#US_RPR_RXPTR_Pos
 0

	)

369 
	#US_RPR_RXPTR_Msk
 (0xffffffffu << 
US_RPR_RXPTR_Pos
Ë

	)

370 
	#US_RPR_RXPTR
(
vÆue
Ë((
US_RPR_RXPTR_Msk
 & ((vÆueË<< 
US_RPR_RXPTR_Pos
)))

	)

372 
	#US_RCR_RXCTR_Pos
 0

	)

373 
	#US_RCR_RXCTR_Msk
 (0xffffu << 
US_RCR_RXCTR_Pos
Ë

	)

374 
	#US_RCR_RXCTR
(
vÆue
Ë((
US_RCR_RXCTR_Msk
 & ((vÆueË<< 
US_RCR_RXCTR_Pos
)))

	)

376 
	#US_TPR_TXPTR_Pos
 0

	)

377 
	#US_TPR_TXPTR_Msk
 (0xffffffffu << 
US_TPR_TXPTR_Pos
Ë

	)

378 
	#US_TPR_TXPTR
(
vÆue
Ë((
US_TPR_TXPTR_Msk
 & ((vÆueË<< 
US_TPR_TXPTR_Pos
)))

	)

380 
	#US_TCR_TXCTR_Pos
 0

	)

381 
	#US_TCR_TXCTR_Msk
 (0xffffu << 
US_TCR_TXCTR_Pos
Ë

	)

382 
	#US_TCR_TXCTR
(
vÆue
Ë((
US_TCR_TXCTR_Msk
 & ((vÆueË<< 
US_TCR_TXCTR_Pos
)))

	)

384 
	#US_RNPR_RXNPTR_Pos
 0

	)

385 
	#US_RNPR_RXNPTR_Msk
 (0xffffffffu << 
US_RNPR_RXNPTR_Pos
Ë

	)

386 
	#US_RNPR_RXNPTR
(
vÆue
Ë((
US_RNPR_RXNPTR_Msk
 & ((vÆueË<< 
US_RNPR_RXNPTR_Pos
)))

	)

388 
	#US_RNCR_RXNCTR_Pos
 0

	)

389 
	#US_RNCR_RXNCTR_Msk
 (0xffffu << 
US_RNCR_RXNCTR_Pos
Ë

	)

390 
	#US_RNCR_RXNCTR
(
vÆue
Ë((
US_RNCR_RXNCTR_Msk
 & ((vÆueË<< 
US_RNCR_RXNCTR_Pos
)))

	)

392 
	#US_TNPR_TXNPTR_Pos
 0

	)

393 
	#US_TNPR_TXNPTR_Msk
 (0xffffffffu << 
US_TNPR_TXNPTR_Pos
Ë

	)

394 
	#US_TNPR_TXNPTR
(
vÆue
Ë((
US_TNPR_TXNPTR_Msk
 & ((vÆueË<< 
US_TNPR_TXNPTR_Pos
)))

	)

396 
	#US_TNCR_TXNCTR_Pos
 0

	)

397 
	#US_TNCR_TXNCTR_Msk
 (0xffffu << 
US_TNCR_TXNCTR_Pos
Ë

	)

398 
	#US_TNCR_TXNCTR
(
vÆue
Ë((
US_TNCR_TXNCTR_Msk
 & ((vÆueË<< 
US_TNCR_TXNCTR_Pos
)))

	)

400 
	#US_PTCR_RXTEN
 (0x1u << 0Ë

	)

401 
	#US_PTCR_RXTDIS
 (0x1u << 1Ë

	)

402 
	#US_PTCR_TXTEN
 (0x1u << 8Ë

	)

403 
	#US_PTCR_TXTDIS
 (0x1u << 9Ë

	)

405 
	#US_PTSR_RXTEN
 (0x1u << 0Ë

	)

406 
	#US_PTSR_TXTEN
 (0x1u << 8Ë

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_wdt.h

45 #i‚de‡
_SAM3XA_WDT_COMPONENT_


46 
	#_SAM3XA_WDT_COMPONENT_


	)

54 #i‡!(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

57 
WoReg
 
	mWDT_CR
;

58 
RwReg
 
	mWDT_MR
;

59 
RoReg
 
	mWDT_SR
;

60 } 
	tWdt
;

63 
	#WDT_CR_WDRSTT
 (0x1u << 0Ë

	)

64 
	#WDT_CR_KEY_Pos
 24

	)

65 
	#WDT_CR_KEY_Msk
 (0xffu << 
WDT_CR_KEY_Pos
Ë

	)

66 
	#WDT_CR_KEY
(
vÆue
Ë((
WDT_CR_KEY_Msk
 & ((vÆueË<< 
WDT_CR_KEY_Pos
)))

	)

68 
	#WDT_MR_WDV_Pos
 0

	)

69 
	#WDT_MR_WDV_Msk
 (0xfffu << 
WDT_MR_WDV_Pos
Ë

	)

70 
	#WDT_MR_WDV
(
vÆue
Ë((
WDT_MR_WDV_Msk
 & ((vÆueË<< 
WDT_MR_WDV_Pos
)))

	)

71 
	#WDT_MR_WDFIEN
 (0x1u << 12Ë

	)

72 
	#WDT_MR_WDRSTEN
 (0x1u << 13Ë

	)

73 
	#WDT_MR_WDRPROC
 (0x1u << 14Ë

	)

74 
	#WDT_MR_WDDIS
 (0x1u << 15Ë

	)

75 
	#WDT_MR_WDD_Pos
 16

	)

76 
	#WDT_MR_WDD_Msk
 (0xfffu << 
WDT_MR_WDD_Pos
Ë

	)

77 
	#WDT_MR_WDD
(
vÆue
Ë((
WDT_MR_WDD_Msk
 & ((vÆueË<< 
WDT_MR_WDD_Pos
)))

	)

78 
	#WDT_MR_WDDBGHLT
 (0x1u << 28Ë

	)

79 
	#WDT_MR_WDIDLEHLT
 (0x1u << 29Ë

	)

81 
	#WDT_SR_WDUNF
 (0x1u << 0Ë

	)

82 
	#WDT_SR_WDERR
 (0x1u << 1Ë

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_adc.h

45 #i‚de‡
_SAM3XA_ADC_INSTANCE_


46 
	#_SAM3XA_ADC_INSTANCE_


	)

49 #i‡(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

50 
	#REG_ADC_CR
 (0x400C0000UË

	)

51 
	#REG_ADC_MR
 (0x400C0004UË

	)

52 
	#REG_ADC_SEQR1
 (0x400C0008UË

	)

53 
	#REG_ADC_SEQR2
 (0x400C000CUË

	)

54 
	#REG_ADC_CHER
 (0x400C0010UË

	)

55 
	#REG_ADC_CHDR
 (0x400C0014UË

	)

56 
	#REG_ADC_CHSR
 (0x400C0018UË

	)

57 
	#REG_ADC_LCDR
 (0x400C0020UË

	)

58 
	#REG_ADC_IER
 (0x400C0024UË

	)

59 
	#REG_ADC_IDR
 (0x400C0028UË

	)

60 
	#REG_ADC_IMR
 (0x400C002CUË

	)

61 
	#REG_ADC_ISR
 (0x400C0030UË

	)

62 
	#REG_ADC_OVER
 (0x400C003CUË

	)

63 
	#REG_ADC_EMR
 (0x400C0040UË

	)

64 
	#REG_ADC_CWR
 (0x400C0044UË

	)

65 
	#REG_ADC_CGR
 (0x400C0048UË

	)

66 
	#REG_ADC_COR
 (0x400C004CUË

	)

67 
	#REG_ADC_CDR
 (0x400C0050UË

	)

68 
	#REG_ADC_ACR
 (0x400C0094UË

	)

69 
	#REG_ADC_WPMR
 (0x400C00E4UË

	)

70 
	#REG_ADC_WPSR
 (0x400C00E8UË

	)

71 
	#REG_ADC_RPR
 (0x400C0100UË

	)

72 
	#REG_ADC_RCR
 (0x400C0104UË

	)

73 
	#REG_ADC_RNPR
 (0x400C0110UË

	)

74 
	#REG_ADC_RNCR
 (0x400C0114UË

	)

75 
	#REG_ADC_PTCR
 (0x400C0120UË

	)

76 
	#REG_ADC_PTSR
 (0x400C0124UË

	)

78 
	#REG_ADC_CR
 (*(
WoReg
*)0x400C0000UË

	)

79 
	#REG_ADC_MR
 (*(
RwReg
*)0x400C0004UË

	)

80 
	#REG_ADC_SEQR1
 (*(
RwReg
*)0x400C0008UË

	)

81 
	#REG_ADC_SEQR2
 (*(
RwReg
*)0x400C000CUË

	)

82 
	#REG_ADC_CHER
 (*(
WoReg
*)0x400C0010UË

	)

83 
	#REG_ADC_CHDR
 (*(
WoReg
*)0x400C0014UË

	)

84 
	#REG_ADC_CHSR
 (*(
RoReg
*)0x400C0018UË

	)

85 
	#REG_ADC_LCDR
 (*(
RoReg
*)0x400C0020UË

	)

86 
	#REG_ADC_IER
 (*(
WoReg
*)0x400C0024UË

	)

87 
	#REG_ADC_IDR
 (*(
WoReg
*)0x400C0028UË

	)

88 
	#REG_ADC_IMR
 (*(
RoReg
*)0x400C002CUË

	)

89 
	#REG_ADC_ISR
 (*(
RoReg
*)0x400C0030UË

	)

90 
	#REG_ADC_OVER
 (*(
RoReg
*)0x400C003CUË

	)

91 
	#REG_ADC_EMR
 (*(
RwReg
*)0x400C0040UË

	)

92 
	#REG_ADC_CWR
 (*(
RwReg
*)0x400C0044UË

	)

93 
	#REG_ADC_CGR
 (*(
RwReg
*)0x400C0048UË

	)

94 
	#REG_ADC_COR
 (*(
RwReg
*)0x400C004CUË

	)

95 
	#REG_ADC_CDR
 (*(
RoReg
*)0x400C0050UË

	)

96 
	#REG_ADC_ACR
 (*(
RwReg
*)0x400C0094UË

	)

97 
	#REG_ADC_WPMR
 (*(
RwReg
*)0x400C00E4UË

	)

98 
	#REG_ADC_WPSR
 (*(
RoReg
*)0x400C00E8UË

	)

99 
	#REG_ADC_RPR
 (*(
RwReg
*)0x400C0100UË

	)

100 
	#REG_ADC_RCR
 (*(
RwReg
*)0x400C0104UË

	)

101 
	#REG_ADC_RNPR
 (*(
RwReg
*)0x400C0110UË

	)

102 
	#REG_ADC_RNCR
 (*(
RwReg
*)0x400C0114UË

	)

103 
	#REG_ADC_PTCR
 (*(
WoReg
*)0x400C0120UË

	)

104 
	#REG_ADC_PTSR
 (*(
RoReg
*)0x400C0124UË

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_can0.h

45 #i‚de‡
_SAM3XA_CAN0_INSTANCE_


46 
	#_SAM3XA_CAN0_INSTANCE_


	)

49 #i‡(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

50 
	#REG_CAN0_MR
 (0x400B4000UË

	)

51 
	#REG_CAN0_IER
 (0x400B4004UË

	)

52 
	#REG_CAN0_IDR
 (0x400B4008UË

	)

53 
	#REG_CAN0_IMR
 (0x400B400CUË

	)

54 
	#REG_CAN0_SR
 (0x400B4010UË

	)

55 
	#REG_CAN0_BR
 (0x400B4014UË

	)

56 
	#REG_CAN0_TIM
 (0x400B4018UË

	)

57 
	#REG_CAN0_TIMESTP
 (0x400B401CUË

	)

58 
	#REG_CAN0_ECR
 (0x400B4020UË

	)

59 
	#REG_CAN0_TCR
 (0x400B4024UË

	)

60 
	#REG_CAN0_ACR
 (0x400B4028UË

	)

61 
	#REG_CAN0_WPMR
 (0x400B40E4UË

	)

62 
	#REG_CAN0_WPSR
 (0x400B40E8UË

	)

63 
	#REG_CAN0_MMR0
 (0x400B4200UË

	)

64 
	#REG_CAN0_MAM0
 (0x400B4204UË

	)

65 
	#REG_CAN0_MID0
 (0x400B4208UË

	)

66 
	#REG_CAN0_MFID0
 (0x400B420CUË

	)

67 
	#REG_CAN0_MSR0
 (0x400B4210UË

	)

68 
	#REG_CAN0_MDL0
 (0x400B4214UË

	)

69 
	#REG_CAN0_MDH0
 (0x400B4218UË

	)

70 
	#REG_CAN0_MCR0
 (0x400B421CUË

	)

71 
	#REG_CAN0_MMR1
 (0x400B4220UË

	)

72 
	#REG_CAN0_MAM1
 (0x400B4224UË

	)

73 
	#REG_CAN0_MID1
 (0x400B4228UË

	)

74 
	#REG_CAN0_MFID1
 (0x400B422CUË

	)

75 
	#REG_CAN0_MSR1
 (0x400B4230UË

	)

76 
	#REG_CAN0_MDL1
 (0x400B4234UË

	)

77 
	#REG_CAN0_MDH1
 (0x400B4238UË

	)

78 
	#REG_CAN0_MCR1
 (0x400B423CUË

	)

79 
	#REG_CAN0_MMR2
 (0x400B4240UË

	)

80 
	#REG_CAN0_MAM2
 (0x400B4244UË

	)

81 
	#REG_CAN0_MID2
 (0x400B4248UË

	)

82 
	#REG_CAN0_MFID2
 (0x400B424CUË

	)

83 
	#REG_CAN0_MSR2
 (0x400B4250UË

	)

84 
	#REG_CAN0_MDL2
 (0x400B4254UË

	)

85 
	#REG_CAN0_MDH2
 (0x400B4258UË

	)

86 
	#REG_CAN0_MCR2
 (0x400B425CUË

	)

87 
	#REG_CAN0_MMR3
 (0x400B4260UË

	)

88 
	#REG_CAN0_MAM3
 (0x400B4264UË

	)

89 
	#REG_CAN0_MID3
 (0x400B4268UË

	)

90 
	#REG_CAN0_MFID3
 (0x400B426CUË

	)

91 
	#REG_CAN0_MSR3
 (0x400B4270UË

	)

92 
	#REG_CAN0_MDL3
 (0x400B4274UË

	)

93 
	#REG_CAN0_MDH3
 (0x400B4278UË

	)

94 
	#REG_CAN0_MCR3
 (0x400B427CUË

	)

95 
	#REG_CAN0_MMR4
 (0x400B4280UË

	)

96 
	#REG_CAN0_MAM4
 (0x400B4284UË

	)

97 
	#REG_CAN0_MID4
 (0x400B4288UË

	)

98 
	#REG_CAN0_MFID4
 (0x400B428CUË

	)

99 
	#REG_CAN0_MSR4
 (0x400B4290UË

	)

100 
	#REG_CAN0_MDL4
 (0x400B4294UË

	)

101 
	#REG_CAN0_MDH4
 (0x400B4298UË

	)

102 
	#REG_CAN0_MCR4
 (0x400B429CUË

	)

103 
	#REG_CAN0_MMR5
 (0x400B42A0UË

	)

104 
	#REG_CAN0_MAM5
 (0x400B42A4UË

	)

105 
	#REG_CAN0_MID5
 (0x400B42A8UË

	)

106 
	#REG_CAN0_MFID5
 (0x400B42ACUË

	)

107 
	#REG_CAN0_MSR5
 (0x400B42B0UË

	)

108 
	#REG_CAN0_MDL5
 (0x400B42B4UË

	)

109 
	#REG_CAN0_MDH5
 (0x400B42B8UË

	)

110 
	#REG_CAN0_MCR5
 (0x400B42BCUË

	)

111 
	#REG_CAN0_MMR6
 (0x400B42C0UË

	)

112 
	#REG_CAN0_MAM6
 (0x400B42C4UË

	)

113 
	#REG_CAN0_MID6
 (0x400B42C8UË

	)

114 
	#REG_CAN0_MFID6
 (0x400B42CCUË

	)

115 
	#REG_CAN0_MSR6
 (0x400B42D0UË

	)

116 
	#REG_CAN0_MDL6
 (0x400B42D4UË

	)

117 
	#REG_CAN0_MDH6
 (0x400B42D8UË

	)

118 
	#REG_CAN0_MCR6
 (0x400B42DCUË

	)

119 
	#REG_CAN0_MMR7
 (0x400B42E0UË

	)

120 
	#REG_CAN0_MAM7
 (0x400B42E4UË

	)

121 
	#REG_CAN0_MID7
 (0x400B42E8UË

	)

122 
	#REG_CAN0_MFID7
 (0x400B42ECUË

	)

123 
	#REG_CAN0_MSR7
 (0x400B42F0UË

	)

124 
	#REG_CAN0_MDL7
 (0x400B42F4UË

	)

125 
	#REG_CAN0_MDH7
 (0x400B42F8UË

	)

126 
	#REG_CAN0_MCR7
 (0x400B42FCUË

	)

128 
	#REG_CAN0_MR
 (*(
RwReg
*)0x400B4000UË

	)

129 
	#REG_CAN0_IER
 (*(
WoReg
*)0x400B4004UË

	)

130 
	#REG_CAN0_IDR
 (*(
WoReg
*)0x400B4008UË

	)

131 
	#REG_CAN0_IMR
 (*(
RoReg
*)0x400B400CUË

	)

132 
	#REG_CAN0_SR
 (*(
RoReg
*)0x400B4010UË

	)

133 
	#REG_CAN0_BR
 (*(
RwReg
*)0x400B4014UË

	)

134 
	#REG_CAN0_TIM
 (*(
RoReg
*)0x400B4018UË

	)

135 
	#REG_CAN0_TIMESTP
 (*(
RoReg
*)0x400B401CUË

	)

136 
	#REG_CAN0_ECR
 (*(
RoReg
*)0x400B4020UË

	)

137 
	#REG_CAN0_TCR
 (*(
WoReg
*)0x400B4024UË

	)

138 
	#REG_CAN0_ACR
 (*(
WoReg
*)0x400B4028UË

	)

139 
	#REG_CAN0_WPMR
 (*(
RwReg
*)0x400B40E4UË

	)

140 
	#REG_CAN0_WPSR
 (*(
RoReg
*)0x400B40E8UË

	)

141 
	#REG_CAN0_MMR0
 (*(
RwReg
*)0x400B4200UË

	)

142 
	#REG_CAN0_MAM0
 (*(
RwReg
*)0x400B4204UË

	)

143 
	#REG_CAN0_MID0
 (*(
RwReg
*)0x400B4208UË

	)

144 
	#REG_CAN0_MFID0
 (*(
RoReg
*)0x400B420CUË

	)

145 
	#REG_CAN0_MSR0
 (*(
RoReg
*)0x400B4210UË

	)

146 
	#REG_CAN0_MDL0
 (*(
RwReg
*)0x400B4214UË

	)

147 
	#REG_CAN0_MDH0
 (*(
RwReg
*)0x400B4218UË

	)

148 
	#REG_CAN0_MCR0
 (*(
WoReg
*)0x400B421CUË

	)

149 
	#REG_CAN0_MMR1
 (*(
RwReg
*)0x400B4220UË

	)

150 
	#REG_CAN0_MAM1
 (*(
RwReg
*)0x400B4224UË

	)

151 
	#REG_CAN0_MID1
 (*(
RwReg
*)0x400B4228UË

	)

152 
	#REG_CAN0_MFID1
 (*(
RoReg
*)0x400B422CUË

	)

153 
	#REG_CAN0_MSR1
 (*(
RoReg
*)0x400B4230UË

	)

154 
	#REG_CAN0_MDL1
 (*(
RwReg
*)0x400B4234UË

	)

155 
	#REG_CAN0_MDH1
 (*(
RwReg
*)0x400B4238UË

	)

156 
	#REG_CAN0_MCR1
 (*(
WoReg
*)0x400B423CUË

	)

157 
	#REG_CAN0_MMR2
 (*(
RwReg
*)0x400B4240UË

	)

158 
	#REG_CAN0_MAM2
 (*(
RwReg
*)0x400B4244UË

	)

159 
	#REG_CAN0_MID2
 (*(
RwReg
*)0x400B4248UË

	)

160 
	#REG_CAN0_MFID2
 (*(
RoReg
*)0x400B424CUË

	)

161 
	#REG_CAN0_MSR2
 (*(
RoReg
*)0x400B4250UË

	)

162 
	#REG_CAN0_MDL2
 (*(
RwReg
*)0x400B4254UË

	)

163 
	#REG_CAN0_MDH2
 (*(
RwReg
*)0x400B4258UË

	)

164 
	#REG_CAN0_MCR2
 (*(
WoReg
*)0x400B425CUË

	)

165 
	#REG_CAN0_MMR3
 (*(
RwReg
*)0x400B4260UË

	)

166 
	#REG_CAN0_MAM3
 (*(
RwReg
*)0x400B4264UË

	)

167 
	#REG_CAN0_MID3
 (*(
RwReg
*)0x400B4268UË

	)

168 
	#REG_CAN0_MFID3
 (*(
RoReg
*)0x400B426CUË

	)

169 
	#REG_CAN0_MSR3
 (*(
RoReg
*)0x400B4270UË

	)

170 
	#REG_CAN0_MDL3
 (*(
RwReg
*)0x400B4274UË

	)

171 
	#REG_CAN0_MDH3
 (*(
RwReg
*)0x400B4278UË

	)

172 
	#REG_CAN0_MCR3
 (*(
WoReg
*)0x400B427CUË

	)

173 
	#REG_CAN0_MMR4
 (*(
RwReg
*)0x400B4280UË

	)

174 
	#REG_CAN0_MAM4
 (*(
RwReg
*)0x400B4284UË

	)

175 
	#REG_CAN0_MID4
 (*(
RwReg
*)0x400B4288UË

	)

176 
	#REG_CAN0_MFID4
 (*(
RoReg
*)0x400B428CUË

	)

177 
	#REG_CAN0_MSR4
 (*(
RoReg
*)0x400B4290UË

	)

178 
	#REG_CAN0_MDL4
 (*(
RwReg
*)0x400B4294UË

	)

179 
	#REG_CAN0_MDH4
 (*(
RwReg
*)0x400B4298UË

	)

180 
	#REG_CAN0_MCR4
 (*(
WoReg
*)0x400B429CUË

	)

181 
	#REG_CAN0_MMR5
 (*(
RwReg
*)0x400B42A0UË

	)

182 
	#REG_CAN0_MAM5
 (*(
RwReg
*)0x400B42A4UË

	)

183 
	#REG_CAN0_MID5
 (*(
RwReg
*)0x400B42A8UË

	)

184 
	#REG_CAN0_MFID5
 (*(
RoReg
*)0x400B42ACUË

	)

185 
	#REG_CAN0_MSR5
 (*(
RoReg
*)0x400B42B0UË

	)

186 
	#REG_CAN0_MDL5
 (*(
RwReg
*)0x400B42B4UË

	)

187 
	#REG_CAN0_MDH5
 (*(
RwReg
*)0x400B42B8UË

	)

188 
	#REG_CAN0_MCR5
 (*(
WoReg
*)0x400B42BCUË

	)

189 
	#REG_CAN0_MMR6
 (*(
RwReg
*)0x400B42C0UË

	)

190 
	#REG_CAN0_MAM6
 (*(
RwReg
*)0x400B42C4UË

	)

191 
	#REG_CAN0_MID6
 (*(
RwReg
*)0x400B42C8UË

	)

192 
	#REG_CAN0_MFID6
 (*(
RoReg
*)0x400B42CCUË

	)

193 
	#REG_CAN0_MSR6
 (*(
RoReg
*)0x400B42D0UË

	)

194 
	#REG_CAN0_MDL6
 (*(
RwReg
*)0x400B42D4UË

	)

195 
	#REG_CAN0_MDH6
 (*(
RwReg
*)0x400B42D8UË

	)

196 
	#REG_CAN0_MCR6
 (*(
WoReg
*)0x400B42DCUË

	)

197 
	#REG_CAN0_MMR7
 (*(
RwReg
*)0x400B42E0UË

	)

198 
	#REG_CAN0_MAM7
 (*(
RwReg
*)0x400B42E4UË

	)

199 
	#REG_CAN0_MID7
 (*(
RwReg
*)0x400B42E8UË

	)

200 
	#REG_CAN0_MFID7
 (*(
RoReg
*)0x400B42ECUË

	)

201 
	#REG_CAN0_MSR7
 (*(
RoReg
*)0x400B42F0UË

	)

202 
	#REG_CAN0_MDL7
 (*(
RwReg
*)0x400B42F4UË

	)

203 
	#REG_CAN0_MDH7
 (*(
RwReg
*)0x400B42F8UË

	)

204 
	#REG_CAN0_MCR7
 (*(
WoReg
*)0x400B42FCUË

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_can1.h

45 #i‚de‡
_SAM3XA_CAN1_INSTANCE_


46 
	#_SAM3XA_CAN1_INSTANCE_


	)

49 #i‡(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

50 
	#REG_CAN1_MR
 (0x400B8000UË

	)

51 
	#REG_CAN1_IER
 (0x400B8004UË

	)

52 
	#REG_CAN1_IDR
 (0x400B8008UË

	)

53 
	#REG_CAN1_IMR
 (0x400B800CUË

	)

54 
	#REG_CAN1_SR
 (0x400B8010UË

	)

55 
	#REG_CAN1_BR
 (0x400B8014UË

	)

56 
	#REG_CAN1_TIM
 (0x400B8018UË

	)

57 
	#REG_CAN1_TIMESTP
 (0x400B801CUË

	)

58 
	#REG_CAN1_ECR
 (0x400B8020UË

	)

59 
	#REG_CAN1_TCR
 (0x400B8024UË

	)

60 
	#REG_CAN1_ACR
 (0x400B8028UË

	)

61 
	#REG_CAN1_WPMR
 (0x400B80E4UË

	)

62 
	#REG_CAN1_WPSR
 (0x400B80E8UË

	)

63 
	#REG_CAN1_MMR0
 (0x400B8200UË

	)

64 
	#REG_CAN1_MAM0
 (0x400B8204UË

	)

65 
	#REG_CAN1_MID0
 (0x400B8208UË

	)

66 
	#REG_CAN1_MFID0
 (0x400B820CUË

	)

67 
	#REG_CAN1_MSR0
 (0x400B8210UË

	)

68 
	#REG_CAN1_MDL0
 (0x400B8214UË

	)

69 
	#REG_CAN1_MDH0
 (0x400B8218UË

	)

70 
	#REG_CAN1_MCR0
 (0x400B821CUË

	)

71 
	#REG_CAN1_MMR1
 (0x400B8220UË

	)

72 
	#REG_CAN1_MAM1
 (0x400B8224UË

	)

73 
	#REG_CAN1_MID1
 (0x400B8228UË

	)

74 
	#REG_CAN1_MFID1
 (0x400B822CUË

	)

75 
	#REG_CAN1_MSR1
 (0x400B8230UË

	)

76 
	#REG_CAN1_MDL1
 (0x400B8234UË

	)

77 
	#REG_CAN1_MDH1
 (0x400B8238UË

	)

78 
	#REG_CAN1_MCR1
 (0x400B823CUË

	)

79 
	#REG_CAN1_MMR2
 (0x400B8240UË

	)

80 
	#REG_CAN1_MAM2
 (0x400B8244UË

	)

81 
	#REG_CAN1_MID2
 (0x400B8248UË

	)

82 
	#REG_CAN1_MFID2
 (0x400B824CUË

	)

83 
	#REG_CAN1_MSR2
 (0x400B8250UË

	)

84 
	#REG_CAN1_MDL2
 (0x400B8254UË

	)

85 
	#REG_CAN1_MDH2
 (0x400B8258UË

	)

86 
	#REG_CAN1_MCR2
 (0x400B825CUË

	)

87 
	#REG_CAN1_MMR3
 (0x400B8260UË

	)

88 
	#REG_CAN1_MAM3
 (0x400B8264UË

	)

89 
	#REG_CAN1_MID3
 (0x400B8268UË

	)

90 
	#REG_CAN1_MFID3
 (0x400B826CUË

	)

91 
	#REG_CAN1_MSR3
 (0x400B8270UË

	)

92 
	#REG_CAN1_MDL3
 (0x400B8274UË

	)

93 
	#REG_CAN1_MDH3
 (0x400B8278UË

	)

94 
	#REG_CAN1_MCR3
 (0x400B827CUË

	)

95 
	#REG_CAN1_MMR4
 (0x400B8280UË

	)

96 
	#REG_CAN1_MAM4
 (0x400B8284UË

	)

97 
	#REG_CAN1_MID4
 (0x400B8288UË

	)

98 
	#REG_CAN1_MFID4
 (0x400B828CUË

	)

99 
	#REG_CAN1_MSR4
 (0x400B8290UË

	)

100 
	#REG_CAN1_MDL4
 (0x400B8294UË

	)

101 
	#REG_CAN1_MDH4
 (0x400B8298UË

	)

102 
	#REG_CAN1_MCR4
 (0x400B829CUË

	)

103 
	#REG_CAN1_MMR5
 (0x400B82A0UË

	)

104 
	#REG_CAN1_MAM5
 (0x400B82A4UË

	)

105 
	#REG_CAN1_MID5
 (0x400B82A8UË

	)

106 
	#REG_CAN1_MFID5
 (0x400B82ACUË

	)

107 
	#REG_CAN1_MSR5
 (0x400B82B0UË

	)

108 
	#REG_CAN1_MDL5
 (0x400B82B4UË

	)

109 
	#REG_CAN1_MDH5
 (0x400B82B8UË

	)

110 
	#REG_CAN1_MCR5
 (0x400B82BCUË

	)

111 
	#REG_CAN1_MMR6
 (0x400B82C0UË

	)

112 
	#REG_CAN1_MAM6
 (0x400B82C4UË

	)

113 
	#REG_CAN1_MID6
 (0x400B82C8UË

	)

114 
	#REG_CAN1_MFID6
 (0x400B82CCUË

	)

115 
	#REG_CAN1_MSR6
 (0x400B82D0UË

	)

116 
	#REG_CAN1_MDL6
 (0x400B82D4UË

	)

117 
	#REG_CAN1_MDH6
 (0x400B82D8UË

	)

118 
	#REG_CAN1_MCR6
 (0x400B82DCUË

	)

119 
	#REG_CAN1_MMR7
 (0x400B82E0UË

	)

120 
	#REG_CAN1_MAM7
 (0x400B82E4UË

	)

121 
	#REG_CAN1_MID7
 (0x400B82E8UË

	)

122 
	#REG_CAN1_MFID7
 (0x400B82ECUË

	)

123 
	#REG_CAN1_MSR7
 (0x400B82F0UË

	)

124 
	#REG_CAN1_MDL7
 (0x400B82F4UË

	)

125 
	#REG_CAN1_MDH7
 (0x400B82F8UË

	)

126 
	#REG_CAN1_MCR7
 (0x400B82FCUË

	)

128 
	#REG_CAN1_MR
 (*(
RwReg
*)0x400B8000UË

	)

129 
	#REG_CAN1_IER
 (*(
WoReg
*)0x400B8004UË

	)

130 
	#REG_CAN1_IDR
 (*(
WoReg
*)0x400B8008UË

	)

131 
	#REG_CAN1_IMR
 (*(
RoReg
*)0x400B800CUË

	)

132 
	#REG_CAN1_SR
 (*(
RoReg
*)0x400B8010UË

	)

133 
	#REG_CAN1_BR
 (*(
RwReg
*)0x400B8014UË

	)

134 
	#REG_CAN1_TIM
 (*(
RoReg
*)0x400B8018UË

	)

135 
	#REG_CAN1_TIMESTP
 (*(
RoReg
*)0x400B801CUË

	)

136 
	#REG_CAN1_ECR
 (*(
RoReg
*)0x400B8020UË

	)

137 
	#REG_CAN1_TCR
 (*(
WoReg
*)0x400B8024UË

	)

138 
	#REG_CAN1_ACR
 (*(
WoReg
*)0x400B8028UË

	)

139 
	#REG_CAN1_WPMR
 (*(
RwReg
*)0x400B80E4UË

	)

140 
	#REG_CAN1_WPSR
 (*(
RoReg
*)0x400B80E8UË

	)

141 
	#REG_CAN1_MMR0
 (*(
RwReg
*)0x400B8200UË

	)

142 
	#REG_CAN1_MAM0
 (*(
RwReg
*)0x400B8204UË

	)

143 
	#REG_CAN1_MID0
 (*(
RwReg
*)0x400B8208UË

	)

144 
	#REG_CAN1_MFID0
 (*(
RoReg
*)0x400B820CUË

	)

145 
	#REG_CAN1_MSR0
 (*(
RoReg
*)0x400B8210UË

	)

146 
	#REG_CAN1_MDL0
 (*(
RwReg
*)0x400B8214UË

	)

147 
	#REG_CAN1_MDH0
 (*(
RwReg
*)0x400B8218UË

	)

148 
	#REG_CAN1_MCR0
 (*(
WoReg
*)0x400B821CUË

	)

149 
	#REG_CAN1_MMR1
 (*(
RwReg
*)0x400B8220UË

	)

150 
	#REG_CAN1_MAM1
 (*(
RwReg
*)0x400B8224UË

	)

151 
	#REG_CAN1_MID1
 (*(
RwReg
*)0x400B8228UË

	)

152 
	#REG_CAN1_MFID1
 (*(
RoReg
*)0x400B822CUË

	)

153 
	#REG_CAN1_MSR1
 (*(
RoReg
*)0x400B8230UË

	)

154 
	#REG_CAN1_MDL1
 (*(
RwReg
*)0x400B8234UË

	)

155 
	#REG_CAN1_MDH1
 (*(
RwReg
*)0x400B8238UË

	)

156 
	#REG_CAN1_MCR1
 (*(
WoReg
*)0x400B823CUË

	)

157 
	#REG_CAN1_MMR2
 (*(
RwReg
*)0x400B8240UË

	)

158 
	#REG_CAN1_MAM2
 (*(
RwReg
*)0x400B8244UË

	)

159 
	#REG_CAN1_MID2
 (*(
RwReg
*)0x400B8248UË

	)

160 
	#REG_CAN1_MFID2
 (*(
RoReg
*)0x400B824CUË

	)

161 
	#REG_CAN1_MSR2
 (*(
RoReg
*)0x400B8250UË

	)

162 
	#REG_CAN1_MDL2
 (*(
RwReg
*)0x400B8254UË

	)

163 
	#REG_CAN1_MDH2
 (*(
RwReg
*)0x400B8258UË

	)

164 
	#REG_CAN1_MCR2
 (*(
WoReg
*)0x400B825CUË

	)

165 
	#REG_CAN1_MMR3
 (*(
RwReg
*)0x400B8260UË

	)

166 
	#REG_CAN1_MAM3
 (*(
RwReg
*)0x400B8264UË

	)

167 
	#REG_CAN1_MID3
 (*(
RwReg
*)0x400B8268UË

	)

168 
	#REG_CAN1_MFID3
 (*(
RoReg
*)0x400B826CUË

	)

169 
	#REG_CAN1_MSR3
 (*(
RoReg
*)0x400B8270UË

	)

170 
	#REG_CAN1_MDL3
 (*(
RwReg
*)0x400B8274UË

	)

171 
	#REG_CAN1_MDH3
 (*(
RwReg
*)0x400B8278UË

	)

172 
	#REG_CAN1_MCR3
 (*(
WoReg
*)0x400B827CUË

	)

173 
	#REG_CAN1_MMR4
 (*(
RwReg
*)0x400B8280UË

	)

174 
	#REG_CAN1_MAM4
 (*(
RwReg
*)0x400B8284UË

	)

175 
	#REG_CAN1_MID4
 (*(
RwReg
*)0x400B8288UË

	)

176 
	#REG_CAN1_MFID4
 (*(
RoReg
*)0x400B828CUË

	)

177 
	#REG_CAN1_MSR4
 (*(
RoReg
*)0x400B8290UË

	)

178 
	#REG_CAN1_MDL4
 (*(
RwReg
*)0x400B8294UË

	)

179 
	#REG_CAN1_MDH4
 (*(
RwReg
*)0x400B8298UË

	)

180 
	#REG_CAN1_MCR4
 (*(
WoReg
*)0x400B829CUË

	)

181 
	#REG_CAN1_MMR5
 (*(
RwReg
*)0x400B82A0UË

	)

182 
	#REG_CAN1_MAM5
 (*(
RwReg
*)0x400B82A4UË

	)

183 
	#REG_CAN1_MID5
 (*(
RwReg
*)0x400B82A8UË

	)

184 
	#REG_CAN1_MFID5
 (*(
RoReg
*)0x400B82ACUË

	)

185 
	#REG_CAN1_MSR5
 (*(
RoReg
*)0x400B82B0UË

	)

186 
	#REG_CAN1_MDL5
 (*(
RwReg
*)0x400B82B4UË

	)

187 
	#REG_CAN1_MDH5
 (*(
RwReg
*)0x400B82B8UË

	)

188 
	#REG_CAN1_MCR5
 (*(
WoReg
*)0x400B82BCUË

	)

189 
	#REG_CAN1_MMR6
 (*(
RwReg
*)0x400B82C0UË

	)

190 
	#REG_CAN1_MAM6
 (*(
RwReg
*)0x400B82C4UË

	)

191 
	#REG_CAN1_MID6
 (*(
RwReg
*)0x400B82C8UË

	)

192 
	#REG_CAN1_MFID6
 (*(
RoReg
*)0x400B82CCUË

	)

193 
	#REG_CAN1_MSR6
 (*(
RoReg
*)0x400B82D0UË

	)

194 
	#REG_CAN1_MDL6
 (*(
RwReg
*)0x400B82D4UË

	)

195 
	#REG_CAN1_MDH6
 (*(
RwReg
*)0x400B82D8UË

	)

196 
	#REG_CAN1_MCR6
 (*(
WoReg
*)0x400B82DCUË

	)

197 
	#REG_CAN1_MMR7
 (*(
RwReg
*)0x400B82E0UË

	)

198 
	#REG_CAN1_MAM7
 (*(
RwReg
*)0x400B82E4UË

	)

199 
	#REG_CAN1_MID7
 (*(
RwReg
*)0x400B82E8UË

	)

200 
	#REG_CAN1_MFID7
 (*(
RoReg
*)0x400B82ECUË

	)

201 
	#REG_CAN1_MSR7
 (*(
RoReg
*)0x400B82F0UË

	)

202 
	#REG_CAN1_MDL7
 (*(
RwReg
*)0x400B82F4UË

	)

203 
	#REG_CAN1_MDH7
 (*(
RwReg
*)0x400B82F8UË

	)

204 
	#REG_CAN1_MCR7
 (*(
WoReg
*)0x400B82FCUË

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_chipid.h

45 #i‚de‡
_SAM3XA_CHIPID_INSTANCE_


46 
	#_SAM3XA_CHIPID_INSTANCE_


	)

49 #i‡(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

50 
	#REG_CHIPID_CIDR
 (0x400E0940UË

	)

51 
	#REG_CHIPID_EXID
 (0x400E0944UË

	)

53 
	#REG_CHIPID_CIDR
 (*(
RoReg
*)0x400E0940UË

	)

54 
	#REG_CHIPID_EXID
 (*(
RoReg
*)0x400E0944UË

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_dacc.h

45 #i‚de‡
_SAM3XA_DACC_INSTANCE_


46 
	#_SAM3XA_DACC_INSTANCE_


	)

49 #i‡(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

50 
	#REG_DACC_CR
 (0x400C8000UË

	)

51 
	#REG_DACC_MR
 (0x400C8004UË

	)

52 
	#REG_DACC_CHER
 (0x400C8010UË

	)

53 
	#REG_DACC_CHDR
 (0x400C8014UË

	)

54 
	#REG_DACC_CHSR
 (0x400C8018UË

	)

55 
	#REG_DACC_CDR
 (0x400C8020UË

	)

56 
	#REG_DACC_IER
 (0x400C8024UË

	)

57 
	#REG_DACC_IDR
 (0x400C8028UË

	)

58 
	#REG_DACC_IMR
 (0x400C802CUË

	)

59 
	#REG_DACC_ISR
 (0x400C8030UË

	)

60 
	#REG_DACC_ACR
 (0x400C8094UË

	)

61 
	#REG_DACC_WPMR
 (0x400C80E4UË

	)

62 
	#REG_DACC_WPSR
 (0x400C80E8UË

	)

63 
	#REG_DACC_TPR
 (0x400C8108UË

	)

64 
	#REG_DACC_TCR
 (0x400C810CUË

	)

65 
	#REG_DACC_TNPR
 (0x400C8118UË

	)

66 
	#REG_DACC_TNCR
 (0x400C811CUË

	)

67 
	#REG_DACC_PTCR
 (0x400C8120UË

	)

68 
	#REG_DACC_PTSR
 (0x400C8124UË

	)

70 
	#REG_DACC_CR
 (*(
WoReg
*)0x400C8000UË

	)

71 
	#REG_DACC_MR
 (*(
RwReg
*)0x400C8004UË

	)

72 
	#REG_DACC_CHER
 (*(
WoReg
*)0x400C8010UË

	)

73 
	#REG_DACC_CHDR
 (*(
WoReg
*)0x400C8014UË

	)

74 
	#REG_DACC_CHSR
 (*(
RoReg
*)0x400C8018UË

	)

75 
	#REG_DACC_CDR
 (*(
WoReg
*)0x400C8020UË

	)

76 
	#REG_DACC_IER
 (*(
WoReg
*)0x400C8024UË

	)

77 
	#REG_DACC_IDR
 (*(
WoReg
*)0x400C8028UË

	)

78 
	#REG_DACC_IMR
 (*(
RoReg
*)0x400C802CUË

	)

79 
	#REG_DACC_ISR
 (*(
RoReg
*)0x400C8030UË

	)

80 
	#REG_DACC_ACR
 (*(
RwReg
*)0x400C8094UË

	)

81 
	#REG_DACC_WPMR
 (*(
RwReg
*)0x400C80E4UË

	)

82 
	#REG_DACC_WPSR
 (*(
RoReg
*)0x400C80E8UË

	)

83 
	#REG_DACC_TPR
 (*(
RwReg
*)0x400C8108UË

	)

84 
	#REG_DACC_TCR
 (*(
RwReg
*)0x400C810CUË

	)

85 
	#REG_DACC_TNPR
 (*(
RwReg
*)0x400C8118UË

	)

86 
	#REG_DACC_TNCR
 (*(
RwReg
*)0x400C811CUË

	)

87 
	#REG_DACC_PTCR
 (*(
WoReg
*)0x400C8120UË

	)

88 
	#REG_DACC_PTSR
 (*(
RoReg
*)0x400C8124UË

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_dmac.h

45 #i‚de‡
_SAM3XA_DMAC_INSTANCE_


46 
	#_SAM3XA_DMAC_INSTANCE_


	)

49 #i‡(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

50 
	#REG_DMAC_GCFG
 (0x400C4000UË

	)

51 
	#REG_DMAC_EN
 (0x400C4004UË

	)

52 
	#REG_DMAC_SREQ
 (0x400C4008UË

	)

53 
	#REG_DMAC_CREQ
 (0x400C400CUË

	)

54 
	#REG_DMAC_LAST
 (0x400C4010UË

	)

55 
	#REG_DMAC_EBCIER
 (0x400C4018UË

	)

56 
	#REG_DMAC_EBCIDR
 (0x400C401CUË

	)

57 
	#REG_DMAC_EBCIMR
 (0x400C4020UË

	)

58 
	#REG_DMAC_EBCISR
 (0x400C4024UË

	)

59 
	#REG_DMAC_CHER
 (0x400C4028UË

	)

60 
	#REG_DMAC_CHDR
 (0x400C402CUË

	)

61 
	#REG_DMAC_CHSR
 (0x400C4030UË

	)

62 
	#REG_DMAC_SADDR0
 (0x400C403CUË

	)

63 
	#REG_DMAC_DADDR0
 (0x400C4040UË

	)

64 
	#REG_DMAC_DSCR0
 (0x400C4044UË

	)

65 
	#REG_DMAC_CTRLA0
 (0x400C4048UË

	)

66 
	#REG_DMAC_CTRLB0
 (0x400C404CUË

	)

67 
	#REG_DMAC_CFG0
 (0x400C4050UË

	)

68 
	#REG_DMAC_SADDR1
 (0x400C4064UË

	)

69 
	#REG_DMAC_DADDR1
 (0x400C4068UË

	)

70 
	#REG_DMAC_DSCR1
 (0x400C406CUË

	)

71 
	#REG_DMAC_CTRLA1
 (0x400C4070UË

	)

72 
	#REG_DMAC_CTRLB1
 (0x400C4074UË

	)

73 
	#REG_DMAC_CFG1
 (0x400C4078UË

	)

74 
	#REG_DMAC_SADDR2
 (0x400C408CUË

	)

75 
	#REG_DMAC_DADDR2
 (0x400C4090UË

	)

76 
	#REG_DMAC_DSCR2
 (0x400C4094UË

	)

77 
	#REG_DMAC_CTRLA2
 (0x400C4098UË

	)

78 
	#REG_DMAC_CTRLB2
 (0x400C409CUË

	)

79 
	#REG_DMAC_CFG2
 (0x400C40A0UË

	)

80 
	#REG_DMAC_SADDR3
 (0x400C40B4UË

	)

81 
	#REG_DMAC_DADDR3
 (0x400C40B8UË

	)

82 
	#REG_DMAC_DSCR3
 (0x400C40BCUË

	)

83 
	#REG_DMAC_CTRLA3
 (0x400C40C0UË

	)

84 
	#REG_DMAC_CTRLB3
 (0x400C40C4UË

	)

85 
	#REG_DMAC_CFG3
 (0x400C40C8UË

	)

86 
	#REG_DMAC_SADDR4
 (0x400C40DCUË

	)

87 
	#REG_DMAC_DADDR4
 (0x400C40E0UË

	)

88 
	#REG_DMAC_DSCR4
 (0x400C40E4UË

	)

89 
	#REG_DMAC_CTRLA4
 (0x400C40E8UË

	)

90 
	#REG_DMAC_CTRLB4
 (0x400C40ECUË

	)

91 
	#REG_DMAC_CFG4
 (0x400C40F0UË

	)

92 
	#REG_DMAC_SADDR5
 (0x400C4104UË

	)

93 
	#REG_DMAC_DADDR5
 (0x400C4108UË

	)

94 
	#REG_DMAC_DSCR5
 (0x400C410CUË

	)

95 
	#REG_DMAC_CTRLA5
 (0x400C4110UË

	)

96 
	#REG_DMAC_CTRLB5
 (0x400C4114UË

	)

97 
	#REG_DMAC_CFG5
 (0x400C4118UË

	)

98 
	#REG_DMAC_WPMR
 (0x400C41E4UË

	)

99 
	#REG_DMAC_WPSR
 (0x400C41E8UË

	)

101 
	#REG_DMAC_GCFG
 (*(
RwReg
*)0x400C4000UË

	)

102 
	#REG_DMAC_EN
 (*(
RwReg
*)0x400C4004UË

	)

103 
	#REG_DMAC_SREQ
 (*(
RwReg
*)0x400C4008UË

	)

104 
	#REG_DMAC_CREQ
 (*(
RwReg
*)0x400C400CUË

	)

105 
	#REG_DMAC_LAST
 (*(
RwReg
*)0x400C4010UË

	)

106 
	#REG_DMAC_EBCIER
 (*(
WoReg
*)0x400C4018UË

	)

107 
	#REG_DMAC_EBCIDR
 (*(
WoReg
*)0x400C401CUË

	)

108 
	#REG_DMAC_EBCIMR
 (*(
RoReg
*)0x400C4020UË

	)

109 
	#REG_DMAC_EBCISR
 (*(
RoReg
*)0x400C4024UË

	)

110 
	#REG_DMAC_CHER
 (*(
WoReg
*)0x400C4028UË

	)

111 
	#REG_DMAC_CHDR
 (*(
WoReg
*)0x400C402CUË

	)

112 
	#REG_DMAC_CHSR
 (*(
RoReg
*)0x400C4030UË

	)

113 
	#REG_DMAC_SADDR0
 (*(
RwReg
*)0x400C403CUË

	)

114 
	#REG_DMAC_DADDR0
 (*(
RwReg
*)0x400C4040UË

	)

115 
	#REG_DMAC_DSCR0
 (*(
RwReg
*)0x400C4044UË

	)

116 
	#REG_DMAC_CTRLA0
 (*(
RwReg
*)0x400C4048UË

	)

117 
	#REG_DMAC_CTRLB0
 (*(
RwReg
*)0x400C404CUË

	)

118 
	#REG_DMAC_CFG0
 (*(
RwReg
*)0x400C4050UË

	)

119 
	#REG_DMAC_SADDR1
 (*(
RwReg
*)0x400C4064UË

	)

120 
	#REG_DMAC_DADDR1
 (*(
RwReg
*)0x400C4068UË

	)

121 
	#REG_DMAC_DSCR1
 (*(
RwReg
*)0x400C406CUË

	)

122 
	#REG_DMAC_CTRLA1
 (*(
RwReg
*)0x400C4070UË

	)

123 
	#REG_DMAC_CTRLB1
 (*(
RwReg
*)0x400C4074UË

	)

124 
	#REG_DMAC_CFG1
 (*(
RwReg
*)0x400C4078UË

	)

125 
	#REG_DMAC_SADDR2
 (*(
RwReg
*)0x400C408CUË

	)

126 
	#REG_DMAC_DADDR2
 (*(
RwReg
*)0x400C4090UË

	)

127 
	#REG_DMAC_DSCR2
 (*(
RwReg
*)0x400C4094UË

	)

128 
	#REG_DMAC_CTRLA2
 (*(
RwReg
*)0x400C4098UË

	)

129 
	#REG_DMAC_CTRLB2
 (*(
RwReg
*)0x400C409CUË

	)

130 
	#REG_DMAC_CFG2
 (*(
RwReg
*)0x400C40A0UË

	)

131 
	#REG_DMAC_SADDR3
 (*(
RwReg
*)0x400C40B4UË

	)

132 
	#REG_DMAC_DADDR3
 (*(
RwReg
*)0x400C40B8UË

	)

133 
	#REG_DMAC_DSCR3
 (*(
RwReg
*)0x400C40BCUË

	)

134 
	#REG_DMAC_CTRLA3
 (*(
RwReg
*)0x400C40C0UË

	)

135 
	#REG_DMAC_CTRLB3
 (*(
RwReg
*)0x400C40C4UË

	)

136 
	#REG_DMAC_CFG3
 (*(
RwReg
*)0x400C40C8UË

	)

137 
	#REG_DMAC_SADDR4
 (*(
RwReg
*)0x400C40DCUË

	)

138 
	#REG_DMAC_DADDR4
 (*(
RwReg
*)0x400C40E0UË

	)

139 
	#REG_DMAC_DSCR4
 (*(
RwReg
*)0x400C40E4UË

	)

140 
	#REG_DMAC_CTRLA4
 (*(
RwReg
*)0x400C40E8UË

	)

141 
	#REG_DMAC_CTRLB4
 (*(
RwReg
*)0x400C40ECUË

	)

142 
	#REG_DMAC_CFG4
 (*(
RwReg
*)0x400C40F0UË

	)

143 
	#REG_DMAC_SADDR5
 (*(
RwReg
*)0x400C4104UË

	)

144 
	#REG_DMAC_DADDR5
 (*(
RwReg
*)0x400C4108UË

	)

145 
	#REG_DMAC_DSCR5
 (*(
RwReg
*)0x400C410CUË

	)

146 
	#REG_DMAC_CTRLA5
 (*(
RwReg
*)0x400C4110UË

	)

147 
	#REG_DMAC_CTRLB5
 (*(
RwReg
*)0x400C4114UË

	)

148 
	#REG_DMAC_CFG5
 (*(
RwReg
*)0x400C4118UË

	)

149 
	#REG_DMAC_WPMR
 (*(
RwReg
*)0x400C41E4UË

	)

150 
	#REG_DMAC_WPSR
 (*(
RoReg
*)0x400C41E8UË

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_efc0.h

45 #i‚de‡
_SAM3XA_EFC0_INSTANCE_


46 
	#_SAM3XA_EFC0_INSTANCE_


	)

49 #i‡(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

50 
	#REG_EFC0_FMR
 (0x400E0A00UË

	)

51 
	#REG_EFC0_FCR
 (0x400E0A04UË

	)

52 
	#REG_EFC0_FSR
 (0x400E0A08UË

	)

53 
	#REG_EFC0_FRR
 (0x400E0A0CUË

	)

55 
	#REG_EFC0_FMR
 (*(
RwReg
*)0x400E0A00UË

	)

56 
	#REG_EFC0_FCR
 (*(
WoReg
*)0x400E0A04UË

	)

57 
	#REG_EFC0_FSR
 (*(
RoReg
*)0x400E0A08UË

	)

58 
	#REG_EFC0_FRR
 (*(
RoReg
*)0x400E0A0CUË

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_efc1.h

45 #i‚de‡
_SAM3XA_EFC1_INSTANCE_


46 
	#_SAM3XA_EFC1_INSTANCE_


	)

49 #i‡(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

50 
	#REG_EFC1_FMR
 (0x400E0C00UË

	)

51 
	#REG_EFC1_FCR
 (0x400E0C04UË

	)

52 
	#REG_EFC1_FSR
 (0x400E0C08UË

	)

53 
	#REG_EFC1_FRR
 (0x400E0C0CUË

	)

55 
	#REG_EFC1_FMR
 (*(
RwReg
*)0x400E0C00UË

	)

56 
	#REG_EFC1_FCR
 (*(
WoReg
*)0x400E0C04UË

	)

57 
	#REG_EFC1_FSR
 (*(
RoReg
*)0x400E0C08UË

	)

58 
	#REG_EFC1_FRR
 (*(
RoReg
*)0x400E0C0CUË

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_emac.h

45 #i‚de‡
_SAM3XA_EMAC_INSTANCE_


46 
	#_SAM3XA_EMAC_INSTANCE_


	)

49 #i‡(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

50 
	#REG_EMAC_NCR
 (0x400B0000UË

	)

51 
	#REG_EMAC_NCFGR
 (0x400B0004UË

	)

52 
	#REG_EMAC_NSR
 (0x400B0008UË

	)

53 
	#REG_EMAC_TSR
 (0x400B0014UË

	)

54 
	#REG_EMAC_RBQP
 (0x400B0018UË

	)

55 
	#REG_EMAC_TBQP
 (0x400B001CUË

	)

56 
	#REG_EMAC_RSR
 (0x400B0020UË

	)

57 
	#REG_EMAC_ISR
 (0x400B0024UË

	)

58 
	#REG_EMAC_IER
 (0x400B0028UË

	)

59 
	#REG_EMAC_IDR
 (0x400B002CUË

	)

60 
	#REG_EMAC_IMR
 (0x400B0030UË

	)

61 
	#REG_EMAC_MAN
 (0x400B0034UË

	)

62 
	#REG_EMAC_PTR
 (0x400B0038UË

	)

63 
	#REG_EMAC_PFR
 (0x400B003CUË

	)

64 
	#REG_EMAC_FTO
 (0x400B0040UË

	)

65 
	#REG_EMAC_SCF
 (0x400B0044UË

	)

66 
	#REG_EMAC_MCF
 (0x400B0048UË

	)

67 
	#REG_EMAC_FRO
 (0x400B004CUË

	)

68 
	#REG_EMAC_FCSE
 (0x400B0050UË

	)

69 
	#REG_EMAC_ALE
 (0x400B0054UË

	)

70 
	#REG_EMAC_DTF
 (0x400B0058UË

	)

71 
	#REG_EMAC_LCOL
 (0x400B005CUË

	)

72 
	#REG_EMAC_ECOL
 (0x400B0060UË

	)

73 
	#REG_EMAC_TUND
 (0x400B0064UË

	)

74 
	#REG_EMAC_CSE
 (0x400B0068UË

	)

75 
	#REG_EMAC_RRE
 (0x400B006CUË

	)

76 
	#REG_EMAC_ROV
 (0x400B0070UË

	)

77 
	#REG_EMAC_RSE
 (0x400B0074UË

	)

78 
	#REG_EMAC_ELE
 (0x400B0078UË

	)

79 
	#REG_EMAC_RJA
 (0x400B007CUË

	)

80 
	#REG_EMAC_USF
 (0x400B0080UË

	)

81 
	#REG_EMAC_STE
 (0x400B0084UË

	)

82 
	#REG_EMAC_RLE
 (0x400B0088UË

	)

83 
	#REG_EMAC_HRB
 (0x400B0090UË

	)

84 
	#REG_EMAC_HRT
 (0x400B0094UË

	)

85 
	#REG_EMAC_SA1B
 (0x400B0098UË

	)

86 
	#REG_EMAC_SA1T
 (0x400B009CUË

	)

87 
	#REG_EMAC_SA2B
 (0x400B00A0UË

	)

88 
	#REG_EMAC_SA2T
 (0x400B00A4UË

	)

89 
	#REG_EMAC_SA3B
 (0x400B00A8UË

	)

90 
	#REG_EMAC_SA3T
 (0x400B00ACUË

	)

91 
	#REG_EMAC_SA4B
 (0x400B00B0UË

	)

92 
	#REG_EMAC_SA4T
 (0x400B00B4UË

	)

93 
	#REG_EMAC_TID
 (0x400B00B8UË

	)

94 
	#REG_EMAC_USRIO
 (0x400B00C0UË

	)

96 
	#REG_EMAC_NCR
 (*(
RwReg
*)0x400B0000UË

	)

97 
	#REG_EMAC_NCFGR
 (*(
RwReg
*)0x400B0004UË

	)

98 
	#REG_EMAC_NSR
 (*(
RoReg
*)0x400B0008UË

	)

99 
	#REG_EMAC_TSR
 (*(
RwReg
*)0x400B0014UË

	)

100 
	#REG_EMAC_RBQP
 (*(
RwReg
*)0x400B0018UË

	)

101 
	#REG_EMAC_TBQP
 (*(
RwReg
*)0x400B001CUË

	)

102 
	#REG_EMAC_RSR
 (*(
RwReg
*)0x400B0020UË

	)

103 
	#REG_EMAC_ISR
 (*(
RwReg
*)0x400B0024UË

	)

104 
	#REG_EMAC_IER
 (*(
WoReg
*)0x400B0028UË

	)

105 
	#REG_EMAC_IDR
 (*(
WoReg
*)0x400B002CUË

	)

106 
	#REG_EMAC_IMR
 (*(
RoReg
*)0x400B0030UË

	)

107 
	#REG_EMAC_MAN
 (*(
RwReg
*)0x400B0034UË

	)

108 
	#REG_EMAC_PTR
 (*(
RwReg
*)0x400B0038UË

	)

109 
	#REG_EMAC_PFR
 (*(
RwReg
*)0x400B003CUË

	)

110 
	#REG_EMAC_FTO
 (*(
RwReg
*)0x400B0040UË

	)

111 
	#REG_EMAC_SCF
 (*(
RwReg
*)0x400B0044UË

	)

112 
	#REG_EMAC_MCF
 (*(
RwReg
*)0x400B0048UË

	)

113 
	#REG_EMAC_FRO
 (*(
RwReg
*)0x400B004CUË

	)

114 
	#REG_EMAC_FCSE
 (*(
RwReg
*)0x400B0050UË

	)

115 
	#REG_EMAC_ALE
 (*(
RwReg
*)0x400B0054UË

	)

116 
	#REG_EMAC_DTF
 (*(
RwReg
*)0x400B0058UË

	)

117 
	#REG_EMAC_LCOL
 (*(
RwReg
*)0x400B005CUË

	)

118 
	#REG_EMAC_ECOL
 (*(
RwReg
*)0x400B0060UË

	)

119 
	#REG_EMAC_TUND
 (*(
RwReg
*)0x400B0064UË

	)

120 
	#REG_EMAC_CSE
 (*(
RwReg
*)0x400B0068UË

	)

121 
	#REG_EMAC_RRE
 (*(
RwReg
*)0x400B006CUË

	)

122 
	#REG_EMAC_ROV
 (*(
RwReg
*)0x400B0070UË

	)

123 
	#REG_EMAC_RSE
 (*(
RwReg
*)0x400B0074UË

	)

124 
	#REG_EMAC_ELE
 (*(
RwReg
*)0x400B0078UË

	)

125 
	#REG_EMAC_RJA
 (*(
RwReg
*)0x400B007CUË

	)

126 
	#REG_EMAC_USF
 (*(
RwReg
*)0x400B0080UË

	)

127 
	#REG_EMAC_STE
 (*(
RwReg
*)0x400B0084UË

	)

128 
	#REG_EMAC_RLE
 (*(
RwReg
*)0x400B0088UË

	)

129 
	#REG_EMAC_HRB
 (*(
RwReg
*)0x400B0090UË

	)

130 
	#REG_EMAC_HRT
 (*(
RwReg
*)0x400B0094UË

	)

131 
	#REG_EMAC_SA1B
 (*(
RwReg
*)0x400B0098UË

	)

132 
	#REG_EMAC_SA1T
 (*(
RwReg
*)0x400B009CUË

	)

133 
	#REG_EMAC_SA2B
 (*(
RwReg
*)0x400B00A0UË

	)

134 
	#REG_EMAC_SA2T
 (*(
RwReg
*)0x400B00A4UË

	)

135 
	#REG_EMAC_SA3B
 (*(
RwReg
*)0x400B00A8UË

	)

136 
	#REG_EMAC_SA3T
 (*(
RwReg
*)0x400B00ACUË

	)

137 
	#REG_EMAC_SA4B
 (*(
RwReg
*)0x400B00B0UË

	)

138 
	#REG_EMAC_SA4T
 (*(
RwReg
*)0x400B00B4UË

	)

139 
	#REG_EMAC_TID
 (*(
RwReg
*)0x400B00B8UË

	)

140 
	#REG_EMAC_USRIO
 (*(
RwReg
*)0x400B00C0UË

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_gpbr.h

45 #i‚de‡
_SAM3XA_GPBR_INSTANCE_


46 
	#_SAM3XA_GPBR_INSTANCE_


	)

49 #i‡(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

50 
	#REG_GPBR_GPBR
 (0x400E1A90UË

	)

52 
	#REG_GPBR_GPBR
 (*(
RwReg
*)0x400E1A90UË

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_hsmci.h

45 #i‚de‡
_SAM3XA_HSMCI_INSTANCE_


46 
	#_SAM3XA_HSMCI_INSTANCE_


	)

49 #i‡(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

50 
	#REG_HSMCI_CR
 (0x40000000UË

	)

51 
	#REG_HSMCI_MR
 (0x40000004UË

	)

52 
	#REG_HSMCI_DTOR
 (0x40000008UË

	)

53 
	#REG_HSMCI_SDCR
 (0x4000000CUË

	)

54 
	#REG_HSMCI_ARGR
 (0x40000010UË

	)

55 
	#REG_HSMCI_CMDR
 (0x40000014UË

	)

56 
	#REG_HSMCI_BLKR
 (0x40000018UË

	)

57 
	#REG_HSMCI_CSTOR
 (0x4000001CUË

	)

58 
	#REG_HSMCI_RSPR
 (0x40000020UË

	)

59 
	#REG_HSMCI_RDR
 (0x40000030UË

	)

60 
	#REG_HSMCI_TDR
 (0x40000034UË

	)

61 
	#REG_HSMCI_SR
 (0x40000040UË

	)

62 
	#REG_HSMCI_IER
 (0x40000044UË

	)

63 
	#REG_HSMCI_IDR
 (0x40000048UË

	)

64 
	#REG_HSMCI_IMR
 (0x4000004CUË

	)

65 
	#REG_HSMCI_DMA
 (0x40000050UË

	)

66 
	#REG_HSMCI_CFG
 (0x40000054UË

	)

67 
	#REG_HSMCI_WPMR
 (0x400000E4UË

	)

68 
	#REG_HSMCI_WPSR
 (0x400000E8UË

	)

69 
	#REG_HSMCI_FIFO
 (0x40000200UË

	)

71 
	#REG_HSMCI_CR
 (*(
WoReg
*)0x40000000UË

	)

72 
	#REG_HSMCI_MR
 (*(
RwReg
*)0x40000004UË

	)

73 
	#REG_HSMCI_DTOR
 (*(
RwReg
*)0x40000008UË

	)

74 
	#REG_HSMCI_SDCR
 (*(
RwReg
*)0x4000000CUË

	)

75 
	#REG_HSMCI_ARGR
 (*(
RwReg
*)0x40000010UË

	)

76 
	#REG_HSMCI_CMDR
 (*(
WoReg
*)0x40000014UË

	)

77 
	#REG_HSMCI_BLKR
 (*(
RwReg
*)0x40000018UË

	)

78 
	#REG_HSMCI_CSTOR
 (*(
RwReg
*)0x4000001CUË

	)

79 
	#REG_HSMCI_RSPR
 (*(
RoReg
*)0x40000020UË

	)

80 
	#REG_HSMCI_RDR
 (*(
RoReg
*)0x40000030UË

	)

81 
	#REG_HSMCI_TDR
 (*(
WoReg
*)0x40000034UË

	)

82 
	#REG_HSMCI_SR
 (*(
RoReg
*)0x40000040UË

	)

83 
	#REG_HSMCI_IER
 (*(
WoReg
*)0x40000044UË

	)

84 
	#REG_HSMCI_IDR
 (*(
WoReg
*)0x40000048UË

	)

85 
	#REG_HSMCI_IMR
 (*(
RoReg
*)0x4000004CUË

	)

86 
	#REG_HSMCI_DMA
 (*(
RwReg
*)0x40000050UË

	)

87 
	#REG_HSMCI_CFG
 (*(
RwReg
*)0x40000054UË

	)

88 
	#REG_HSMCI_WPMR
 (*(
RwReg
*)0x400000E4UË

	)

89 
	#REG_HSMCI_WPSR
 (*(
RoReg
*)0x400000E8UË

	)

90 
	#REG_HSMCI_FIFO
 (*(
RwReg
*)0x40000200UË

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_matrix.h

45 #i‚de‡
_SAM3XA_MATRIX_INSTANCE_


46 
	#_SAM3XA_MATRIX_INSTANCE_


	)

49 #i‡(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

50 
	#REG_MATRIX_MCFG
 (0x400E0400UË

	)

51 
	#REG_MATRIX_SCFG
 (0x400E0440UË

	)

52 
	#REG_MATRIX_PRAS0
 (0x400E0480UË

	)

53 
	#REG_MATRIX_PRAS1
 (0x400E0488UË

	)

54 
	#REG_MATRIX_PRAS2
 (0x400E0490UË

	)

55 
	#REG_MATRIX_PRAS3
 (0x400E0498UË

	)

56 
	#REG_MATRIX_PRAS4
 (0x400E04A0UË

	)

57 
	#REG_MATRIX_PRAS5
 (0x400E04A8UË

	)

58 
	#REG_MATRIX_PRAS6
 (0x400E04B0UË

	)

59 
	#REG_MATRIX_PRAS7
 (0x400E04B8UË

	)

60 
	#REG_MATRIX_PRAS8
 (0x400E04C0UË

	)

61 
	#REG_MATRIX_MRCR
 (0x400E0500UË

	)

62 
	#REG_CCFG_SYSIO
 (0x400E0514UË

	)

63 
	#REG_MATRIX_WPMR
 (0x400E05E4UË

	)

64 
	#REG_MATRIX_WPSR
 (0x400E05E8UË

	)

66 
	#REG_MATRIX_MCFG
 (*(
RwReg
*)0x400E0400UË

	)

67 
	#REG_MATRIX_SCFG
 (*(
RwReg
*)0x400E0440UË

	)

68 
	#REG_MATRIX_PRAS0
 (*(
RwReg
*)0x400E0480UË

	)

69 
	#REG_MATRIX_PRAS1
 (*(
RwReg
*)0x400E0488UË

	)

70 
	#REG_MATRIX_PRAS2
 (*(
RwReg
*)0x400E0490UË

	)

71 
	#REG_MATRIX_PRAS3
 (*(
RwReg
*)0x400E0498UË

	)

72 
	#REG_MATRIX_PRAS4
 (*(
RwReg
*)0x400E04A0UË

	)

73 
	#REG_MATRIX_PRAS5
 (*(
RwReg
*)0x400E04A8UË

	)

74 
	#REG_MATRIX_PRAS6
 (*(
RwReg
*)0x400E04B0UË

	)

75 
	#REG_MATRIX_PRAS7
 (*(
RwReg
*)0x400E04B8UË

	)

76 
	#REG_MATRIX_PRAS8
 (*(
RwReg
*)0x400E04C0UË

	)

77 
	#REG_MATRIX_MRCR
 (*(
RwReg
*)0x400E0500UË

	)

78 
	#REG_CCFG_SYSIO
 (*(
RwReg
*)0x400E0514UË

	)

79 
	#REG_MATRIX_WPMR
 (*(
RwReg
*)0x400E05E4UË

	)

80 
	#REG_MATRIX_WPSR
 (*(
RoReg
*)0x400E05E8UË

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_pioa.h

45 #i‚de‡
_SAM3XA_PIOA_INSTANCE_


46 
	#_SAM3XA_PIOA_INSTANCE_


	)

49 #i‡(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

50 
	#REG_PIOA_PER
 (0x400E0E00UË

	)

51 
	#REG_PIOA_PDR
 (0x400E0E04UË

	)

52 
	#REG_PIOA_PSR
 (0x400E0E08UË

	)

53 
	#REG_PIOA_OER
 (0x400E0E10UË

	)

54 
	#REG_PIOA_ODR
 (0x400E0E14UË

	)

55 
	#REG_PIOA_OSR
 (0x400E0E18UË

	)

56 
	#REG_PIOA_IFER
 (0x400E0E20UË

	)

57 
	#REG_PIOA_IFDR
 (0x400E0E24UË

	)

58 
	#REG_PIOA_IFSR
 (0x400E0E28UË

	)

59 
	#REG_PIOA_SODR
 (0x400E0E30UË

	)

60 
	#REG_PIOA_CODR
 (0x400E0E34UË

	)

61 
	#REG_PIOA_ODSR
 (0x400E0E38UË

	)

62 
	#REG_PIOA_PDSR
 (0x400E0E3CUË

	)

63 
	#REG_PIOA_IER
 (0x400E0E40UË

	)

64 
	#REG_PIOA_IDR
 (0x400E0E44UË

	)

65 
	#REG_PIOA_IMR
 (0x400E0E48UË

	)

66 
	#REG_PIOA_ISR
 (0x400E0E4CUË

	)

67 
	#REG_PIOA_MDER
 (0x400E0E50UË

	)

68 
	#REG_PIOA_MDDR
 (0x400E0E54UË

	)

69 
	#REG_PIOA_MDSR
 (0x400E0E58UË

	)

70 
	#REG_PIOA_PUDR
 (0x400E0E60UË

	)

71 
	#REG_PIOA_PUER
 (0x400E0E64UË

	)

72 
	#REG_PIOA_PUSR
 (0x400E0E68UË

	)

73 
	#REG_PIOA_ABSR
 (0x400E0E70UË

	)

74 
	#REG_PIOA_SCIFSR
 (0x400E0E80UË

	)

75 
	#REG_PIOA_DIFSR
 (0x400E0E84UË

	)

76 
	#REG_PIOA_IFDGSR
 (0x400E0E88UË

	)

77 
	#REG_PIOA_SCDR
 (0x400E0E8CUË

	)

78 
	#REG_PIOA_OWER
 (0x400E0EA0UË

	)

79 
	#REG_PIOA_OWDR
 (0x400E0EA4UË

	)

80 
	#REG_PIOA_OWSR
 (0x400E0EA8UË

	)

81 
	#REG_PIOA_AIMER
 (0x400E0EB0UË

	)

82 
	#REG_PIOA_AIMDR
 (0x400E0EB4UË

	)

83 
	#REG_PIOA_AIMMR
 (0x400E0EB8UË

	)

84 
	#REG_PIOA_ESR
 (0x400E0EC0UË

	)

85 
	#REG_PIOA_LSR
 (0x400E0EC4UË

	)

86 
	#REG_PIOA_ELSR
 (0x400E0EC8UË

	)

87 
	#REG_PIOA_FELLSR
 (0x400E0ED0UË

	)

88 
	#REG_PIOA_REHLSR
 (0x400E0ED4UË

	)

89 
	#REG_PIOA_FRLHSR
 (0x400E0ED8UË

	)

90 
	#REG_PIOA_LOCKSR
 (0x400E0EE0UË

	)

91 
	#REG_PIOA_WPMR
 (0x400E0EE4UË

	)

92 
	#REG_PIOA_WPSR
 (0x400E0EE8UË

	)

94 
	#REG_PIOA_PER
 (*(
WoReg
*)0x400E0E00UË

	)

95 
	#REG_PIOA_PDR
 (*(
WoReg
*)0x400E0E04UË

	)

96 
	#REG_PIOA_PSR
 (*(
RoReg
*)0x400E0E08UË

	)

97 
	#REG_PIOA_OER
 (*(
WoReg
*)0x400E0E10UË

	)

98 
	#REG_PIOA_ODR
 (*(
WoReg
*)0x400E0E14UË

	)

99 
	#REG_PIOA_OSR
 (*(
RoReg
*)0x400E0E18UË

	)

100 
	#REG_PIOA_IFER
 (*(
WoReg
*)0x400E0E20UË

	)

101 
	#REG_PIOA_IFDR
 (*(
WoReg
*)0x400E0E24UË

	)

102 
	#REG_PIOA_IFSR
 (*(
RoReg
*)0x400E0E28UË

	)

103 
	#REG_PIOA_SODR
 (*(
WoReg
*)0x400E0E30UË

	)

104 
	#REG_PIOA_CODR
 (*(
WoReg
*)0x400E0E34UË

	)

105 
	#REG_PIOA_ODSR
 (*(
RwReg
*)0x400E0E38UË

	)

106 
	#REG_PIOA_PDSR
 (*(
RoReg
*)0x400E0E3CUË

	)

107 
	#REG_PIOA_IER
 (*(
WoReg
*)0x400E0E40UË

	)

108 
	#REG_PIOA_IDR
 (*(
WoReg
*)0x400E0E44UË

	)

109 
	#REG_PIOA_IMR
 (*(
RoReg
*)0x400E0E48UË

	)

110 
	#REG_PIOA_ISR
 (*(
RoReg
*)0x400E0E4CUË

	)

111 
	#REG_PIOA_MDER
 (*(
WoReg
*)0x400E0E50UË

	)

112 
	#REG_PIOA_MDDR
 (*(
WoReg
*)0x400E0E54UË

	)

113 
	#REG_PIOA_MDSR
 (*(
RoReg
*)0x400E0E58UË

	)

114 
	#REG_PIOA_PUDR
 (*(
WoReg
*)0x400E0E60UË

	)

115 
	#REG_PIOA_PUER
 (*(
WoReg
*)0x400E0E64UË

	)

116 
	#REG_PIOA_PUSR
 (*(
RoReg
*)0x400E0E68UË

	)

117 
	#REG_PIOA_ABSR
 (*(
RwReg
*)0x400E0E70UË

	)

118 
	#REG_PIOA_SCIFSR
 (*(
WoReg
*)0x400E0E80UË

	)

119 
	#REG_PIOA_DIFSR
 (*(
WoReg
*)0x400E0E84UË

	)

120 
	#REG_PIOA_IFDGSR
 (*(
RoReg
*)0x400E0E88UË

	)

121 
	#REG_PIOA_SCDR
 (*(
RwReg
*)0x400E0E8CUË

	)

122 
	#REG_PIOA_OWER
 (*(
WoReg
*)0x400E0EA0UË

	)

123 
	#REG_PIOA_OWDR
 (*(
WoReg
*)0x400E0EA4UË

	)

124 
	#REG_PIOA_OWSR
 (*(
RoReg
*)0x400E0EA8UË

	)

125 
	#REG_PIOA_AIMER
 (*(
WoReg
*)0x400E0EB0UË

	)

126 
	#REG_PIOA_AIMDR
 (*(
WoReg
*)0x400E0EB4UË

	)

127 
	#REG_PIOA_AIMMR
 (*(
RoReg
*)0x400E0EB8UË

	)

128 
	#REG_PIOA_ESR
 (*(
WoReg
*)0x400E0EC0UË

	)

129 
	#REG_PIOA_LSR
 (*(
WoReg
*)0x400E0EC4UË

	)

130 
	#REG_PIOA_ELSR
 (*(
RoReg
*)0x400E0EC8UË

	)

131 
	#REG_PIOA_FELLSR
 (*(
WoReg
*)0x400E0ED0UË

	)

132 
	#REG_PIOA_REHLSR
 (*(
WoReg
*)0x400E0ED4UË

	)

133 
	#REG_PIOA_FRLHSR
 (*(
RoReg
*)0x400E0ED8UË

	)

134 
	#REG_PIOA_LOCKSR
 (*(
RoReg
*)0x400E0EE0UË

	)

135 
	#REG_PIOA_WPMR
 (*(
RwReg
*)0x400E0EE4UË

	)

136 
	#REG_PIOA_WPSR
 (*(
RoReg
*)0x400E0EE8UË

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_piob.h

45 #i‚de‡
_SAM3XA_PIOB_INSTANCE_


46 
	#_SAM3XA_PIOB_INSTANCE_


	)

49 #i‡(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

50 
	#REG_PIOB_PER
 (0x400E1000UË

	)

51 
	#REG_PIOB_PDR
 (0x400E1004UË

	)

52 
	#REG_PIOB_PSR
 (0x400E1008UË

	)

53 
	#REG_PIOB_OER
 (0x400E1010UË

	)

54 
	#REG_PIOB_ODR
 (0x400E1014UË

	)

55 
	#REG_PIOB_OSR
 (0x400E1018UË

	)

56 
	#REG_PIOB_IFER
 (0x400E1020UË

	)

57 
	#REG_PIOB_IFDR
 (0x400E1024UË

	)

58 
	#REG_PIOB_IFSR
 (0x400E1028UË

	)

59 
	#REG_PIOB_SODR
 (0x400E1030UË

	)

60 
	#REG_PIOB_CODR
 (0x400E1034UË

	)

61 
	#REG_PIOB_ODSR
 (0x400E1038UË

	)

62 
	#REG_PIOB_PDSR
 (0x400E103CUË

	)

63 
	#REG_PIOB_IER
 (0x400E1040UË

	)

64 
	#REG_PIOB_IDR
 (0x400E1044UË

	)

65 
	#REG_PIOB_IMR
 (0x400E1048UË

	)

66 
	#REG_PIOB_ISR
 (0x400E104CUË

	)

67 
	#REG_PIOB_MDER
 (0x400E1050UË

	)

68 
	#REG_PIOB_MDDR
 (0x400E1054UË

	)

69 
	#REG_PIOB_MDSR
 (0x400E1058UË

	)

70 
	#REG_PIOB_PUDR
 (0x400E1060UË

	)

71 
	#REG_PIOB_PUER
 (0x400E1064UË

	)

72 
	#REG_PIOB_PUSR
 (0x400E1068UË

	)

73 
	#REG_PIOB_ABSR
 (0x400E1070UË

	)

74 
	#REG_PIOB_SCIFSR
 (0x400E1080UË

	)

75 
	#REG_PIOB_DIFSR
 (0x400E1084UË

	)

76 
	#REG_PIOB_IFDGSR
 (0x400E1088UË

	)

77 
	#REG_PIOB_SCDR
 (0x400E108CUË

	)

78 
	#REG_PIOB_OWER
 (0x400E10A0UË

	)

79 
	#REG_PIOB_OWDR
 (0x400E10A4UË

	)

80 
	#REG_PIOB_OWSR
 (0x400E10A8UË

	)

81 
	#REG_PIOB_AIMER
 (0x400E10B0UË

	)

82 
	#REG_PIOB_AIMDR
 (0x400E10B4UË

	)

83 
	#REG_PIOB_AIMMR
 (0x400E10B8UË

	)

84 
	#REG_PIOB_ESR
 (0x400E10C0UË

	)

85 
	#REG_PIOB_LSR
 (0x400E10C4UË

	)

86 
	#REG_PIOB_ELSR
 (0x400E10C8UË

	)

87 
	#REG_PIOB_FELLSR
 (0x400E10D0UË

	)

88 
	#REG_PIOB_REHLSR
 (0x400E10D4UË

	)

89 
	#REG_PIOB_FRLHSR
 (0x400E10D8UË

	)

90 
	#REG_PIOB_LOCKSR
 (0x400E10E0UË

	)

91 
	#REG_PIOB_WPMR
 (0x400E10E4UË

	)

92 
	#REG_PIOB_WPSR
 (0x400E10E8UË

	)

94 
	#REG_PIOB_PER
 (*(
WoReg
*)0x400E1000UË

	)

95 
	#REG_PIOB_PDR
 (*(
WoReg
*)0x400E1004UË

	)

96 
	#REG_PIOB_PSR
 (*(
RoReg
*)0x400E1008UË

	)

97 
	#REG_PIOB_OER
 (*(
WoReg
*)0x400E1010UË

	)

98 
	#REG_PIOB_ODR
 (*(
WoReg
*)0x400E1014UË

	)

99 
	#REG_PIOB_OSR
 (*(
RoReg
*)0x400E1018UË

	)

100 
	#REG_PIOB_IFER
 (*(
WoReg
*)0x400E1020UË

	)

101 
	#REG_PIOB_IFDR
 (*(
WoReg
*)0x400E1024UË

	)

102 
	#REG_PIOB_IFSR
 (*(
RoReg
*)0x400E1028UË

	)

103 
	#REG_PIOB_SODR
 (*(
WoReg
*)0x400E1030UË

	)

104 
	#REG_PIOB_CODR
 (*(
WoReg
*)0x400E1034UË

	)

105 
	#REG_PIOB_ODSR
 (*(
RwReg
*)0x400E1038UË

	)

106 
	#REG_PIOB_PDSR
 (*(
RoReg
*)0x400E103CUË

	)

107 
	#REG_PIOB_IER
 (*(
WoReg
*)0x400E1040UË

	)

108 
	#REG_PIOB_IDR
 (*(
WoReg
*)0x400E1044UË

	)

109 
	#REG_PIOB_IMR
 (*(
RoReg
*)0x400E1048UË

	)

110 
	#REG_PIOB_ISR
 (*(
RoReg
*)0x400E104CUË

	)

111 
	#REG_PIOB_MDER
 (*(
WoReg
*)0x400E1050UË

	)

112 
	#REG_PIOB_MDDR
 (*(
WoReg
*)0x400E1054UË

	)

113 
	#REG_PIOB_MDSR
 (*(
RoReg
*)0x400E1058UË

	)

114 
	#REG_PIOB_PUDR
 (*(
WoReg
*)0x400E1060UË

	)

115 
	#REG_PIOB_PUER
 (*(
WoReg
*)0x400E1064UË

	)

116 
	#REG_PIOB_PUSR
 (*(
RoReg
*)0x400E1068UË

	)

117 
	#REG_PIOB_ABSR
 (*(
RwReg
*)0x400E1070UË

	)

118 
	#REG_PIOB_SCIFSR
 (*(
WoReg
*)0x400E1080UË

	)

119 
	#REG_PIOB_DIFSR
 (*(
WoReg
*)0x400E1084UË

	)

120 
	#REG_PIOB_IFDGSR
 (*(
RoReg
*)0x400E1088UË

	)

121 
	#REG_PIOB_SCDR
 (*(
RwReg
*)0x400E108CUË

	)

122 
	#REG_PIOB_OWER
 (*(
WoReg
*)0x400E10A0UË

	)

123 
	#REG_PIOB_OWDR
 (*(
WoReg
*)0x400E10A4UË

	)

124 
	#REG_PIOB_OWSR
 (*(
RoReg
*)0x400E10A8UË

	)

125 
	#REG_PIOB_AIMER
 (*(
WoReg
*)0x400E10B0UË

	)

126 
	#REG_PIOB_AIMDR
 (*(
WoReg
*)0x400E10B4UË

	)

127 
	#REG_PIOB_AIMMR
 (*(
RoReg
*)0x400E10B8UË

	)

128 
	#REG_PIOB_ESR
 (*(
WoReg
*)0x400E10C0UË

	)

129 
	#REG_PIOB_LSR
 (*(
WoReg
*)0x400E10C4UË

	)

130 
	#REG_PIOB_ELSR
 (*(
RoReg
*)0x400E10C8UË

	)

131 
	#REG_PIOB_FELLSR
 (*(
WoReg
*)0x400E10D0UË

	)

132 
	#REG_PIOB_REHLSR
 (*(
WoReg
*)0x400E10D4UË

	)

133 
	#REG_PIOB_FRLHSR
 (*(
RoReg
*)0x400E10D8UË

	)

134 
	#REG_PIOB_LOCKSR
 (*(
RoReg
*)0x400E10E0UË

	)

135 
	#REG_PIOB_WPMR
 (*(
RwReg
*)0x400E10E4UË

	)

136 
	#REG_PIOB_WPSR
 (*(
RoReg
*)0x400E10E8UË

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_pioc.h

45 #i‚de‡
_SAM3XA_PIOC_INSTANCE_


46 
	#_SAM3XA_PIOC_INSTANCE_


	)

49 #i‡(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

50 
	#REG_PIOC_PER
 (0x400E1200UË

	)

51 
	#REG_PIOC_PDR
 (0x400E1204UË

	)

52 
	#REG_PIOC_PSR
 (0x400E1208UË

	)

53 
	#REG_PIOC_OER
 (0x400E1210UË

	)

54 
	#REG_PIOC_ODR
 (0x400E1214UË

	)

55 
	#REG_PIOC_OSR
 (0x400E1218UË

	)

56 
	#REG_PIOC_IFER
 (0x400E1220UË

	)

57 
	#REG_PIOC_IFDR
 (0x400E1224UË

	)

58 
	#REG_PIOC_IFSR
 (0x400E1228UË

	)

59 
	#REG_PIOC_SODR
 (0x400E1230UË

	)

60 
	#REG_PIOC_CODR
 (0x400E1234UË

	)

61 
	#REG_PIOC_ODSR
 (0x400E1238UË

	)

62 
	#REG_PIOC_PDSR
 (0x400E123CUË

	)

63 
	#REG_PIOC_IER
 (0x400E1240UË

	)

64 
	#REG_PIOC_IDR
 (0x400E1244UË

	)

65 
	#REG_PIOC_IMR
 (0x400E1248UË

	)

66 
	#REG_PIOC_ISR
 (0x400E124CUË

	)

67 
	#REG_PIOC_MDER
 (0x400E1250UË

	)

68 
	#REG_PIOC_MDDR
 (0x400E1254UË

	)

69 
	#REG_PIOC_MDSR
 (0x400E1258UË

	)

70 
	#REG_PIOC_PUDR
 (0x400E1260UË

	)

71 
	#REG_PIOC_PUER
 (0x400E1264UË

	)

72 
	#REG_PIOC_PUSR
 (0x400E1268UË

	)

73 
	#REG_PIOC_ABSR
 (0x400E1270UË

	)

74 
	#REG_PIOC_SCIFSR
 (0x400E1280UË

	)

75 
	#REG_PIOC_DIFSR
 (0x400E1284UË

	)

76 
	#REG_PIOC_IFDGSR
 (0x400E1288UË

	)

77 
	#REG_PIOC_SCDR
 (0x400E128CUË

	)

78 
	#REG_PIOC_OWER
 (0x400E12A0UË

	)

79 
	#REG_PIOC_OWDR
 (0x400E12A4UË

	)

80 
	#REG_PIOC_OWSR
 (0x400E12A8UË

	)

81 
	#REG_PIOC_AIMER
 (0x400E12B0UË

	)

82 
	#REG_PIOC_AIMDR
 (0x400E12B4UË

	)

83 
	#REG_PIOC_AIMMR
 (0x400E12B8UË

	)

84 
	#REG_PIOC_ESR
 (0x400E12C0UË

	)

85 
	#REG_PIOC_LSR
 (0x400E12C4UË

	)

86 
	#REG_PIOC_ELSR
 (0x400E12C8UË

	)

87 
	#REG_PIOC_FELLSR
 (0x400E12D0UË

	)

88 
	#REG_PIOC_REHLSR
 (0x400E12D4UË

	)

89 
	#REG_PIOC_FRLHSR
 (0x400E12D8UË

	)

90 
	#REG_PIOC_LOCKSR
 (0x400E12E0UË

	)

91 
	#REG_PIOC_WPMR
 (0x400E12E4UË

	)

92 
	#REG_PIOC_WPSR
 (0x400E12E8UË

	)

94 
	#REG_PIOC_PER
 (*(
WoReg
*)0x400E1200UË

	)

95 
	#REG_PIOC_PDR
 (*(
WoReg
*)0x400E1204UË

	)

96 
	#REG_PIOC_PSR
 (*(
RoReg
*)0x400E1208UË

	)

97 
	#REG_PIOC_OER
 (*(
WoReg
*)0x400E1210UË

	)

98 
	#REG_PIOC_ODR
 (*(
WoReg
*)0x400E1214UË

	)

99 
	#REG_PIOC_OSR
 (*(
RoReg
*)0x400E1218UË

	)

100 
	#REG_PIOC_IFER
 (*(
WoReg
*)0x400E1220UË

	)

101 
	#REG_PIOC_IFDR
 (*(
WoReg
*)0x400E1224UË

	)

102 
	#REG_PIOC_IFSR
 (*(
RoReg
*)0x400E1228UË

	)

103 
	#REG_PIOC_SODR
 (*(
WoReg
*)0x400E1230UË

	)

104 
	#REG_PIOC_CODR
 (*(
WoReg
*)0x400E1234UË

	)

105 
	#REG_PIOC_ODSR
 (*(
RwReg
*)0x400E1238UË

	)

106 
	#REG_PIOC_PDSR
 (*(
RoReg
*)0x400E123CUË

	)

107 
	#REG_PIOC_IER
 (*(
WoReg
*)0x400E1240UË

	)

108 
	#REG_PIOC_IDR
 (*(
WoReg
*)0x400E1244UË

	)

109 
	#REG_PIOC_IMR
 (*(
RoReg
*)0x400E1248UË

	)

110 
	#REG_PIOC_ISR
 (*(
RoReg
*)0x400E124CUË

	)

111 
	#REG_PIOC_MDER
 (*(
WoReg
*)0x400E1250UË

	)

112 
	#REG_PIOC_MDDR
 (*(
WoReg
*)0x400E1254UË

	)

113 
	#REG_PIOC_MDSR
 (*(
RoReg
*)0x400E1258UË

	)

114 
	#REG_PIOC_PUDR
 (*(
WoReg
*)0x400E1260UË

	)

115 
	#REG_PIOC_PUER
 (*(
WoReg
*)0x400E1264UË

	)

116 
	#REG_PIOC_PUSR
 (*(
RoReg
*)0x400E1268UË

	)

117 
	#REG_PIOC_ABSR
 (*(
RwReg
*)0x400E1270UË

	)

118 
	#REG_PIOC_SCIFSR
 (*(
WoReg
*)0x400E1280UË

	)

119 
	#REG_PIOC_DIFSR
 (*(
WoReg
*)0x400E1284UË

	)

120 
	#REG_PIOC_IFDGSR
 (*(
RoReg
*)0x400E1288UË

	)

121 
	#REG_PIOC_SCDR
 (*(
RwReg
*)0x400E128CUË

	)

122 
	#REG_PIOC_OWER
 (*(
WoReg
*)0x400E12A0UË

	)

123 
	#REG_PIOC_OWDR
 (*(
WoReg
*)0x400E12A4UË

	)

124 
	#REG_PIOC_OWSR
 (*(
RoReg
*)0x400E12A8UË

	)

125 
	#REG_PIOC_AIMER
 (*(
WoReg
*)0x400E12B0UË

	)

126 
	#REG_PIOC_AIMDR
 (*(
WoReg
*)0x400E12B4UË

	)

127 
	#REG_PIOC_AIMMR
 (*(
RoReg
*)0x400E12B8UË

	)

128 
	#REG_PIOC_ESR
 (*(
WoReg
*)0x400E12C0UË

	)

129 
	#REG_PIOC_LSR
 (*(
WoReg
*)0x400E12C4UË

	)

130 
	#REG_PIOC_ELSR
 (*(
RoReg
*)0x400E12C8UË

	)

131 
	#REG_PIOC_FELLSR
 (*(
WoReg
*)0x400E12D0UË

	)

132 
	#REG_PIOC_REHLSR
 (*(
WoReg
*)0x400E12D4UË

	)

133 
	#REG_PIOC_FRLHSR
 (*(
RoReg
*)0x400E12D8UË

	)

134 
	#REG_PIOC_LOCKSR
 (*(
RoReg
*)0x400E12E0UË

	)

135 
	#REG_PIOC_WPMR
 (*(
RwReg
*)0x400E12E4UË

	)

136 
	#REG_PIOC_WPSR
 (*(
RoReg
*)0x400E12E8UË

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_piod.h

45 #i‚de‡
_SAM3XA_PIOD_INSTANCE_


46 
	#_SAM3XA_PIOD_INSTANCE_


	)

49 #i‡(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

50 
	#REG_PIOD_PER
 (0x400E1400UË

	)

51 
	#REG_PIOD_PDR
 (0x400E1404UË

	)

52 
	#REG_PIOD_PSR
 (0x400E1408UË

	)

53 
	#REG_PIOD_OER
 (0x400E1410UË

	)

54 
	#REG_PIOD_ODR
 (0x400E1414UË

	)

55 
	#REG_PIOD_OSR
 (0x400E1418UË

	)

56 
	#REG_PIOD_IFER
 (0x400E1420UË

	)

57 
	#REG_PIOD_IFDR
 (0x400E1424UË

	)

58 
	#REG_PIOD_IFSR
 (0x400E1428UË

	)

59 
	#REG_PIOD_SODR
 (0x400E1430UË

	)

60 
	#REG_PIOD_CODR
 (0x400E1434UË

	)

61 
	#REG_PIOD_ODSR
 (0x400E1438UË

	)

62 
	#REG_PIOD_PDSR
 (0x400E143CUË

	)

63 
	#REG_PIOD_IER
 (0x400E1440UË

	)

64 
	#REG_PIOD_IDR
 (0x400E1444UË

	)

65 
	#REG_PIOD_IMR
 (0x400E1448UË

	)

66 
	#REG_PIOD_ISR
 (0x400E144CUË

	)

67 
	#REG_PIOD_MDER
 (0x400E1450UË

	)

68 
	#REG_PIOD_MDDR
 (0x400E1454UË

	)

69 
	#REG_PIOD_MDSR
 (0x400E1458UË

	)

70 
	#REG_PIOD_PUDR
 (0x400E1460UË

	)

71 
	#REG_PIOD_PUER
 (0x400E1464UË

	)

72 
	#REG_PIOD_PUSR
 (0x400E1468UË

	)

73 
	#REG_PIOD_ABSR
 (0x400E1470UË

	)

74 
	#REG_PIOD_SCIFSR
 (0x400E1480UË

	)

75 
	#REG_PIOD_DIFSR
 (0x400E1484UË

	)

76 
	#REG_PIOD_IFDGSR
 (0x400E1488UË

	)

77 
	#REG_PIOD_SCDR
 (0x400E148CUË

	)

78 
	#REG_PIOD_OWER
 (0x400E14A0UË

	)

79 
	#REG_PIOD_OWDR
 (0x400E14A4UË

	)

80 
	#REG_PIOD_OWSR
 (0x400E14A8UË

	)

81 
	#REG_PIOD_AIMER
 (0x400E14B0UË

	)

82 
	#REG_PIOD_AIMDR
 (0x400E14B4UË

	)

83 
	#REG_PIOD_AIMMR
 (0x400E14B8UË

	)

84 
	#REG_PIOD_ESR
 (0x400E14C0UË

	)

85 
	#REG_PIOD_LSR
 (0x400E14C4UË

	)

86 
	#REG_PIOD_ELSR
 (0x400E14C8UË

	)

87 
	#REG_PIOD_FELLSR
 (0x400E14D0UË

	)

88 
	#REG_PIOD_REHLSR
 (0x400E14D4UË

	)

89 
	#REG_PIOD_FRLHSR
 (0x400E14D8UË

	)

90 
	#REG_PIOD_LOCKSR
 (0x400E14E0UË

	)

91 
	#REG_PIOD_WPMR
 (0x400E14E4UË

	)

92 
	#REG_PIOD_WPSR
 (0x400E14E8UË

	)

94 
	#REG_PIOD_PER
 (*(
WoReg
*)0x400E1400UË

	)

95 
	#REG_PIOD_PDR
 (*(
WoReg
*)0x400E1404UË

	)

96 
	#REG_PIOD_PSR
 (*(
RoReg
*)0x400E1408UË

	)

97 
	#REG_PIOD_OER
 (*(
WoReg
*)0x400E1410UË

	)

98 
	#REG_PIOD_ODR
 (*(
WoReg
*)0x400E1414UË

	)

99 
	#REG_PIOD_OSR
 (*(
RoReg
*)0x400E1418UË

	)

100 
	#REG_PIOD_IFER
 (*(
WoReg
*)0x400E1420UË

	)

101 
	#REG_PIOD_IFDR
 (*(
WoReg
*)0x400E1424UË

	)

102 
	#REG_PIOD_IFSR
 (*(
RoReg
*)0x400E1428UË

	)

103 
	#REG_PIOD_SODR
 (*(
WoReg
*)0x400E1430UË

	)

104 
	#REG_PIOD_CODR
 (*(
WoReg
*)0x400E1434UË

	)

105 
	#REG_PIOD_ODSR
 (*(
RwReg
*)0x400E1438UË

	)

106 
	#REG_PIOD_PDSR
 (*(
RoReg
*)0x400E143CUË

	)

107 
	#REG_PIOD_IER
 (*(
WoReg
*)0x400E1440UË

	)

108 
	#REG_PIOD_IDR
 (*(
WoReg
*)0x400E1444UË

	)

109 
	#REG_PIOD_IMR
 (*(
RoReg
*)0x400E1448UË

	)

110 
	#REG_PIOD_ISR
 (*(
RoReg
*)0x400E144CUË

	)

111 
	#REG_PIOD_MDER
 (*(
WoReg
*)0x400E1450UË

	)

112 
	#REG_PIOD_MDDR
 (*(
WoReg
*)0x400E1454UË

	)

113 
	#REG_PIOD_MDSR
 (*(
RoReg
*)0x400E1458UË

	)

114 
	#REG_PIOD_PUDR
 (*(
WoReg
*)0x400E1460UË

	)

115 
	#REG_PIOD_PUER
 (*(
WoReg
*)0x400E1464UË

	)

116 
	#REG_PIOD_PUSR
 (*(
RoReg
*)0x400E1468UË

	)

117 
	#REG_PIOD_ABSR
 (*(
RwReg
*)0x400E1470UË

	)

118 
	#REG_PIOD_SCIFSR
 (*(
WoReg
*)0x400E1480UË

	)

119 
	#REG_PIOD_DIFSR
 (*(
WoReg
*)0x400E1484UË

	)

120 
	#REG_PIOD_IFDGSR
 (*(
RoReg
*)0x400E1488UË

	)

121 
	#REG_PIOD_SCDR
 (*(
RwReg
*)0x400E148CUË

	)

122 
	#REG_PIOD_OWER
 (*(
WoReg
*)0x400E14A0UË

	)

123 
	#REG_PIOD_OWDR
 (*(
WoReg
*)0x400E14A4UË

	)

124 
	#REG_PIOD_OWSR
 (*(
RoReg
*)0x400E14A8UË

	)

125 
	#REG_PIOD_AIMER
 (*(
WoReg
*)0x400E14B0UË

	)

126 
	#REG_PIOD_AIMDR
 (*(
WoReg
*)0x400E14B4UË

	)

127 
	#REG_PIOD_AIMMR
 (*(
RoReg
*)0x400E14B8UË

	)

128 
	#REG_PIOD_ESR
 (*(
WoReg
*)0x400E14C0UË

	)

129 
	#REG_PIOD_LSR
 (*(
WoReg
*)0x400E14C4UË

	)

130 
	#REG_PIOD_ELSR
 (*(
RoReg
*)0x400E14C8UË

	)

131 
	#REG_PIOD_FELLSR
 (*(
WoReg
*)0x400E14D0UË

	)

132 
	#REG_PIOD_REHLSR
 (*(
WoReg
*)0x400E14D4UË

	)

133 
	#REG_PIOD_FRLHSR
 (*(
RoReg
*)0x400E14D8UË

	)

134 
	#REG_PIOD_LOCKSR
 (*(
RoReg
*)0x400E14E0UË

	)

135 
	#REG_PIOD_WPMR
 (*(
RwReg
*)0x400E14E4UË

	)

136 
	#REG_PIOD_WPSR
 (*(
RoReg
*)0x400E14E8UË

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_pioe.h

45 #i‚de‡
_SAM3XA_PIOE_INSTANCE_


46 
	#_SAM3XA_PIOE_INSTANCE_


	)

49 #i‡(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

50 
	#REG_PIOE_PER
 (0x400E1600UË

	)

51 
	#REG_PIOE_PDR
 (0x400E1604UË

	)

52 
	#REG_PIOE_PSR
 (0x400E1608UË

	)

53 
	#REG_PIOE_OER
 (0x400E1610UË

	)

54 
	#REG_PIOE_ODR
 (0x400E1614UË

	)

55 
	#REG_PIOE_OSR
 (0x400E1618UË

	)

56 
	#REG_PIOE_IFER
 (0x400E1620UË

	)

57 
	#REG_PIOE_IFDR
 (0x400E1624UË

	)

58 
	#REG_PIOE_IFSR
 (0x400E1628UË

	)

59 
	#REG_PIOE_SODR
 (0x400E1630UË

	)

60 
	#REG_PIOE_CODR
 (0x400E1634UË

	)

61 
	#REG_PIOE_ODSR
 (0x400E1638UË

	)

62 
	#REG_PIOE_PDSR
 (0x400E163CUË

	)

63 
	#REG_PIOE_IER
 (0x400E1640UË

	)

64 
	#REG_PIOE_IDR
 (0x400E1644UË

	)

65 
	#REG_PIOE_IMR
 (0x400E1648UË

	)

66 
	#REG_PIOE_ISR
 (0x400E164CUË

	)

67 
	#REG_PIOE_MDER
 (0x400E1650UË

	)

68 
	#REG_PIOE_MDDR
 (0x400E1654UË

	)

69 
	#REG_PIOE_MDSR
 (0x400E1658UË

	)

70 
	#REG_PIOE_PUDR
 (0x400E1660UË

	)

71 
	#REG_PIOE_PUER
 (0x400E1664UË

	)

72 
	#REG_PIOE_PUSR
 (0x400E1668UË

	)

73 
	#REG_PIOE_ABSR
 (0x400E1670UË

	)

74 
	#REG_PIOE_SCIFSR
 (0x400E1680UË

	)

75 
	#REG_PIOE_DIFSR
 (0x400E1684UË

	)

76 
	#REG_PIOE_IFDGSR
 (0x400E1688UË

	)

77 
	#REG_PIOE_SCDR
 (0x400E168CUË

	)

78 
	#REG_PIOE_OWER
 (0x400E16A0UË

	)

79 
	#REG_PIOE_OWDR
 (0x400E16A4UË

	)

80 
	#REG_PIOE_OWSR
 (0x400E16A8UË

	)

81 
	#REG_PIOE_AIMER
 (0x400E16B0UË

	)

82 
	#REG_PIOE_AIMDR
 (0x400E16B4UË

	)

83 
	#REG_PIOE_AIMMR
 (0x400E16B8UË

	)

84 
	#REG_PIOE_ESR
 (0x400E16C0UË

	)

85 
	#REG_PIOE_LSR
 (0x400E16C4UË

	)

86 
	#REG_PIOE_ELSR
 (0x400E16C8UË

	)

87 
	#REG_PIOE_FELLSR
 (0x400E16D0UË

	)

88 
	#REG_PIOE_REHLSR
 (0x400E16D4UË

	)

89 
	#REG_PIOE_FRLHSR
 (0x400E16D8UË

	)

90 
	#REG_PIOE_LOCKSR
 (0x400E16E0UË

	)

91 
	#REG_PIOE_WPMR
 (0x400E16E4UË

	)

92 
	#REG_PIOE_WPSR
 (0x400E16E8UË

	)

94 
	#REG_PIOE_PER
 (*(
WoReg
*)0x400E1600UË

	)

95 
	#REG_PIOE_PDR
 (*(
WoReg
*)0x400E1604UË

	)

96 
	#REG_PIOE_PSR
 (*(
RoReg
*)0x400E1608UË

	)

97 
	#REG_PIOE_OER
 (*(
WoReg
*)0x400E1610UË

	)

98 
	#REG_PIOE_ODR
 (*(
WoReg
*)0x400E1614UË

	)

99 
	#REG_PIOE_OSR
 (*(
RoReg
*)0x400E1618UË

	)

100 
	#REG_PIOE_IFER
 (*(
WoReg
*)0x400E1620UË

	)

101 
	#REG_PIOE_IFDR
 (*(
WoReg
*)0x400E1624UË

	)

102 
	#REG_PIOE_IFSR
 (*(
RoReg
*)0x400E1628UË

	)

103 
	#REG_PIOE_SODR
 (*(
WoReg
*)0x400E1630UË

	)

104 
	#REG_PIOE_CODR
 (*(
WoReg
*)0x400E1634UË

	)

105 
	#REG_PIOE_ODSR
 (*(
RwReg
*)0x400E1638UË

	)

106 
	#REG_PIOE_PDSR
 (*(
RoReg
*)0x400E163CUË

	)

107 
	#REG_PIOE_IER
 (*(
WoReg
*)0x400E1640UË

	)

108 
	#REG_PIOE_IDR
 (*(
WoReg
*)0x400E1644UË

	)

109 
	#REG_PIOE_IMR
 (*(
RoReg
*)0x400E1648UË

	)

110 
	#REG_PIOE_ISR
 (*(
RoReg
*)0x400E164CUË

	)

111 
	#REG_PIOE_MDER
 (*(
WoReg
*)0x400E1650UË

	)

112 
	#REG_PIOE_MDDR
 (*(
WoReg
*)0x400E1654UË

	)

113 
	#REG_PIOE_MDSR
 (*(
RoReg
*)0x400E1658UË

	)

114 
	#REG_PIOE_PUDR
 (*(
WoReg
*)0x400E1660UË

	)

115 
	#REG_PIOE_PUER
 (*(
WoReg
*)0x400E1664UË

	)

116 
	#REG_PIOE_PUSR
 (*(
RoReg
*)0x400E1668UË

	)

117 
	#REG_PIOE_ABSR
 (*(
RwReg
*)0x400E1670UË

	)

118 
	#REG_PIOE_SCIFSR
 (*(
WoReg
*)0x400E1680UË

	)

119 
	#REG_PIOE_DIFSR
 (*(
WoReg
*)0x400E1684UË

	)

120 
	#REG_PIOE_IFDGSR
 (*(
RoReg
*)0x400E1688UË

	)

121 
	#REG_PIOE_SCDR
 (*(
RwReg
*)0x400E168CUË

	)

122 
	#REG_PIOE_OWER
 (*(
WoReg
*)0x400E16A0UË

	)

123 
	#REG_PIOE_OWDR
 (*(
WoReg
*)0x400E16A4UË

	)

124 
	#REG_PIOE_OWSR
 (*(
RoReg
*)0x400E16A8UË

	)

125 
	#REG_PIOE_AIMER
 (*(
WoReg
*)0x400E16B0UË

	)

126 
	#REG_PIOE_AIMDR
 (*(
WoReg
*)0x400E16B4UË

	)

127 
	#REG_PIOE_AIMMR
 (*(
RoReg
*)0x400E16B8UË

	)

128 
	#REG_PIOE_ESR
 (*(
WoReg
*)0x400E16C0UË

	)

129 
	#REG_PIOE_LSR
 (*(
WoReg
*)0x400E16C4UË

	)

130 
	#REG_PIOE_ELSR
 (*(
RoReg
*)0x400E16C8UË

	)

131 
	#REG_PIOE_FELLSR
 (*(
WoReg
*)0x400E16D0UË

	)

132 
	#REG_PIOE_REHLSR
 (*(
WoReg
*)0x400E16D4UË

	)

133 
	#REG_PIOE_FRLHSR
 (*(
RoReg
*)0x400E16D8UË

	)

134 
	#REG_PIOE_LOCKSR
 (*(
RoReg
*)0x400E16E0UË

	)

135 
	#REG_PIOE_WPMR
 (*(
RwReg
*)0x400E16E4UË

	)

136 
	#REG_PIOE_WPSR
 (*(
RoReg
*)0x400E16E8UË

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_piof.h

45 #i‚de‡
_SAM3XA_PIOF_INSTANCE_


46 
	#_SAM3XA_PIOF_INSTANCE_


	)

49 #i‡(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

50 
	#REG_PIOF_PER
 (0x400E1800UË

	)

51 
	#REG_PIOF_PDR
 (0x400E1804UË

	)

52 
	#REG_PIOF_PSR
 (0x400E1808UË

	)

53 
	#REG_PIOF_OER
 (0x400E1810UË

	)

54 
	#REG_PIOF_ODR
 (0x400E1814UË

	)

55 
	#REG_PIOF_OSR
 (0x400E1818UË

	)

56 
	#REG_PIOF_IFER
 (0x400E1820UË

	)

57 
	#REG_PIOF_IFDR
 (0x400E1824UË

	)

58 
	#REG_PIOF_IFSR
 (0x400E1828UË

	)

59 
	#REG_PIOF_SODR
 (0x400E1830UË

	)

60 
	#REG_PIOF_CODR
 (0x400E1834UË

	)

61 
	#REG_PIOF_ODSR
 (0x400E1838UË

	)

62 
	#REG_PIOF_PDSR
 (0x400E183CUË

	)

63 
	#REG_PIOF_IER
 (0x400E1840UË

	)

64 
	#REG_PIOF_IDR
 (0x400E1844UË

	)

65 
	#REG_PIOF_IMR
 (0x400E1848UË

	)

66 
	#REG_PIOF_ISR
 (0x400E184CUË

	)

67 
	#REG_PIOF_MDER
 (0x400E1850UË

	)

68 
	#REG_PIOF_MDDR
 (0x400E1854UË

	)

69 
	#REG_PIOF_MDSR
 (0x400E1858UË

	)

70 
	#REG_PIOF_PUDR
 (0x400E1860UË

	)

71 
	#REG_PIOF_PUER
 (0x400E1864UË

	)

72 
	#REG_PIOF_PUSR
 (0x400E1868UË

	)

73 
	#REG_PIOF_ABSR
 (0x400E1870UË

	)

74 
	#REG_PIOF_SCIFSR
 (0x400E1880UË

	)

75 
	#REG_PIOF_DIFSR
 (0x400E1884UË

	)

76 
	#REG_PIOF_IFDGSR
 (0x400E1888UË

	)

77 
	#REG_PIOF_SCDR
 (0x400E188CUË

	)

78 
	#REG_PIOF_OWER
 (0x400E18A0UË

	)

79 
	#REG_PIOF_OWDR
 (0x400E18A4UË

	)

80 
	#REG_PIOF_OWSR
 (0x400E18A8UË

	)

81 
	#REG_PIOF_AIMER
 (0x400E18B0UË

	)

82 
	#REG_PIOF_AIMDR
 (0x400E18B4UË

	)

83 
	#REG_PIOF_AIMMR
 (0x400E18B8UË

	)

84 
	#REG_PIOF_ESR
 (0x400E18C0UË

	)

85 
	#REG_PIOF_LSR
 (0x400E18C4UË

	)

86 
	#REG_PIOF_ELSR
 (0x400E18C8UË

	)

87 
	#REG_PIOF_FELLSR
 (0x400E18D0UË

	)

88 
	#REG_PIOF_REHLSR
 (0x400E18D4UË

	)

89 
	#REG_PIOF_FRLHSR
 (0x400E18D8UË

	)

90 
	#REG_PIOF_LOCKSR
 (0x400E18E0UË

	)

91 
	#REG_PIOF_WPMR
 (0x400E18E4UË

	)

92 
	#REG_PIOF_WPSR
 (0x400E18E8UË

	)

94 
	#REG_PIOF_PER
 (*(
WoReg
*)0x400E1800UË

	)

95 
	#REG_PIOF_PDR
 (*(
WoReg
*)0x400E1804UË

	)

96 
	#REG_PIOF_PSR
 (*(
RoReg
*)0x400E1808UË

	)

97 
	#REG_PIOF_OER
 (*(
WoReg
*)0x400E1810UË

	)

98 
	#REG_PIOF_ODR
 (*(
WoReg
*)0x400E1814UË

	)

99 
	#REG_PIOF_OSR
 (*(
RoReg
*)0x400E1818UË

	)

100 
	#REG_PIOF_IFER
 (*(
WoReg
*)0x400E1820UË

	)

101 
	#REG_PIOF_IFDR
 (*(
WoReg
*)0x400E1824UË

	)

102 
	#REG_PIOF_IFSR
 (*(
RoReg
*)0x400E1828UË

	)

103 
	#REG_PIOF_SODR
 (*(
WoReg
*)0x400E1830UË

	)

104 
	#REG_PIOF_CODR
 (*(
WoReg
*)0x400E1834UË

	)

105 
	#REG_PIOF_ODSR
 (*(
RwReg
*)0x400E1838UË

	)

106 
	#REG_PIOF_PDSR
 (*(
RoReg
*)0x400E183CUË

	)

107 
	#REG_PIOF_IER
 (*(
WoReg
*)0x400E1840UË

	)

108 
	#REG_PIOF_IDR
 (*(
WoReg
*)0x400E1844UË

	)

109 
	#REG_PIOF_IMR
 (*(
RoReg
*)0x400E1848UË

	)

110 
	#REG_PIOF_ISR
 (*(
RoReg
*)0x400E184CUË

	)

111 
	#REG_PIOF_MDER
 (*(
WoReg
*)0x400E1850UË

	)

112 
	#REG_PIOF_MDDR
 (*(
WoReg
*)0x400E1854UË

	)

113 
	#REG_PIOF_MDSR
 (*(
RoReg
*)0x400E1858UË

	)

114 
	#REG_PIOF_PUDR
 (*(
WoReg
*)0x400E1860UË

	)

115 
	#REG_PIOF_PUER
 (*(
WoReg
*)0x400E1864UË

	)

116 
	#REG_PIOF_PUSR
 (*(
RoReg
*)0x400E1868UË

	)

117 
	#REG_PIOF_ABSR
 (*(
RwReg
*)0x400E1870UË

	)

118 
	#REG_PIOF_SCIFSR
 (*(
WoReg
*)0x400E1880UË

	)

119 
	#REG_PIOF_DIFSR
 (*(
WoReg
*)0x400E1884UË

	)

120 
	#REG_PIOF_IFDGSR
 (*(
RoReg
*)0x400E1888UË

	)

121 
	#REG_PIOF_SCDR
 (*(
RwReg
*)0x400E188CUË

	)

122 
	#REG_PIOF_OWER
 (*(
WoReg
*)0x400E18A0UË

	)

123 
	#REG_PIOF_OWDR
 (*(
WoReg
*)0x400E18A4UË

	)

124 
	#REG_PIOF_OWSR
 (*(
RoReg
*)0x400E18A8UË

	)

125 
	#REG_PIOF_AIMER
 (*(
WoReg
*)0x400E18B0UË

	)

126 
	#REG_PIOF_AIMDR
 (*(
WoReg
*)0x400E18B4UË

	)

127 
	#REG_PIOF_AIMMR
 (*(
RoReg
*)0x400E18B8UË

	)

128 
	#REG_PIOF_ESR
 (*(
WoReg
*)0x400E18C0UË

	)

129 
	#REG_PIOF_LSR
 (*(
WoReg
*)0x400E18C4UË

	)

130 
	#REG_PIOF_ELSR
 (*(
RoReg
*)0x400E18C8UË

	)

131 
	#REG_PIOF_FELLSR
 (*(
WoReg
*)0x400E18D0UË

	)

132 
	#REG_PIOF_REHLSR
 (*(
WoReg
*)0x400E18D4UË

	)

133 
	#REG_PIOF_FRLHSR
 (*(
RoReg
*)0x400E18D8UË

	)

134 
	#REG_PIOF_LOCKSR
 (*(
RoReg
*)0x400E18E0UË

	)

135 
	#REG_PIOF_WPMR
 (*(
RwReg
*)0x400E18E4UË

	)

136 
	#REG_PIOF_WPSR
 (*(
RoReg
*)0x400E18E8UË

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_pmc.h

45 #i‚de‡
_SAM3XA_PMC_INSTANCE_


46 
	#_SAM3XA_PMC_INSTANCE_


	)

49 #i‡(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

50 
	#REG_PMC_SCER
 (0x400E0600UË

	)

51 
	#REG_PMC_SCDR
 (0x400E0604UË

	)

52 
	#REG_PMC_SCSR
 (0x400E0608UË

	)

53 
	#REG_PMC_PCER0
 (0x400E0610UË

	)

54 
	#REG_PMC_PCDR0
 (0x400E0614UË

	)

55 
	#REG_PMC_PCSR0
 (0x400E0618UË

	)

56 
	#REG_CKGR_UCKR
 (0x400E061CUË

	)

57 
	#REG_CKGR_MOR
 (0x400E0620UË

	)

58 
	#REG_CKGR_MCFR
 (0x400E0624UË

	)

59 
	#REG_CKGR_PLLAR
 (0x400E0628UË

	)

60 
	#REG_PMC_MCKR
 (0x400E0630UË

	)

61 
	#REG_PMC_USB
 (0x400E0638UË

	)

62 
	#REG_PMC_PCK
 (0x400E0640UË

	)

63 
	#REG_PMC_IER
 (0x400E0660UË

	)

64 
	#REG_PMC_IDR
 (0x400E0664UË

	)

65 
	#REG_PMC_SR
 (0x400E0668UË

	)

66 
	#REG_PMC_IMR
 (0x400E066CUË

	)

67 
	#REG_PMC_FSMR
 (0x400E0670UË

	)

68 
	#REG_PMC_FSPR
 (0x400E0674UË

	)

69 
	#REG_PMC_FOCR
 (0x400E0678UË

	)

70 
	#REG_PMC_WPMR
 (0x400E06E4UË

	)

71 
	#REG_PMC_WPSR
 (0x400E06E8UË

	)

72 
	#REG_PMC_PCER1
 (0x400E0700UË

	)

73 
	#REG_PMC_PCDR1
 (0x400E0704UË

	)

74 
	#REG_PMC_PCSR1
 (0x400E0708UË

	)

75 
	#REG_PMC_PCR
 (0x400E070CUË

	)

77 
	#REG_PMC_SCER
 (*(
WoReg
*)0x400E0600UË

	)

78 
	#REG_PMC_SCDR
 (*(
WoReg
*)0x400E0604UË

	)

79 
	#REG_PMC_SCSR
 (*(
RoReg
*)0x400E0608UË

	)

80 
	#REG_PMC_PCER0
 (*(
WoReg
*)0x400E0610UË

	)

81 
	#REG_PMC_PCDR0
 (*(
WoReg
*)0x400E0614UË

	)

82 
	#REG_PMC_PCSR0
 (*(
RoReg
*)0x400E0618UË

	)

83 
	#REG_CKGR_UCKR
 (*(
RwReg
*)0x400E061CUË

	)

84 
	#REG_CKGR_MOR
 (*(
RwReg
*)0x400E0620UË

	)

85 
	#REG_CKGR_MCFR
 (*(
RoReg
*)0x400E0624UË

	)

86 
	#REG_CKGR_PLLAR
 (*(
RwReg
*)0x400E0628UË

	)

87 
	#REG_PMC_MCKR
 (*(
RwReg
*)0x400E0630UË

	)

88 
	#REG_PMC_USB
 (*(
RwReg
*)0x400E0638UË

	)

89 
	#REG_PMC_PCK
 (*(
RwReg
*)0x400E0640UË

	)

90 
	#REG_PMC_IER
 (*(
WoReg
*)0x400E0660UË

	)

91 
	#REG_PMC_IDR
 (*(
WoReg
*)0x400E0664UË

	)

92 
	#REG_PMC_SR
 (*(
RoReg
*)0x400E0668UË

	)

93 
	#REG_PMC_IMR
 (*(
RoReg
*)0x400E066CUË

	)

94 
	#REG_PMC_FSMR
 (*(
RwReg
*)0x400E0670UË

	)

95 
	#REG_PMC_FSPR
 (*(
RwReg
*)0x400E0674UË

	)

96 
	#REG_PMC_FOCR
 (*(
WoReg
*)0x400E0678UË

	)

97 
	#REG_PMC_WPMR
 (*(
RwReg
*)0x400E06E4UË

	)

98 
	#REG_PMC_WPSR
 (*(
RoReg
*)0x400E06E8UË

	)

99 
	#REG_PMC_PCER1
 (*(
WoReg
*)0x400E0700UË

	)

100 
	#REG_PMC_PCDR1
 (*(
WoReg
*)0x400E0704UË

	)

101 
	#REG_PMC_PCSR1
 (*(
RoReg
*)0x400E0708UË

	)

102 
	#REG_PMC_PCR
 (*(
RwReg
*)0x400E070CUË

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_pwm.h

45 #i‚de‡
_SAM3XA_PWM_INSTANCE_


46 
	#_SAM3XA_PWM_INSTANCE_


	)

49 #i‡(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

50 
	#REG_PWM_CLK
 (0x40094000UË

	)

51 
	#REG_PWM_ENA
 (0x40094004UË

	)

52 
	#REG_PWM_DIS
 (0x40094008UË

	)

53 
	#REG_PWM_SR
 (0x4009400CUË

	)

54 
	#REG_PWM_IER1
 (0x40094010UË

	)

55 
	#REG_PWM_IDR1
 (0x40094014UË

	)

56 
	#REG_PWM_IMR1
 (0x40094018UË

	)

57 
	#REG_PWM_ISR1
 (0x4009401CUË

	)

58 
	#REG_PWM_SCM
 (0x40094020UË

	)

59 
	#REG_PWM_SCUC
 (0x40094028UË

	)

60 
	#REG_PWM_SCUP
 (0x4009402CUË

	)

61 
	#REG_PWM_SCUPUPD
 (0x40094030UË

	)

62 
	#REG_PWM_IER2
 (0x40094034UË

	)

63 
	#REG_PWM_IDR2
 (0x40094038UË

	)

64 
	#REG_PWM_IMR2
 (0x4009403CUË

	)

65 
	#REG_PWM_ISR2
 (0x40094040UË

	)

66 
	#REG_PWM_OOV
 (0x40094044UË

	)

67 
	#REG_PWM_OS
 (0x40094048UË

	)

68 
	#REG_PWM_OSS
 (0x4009404CUË

	)

69 
	#REG_PWM_OSC
 (0x40094050UË

	)

70 
	#REG_PWM_OSSUPD
 (0x40094054UË

	)

71 
	#REG_PWM_OSCUPD
 (0x40094058UË

	)

72 
	#REG_PWM_FMR
 (0x4009405CUË

	)

73 
	#REG_PWM_FSR
 (0x40094060UË

	)

74 
	#REG_PWM_FCR
 (0x40094064UË

	)

75 
	#REG_PWM_FPV
 (0x40094068UË

	)

76 
	#REG_PWM_FPE1
 (0x4009406CUË

	)

77 
	#REG_PWM_FPE2
 (0x40094070UË

	)

78 
	#REG_PWM_ELMR
 (0x4009407CUË

	)

79 
	#REG_PWM_SMMR
 (0x400940B0UË

	)

80 
	#REG_PWM_WPCR
 (0x400940E4UË

	)

81 
	#REG_PWM_WPSR
 (0x400940E8UË

	)

82 
	#REG_PWM_TPR
 (0x40094108UË

	)

83 
	#REG_PWM_TCR
 (0x4009410CUË

	)

84 
	#REG_PWM_TNPR
 (0x40094118UË

	)

85 
	#REG_PWM_TNCR
 (0x4009411CUË

	)

86 
	#REG_PWM_PTCR
 (0x40094120UË

	)

87 
	#REG_PWM_PTSR
 (0x40094124UË

	)

88 
	#REG_PWM_CMPV0
 (0x40094130UË

	)

89 
	#REG_PWM_CMPVUPD0
 (0x40094134UË

	)

90 
	#REG_PWM_CMPM0
 (0x40094138UË

	)

91 
	#REG_PWM_CMPMUPD0
 (0x4009413CUË

	)

92 
	#REG_PWM_CMPV1
 (0x40094140UË

	)

93 
	#REG_PWM_CMPVUPD1
 (0x40094144UË

	)

94 
	#REG_PWM_CMPM1
 (0x40094148UË

	)

95 
	#REG_PWM_CMPMUPD1
 (0x4009414CUË

	)

96 
	#REG_PWM_CMPV2
 (0x40094150UË

	)

97 
	#REG_PWM_CMPVUPD2
 (0x40094154UË

	)

98 
	#REG_PWM_CMPM2
 (0x40094158UË

	)

99 
	#REG_PWM_CMPMUPD2
 (0x4009415CUË

	)

100 
	#REG_PWM_CMPV3
 (0x40094160UË

	)

101 
	#REG_PWM_CMPVUPD3
 (0x40094164UË

	)

102 
	#REG_PWM_CMPM3
 (0x40094168UË

	)

103 
	#REG_PWM_CMPMUPD3
 (0x4009416CUË

	)

104 
	#REG_PWM_CMPV4
 (0x40094170UË

	)

105 
	#REG_PWM_CMPVUPD4
 (0x40094174UË

	)

106 
	#REG_PWM_CMPM4
 (0x40094178UË

	)

107 
	#REG_PWM_CMPMUPD4
 (0x4009417CUË

	)

108 
	#REG_PWM_CMPV5
 (0x40094180UË

	)

109 
	#REG_PWM_CMPVUPD5
 (0x40094184UË

	)

110 
	#REG_PWM_CMPM5
 (0x40094188UË

	)

111 
	#REG_PWM_CMPMUPD5
 (0x4009418CUË

	)

112 
	#REG_PWM_CMPV6
 (0x40094190UË

	)

113 
	#REG_PWM_CMPVUPD6
 (0x40094194UË

	)

114 
	#REG_PWM_CMPM6
 (0x40094198UË

	)

115 
	#REG_PWM_CMPMUPD6
 (0x4009419CUË

	)

116 
	#REG_PWM_CMPV7
 (0x400941A0UË

	)

117 
	#REG_PWM_CMPVUPD7
 (0x400941A4UË

	)

118 
	#REG_PWM_CMPM7
 (0x400941A8UË

	)

119 
	#REG_PWM_CMPMUPD7
 (0x400941ACUË

	)

120 
	#REG_PWM_CMR0
 (0x40094200UË

	)

121 
	#REG_PWM_CDTY0
 (0x40094204UË

	)

122 
	#REG_PWM_CDTYUPD0
 (0x40094208UË

	)

123 
	#REG_PWM_CPRD0
 (0x4009420CUË

	)

124 
	#REG_PWM_CPRDUPD0
 (0x40094210UË

	)

125 
	#REG_PWM_CCNT0
 (0x40094214UË

	)

126 
	#REG_PWM_DT0
 (0x40094218UË

	)

127 
	#REG_PWM_DTUPD0
 (0x4009421CUË

	)

128 
	#REG_PWM_CMR1
 (0x40094220UË

	)

129 
	#REG_PWM_CDTY1
 (0x40094224UË

	)

130 
	#REG_PWM_CDTYUPD1
 (0x40094228UË

	)

131 
	#REG_PWM_CPRD1
 (0x4009422CUË

	)

132 
	#REG_PWM_CPRDUPD1
 (0x40094230UË

	)

133 
	#REG_PWM_CCNT1
 (0x40094234UË

	)

134 
	#REG_PWM_DT1
 (0x40094238UË

	)

135 
	#REG_PWM_DTUPD1
 (0x4009423CUË

	)

136 
	#REG_PWM_CMR2
 (0x40094240UË

	)

137 
	#REG_PWM_CDTY2
 (0x40094244UË

	)

138 
	#REG_PWM_CDTYUPD2
 (0x40094248UË

	)

139 
	#REG_PWM_CPRD2
 (0x4009424CUË

	)

140 
	#REG_PWM_CPRDUPD2
 (0x40094250UË

	)

141 
	#REG_PWM_CCNT2
 (0x40094254UË

	)

142 
	#REG_PWM_DT2
 (0x40094258UË

	)

143 
	#REG_PWM_DTUPD2
 (0x4009425CUË

	)

144 
	#REG_PWM_CMR3
 (0x40094260UË

	)

145 
	#REG_PWM_CDTY3
 (0x40094264UË

	)

146 
	#REG_PWM_CDTYUPD3
 (0x40094268UË

	)

147 
	#REG_PWM_CPRD3
 (0x4009426CUË

	)

148 
	#REG_PWM_CPRDUPD3
 (0x40094270UË

	)

149 
	#REG_PWM_CCNT3
 (0x40094274UË

	)

150 
	#REG_PWM_DT3
 (0x40094278UË

	)

151 
	#REG_PWM_DTUPD3
 (0x4009427CUË

	)

152 
	#REG_PWM_CMR4
 (0x40094280UË

	)

153 
	#REG_PWM_CDTY4
 (0x40094284UË

	)

154 
	#REG_PWM_CDTYUPD4
 (0x40094288UË

	)

155 
	#REG_PWM_CPRD4
 (0x4009428CUË

	)

156 
	#REG_PWM_CPRDUPD4
 (0x40094290UË

	)

157 
	#REG_PWM_CCNT4
 (0x40094294UË

	)

158 
	#REG_PWM_DT4
 (0x40094298UË

	)

159 
	#REG_PWM_DTUPD4
 (0x4009429CUË

	)

160 
	#REG_PWM_CMR5
 (0x400942A0UË

	)

161 
	#REG_PWM_CDTY5
 (0x400942A4UË

	)

162 
	#REG_PWM_CDTYUPD5
 (0x400942A8UË

	)

163 
	#REG_PWM_CPRD5
 (0x400942ACUË

	)

164 
	#REG_PWM_CPRDUPD5
 (0x400942B0UË

	)

165 
	#REG_PWM_CCNT5
 (0x400942B4UË

	)

166 
	#REG_PWM_DT5
 (0x400942B8UË

	)

167 
	#REG_PWM_DTUPD5
 (0x400942BCUË

	)

168 
	#REG_PWM_CMR6
 (0x400942C0UË

	)

169 
	#REG_PWM_CDTY6
 (0x400942C4UË

	)

170 
	#REG_PWM_CDTYUPD6
 (0x400942C8UË

	)

171 
	#REG_PWM_CPRD6
 (0x400942CCUË

	)

172 
	#REG_PWM_CPRDUPD6
 (0x400942D0UË

	)

173 
	#REG_PWM_CCNT6
 (0x400942D4UË

	)

174 
	#REG_PWM_DT6
 (0x400942D8UË

	)

175 
	#REG_PWM_DTUPD6
 (0x400942DCUË

	)

176 
	#REG_PWM_CMR7
 (0x400942E0UË

	)

177 
	#REG_PWM_CDTY7
 (0x400942E4UË

	)

178 
	#REG_PWM_CDTYUPD7
 (0x400942E8UË

	)

179 
	#REG_PWM_CPRD7
 (0x400942ECUË

	)

180 
	#REG_PWM_CPRDUPD7
 (0x400942F0UË

	)

181 
	#REG_PWM_CCNT7
 (0x400942F4UË

	)

182 
	#REG_PWM_DT7
 (0x400942F8UË

	)

183 
	#REG_PWM_DTUPD7
 (0x400942FCUË

	)

185 
	#REG_PWM_CLK
 (*(
RwReg
*)0x40094000UË

	)

186 
	#REG_PWM_ENA
 (*(
WoReg
*)0x40094004UË

	)

187 
	#REG_PWM_DIS
 (*(
WoReg
*)0x40094008UË

	)

188 
	#REG_PWM_SR
 (*(
RoReg
*)0x4009400CUË

	)

189 
	#REG_PWM_IER1
 (*(
WoReg
*)0x40094010UË

	)

190 
	#REG_PWM_IDR1
 (*(
WoReg
*)0x40094014UË

	)

191 
	#REG_PWM_IMR1
 (*(
RoReg
*)0x40094018UË

	)

192 
	#REG_PWM_ISR1
 (*(
RoReg
*)0x4009401CUË

	)

193 
	#REG_PWM_SCM
 (*(
RwReg
*)0x40094020UË

	)

194 
	#REG_PWM_SCUC
 (*(
RwReg
*)0x40094028UË

	)

195 
	#REG_PWM_SCUP
 (*(
RwReg
*)0x4009402CUË

	)

196 
	#REG_PWM_SCUPUPD
 (*(
WoReg
*)0x40094030UË

	)

197 
	#REG_PWM_IER2
 (*(
WoReg
*)0x40094034UË

	)

198 
	#REG_PWM_IDR2
 (*(
WoReg
*)0x40094038UË

	)

199 
	#REG_PWM_IMR2
 (*(
RoReg
*)0x4009403CUË

	)

200 
	#REG_PWM_ISR2
 (*(
RoReg
*)0x40094040UË

	)

201 
	#REG_PWM_OOV
 (*(
RwReg
*)0x40094044UË

	)

202 
	#REG_PWM_OS
 (*(
RwReg
*)0x40094048UË

	)

203 
	#REG_PWM_OSS
 (*(
WoReg
*)0x4009404CUË

	)

204 
	#REG_PWM_OSC
 (*(
WoReg
*)0x40094050UË

	)

205 
	#REG_PWM_OSSUPD
 (*(
WoReg
*)0x40094054UË

	)

206 
	#REG_PWM_OSCUPD
 (*(
WoReg
*)0x40094058UË

	)

207 
	#REG_PWM_FMR
 (*(
RwReg
*)0x4009405CUË

	)

208 
	#REG_PWM_FSR
 (*(
RoReg
*)0x40094060UË

	)

209 
	#REG_PWM_FCR
 (*(
WoReg
*)0x40094064UË

	)

210 
	#REG_PWM_FPV
 (*(
RwReg
*)0x40094068UË

	)

211 
	#REG_PWM_FPE1
 (*(
RwReg
*)0x4009406CUË

	)

212 
	#REG_PWM_FPE2
 (*(
RwReg
*)0x40094070UË

	)

213 
	#REG_PWM_ELMR
 (*(
RwReg
*)0x4009407CUË

	)

214 
	#REG_PWM_SMMR
 (*(
RwReg
*)0x400940B0UË

	)

215 
	#REG_PWM_WPCR
 (*(
WoReg
*)0x400940E4UË

	)

216 
	#REG_PWM_WPSR
 (*(
RoReg
*)0x400940E8UË

	)

217 
	#REG_PWM_TPR
 (*(
RwReg
*)0x40094108UË

	)

218 
	#REG_PWM_TCR
 (*(
RwReg
*)0x4009410CUË

	)

219 
	#REG_PWM_TNPR
 (*(
RwReg
*)0x40094118UË

	)

220 
	#REG_PWM_TNCR
 (*(
RwReg
*)0x4009411CUË

	)

221 
	#REG_PWM_PTCR
 (*(
WoReg
*)0x40094120UË

	)

222 
	#REG_PWM_PTSR
 (*(
RoReg
*)0x40094124UË

	)

223 
	#REG_PWM_CMPV0
 (*(
RwReg
*)0x40094130UË

	)

224 
	#REG_PWM_CMPVUPD0
 (*(
WoReg
*)0x40094134UË

	)

225 
	#REG_PWM_CMPM0
 (*(
RwReg
*)0x40094138UË

	)

226 
	#REG_PWM_CMPMUPD0
 (*(
WoReg
*)0x4009413CUË

	)

227 
	#REG_PWM_CMPV1
 (*(
RwReg
*)0x40094140UË

	)

228 
	#REG_PWM_CMPVUPD1
 (*(
WoReg
*)0x40094144UË

	)

229 
	#REG_PWM_CMPM1
 (*(
RwReg
*)0x40094148UË

	)

230 
	#REG_PWM_CMPMUPD1
 (*(
WoReg
*)0x4009414CUË

	)

231 
	#REG_PWM_CMPV2
 (*(
RwReg
*)0x40094150UË

	)

232 
	#REG_PWM_CMPVUPD2
 (*(
WoReg
*)0x40094154UË

	)

233 
	#REG_PWM_CMPM2
 (*(
RwReg
*)0x40094158UË

	)

234 
	#REG_PWM_CMPMUPD2
 (*(
WoReg
*)0x4009415CUË

	)

235 
	#REG_PWM_CMPV3
 (*(
RwReg
*)0x40094160UË

	)

236 
	#REG_PWM_CMPVUPD3
 (*(
WoReg
*)0x40094164UË

	)

237 
	#REG_PWM_CMPM3
 (*(
RwReg
*)0x40094168UË

	)

238 
	#REG_PWM_CMPMUPD3
 (*(
WoReg
*)0x4009416CUË

	)

239 
	#REG_PWM_CMPV4
 (*(
RwReg
*)0x40094170UË

	)

240 
	#REG_PWM_CMPVUPD4
 (*(
WoReg
*)0x40094174UË

	)

241 
	#REG_PWM_CMPM4
 (*(
RwReg
*)0x40094178UË

	)

242 
	#REG_PWM_CMPMUPD4
 (*(
WoReg
*)0x4009417CUË

	)

243 
	#REG_PWM_CMPV5
 (*(
RwReg
*)0x40094180UË

	)

244 
	#REG_PWM_CMPVUPD5
 (*(
WoReg
*)0x40094184UË

	)

245 
	#REG_PWM_CMPM5
 (*(
RwReg
*)0x40094188UË

	)

246 
	#REG_PWM_CMPMUPD5
 (*(
WoReg
*)0x4009418CUË

	)

247 
	#REG_PWM_CMPV6
 (*(
RwReg
*)0x40094190UË

	)

248 
	#REG_PWM_CMPVUPD6
 (*(
WoReg
*)0x40094194UË

	)

249 
	#REG_PWM_CMPM6
 (*(
RwReg
*)0x40094198UË

	)

250 
	#REG_PWM_CMPMUPD6
 (*(
WoReg
*)0x4009419CUË

	)

251 
	#REG_PWM_CMPV7
 (*(
RwReg
*)0x400941A0UË

	)

252 
	#REG_PWM_CMPVUPD7
 (*(
WoReg
*)0x400941A4UË

	)

253 
	#REG_PWM_CMPM7
 (*(
RwReg
*)0x400941A8UË

	)

254 
	#REG_PWM_CMPMUPD7
 (*(
WoReg
*)0x400941ACUË

	)

255 
	#REG_PWM_CMR0
 (*(
RwReg
*)0x40094200UË

	)

256 
	#REG_PWM_CDTY0
 (*(
RwReg
*)0x40094204UË

	)

257 
	#REG_PWM_CDTYUPD0
 (*(
WoReg
*)0x40094208UË

	)

258 
	#REG_PWM_CPRD0
 (*(
RwReg
*)0x4009420CUË

	)

259 
	#REG_PWM_CPRDUPD0
 (*(
WoReg
*)0x40094210UË

	)

260 
	#REG_PWM_CCNT0
 (*(
RoReg
*)0x40094214UË

	)

261 
	#REG_PWM_DT0
 (*(
RwReg
*)0x40094218UË

	)

262 
	#REG_PWM_DTUPD0
 (*(
WoReg
*)0x4009421CUË

	)

263 
	#REG_PWM_CMR1
 (*(
RwReg
*)0x40094220UË

	)

264 
	#REG_PWM_CDTY1
 (*(
RwReg
*)0x40094224UË

	)

265 
	#REG_PWM_CDTYUPD1
 (*(
WoReg
*)0x40094228UË

	)

266 
	#REG_PWM_CPRD1
 (*(
RwReg
*)0x4009422CUË

	)

267 
	#REG_PWM_CPRDUPD1
 (*(
WoReg
*)0x40094230UË

	)

268 
	#REG_PWM_CCNT1
 (*(
RoReg
*)0x40094234UË

	)

269 
	#REG_PWM_DT1
 (*(
RwReg
*)0x40094238UË

	)

270 
	#REG_PWM_DTUPD1
 (*(
WoReg
*)0x4009423CUË

	)

271 
	#REG_PWM_CMR2
 (*(
RwReg
*)0x40094240UË

	)

272 
	#REG_PWM_CDTY2
 (*(
RwReg
*)0x40094244UË

	)

273 
	#REG_PWM_CDTYUPD2
 (*(
WoReg
*)0x40094248UË

	)

274 
	#REG_PWM_CPRD2
 (*(
RwReg
*)0x4009424CUË

	)

275 
	#REG_PWM_CPRDUPD2
 (*(
WoReg
*)0x40094250UË

	)

276 
	#REG_PWM_CCNT2
 (*(
RoReg
*)0x40094254UË

	)

277 
	#REG_PWM_DT2
 (*(
RwReg
*)0x40094258UË

	)

278 
	#REG_PWM_DTUPD2
 (*(
WoReg
*)0x4009425CUË

	)

279 
	#REG_PWM_CMR3
 (*(
RwReg
*)0x40094260UË

	)

280 
	#REG_PWM_CDTY3
 (*(
RwReg
*)0x40094264UË

	)

281 
	#REG_PWM_CDTYUPD3
 (*(
WoReg
*)0x40094268UË

	)

282 
	#REG_PWM_CPRD3
 (*(
RwReg
*)0x4009426CUË

	)

283 
	#REG_PWM_CPRDUPD3
 (*(
WoReg
*)0x40094270UË

	)

284 
	#REG_PWM_CCNT3
 (*(
RoReg
*)0x40094274UË

	)

285 
	#REG_PWM_DT3
 (*(
RwReg
*)0x40094278UË

	)

286 
	#REG_PWM_DTUPD3
 (*(
WoReg
*)0x4009427CUË

	)

287 
	#REG_PWM_CMR4
 (*(
RwReg
*)0x40094280UË

	)

288 
	#REG_PWM_CDTY4
 (*(
RwReg
*)0x40094284UË

	)

289 
	#REG_PWM_CDTYUPD4
 (*(
WoReg
*)0x40094288UË

	)

290 
	#REG_PWM_CPRD4
 (*(
RwReg
*)0x4009428CUË

	)

291 
	#REG_PWM_CPRDUPD4
 (*(
WoReg
*)0x40094290UË

	)

292 
	#REG_PWM_CCNT4
 (*(
RoReg
*)0x40094294UË

	)

293 
	#REG_PWM_DT4
 (*(
RwReg
*)0x40094298UË

	)

294 
	#REG_PWM_DTUPD4
 (*(
WoReg
*)0x4009429CUË

	)

295 
	#REG_PWM_CMR5
 (*(
RwReg
*)0x400942A0UË

	)

296 
	#REG_PWM_CDTY5
 (*(
RwReg
*)0x400942A4UË

	)

297 
	#REG_PWM_CDTYUPD5
 (*(
WoReg
*)0x400942A8UË

	)

298 
	#REG_PWM_CPRD5
 (*(
RwReg
*)0x400942ACUË

	)

299 
	#REG_PWM_CPRDUPD5
 (*(
WoReg
*)0x400942B0UË

	)

300 
	#REG_PWM_CCNT5
 (*(
RoReg
*)0x400942B4UË

	)

301 
	#REG_PWM_DT5
 (*(
RwReg
*)0x400942B8UË

	)

302 
	#REG_PWM_DTUPD5
 (*(
WoReg
*)0x400942BCUË

	)

303 
	#REG_PWM_CMR6
 (*(
RwReg
*)0x400942C0UË

	)

304 
	#REG_PWM_CDTY6
 (*(
RwReg
*)0x400942C4UË

	)

305 
	#REG_PWM_CDTYUPD6
 (*(
WoReg
*)0x400942C8UË

	)

306 
	#REG_PWM_CPRD6
 (*(
RwReg
*)0x400942CCUË

	)

307 
	#REG_PWM_CPRDUPD6
 (*(
WoReg
*)0x400942D0UË

	)

308 
	#REG_PWM_CCNT6
 (*(
RoReg
*)0x400942D4UË

	)

309 
	#REG_PWM_DT6
 (*(
RwReg
*)0x400942D8UË

	)

310 
	#REG_PWM_DTUPD6
 (*(
WoReg
*)0x400942DCUË

	)

311 
	#REG_PWM_CMR7
 (*(
RwReg
*)0x400942E0UË

	)

312 
	#REG_PWM_CDTY7
 (*(
RwReg
*)0x400942E4UË

	)

313 
	#REG_PWM_CDTYUPD7
 (*(
WoReg
*)0x400942E8UË

	)

314 
	#REG_PWM_CPRD7
 (*(
RwReg
*)0x400942ECUË

	)

315 
	#REG_PWM_CPRDUPD7
 (*(
WoReg
*)0x400942F0UË

	)

316 
	#REG_PWM_CCNT7
 (*(
RoReg
*)0x400942F4UË

	)

317 
	#REG_PWM_DT7
 (*(
RwReg
*)0x400942F8UË

	)

318 
	#REG_PWM_DTUPD7
 (*(
WoReg
*)0x400942FCUË

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_rstc.h

45 #i‚de‡
_SAM3XA_RSTC_INSTANCE_


46 
	#_SAM3XA_RSTC_INSTANCE_


	)

49 #i‡(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

50 
	#REG_RSTC_CR
 (0x400E1A00UË

	)

51 
	#REG_RSTC_SR
 (0x400E1A04UË

	)

52 
	#REG_RSTC_MR
 (0x400E1A08UË

	)

54 
	#REG_RSTC_CR
 (*(
WoReg
*)0x400E1A00UË

	)

55 
	#REG_RSTC_SR
 (*(
RoReg
*)0x400E1A04UË

	)

56 
	#REG_RSTC_MR
 (*(
RwReg
*)0x400E1A08UË

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_rtc.h

45 #i‚de‡
_SAM3XA_RTC_INSTANCE_


46 
	#_SAM3XA_RTC_INSTANCE_


	)

49 #i‡(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

50 
	#REG_RTC_CR
 (0x400E1A60UË

	)

51 
	#REG_RTC_MR
 (0x400E1A64UË

	)

52 
	#REG_RTC_TIMR
 (0x400E1A68UË

	)

53 
	#REG_RTC_CALR
 (0x400E1A6CUË

	)

54 
	#REG_RTC_TIMALR
 (0x400E1A70UË

	)

55 
	#REG_RTC_CALALR
 (0x400E1A74UË

	)

56 
	#REG_RTC_SR
 (0x400E1A78UË

	)

57 
	#REG_RTC_SCCR
 (0x400E1A7CUË

	)

58 
	#REG_RTC_IER
 (0x400E1A80UË

	)

59 
	#REG_RTC_IDR
 (0x400E1A84UË

	)

60 
	#REG_RTC_IMR
 (0x400E1A88UË

	)

61 
	#REG_RTC_VER
 (0x400E1A8CUË

	)

62 
	#REG_RTC_WPMR
 (0x400E1B44UË

	)

64 
	#REG_RTC_CR
 (*(
RwReg
*)0x400E1A60UË

	)

65 
	#REG_RTC_MR
 (*(
RwReg
*)0x400E1A64UË

	)

66 
	#REG_RTC_TIMR
 (*(
RwReg
*)0x400E1A68UË

	)

67 
	#REG_RTC_CALR
 (*(
RwReg
*)0x400E1A6CUË

	)

68 
	#REG_RTC_TIMALR
 (*(
RwReg
*)0x400E1A70UË

	)

69 
	#REG_RTC_CALALR
 (*(
RwReg
*)0x400E1A74UË

	)

70 
	#REG_RTC_SR
 (*(
RoReg
*)0x400E1A78UË

	)

71 
	#REG_RTC_SCCR
 (*(
WoReg
*)0x400E1A7CUË

	)

72 
	#REG_RTC_IER
 (*(
WoReg
*)0x400E1A80UË

	)

73 
	#REG_RTC_IDR
 (*(
WoReg
*)0x400E1A84UË

	)

74 
	#REG_RTC_IMR
 (*(
RoReg
*)0x400E1A88UË

	)

75 
	#REG_RTC_VER
 (*(
RoReg
*)0x400E1A8CUË

	)

76 
	#REG_RTC_WPMR
 (*(
RwReg
*)0x400E1B44UË

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_rtt.h

45 #i‚de‡
_SAM3XA_RTT_INSTANCE_


46 
	#_SAM3XA_RTT_INSTANCE_


	)

49 #i‡(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

50 
	#REG_RTT_MR
 (0x400E1A30UË

	)

51 
	#REG_RTT_AR
 (0x400E1A34UË

	)

52 
	#REG_RTT_VR
 (0x400E1A38UË

	)

53 
	#REG_RTT_SR
 (0x400E1A3CUË

	)

55 
	#REG_RTT_MR
 (*(
RwReg
*)0x400E1A30UË

	)

56 
	#REG_RTT_AR
 (*(
RwReg
*)0x400E1A34UË

	)

57 
	#REG_RTT_VR
 (*(
RoReg
*)0x400E1A38UË

	)

58 
	#REG_RTT_SR
 (*(
RoReg
*)0x400E1A3CUË

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_sdramc.h

45 #i‚de‡
_SAM3XA_SDRAMC_INSTANCE_


46 
	#_SAM3XA_SDRAMC_INSTANCE_


	)

49 #i‡(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

50 
	#REG_SDRAMC_MR
 (0x400E0200UË

	)

51 
	#REG_SDRAMC_TR
 (0x400E0204UË

	)

52 
	#REG_SDRAMC_CR
 (0x400E0208UË

	)

53 
	#REG_SDRAMC_LPR
 (0x400E0210UË

	)

54 
	#REG_SDRAMC_IER
 (0x400E0214UË

	)

55 
	#REG_SDRAMC_IDR
 (0x400E0218UË

	)

56 
	#REG_SDRAMC_IMR
 (0x400E021CUË

	)

57 
	#REG_SDRAMC_ISR
 (0x400E0220UË

	)

58 
	#REG_SDRAMC_MDR
 (0x400E0224UË

	)

59 
	#REG_SDRAMC_CR1
 (0x400E0228UË

	)

60 
	#REG_SDRAMC_OCMS
 (0x400E022CUË

	)

62 
	#REG_SDRAMC_MR
 (*(
RwReg
*)0x400E0200UË

	)

63 
	#REG_SDRAMC_TR
 (*(
RwReg
*)0x400E0204UË

	)

64 
	#REG_SDRAMC_CR
 (*(
RwReg
*)0x400E0208UË

	)

65 
	#REG_SDRAMC_LPR
 (*(
RwReg
*)0x400E0210UË

	)

66 
	#REG_SDRAMC_IER
 (*(
WoReg
*)0x400E0214UË

	)

67 
	#REG_SDRAMC_IDR
 (*(
WoReg
*)0x400E0218UË

	)

68 
	#REG_SDRAMC_IMR
 (*(
RoReg
*)0x400E021CUË

	)

69 
	#REG_SDRAMC_ISR
 (*(
RoReg
*)0x400E0220UË

	)

70 
	#REG_SDRAMC_MDR
 (*(
RwReg
*)0x400E0224UË

	)

71 
	#REG_SDRAMC_CR1
 (*(
RwReg
*)0x400E0228UË

	)

72 
	#REG_SDRAMC_OCMS
 (*(
RwReg
*)0x400E022CUË

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_smc.h

45 #i‚de‡
_SAM3XA_SMC_INSTANCE_


46 
	#_SAM3XA_SMC_INSTANCE_


	)

49 #i‡(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

50 
	#REG_SMC_CFG
 (0x400E0000UË

	)

51 
	#REG_SMC_CTRL
 (0x400E0004UË

	)

52 
	#REG_SMC_SR
 (0x400E0008UË

	)

53 
	#REG_SMC_IER
 (0x400E000CUË

	)

54 
	#REG_SMC_IDR
 (0x400E0010UË

	)

55 
	#REG_SMC_IMR
 (0x400E0014UË

	)

56 
	#REG_SMC_ADDR
 (0x400E0018UË

	)

57 
	#REG_SMC_BANK
 (0x400E001CUË

	)

58 
	#REG_SMC_ECC_CTRL
 (0x400E0020UË

	)

59 
	#REG_SMC_ECC_MD
 (0x400E0024UË

	)

60 
	#REG_SMC_ECC_SR1
 (0x400E0028UË

	)

61 
	#REG_SMC_ECC_PR0
 (0x400E002CUË

	)

62 
	#REG_SMC_ECC_PR1
 (0x400E0030UË

	)

63 
	#REG_SMC_ECC_SR2
 (0x400E0034UË

	)

64 
	#REG_SMC_ECC_PR2
 (0x400E0038UË

	)

65 
	#REG_SMC_ECC_PR3
 (0x400E003CUË

	)

66 
	#REG_SMC_ECC_PR4
 (0x400E0040UË

	)

67 
	#REG_SMC_ECC_PR5
 (0x400E0044UË

	)

68 
	#REG_SMC_ECC_PR6
 (0x400E0048UË

	)

69 
	#REG_SMC_ECC_PR7
 (0x400E004CUË

	)

70 
	#REG_SMC_ECC_PR8
 (0x400E0050UË

	)

71 
	#REG_SMC_ECC_PR9
 (0x400E0054UË

	)

72 
	#REG_SMC_ECC_PR10
 (0x400E0058UË

	)

73 
	#REG_SMC_ECC_PR11
 (0x400E005CUË

	)

74 
	#REG_SMC_ECC_PR12
 (0x400E0060UË

	)

75 
	#REG_SMC_ECC_PR13
 (0x400E0064UË

	)

76 
	#REG_SMC_ECC_PR14
 (0x400E0068UË

	)

77 
	#REG_SMC_ECC_PR15
 (0x400E006CUË

	)

78 
	#REG_SMC_SETUP0
 (0x400E0070UË

	)

79 
	#REG_SMC_PULSE0
 (0x400E0074UË

	)

80 
	#REG_SMC_CYCLE0
 (0x400E0078UË

	)

81 
	#REG_SMC_TIMINGS0
 (0x400E007CUË

	)

82 
	#REG_SMC_MODE0
 (0x400E0080UË

	)

83 
	#REG_SMC_SETUP1
 (0x400E0084UË

	)

84 
	#REG_SMC_PULSE1
 (0x400E0088UË

	)

85 
	#REG_SMC_CYCLE1
 (0x400E008CUË

	)

86 
	#REG_SMC_TIMINGS1
 (0x400E0090UË

	)

87 
	#REG_SMC_MODE1
 (0x400E0094UË

	)

88 
	#REG_SMC_SETUP2
 (0x400E0098UË

	)

89 
	#REG_SMC_PULSE2
 (0x400E009CUË

	)

90 
	#REG_SMC_CYCLE2
 (0x400E00A0UË

	)

91 
	#REG_SMC_TIMINGS2
 (0x400E00A4UË

	)

92 
	#REG_SMC_MODE2
 (0x400E00A8UË

	)

93 
	#REG_SMC_SETUP3
 (0x400E00ACUË

	)

94 
	#REG_SMC_PULSE3
 (0x400E00B0UË

	)

95 
	#REG_SMC_CYCLE3
 (0x400E00B4UË

	)

96 
	#REG_SMC_TIMINGS3
 (0x400E00B8UË

	)

97 
	#REG_SMC_MODE3
 (0x400E00BCUË

	)

98 
	#REG_SMC_SETUP4
 (0x400E00C0UË

	)

99 
	#REG_SMC_PULSE4
 (0x400E00C4UË

	)

100 
	#REG_SMC_CYCLE4
 (0x400E00C8UË

	)

101 
	#REG_SMC_TIMINGS4
 (0x400E00CCUË

	)

102 
	#REG_SMC_MODE4
 (0x400E00D0UË

	)

103 
	#REG_SMC_SETUP5
 (0x400E00D4UË

	)

104 
	#REG_SMC_PULSE5
 (0x400E00D8UË

	)

105 
	#REG_SMC_CYCLE5
 (0x400E00DCUË

	)

106 
	#REG_SMC_TIMINGS5
 (0x400E00E0UË

	)

107 
	#REG_SMC_MODE5
 (0x400E00E4UË

	)

108 
	#REG_SMC_SETUP6
 (0x400E00E8UË

	)

109 
	#REG_SMC_PULSE6
 (0x400E00ECUË

	)

110 
	#REG_SMC_CYCLE6
 (0x400E00F0UË

	)

111 
	#REG_SMC_TIMINGS6
 (0x400E00F4UË

	)

112 
	#REG_SMC_MODE6
 (0x400E00F8UË

	)

113 
	#REG_SMC_SETUP7
 (0x400E00FCUË

	)

114 
	#REG_SMC_PULSE7
 (0x400E0100UË

	)

115 
	#REG_SMC_CYCLE7
 (0x400E0104UË

	)

116 
	#REG_SMC_TIMINGS7
 (0x400E0108UË

	)

117 
	#REG_SMC_MODE7
 (0x400E010CUË

	)

118 
	#REG_SMC_OCMS
 (0x400E0110UË

	)

119 
	#REG_SMC_KEY1
 (0x400E0114UË

	)

120 
	#REG_SMC_KEY2
 (0x400E0118UË

	)

121 
	#REG_SMC_WPCR
 (0x400E01E4UË

	)

122 
	#REG_SMC_WPSR
 (0x400E01E8UË

	)

124 
	#REG_SMC_CFG
 (*(
RwReg
*)0x400E0000UË

	)

125 
	#REG_SMC_CTRL
 (*(
WoReg
*)0x400E0004UË

	)

126 
	#REG_SMC_SR
 (*(
RoReg
*)0x400E0008UË

	)

127 
	#REG_SMC_IER
 (*(
WoReg
*)0x400E000CUË

	)

128 
	#REG_SMC_IDR
 (*(
WoReg
*)0x400E0010UË

	)

129 
	#REG_SMC_IMR
 (*(
RoReg
*)0x400E0014UË

	)

130 
	#REG_SMC_ADDR
 (*(
RwReg
*)0x400E0018UË

	)

131 
	#REG_SMC_BANK
 (*(
RwReg
*)0x400E001CUË

	)

132 
	#REG_SMC_ECC_CTRL
 (*(
WoReg
*)0x400E0020UË

	)

133 
	#REG_SMC_ECC_MD
 (*(
RwReg
*)0x400E0024UË

	)

134 
	#REG_SMC_ECC_SR1
 (*(
RoReg
*)0x400E0028UË

	)

135 
	#REG_SMC_ECC_PR0
 (*(
RoReg
*)0x400E002CUË

	)

136 
	#REG_SMC_ECC_PR1
 (*(
RoReg
*)0x400E0030UË

	)

137 
	#REG_SMC_ECC_SR2
 (*(
RoReg
*)0x400E0034UË

	)

138 
	#REG_SMC_ECC_PR2
 (*(
RoReg
*)0x400E0038UË

	)

139 
	#REG_SMC_ECC_PR3
 (*(
RoReg
*)0x400E003CUË

	)

140 
	#REG_SMC_ECC_PR4
 (*(
RoReg
*)0x400E0040UË

	)

141 
	#REG_SMC_ECC_PR5
 (*(
RoReg
*)0x400E0044UË

	)

142 
	#REG_SMC_ECC_PR6
 (*(
RoReg
*)0x400E0048UË

	)

143 
	#REG_SMC_ECC_PR7
 (*(
RoReg
*)0x400E004CUË

	)

144 
	#REG_SMC_ECC_PR8
 (*(
RoReg
*)0x400E0050UË

	)

145 
	#REG_SMC_ECC_PR9
 (*(
RoReg
*)0x400E0054UË

	)

146 
	#REG_SMC_ECC_PR10
 (*(
RoReg
*)0x400E0058UË

	)

147 
	#REG_SMC_ECC_PR11
 (*(
RoReg
*)0x400E005CUË

	)

148 
	#REG_SMC_ECC_PR12
 (*(
RoReg
*)0x400E0060UË

	)

149 
	#REG_SMC_ECC_PR13
 (*(
RoReg
*)0x400E0064UË

	)

150 
	#REG_SMC_ECC_PR14
 (*(
RoReg
*)0x400E0068UË

	)

151 
	#REG_SMC_ECC_PR15
 (*(
RoReg
*)0x400E006CUË

	)

152 
	#REG_SMC_SETUP0
 (*(
RwReg
*)0x400E0070UË

	)

153 
	#REG_SMC_PULSE0
 (*(
RwReg
*)0x400E0074UË

	)

154 
	#REG_SMC_CYCLE0
 (*(
RwReg
*)0x400E0078UË

	)

155 
	#REG_SMC_TIMINGS0
 (*(
RwReg
*)0x400E007CUË

	)

156 
	#REG_SMC_MODE0
 (*(
RwReg
*)0x400E0080UË

	)

157 
	#REG_SMC_SETUP1
 (*(
RwReg
*)0x400E0084UË

	)

158 
	#REG_SMC_PULSE1
 (*(
RwReg
*)0x400E0088UË

	)

159 
	#REG_SMC_CYCLE1
 (*(
RwReg
*)0x400E008CUË

	)

160 
	#REG_SMC_TIMINGS1
 (*(
RwReg
*)0x400E0090UË

	)

161 
	#REG_SMC_MODE1
 (*(
RwReg
*)0x400E0094UË

	)

162 
	#REG_SMC_SETUP2
 (*(
RwReg
*)0x400E0098UË

	)

163 
	#REG_SMC_PULSE2
 (*(
RwReg
*)0x400E009CUË

	)

164 
	#REG_SMC_CYCLE2
 (*(
RwReg
*)0x400E00A0UË

	)

165 
	#REG_SMC_TIMINGS2
 (*(
RwReg
*)0x400E00A4UË

	)

166 
	#REG_SMC_MODE2
 (*(
RwReg
*)0x400E00A8UË

	)

167 
	#REG_SMC_SETUP3
 (*(
RwReg
*)0x400E00ACUË

	)

168 
	#REG_SMC_PULSE3
 (*(
RwReg
*)0x400E00B0UË

	)

169 
	#REG_SMC_CYCLE3
 (*(
RwReg
*)0x400E00B4UË

	)

170 
	#REG_SMC_TIMINGS3
 (*(
RwReg
*)0x400E00B8UË

	)

171 
	#REG_SMC_MODE3
 (*(
RwReg
*)0x400E00BCUË

	)

172 
	#REG_SMC_SETUP4
 (*(
RwReg
*)0x400E00C0UË

	)

173 
	#REG_SMC_PULSE4
 (*(
RwReg
*)0x400E00C4UË

	)

174 
	#REG_SMC_CYCLE4
 (*(
RwReg
*)0x400E00C8UË

	)

175 
	#REG_SMC_TIMINGS4
 (*(
RwReg
*)0x400E00CCUË

	)

176 
	#REG_SMC_MODE4
 (*(
RwReg
*)0x400E00D0UË

	)

177 
	#REG_SMC_SETUP5
 (*(
RwReg
*)0x400E00D4UË

	)

178 
	#REG_SMC_PULSE5
 (*(
RwReg
*)0x400E00D8UË

	)

179 
	#REG_SMC_CYCLE5
 (*(
RwReg
*)0x400E00DCUË

	)

180 
	#REG_SMC_TIMINGS5
 (*(
RwReg
*)0x400E00E0UË

	)

181 
	#REG_SMC_MODE5
 (*(
RwReg
*)0x400E00E4UË

	)

182 
	#REG_SMC_SETUP6
 (*(
RwReg
*)0x400E00E8UË

	)

183 
	#REG_SMC_PULSE6
 (*(
RwReg
*)0x400E00ECUË

	)

184 
	#REG_SMC_CYCLE6
 (*(
RwReg
*)0x400E00F0UË

	)

185 
	#REG_SMC_TIMINGS6
 (*(
RwReg
*)0x400E00F4UË

	)

186 
	#REG_SMC_MODE6
 (*(
RwReg
*)0x400E00F8UË

	)

187 
	#REG_SMC_SETUP7
 (*(
RwReg
*)0x400E00FCUË

	)

188 
	#REG_SMC_PULSE7
 (*(
RwReg
*)0x400E0100UË

	)

189 
	#REG_SMC_CYCLE7
 (*(
RwReg
*)0x400E0104UË

	)

190 
	#REG_SMC_TIMINGS7
 (*(
RwReg
*)0x400E0108UË

	)

191 
	#REG_SMC_MODE7
 (*(
RwReg
*)0x400E010CUË

	)

192 
	#REG_SMC_OCMS
 (*(
RwReg
*)0x400E0110UË

	)

193 
	#REG_SMC_KEY1
 (*(
WoReg
*)0x400E0114UË

	)

194 
	#REG_SMC_KEY2
 (*(
WoReg
*)0x400E0118UË

	)

195 
	#REG_SMC_WPCR
 (*(
WoReg
*)0x400E01E4UË

	)

196 
	#REG_SMC_WPSR
 (*(
RoReg
*)0x400E01E8UË

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_spi0.h

45 #i‚de‡
_SAM3XA_SPI0_INSTANCE_


46 
	#_SAM3XA_SPI0_INSTANCE_


	)

49 #i‡(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

50 
	#REG_SPI0_CR
 (0x40008000UË

	)

51 
	#REG_SPI0_MR
 (0x40008004UË

	)

52 
	#REG_SPI0_RDR
 (0x40008008UË

	)

53 
	#REG_SPI0_TDR
 (0x4000800CUË

	)

54 
	#REG_SPI0_SR
 (0x40008010UË

	)

55 
	#REG_SPI0_IER
 (0x40008014UË

	)

56 
	#REG_SPI0_IDR
 (0x40008018UË

	)

57 
	#REG_SPI0_IMR
 (0x4000801CUË

	)

58 
	#REG_SPI0_CSR
 (0x40008030UË

	)

59 
	#REG_SPI0_WPMR
 (0x400080E4UË

	)

60 
	#REG_SPI0_WPSR
 (0x400080E8UË

	)

62 
	#REG_SPI0_CR
 (*(
WoReg
*)0x40008000UË

	)

63 
	#REG_SPI0_MR
 (*(
RwReg
*)0x40008004UË

	)

64 
	#REG_SPI0_RDR
 (*(
RoReg
*)0x40008008UË

	)

65 
	#REG_SPI0_TDR
 (*(
WoReg
*)0x4000800CUË

	)

66 
	#REG_SPI0_SR
 (*(
RoReg
*)0x40008010UË

	)

67 
	#REG_SPI0_IER
 (*(
WoReg
*)0x40008014UË

	)

68 
	#REG_SPI0_IDR
 (*(
WoReg
*)0x40008018UË

	)

69 
	#REG_SPI0_IMR
 (*(
RoReg
*)0x4000801CUË

	)

70 
	#REG_SPI0_CSR
 (*(
RwReg
*)0x40008030UË

	)

71 
	#REG_SPI0_WPMR
 (*(
RwReg
*)0x400080E4UË

	)

72 
	#REG_SPI0_WPSR
 (*(
RoReg
*)0x400080E8UË

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_spi1.h

45 #i‚de‡
_SAM3XA_SPI1_INSTANCE_


46 
	#_SAM3XA_SPI1_INSTANCE_


	)

49 #i‡(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

50 
	#REG_SPI1_CR
 (0x4000C000UË

	)

51 
	#REG_SPI1_MR
 (0x4000C004UË

	)

52 
	#REG_SPI1_RDR
 (0x4000C008UË

	)

53 
	#REG_SPI1_TDR
 (0x4000C00CUË

	)

54 
	#REG_SPI1_SR
 (0x4000C010UË

	)

55 
	#REG_SPI1_IER
 (0x4000C014UË

	)

56 
	#REG_SPI1_IDR
 (0x4000C018UË

	)

57 
	#REG_SPI1_IMR
 (0x4000C01CUË

	)

58 
	#REG_SPI1_CSR
 (0x4000C030UË

	)

59 
	#REG_SPI1_WPMR
 (0x4000C0E4UË

	)

60 
	#REG_SPI1_WPSR
 (0x4000C0E8UË

	)

62 
	#REG_SPI1_CR
 (*(
WoReg
*)0x4000C000UË

	)

63 
	#REG_SPI1_MR
 (*(
RwReg
*)0x4000C004UË

	)

64 
	#REG_SPI1_RDR
 (*(
RoReg
*)0x4000C008UË

	)

65 
	#REG_SPI1_TDR
 (*(
WoReg
*)0x4000C00CUË

	)

66 
	#REG_SPI1_SR
 (*(
RoReg
*)0x4000C010UË

	)

67 
	#REG_SPI1_IER
 (*(
WoReg
*)0x4000C014UË

	)

68 
	#REG_SPI1_IDR
 (*(
WoReg
*)0x4000C018UË

	)

69 
	#REG_SPI1_IMR
 (*(
RoReg
*)0x4000C01CUË

	)

70 
	#REG_SPI1_CSR
 (*(
RwReg
*)0x4000C030UË

	)

71 
	#REG_SPI1_WPMR
 (*(
RwReg
*)0x4000C0E4UË

	)

72 
	#REG_SPI1_WPSR
 (*(
RoReg
*)0x4000C0E8UË

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_ssc.h

45 #i‚de‡
_SAM3XA_SSC_INSTANCE_


46 
	#_SAM3XA_SSC_INSTANCE_


	)

49 #i‡(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

50 
	#REG_SSC_CR
 (0x40004000UË

	)

51 
	#REG_SSC_CMR
 (0x40004004UË

	)

52 
	#REG_SSC_RCMR
 (0x40004010UË

	)

53 
	#REG_SSC_RFMR
 (0x40004014UË

	)

54 
	#REG_SSC_TCMR
 (0x40004018UË

	)

55 
	#REG_SSC_TFMR
 (0x4000401CUË

	)

56 
	#REG_SSC_RHR
 (0x40004020UË

	)

57 
	#REG_SSC_THR
 (0x40004024UË

	)

58 
	#REG_SSC_RSHR
 (0x40004030UË

	)

59 
	#REG_SSC_TSHR
 (0x40004034UË

	)

60 
	#REG_SSC_RC0R
 (0x40004038UË

	)

61 
	#REG_SSC_RC1R
 (0x4000403CUË

	)

62 
	#REG_SSC_SR
 (0x40004040UË

	)

63 
	#REG_SSC_IER
 (0x40004044UË

	)

64 
	#REG_SSC_IDR
 (0x40004048UË

	)

65 
	#REG_SSC_IMR
 (0x4000404CUË

	)

66 
	#REG_SSC_WPMR
 (0x400040E4UË

	)

67 
	#REG_SSC_WPSR
 (0x400040E8UË

	)

69 
	#REG_SSC_CR
 (*(
WoReg
*)0x40004000UË

	)

70 
	#REG_SSC_CMR
 (*(
RwReg
*)0x40004004UË

	)

71 
	#REG_SSC_RCMR
 (*(
RwReg
*)0x40004010UË

	)

72 
	#REG_SSC_RFMR
 (*(
RwReg
*)0x40004014UË

	)

73 
	#REG_SSC_TCMR
 (*(
RwReg
*)0x40004018UË

	)

74 
	#REG_SSC_TFMR
 (*(
RwReg
*)0x4000401CUË

	)

75 
	#REG_SSC_RHR
 (*(
RoReg
*)0x40004020UË

	)

76 
	#REG_SSC_THR
 (*(
WoReg
*)0x40004024UË

	)

77 
	#REG_SSC_RSHR
 (*(
RoReg
*)0x40004030UË

	)

78 
	#REG_SSC_TSHR
 (*(
RwReg
*)0x40004034UË

	)

79 
	#REG_SSC_RC0R
 (*(
RwReg
*)0x40004038UË

	)

80 
	#REG_SSC_RC1R
 (*(
RwReg
*)0x4000403CUË

	)

81 
	#REG_SSC_SR
 (*(
RoReg
*)0x40004040UË

	)

82 
	#REG_SSC_IER
 (*(
WoReg
*)0x40004044UË

	)

83 
	#REG_SSC_IDR
 (*(
WoReg
*)0x40004048UË

	)

84 
	#REG_SSC_IMR
 (*(
RoReg
*)0x4000404CUË

	)

85 
	#REG_SSC_WPMR
 (*(
RwReg
*)0x400040E4UË

	)

86 
	#REG_SSC_WPSR
 (*(
RoReg
*)0x400040E8UË

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_supc.h

45 #i‚de‡
_SAM3XA_SUPC_INSTANCE_


46 
	#_SAM3XA_SUPC_INSTANCE_


	)

49 #i‡(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

50 
	#REG_SUPC_CR
 (0x400E1A10UË

	)

51 
	#REG_SUPC_SMMR
 (0x400E1A14UË

	)

52 
	#REG_SUPC_MR
 (0x400E1A18UË

	)

53 
	#REG_SUPC_WUMR
 (0x400E1A1CUË

	)

54 
	#REG_SUPC_WUIR
 (0x400E1A20UË

	)

55 
	#REG_SUPC_SR
 (0x400E1A24UË

	)

57 
	#REG_SUPC_CR
 (*(
WoReg
*)0x400E1A10UË

	)

58 
	#REG_SUPC_SMMR
 (*(
RwReg
*)0x400E1A14UË

	)

59 
	#REG_SUPC_MR
 (*(
RwReg
*)0x400E1A18UË

	)

60 
	#REG_SUPC_WUMR
 (*(
RwReg
*)0x400E1A1CUË

	)

61 
	#REG_SUPC_WUIR
 (*(
RwReg
*)0x400E1A20UË

	)

62 
	#REG_SUPC_SR
 (*(
RoReg
*)0x400E1A24UË

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_tc0.h

45 #i‚de‡
_SAM3XA_TC0_INSTANCE_


46 
	#_SAM3XA_TC0_INSTANCE_


	)

49 #i‡(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

50 
	#REG_TC0_CCR0
 (0x40080000UË

	)

51 
	#REG_TC0_CMR0
 (0x40080004UË

	)

52 
	#REG_TC0_SMMR0
 (0x40080008UË

	)

53 
	#REG_TC0_CV0
 (0x40080010UË

	)

54 
	#REG_TC0_RA0
 (0x40080014UË

	)

55 
	#REG_TC0_RB0
 (0x40080018UË

	)

56 
	#REG_TC0_RC0
 (0x4008001CUË

	)

57 
	#REG_TC0_SR0
 (0x40080020UË

	)

58 
	#REG_TC0_IER0
 (0x40080024UË

	)

59 
	#REG_TC0_IDR0
 (0x40080028UË

	)

60 
	#REG_TC0_IMR0
 (0x4008002CUË

	)

61 
	#REG_TC0_CCR1
 (0x40080040UË

	)

62 
	#REG_TC0_CMR1
 (0x40080044UË

	)

63 
	#REG_TC0_SMMR1
 (0x40080048UË

	)

64 
	#REG_TC0_CV1
 (0x40080050UË

	)

65 
	#REG_TC0_RA1
 (0x40080054UË

	)

66 
	#REG_TC0_RB1
 (0x40080058UË

	)

67 
	#REG_TC0_RC1
 (0x4008005CUË

	)

68 
	#REG_TC0_SR1
 (0x40080060UË

	)

69 
	#REG_TC0_IER1
 (0x40080064UË

	)

70 
	#REG_TC0_IDR1
 (0x40080068UË

	)

71 
	#REG_TC0_IMR1
 (0x4008006CUË

	)

72 
	#REG_TC0_CCR2
 (0x40080080UË

	)

73 
	#REG_TC0_CMR2
 (0x40080084UË

	)

74 
	#REG_TC0_SMMR2
 (0x40080088UË

	)

75 
	#REG_TC0_CV2
 (0x40080090UË

	)

76 
	#REG_TC0_RA2
 (0x40080094UË

	)

77 
	#REG_TC0_RB2
 (0x40080098UË

	)

78 
	#REG_TC0_RC2
 (0x4008009CUË

	)

79 
	#REG_TC0_SR2
 (0x400800A0UË

	)

80 
	#REG_TC0_IER2
 (0x400800A4UË

	)

81 
	#REG_TC0_IDR2
 (0x400800A8UË

	)

82 
	#REG_TC0_IMR2
 (0x400800ACUË

	)

83 
	#REG_TC0_BCR
 (0x400800C0UË

	)

84 
	#REG_TC0_BMR
 (0x400800C4UË

	)

85 
	#REG_TC0_QIER
 (0x400800C8UË

	)

86 
	#REG_TC0_QIDR
 (0x400800CCUË

	)

87 
	#REG_TC0_QIMR
 (0x400800D0UË

	)

88 
	#REG_TC0_QISR
 (0x400800D4UË

	)

89 
	#REG_TC0_FMR
 (0x400800D8UË

	)

90 
	#REG_TC0_WPMR
 (0x400800E4UË

	)

92 
	#REG_TC0_CCR0
 (*(
WoReg
*)0x40080000UË

	)

93 
	#REG_TC0_CMR0
 (*(
RwReg
*)0x40080004UË

	)

94 
	#REG_TC0_SMMR0
 (*(
RwReg
*)0x40080008UË

	)

95 
	#REG_TC0_CV0
 (*(
RoReg
*)0x40080010UË

	)

96 
	#REG_TC0_RA0
 (*(
RwReg
*)0x40080014UË

	)

97 
	#REG_TC0_RB0
 (*(
RwReg
*)0x40080018UË

	)

98 
	#REG_TC0_RC0
 (*(
RwReg
*)0x4008001CUË

	)

99 
	#REG_TC0_SR0
 (*(
RoReg
*)0x40080020UË

	)

100 
	#REG_TC0_IER0
 (*(
WoReg
*)0x40080024UË

	)

101 
	#REG_TC0_IDR0
 (*(
WoReg
*)0x40080028UË

	)

102 
	#REG_TC0_IMR0
 (*(
RoReg
*)0x4008002CUË

	)

103 
	#REG_TC0_CCR1
 (*(
WoReg
*)0x40080040UË

	)

104 
	#REG_TC0_CMR1
 (*(
RwReg
*)0x40080044UË

	)

105 
	#REG_TC0_SMMR1
 (*(
RwReg
*)0x40080048UË

	)

106 
	#REG_TC0_CV1
 (*(
RoReg
*)0x40080050UË

	)

107 
	#REG_TC0_RA1
 (*(
RwReg
*)0x40080054UË

	)

108 
	#REG_TC0_RB1
 (*(
RwReg
*)0x40080058UË

	)

109 
	#REG_TC0_RC1
 (*(
RwReg
*)0x4008005CUË

	)

110 
	#REG_TC0_SR1
 (*(
RoReg
*)0x40080060UË

	)

111 
	#REG_TC0_IER1
 (*(
WoReg
*)0x40080064UË

	)

112 
	#REG_TC0_IDR1
 (*(
WoReg
*)0x40080068UË

	)

113 
	#REG_TC0_IMR1
 (*(
RoReg
*)0x4008006CUË

	)

114 
	#REG_TC0_CCR2
 (*(
WoReg
*)0x40080080UË

	)

115 
	#REG_TC0_CMR2
 (*(
RwReg
*)0x40080084UË

	)

116 
	#REG_TC0_SMMR2
 (*(
RwReg
*)0x40080088UË

	)

117 
	#REG_TC0_CV2
 (*(
RoReg
*)0x40080090UË

	)

118 
	#REG_TC0_RA2
 (*(
RwReg
*)0x40080094UË

	)

119 
	#REG_TC0_RB2
 (*(
RwReg
*)0x40080098UË

	)

120 
	#REG_TC0_RC2
 (*(
RwReg
*)0x4008009CUË

	)

121 
	#REG_TC0_SR2
 (*(
RoReg
*)0x400800A0UË

	)

122 
	#REG_TC0_IER2
 (*(
WoReg
*)0x400800A4UË

	)

123 
	#REG_TC0_IDR2
 (*(
WoReg
*)0x400800A8UË

	)

124 
	#REG_TC0_IMR2
 (*(
RoReg
*)0x400800ACUË

	)

125 
	#REG_TC0_BCR
 (*(
WoReg
*)0x400800C0UË

	)

126 
	#REG_TC0_BMR
 (*(
RwReg
*)0x400800C4UË

	)

127 
	#REG_TC0_QIER
 (*(
WoReg
*)0x400800C8UË

	)

128 
	#REG_TC0_QIDR
 (*(
WoReg
*)0x400800CCUË

	)

129 
	#REG_TC0_QIMR
 (*(
RoReg
*)0x400800D0UË

	)

130 
	#REG_TC0_QISR
 (*(
RoReg
*)0x400800D4UË

	)

131 
	#REG_TC0_FMR
 (*(
RwReg
*)0x400800D8UË

	)

132 
	#REG_TC0_WPMR
 (*(
RwReg
*)0x400800E4UË

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_tc1.h

45 #i‚de‡
_SAM3XA_TC1_INSTANCE_


46 
	#_SAM3XA_TC1_INSTANCE_


	)

49 #i‡(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

50 
	#REG_TC1_CCR0
 (0x40084000UË

	)

51 
	#REG_TC1_CMR0
 (0x40084004UË

	)

52 
	#REG_TC1_SMMR0
 (0x40084008UË

	)

53 
	#REG_TC1_CV0
 (0x40084010UË

	)

54 
	#REG_TC1_RA0
 (0x40084014UË

	)

55 
	#REG_TC1_RB0
 (0x40084018UË

	)

56 
	#REG_TC1_RC0
 (0x4008401CUË

	)

57 
	#REG_TC1_SR0
 (0x40084020UË

	)

58 
	#REG_TC1_IER0
 (0x40084024UË

	)

59 
	#REG_TC1_IDR0
 (0x40084028UË

	)

60 
	#REG_TC1_IMR0
 (0x4008402CUË

	)

61 
	#REG_TC1_CCR1
 (0x40084040UË

	)

62 
	#REG_TC1_CMR1
 (0x40084044UË

	)

63 
	#REG_TC1_SMMR1
 (0x40084048UË

	)

64 
	#REG_TC1_CV1
 (0x40084050UË

	)

65 
	#REG_TC1_RA1
 (0x40084054UË

	)

66 
	#REG_TC1_RB1
 (0x40084058UË

	)

67 
	#REG_TC1_RC1
 (0x4008405CUË

	)

68 
	#REG_TC1_SR1
 (0x40084060UË

	)

69 
	#REG_TC1_IER1
 (0x40084064UË

	)

70 
	#REG_TC1_IDR1
 (0x40084068UË

	)

71 
	#REG_TC1_IMR1
 (0x4008406CUË

	)

72 
	#REG_TC1_CCR2
 (0x40084080UË

	)

73 
	#REG_TC1_CMR2
 (0x40084084UË

	)

74 
	#REG_TC1_SMMR2
 (0x40084088UË

	)

75 
	#REG_TC1_CV2
 (0x40084090UË

	)

76 
	#REG_TC1_RA2
 (0x40084094UË

	)

77 
	#REG_TC1_RB2
 (0x40084098UË

	)

78 
	#REG_TC1_RC2
 (0x4008409CUË

	)

79 
	#REG_TC1_SR2
 (0x400840A0UË

	)

80 
	#REG_TC1_IER2
 (0x400840A4UË

	)

81 
	#REG_TC1_IDR2
 (0x400840A8UË

	)

82 
	#REG_TC1_IMR2
 (0x400840ACUË

	)

83 
	#REG_TC1_BCR
 (0x400840C0UË

	)

84 
	#REG_TC1_BMR
 (0x400840C4UË

	)

85 
	#REG_TC1_QIER
 (0x400840C8UË

	)

86 
	#REG_TC1_QIDR
 (0x400840CCUË

	)

87 
	#REG_TC1_QIMR
 (0x400840D0UË

	)

88 
	#REG_TC1_QISR
 (0x400840D4UË

	)

89 
	#REG_TC1_FMR
 (0x400840D8UË

	)

90 
	#REG_TC1_WPMR
 (0x400840E4UË

	)

92 
	#REG_TC1_CCR0
 (*(
WoReg
*)0x40084000UË

	)

93 
	#REG_TC1_CMR0
 (*(
RwReg
*)0x40084004UË

	)

94 
	#REG_TC1_SMMR0
 (*(
RwReg
*)0x40084008UË

	)

95 
	#REG_TC1_CV0
 (*(
RoReg
*)0x40084010UË

	)

96 
	#REG_TC1_RA0
 (*(
RwReg
*)0x40084014UË

	)

97 
	#REG_TC1_RB0
 (*(
RwReg
*)0x40084018UË

	)

98 
	#REG_TC1_RC0
 (*(
RwReg
*)0x4008401CUË

	)

99 
	#REG_TC1_SR0
 (*(
RoReg
*)0x40084020UË

	)

100 
	#REG_TC1_IER0
 (*(
WoReg
*)0x40084024UË

	)

101 
	#REG_TC1_IDR0
 (*(
WoReg
*)0x40084028UË

	)

102 
	#REG_TC1_IMR0
 (*(
RoReg
*)0x4008402CUË

	)

103 
	#REG_TC1_CCR1
 (*(
WoReg
*)0x40084040UË

	)

104 
	#REG_TC1_CMR1
 (*(
RwReg
*)0x40084044UË

	)

105 
	#REG_TC1_SMMR1
 (*(
RwReg
*)0x40084048UË

	)

106 
	#REG_TC1_CV1
 (*(
RoReg
*)0x40084050UË

	)

107 
	#REG_TC1_RA1
 (*(
RwReg
*)0x40084054UË

	)

108 
	#REG_TC1_RB1
 (*(
RwReg
*)0x40084058UË

	)

109 
	#REG_TC1_RC1
 (*(
RwReg
*)0x4008405CUË

	)

110 
	#REG_TC1_SR1
 (*(
RoReg
*)0x40084060UË

	)

111 
	#REG_TC1_IER1
 (*(
WoReg
*)0x40084064UË

	)

112 
	#REG_TC1_IDR1
 (*(
WoReg
*)0x40084068UË

	)

113 
	#REG_TC1_IMR1
 (*(
RoReg
*)0x4008406CUË

	)

114 
	#REG_TC1_CCR2
 (*(
WoReg
*)0x40084080UË

	)

115 
	#REG_TC1_CMR2
 (*(
RwReg
*)0x40084084UË

	)

116 
	#REG_TC1_SMMR2
 (*(
RwReg
*)0x40084088UË

	)

117 
	#REG_TC1_CV2
 (*(
RoReg
*)0x40084090UË

	)

118 
	#REG_TC1_RA2
 (*(
RwReg
*)0x40084094UË

	)

119 
	#REG_TC1_RB2
 (*(
RwReg
*)0x40084098UË

	)

120 
	#REG_TC1_RC2
 (*(
RwReg
*)0x4008409CUË

	)

121 
	#REG_TC1_SR2
 (*(
RoReg
*)0x400840A0UË

	)

122 
	#REG_TC1_IER2
 (*(
WoReg
*)0x400840A4UË

	)

123 
	#REG_TC1_IDR2
 (*(
WoReg
*)0x400840A8UË

	)

124 
	#REG_TC1_IMR2
 (*(
RoReg
*)0x400840ACUË

	)

125 
	#REG_TC1_BCR
 (*(
WoReg
*)0x400840C0UË

	)

126 
	#REG_TC1_BMR
 (*(
RwReg
*)0x400840C4UË

	)

127 
	#REG_TC1_QIER
 (*(
WoReg
*)0x400840C8UË

	)

128 
	#REG_TC1_QIDR
 (*(
WoReg
*)0x400840CCUË

	)

129 
	#REG_TC1_QIMR
 (*(
RoReg
*)0x400840D0UË

	)

130 
	#REG_TC1_QISR
 (*(
RoReg
*)0x400840D4UË

	)

131 
	#REG_TC1_FMR
 (*(
RwReg
*)0x400840D8UË

	)

132 
	#REG_TC1_WPMR
 (*(
RwReg
*)0x400840E4UË

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_tc2.h

45 #i‚de‡
_SAM3XA_TC2_INSTANCE_


46 
	#_SAM3XA_TC2_INSTANCE_


	)

49 #i‡(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

50 
	#REG_TC2_CCR0
 (0x40088000UË

	)

51 
	#REG_TC2_CMR0
 (0x40088004UË

	)

52 
	#REG_TC2_SMMR0
 (0x40088008UË

	)

53 
	#REG_TC2_CV0
 (0x40088010UË

	)

54 
	#REG_TC2_RA0
 (0x40088014UË

	)

55 
	#REG_TC2_RB0
 (0x40088018UË

	)

56 
	#REG_TC2_RC0
 (0x4008801CUË

	)

57 
	#REG_TC2_SR0
 (0x40088020UË

	)

58 
	#REG_TC2_IER0
 (0x40088024UË

	)

59 
	#REG_TC2_IDR0
 (0x40088028UË

	)

60 
	#REG_TC2_IMR0
 (0x4008802CUË

	)

61 
	#REG_TC2_CCR1
 (0x40088040UË

	)

62 
	#REG_TC2_CMR1
 (0x40088044UË

	)

63 
	#REG_TC2_SMMR1
 (0x40088048UË

	)

64 
	#REG_TC2_CV1
 (0x40088050UË

	)

65 
	#REG_TC2_RA1
 (0x40088054UË

	)

66 
	#REG_TC2_RB1
 (0x40088058UË

	)

67 
	#REG_TC2_RC1
 (0x4008805CUË

	)

68 
	#REG_TC2_SR1
 (0x40088060UË

	)

69 
	#REG_TC2_IER1
 (0x40088064UË

	)

70 
	#REG_TC2_IDR1
 (0x40088068UË

	)

71 
	#REG_TC2_IMR1
 (0x4008806CUË

	)

72 
	#REG_TC2_CCR2
 (0x40088080UË

	)

73 
	#REG_TC2_CMR2
 (0x40088084UË

	)

74 
	#REG_TC2_SMMR2
 (0x40088088UË

	)

75 
	#REG_TC2_CV2
 (0x40088090UË

	)

76 
	#REG_TC2_RA2
 (0x40088094UË

	)

77 
	#REG_TC2_RB2
 (0x40088098UË

	)

78 
	#REG_TC2_RC2
 (0x4008809CUË

	)

79 
	#REG_TC2_SR2
 (0x400880A0UË

	)

80 
	#REG_TC2_IER2
 (0x400880A4UË

	)

81 
	#REG_TC2_IDR2
 (0x400880A8UË

	)

82 
	#REG_TC2_IMR2
 (0x400880ACUË

	)

83 
	#REG_TC2_BCR
 (0x400880C0UË

	)

84 
	#REG_TC2_BMR
 (0x400880C4UË

	)

85 
	#REG_TC2_QIER
 (0x400880C8UË

	)

86 
	#REG_TC2_QIDR
 (0x400880CCUË

	)

87 
	#REG_TC2_QIMR
 (0x400880D0UË

	)

88 
	#REG_TC2_QISR
 (0x400880D4UË

	)

89 
	#REG_TC2_FMR
 (0x400880D8UË

	)

90 
	#REG_TC2_WPMR
 (0x400880E4UË

	)

92 
	#REG_TC2_CCR0
 (*(
WoReg
*)0x40088000UË

	)

93 
	#REG_TC2_CMR0
 (*(
RwReg
*)0x40088004UË

	)

94 
	#REG_TC2_SMMR0
 (*(
RwReg
*)0x40088008UË

	)

95 
	#REG_TC2_CV0
 (*(
RoReg
*)0x40088010UË

	)

96 
	#REG_TC2_RA0
 (*(
RwReg
*)0x40088014UË

	)

97 
	#REG_TC2_RB0
 (*(
RwReg
*)0x40088018UË

	)

98 
	#REG_TC2_RC0
 (*(
RwReg
*)0x4008801CUË

	)

99 
	#REG_TC2_SR0
 (*(
RoReg
*)0x40088020UË

	)

100 
	#REG_TC2_IER0
 (*(
WoReg
*)0x40088024UË

	)

101 
	#REG_TC2_IDR0
 (*(
WoReg
*)0x40088028UË

	)

102 
	#REG_TC2_IMR0
 (*(
RoReg
*)0x4008802CUË

	)

103 
	#REG_TC2_CCR1
 (*(
WoReg
*)0x40088040UË

	)

104 
	#REG_TC2_CMR1
 (*(
RwReg
*)0x40088044UË

	)

105 
	#REG_TC2_SMMR1
 (*(
RwReg
*)0x40088048UË

	)

106 
	#REG_TC2_CV1
 (*(
RoReg
*)0x40088050UË

	)

107 
	#REG_TC2_RA1
 (*(
RwReg
*)0x40088054UË

	)

108 
	#REG_TC2_RB1
 (*(
RwReg
*)0x40088058UË

	)

109 
	#REG_TC2_RC1
 (*(
RwReg
*)0x4008805CUË

	)

110 
	#REG_TC2_SR1
 (*(
RoReg
*)0x40088060UË

	)

111 
	#REG_TC2_IER1
 (*(
WoReg
*)0x40088064UË

	)

112 
	#REG_TC2_IDR1
 (*(
WoReg
*)0x40088068UË

	)

113 
	#REG_TC2_IMR1
 (*(
RoReg
*)0x4008806CUË

	)

114 
	#REG_TC2_CCR2
 (*(
WoReg
*)0x40088080UË

	)

115 
	#REG_TC2_CMR2
 (*(
RwReg
*)0x40088084UË

	)

116 
	#REG_TC2_SMMR2
 (*(
RwReg
*)0x40088088UË

	)

117 
	#REG_TC2_CV2
 (*(
RoReg
*)0x40088090UË

	)

118 
	#REG_TC2_RA2
 (*(
RwReg
*)0x40088094UË

	)

119 
	#REG_TC2_RB2
 (*(
RwReg
*)0x40088098UË

	)

120 
	#REG_TC2_RC2
 (*(
RwReg
*)0x4008809CUË

	)

121 
	#REG_TC2_SR2
 (*(
RoReg
*)0x400880A0UË

	)

122 
	#REG_TC2_IER2
 (*(
WoReg
*)0x400880A4UË

	)

123 
	#REG_TC2_IDR2
 (*(
WoReg
*)0x400880A8UË

	)

124 
	#REG_TC2_IMR2
 (*(
RoReg
*)0x400880ACUË

	)

125 
	#REG_TC2_BCR
 (*(
WoReg
*)0x400880C0UË

	)

126 
	#REG_TC2_BMR
 (*(
RwReg
*)0x400880C4UË

	)

127 
	#REG_TC2_QIER
 (*(
WoReg
*)0x400880C8UË

	)

128 
	#REG_TC2_QIDR
 (*(
WoReg
*)0x400880CCUË

	)

129 
	#REG_TC2_QIMR
 (*(
RoReg
*)0x400880D0UË

	)

130 
	#REG_TC2_QISR
 (*(
RoReg
*)0x400880D4UË

	)

131 
	#REG_TC2_FMR
 (*(
RwReg
*)0x400880D8UË

	)

132 
	#REG_TC2_WPMR
 (*(
RwReg
*)0x400880E4UË

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_trng.h

45 #i‚de‡
_SAM3XA_TRNG_INSTANCE_


46 
	#_SAM3XA_TRNG_INSTANCE_


	)

49 #i‡(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

50 
	#REG_TRNG_CR
 (0x400BC000UË

	)

51 
	#REG_TRNG_IER
 (0x400BC010UË

	)

52 
	#REG_TRNG_IDR
 (0x400BC014UË

	)

53 
	#REG_TRNG_IMR
 (0x400BC018UË

	)

54 
	#REG_TRNG_ISR
 (0x400BC01CUË

	)

55 
	#REG_TRNG_ODATA
 (0x400BC050UË

	)

57 
	#REG_TRNG_CR
 (*(
WoReg
*)0x400BC000UË

	)

58 
	#REG_TRNG_IER
 (*(
WoReg
*)0x400BC010UË

	)

59 
	#REG_TRNG_IDR
 (*(
WoReg
*)0x400BC014UË

	)

60 
	#REG_TRNG_IMR
 (*(
RoReg
*)0x400BC018UË

	)

61 
	#REG_TRNG_ISR
 (*(
RoReg
*)0x400BC01CUË

	)

62 
	#REG_TRNG_ODATA
 (*(
RoReg
*)0x400BC050UË

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_twi0.h

45 #i‚de‡
_SAM3XA_TWI0_INSTANCE_


46 
	#_SAM3XA_TWI0_INSTANCE_


	)

49 #i‡(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

50 
	#REG_TWI0_CR
 (0x4008C000UË

	)

51 
	#REG_TWI0_MMR
 (0x4008C004UË

	)

52 
	#REG_TWI0_SMR
 (0x4008C008UË

	)

53 
	#REG_TWI0_IADR
 (0x4008C00CUË

	)

54 
	#REG_TWI0_CWGR
 (0x4008C010UË

	)

55 
	#REG_TWI0_SR
 (0x4008C020UË

	)

56 
	#REG_TWI0_IER
 (0x4008C024UË

	)

57 
	#REG_TWI0_IDR
 (0x4008C028UË

	)

58 
	#REG_TWI0_IMR
 (0x4008C02CUË

	)

59 
	#REG_TWI0_RHR
 (0x4008C030UË

	)

60 
	#REG_TWI0_THR
 (0x4008C034UË

	)

61 
	#REG_TWI0_RPR
 (0x4008C100UË

	)

62 
	#REG_TWI0_RCR
 (0x4008C104UË

	)

63 
	#REG_TWI0_TPR
 (0x4008C108UË

	)

64 
	#REG_TWI0_TCR
 (0x4008C10CUË

	)

65 
	#REG_TWI0_RNPR
 (0x4008C110UË

	)

66 
	#REG_TWI0_RNCR
 (0x4008C114UË

	)

67 
	#REG_TWI0_TNPR
 (0x4008C118UË

	)

68 
	#REG_TWI0_TNCR
 (0x4008C11CUË

	)

69 
	#REG_TWI0_PTCR
 (0x4008C120UË

	)

70 
	#REG_TWI0_PTSR
 (0x4008C124UË

	)

72 
	#REG_TWI0_CR
 (*(
WoReg
*)0x4008C000UË

	)

73 
	#REG_TWI0_MMR
 (*(
RwReg
*)0x4008C004UË

	)

74 
	#REG_TWI0_SMR
 (*(
RwReg
*)0x4008C008UË

	)

75 
	#REG_TWI0_IADR
 (*(
RwReg
*)0x4008C00CUË

	)

76 
	#REG_TWI0_CWGR
 (*(
RwReg
*)0x4008C010UË

	)

77 
	#REG_TWI0_SR
 (*(
RoReg
*)0x4008C020UË

	)

78 
	#REG_TWI0_IER
 (*(
WoReg
*)0x4008C024UË

	)

79 
	#REG_TWI0_IDR
 (*(
WoReg
*)0x4008C028UË

	)

80 
	#REG_TWI0_IMR
 (*(
RoReg
*)0x4008C02CUË

	)

81 
	#REG_TWI0_RHR
 (*(
RoReg
*)0x4008C030UË

	)

82 
	#REG_TWI0_THR
 (*(
WoReg
*)0x4008C034UË

	)

83 
	#REG_TWI0_RPR
 (*(
RwReg
*)0x4008C100UË

	)

84 
	#REG_TWI0_RCR
 (*(
RwReg
*)0x4008C104UË

	)

85 
	#REG_TWI0_TPR
 (*(
RwReg
*)0x4008C108UË

	)

86 
	#REG_TWI0_TCR
 (*(
RwReg
*)0x4008C10CUË

	)

87 
	#REG_TWI0_RNPR
 (*(
RwReg
*)0x4008C110UË

	)

88 
	#REG_TWI0_RNCR
 (*(
RwReg
*)0x4008C114UË

	)

89 
	#REG_TWI0_TNPR
 (*(
RwReg
*)0x4008C118UË

	)

90 
	#REG_TWI0_TNCR
 (*(
RwReg
*)0x4008C11CUË

	)

91 
	#REG_TWI0_PTCR
 (*(
WoReg
*)0x4008C120UË

	)

92 
	#REG_TWI0_PTSR
 (*(
RoReg
*)0x4008C124UË

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_twi1.h

45 #i‚de‡
_SAM3XA_TWI1_INSTANCE_


46 
	#_SAM3XA_TWI1_INSTANCE_


	)

49 #i‡(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

50 
	#REG_TWI1_CR
 (0x40090000UË

	)

51 
	#REG_TWI1_MMR
 (0x40090004UË

	)

52 
	#REG_TWI1_SMR
 (0x40090008UË

	)

53 
	#REG_TWI1_IADR
 (0x4009000CUË

	)

54 
	#REG_TWI1_CWGR
 (0x40090010UË

	)

55 
	#REG_TWI1_SR
 (0x40090020UË

	)

56 
	#REG_TWI1_IER
 (0x40090024UË

	)

57 
	#REG_TWI1_IDR
 (0x40090028UË

	)

58 
	#REG_TWI1_IMR
 (0x4009002CUË

	)

59 
	#REG_TWI1_RHR
 (0x40090030UË

	)

60 
	#REG_TWI1_THR
 (0x40090034UË

	)

61 
	#REG_TWI1_RPR
 (0x40090100UË

	)

62 
	#REG_TWI1_RCR
 (0x40090104UË

	)

63 
	#REG_TWI1_TPR
 (0x40090108UË

	)

64 
	#REG_TWI1_TCR
 (0x4009010CUË

	)

65 
	#REG_TWI1_RNPR
 (0x40090110UË

	)

66 
	#REG_TWI1_RNCR
 (0x40090114UË

	)

67 
	#REG_TWI1_TNPR
 (0x40090118UË

	)

68 
	#REG_TWI1_TNCR
 (0x4009011CUË

	)

69 
	#REG_TWI1_PTCR
 (0x40090120UË

	)

70 
	#REG_TWI1_PTSR
 (0x40090124UË

	)

72 
	#REG_TWI1_CR
 (*(
WoReg
*)0x40090000UË

	)

73 
	#REG_TWI1_MMR
 (*(
RwReg
*)0x40090004UË

	)

74 
	#REG_TWI1_SMR
 (*(
RwReg
*)0x40090008UË

	)

75 
	#REG_TWI1_IADR
 (*(
RwReg
*)0x4009000CUË

	)

76 
	#REG_TWI1_CWGR
 (*(
RwReg
*)0x40090010UË

	)

77 
	#REG_TWI1_SR
 (*(
RoReg
*)0x40090020UË

	)

78 
	#REG_TWI1_IER
 (*(
WoReg
*)0x40090024UË

	)

79 
	#REG_TWI1_IDR
 (*(
WoReg
*)0x40090028UË

	)

80 
	#REG_TWI1_IMR
 (*(
RoReg
*)0x4009002CUË

	)

81 
	#REG_TWI1_RHR
 (*(
RoReg
*)0x40090030UË

	)

82 
	#REG_TWI1_THR
 (*(
WoReg
*)0x40090034UË

	)

83 
	#REG_TWI1_RPR
 (*(
RwReg
*)0x40090100UË

	)

84 
	#REG_TWI1_RCR
 (*(
RwReg
*)0x40090104UË

	)

85 
	#REG_TWI1_TPR
 (*(
RwReg
*)0x40090108UË

	)

86 
	#REG_TWI1_TCR
 (*(
RwReg
*)0x4009010CUË

	)

87 
	#REG_TWI1_RNPR
 (*(
RwReg
*)0x40090110UË

	)

88 
	#REG_TWI1_RNCR
 (*(
RwReg
*)0x40090114UË

	)

89 
	#REG_TWI1_TNPR
 (*(
RwReg
*)0x40090118UË

	)

90 
	#REG_TWI1_TNCR
 (*(
RwReg
*)0x4009011CUË

	)

91 
	#REG_TWI1_PTCR
 (*(
WoReg
*)0x40090120UË

	)

92 
	#REG_TWI1_PTSR
 (*(
RoReg
*)0x40090124UË

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_uart.h

45 #i‚de‡
_SAM3XA_UART_INSTANCE_


46 
	#_SAM3XA_UART_INSTANCE_


	)

49 #i‡(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

50 
	#REG_UART_CR
 (0x400E0800UË

	)

51 
	#REG_UART_MR
 (0x400E0804UË

	)

52 
	#REG_UART_IER
 (0x400E0808UË

	)

53 
	#REG_UART_IDR
 (0x400E080CUË

	)

54 
	#REG_UART_IMR
 (0x400E0810UË

	)

55 
	#REG_UART_SR
 (0x400E0814UË

	)

56 
	#REG_UART_RHR
 (0x400E0818UË

	)

57 
	#REG_UART_THR
 (0x400E081CUË

	)

58 
	#REG_UART_BRGR
 (0x400E0820UË

	)

59 
	#REG_UART_RPR
 (0x400E0900UË

	)

60 
	#REG_UART_RCR
 (0x400E0904UË

	)

61 
	#REG_UART_TPR
 (0x400E0908UË

	)

62 
	#REG_UART_TCR
 (0x400E090CUË

	)

63 
	#REG_UART_RNPR
 (0x400E0910UË

	)

64 
	#REG_UART_RNCR
 (0x400E0914UË

	)

65 
	#REG_UART_TNPR
 (0x400E0918UË

	)

66 
	#REG_UART_TNCR
 (0x400E091CUË

	)

67 
	#REG_UART_PTCR
 (0x400E0920UË

	)

68 
	#REG_UART_PTSR
 (0x400E0924UË

	)

70 
	#REG_UART_CR
 (*(
WoReg
*)0x400E0800UË

	)

71 
	#REG_UART_MR
 (*(
RwReg
*)0x400E0804UË

	)

72 
	#REG_UART_IER
 (*(
WoReg
*)0x400E0808UË

	)

73 
	#REG_UART_IDR
 (*(
WoReg
*)0x400E080CUË

	)

74 
	#REG_UART_IMR
 (*(
RoReg
*)0x400E0810UË

	)

75 
	#REG_UART_SR
 (*(
RoReg
*)0x400E0814UË

	)

76 
	#REG_UART_RHR
 (*(
RoReg
*)0x400E0818UË

	)

77 
	#REG_UART_THR
 (*(
WoReg
*)0x400E081CUË

	)

78 
	#REG_UART_BRGR
 (*(
RwReg
*)0x400E0820UË

	)

79 
	#REG_UART_RPR
 (*(
RwReg
*)0x400E0900UË

	)

80 
	#REG_UART_RCR
 (*(
RwReg
*)0x400E0904UË

	)

81 
	#REG_UART_TPR
 (*(
RwReg
*)0x400E0908UË

	)

82 
	#REG_UART_TCR
 (*(
RwReg
*)0x400E090CUË

	)

83 
	#REG_UART_RNPR
 (*(
RwReg
*)0x400E0910UË

	)

84 
	#REG_UART_RNCR
 (*(
RwReg
*)0x400E0914UË

	)

85 
	#REG_UART_TNPR
 (*(
RwReg
*)0x400E0918UË

	)

86 
	#REG_UART_TNCR
 (*(
RwReg
*)0x400E091CUË

	)

87 
	#REG_UART_PTCR
 (*(
WoReg
*)0x400E0920UË

	)

88 
	#REG_UART_PTSR
 (*(
RoReg
*)0x400E0924UË

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_uotghs.h

45 #i‚de‡
_SAM3XA_UOTGHS_INSTANCE_


46 
	#_SAM3XA_UOTGHS_INSTANCE_


	)

49 #i‡(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

50 
	#REG_UOTGHS_DEVCTRL
 (0x400AC000UË

	)

51 
	#REG_UOTGHS_DEVISR
 (0x400AC004UË

	)

52 
	#REG_UOTGHS_DEVICR
 (0x400AC008UË

	)

53 
	#REG_UOTGHS_DEVIFR
 (0x400AC00CUË

	)

54 
	#REG_UOTGHS_DEVIMR
 (0x400AC010UË

	)

55 
	#REG_UOTGHS_DEVIDR
 (0x400AC014UË

	)

56 
	#REG_UOTGHS_DEVIER
 (0x400AC018UË

	)

57 
	#REG_UOTGHS_DEVEPT
 (0x400AC01CUË

	)

58 
	#REG_UOTGHS_DEVFNUM
 (0x400AC020UË

	)

59 
	#REG_UOTGHS_DEVEPTCFG
 (0x400AC100UË

	)

60 
	#REG_UOTGHS_DEVEPTISR
 (0x400AC130UË

	)

61 
	#REG_UOTGHS_DEVEPTICR
 (0x400AC160UË

	)

62 
	#REG_UOTGHS_DEVEPTIFR
 (0x400AC190UË

	)

63 
	#REG_UOTGHS_DEVEPTIMR
 (0x400AC1C0UË

	)

64 
	#REG_UOTGHS_DEVEPTIER
 (0x400AC1F0UË

	)

65 
	#REG_UOTGHS_DEVEPTIDR
 (0x400AC220UË

	)

66 
	#REG_UOTGHS_DEVDMANXTDSC1
 (0x400AC310UË

	)

67 
	#REG_UOTGHS_DEVDMAADDRESS1
 (0x400AC314UË

	)

68 
	#REG_UOTGHS_DEVDMACONTROL1
 (0x400AC318UË

	)

69 
	#REG_UOTGHS_DEVDMASTATUS1
 (0x400AC31CUË

	)

70 
	#REG_UOTGHS_DEVDMANXTDSC2
 (0x400AC320UË

	)

71 
	#REG_UOTGHS_DEVDMAADDRESS2
 (0x400AC324UË

	)

72 
	#REG_UOTGHS_DEVDMACONTROL2
 (0x400AC328UË

	)

73 
	#REG_UOTGHS_DEVDMASTATUS2
 (0x400AC32CUË

	)

74 
	#REG_UOTGHS_DEVDMANXTDSC3
 (0x400AC330UË

	)

75 
	#REG_UOTGHS_DEVDMAADDRESS3
 (0x400AC334UË

	)

76 
	#REG_UOTGHS_DEVDMACONTROL3
 (0x400AC338UË

	)

77 
	#REG_UOTGHS_DEVDMASTATUS3
 (0x400AC33CUË

	)

78 
	#REG_UOTGHS_DEVDMANXTDSC4
 (0x400AC340UË

	)

79 
	#REG_UOTGHS_DEVDMAADDRESS4
 (0x400AC344UË

	)

80 
	#REG_UOTGHS_DEVDMACONTROL4
 (0x400AC348UË

	)

81 
	#REG_UOTGHS_DEVDMASTATUS4
 (0x400AC34CUË

	)

82 
	#REG_UOTGHS_DEVDMANXTDSC5
 (0x400AC350UË

	)

83 
	#REG_UOTGHS_DEVDMAADDRESS5
 (0x400AC354UË

	)

84 
	#REG_UOTGHS_DEVDMACONTROL5
 (0x400AC358UË

	)

85 
	#REG_UOTGHS_DEVDMASTATUS5
 (0x400AC35CUË

	)

86 
	#REG_UOTGHS_DEVDMANXTDSC6
 (0x400AC360UË

	)

87 
	#REG_UOTGHS_DEVDMAADDRESS6
 (0x400AC364UË

	)

88 
	#REG_UOTGHS_DEVDMACONTROL6
 (0x400AC368UË

	)

89 
	#REG_UOTGHS_DEVDMASTATUS6
 (0x400AC36CUË

	)

90 
	#REG_UOTGHS_DEVDMANXTDSC7
 (0x400AC370UË

	)

91 
	#REG_UOTGHS_DEVDMAADDRESS7
 (0x400AC374UË

	)

92 
	#REG_UOTGHS_DEVDMACONTROL7
 (0x400AC378UË

	)

93 
	#REG_UOTGHS_DEVDMASTATUS7
 (0x400AC37CUË

	)

94 
	#REG_UOTGHS_HSTCTRL
 (0x400AC400UË

	)

95 
	#REG_UOTGHS_HSTISR
 (0x400AC404UË

	)

96 
	#REG_UOTGHS_HSTICR
 (0x400AC408UË

	)

97 
	#REG_UOTGHS_HSTIFR
 (0x400AC40CUË

	)

98 
	#REG_UOTGHS_HSTIMR
 (0x400AC410UË

	)

99 
	#REG_UOTGHS_HSTIDR
 (0x400AC414UË

	)

100 
	#REG_UOTGHS_HSTIER
 (0x400AC418UË

	)

101 
	#REG_UOTGHS_HSTPIP
 (0x400AC41CUË

	)

102 
	#REG_UOTGHS_HSTFNUM
 (0x400AC420UË

	)

103 
	#REG_UOTGHS_HSTADDR1
 (0x400AC424UË

	)

104 
	#REG_UOTGHS_HSTADDR2
 (0x400AC428UË

	)

105 
	#REG_UOTGHS_HSTADDR3
 (0x400AC42CUË

	)

106 
	#REG_UOTGHS_HSTPIPCFG
 (0x400AC500UË

	)

107 
	#REG_UOTGHS_HSTPIPISR
 (0x400AC530UË

	)

108 
	#REG_UOTGHS_HSTPIPICR
 (0x400AC560UË

	)

109 
	#REG_UOTGHS_HSTPIPIFR
 (0x400AC590UË

	)

110 
	#REG_UOTGHS_HSTPIPIMR
 (0x400AC5C0UË

	)

111 
	#REG_UOTGHS_HSTPIPIER
 (0x400AC5F0UË

	)

112 
	#REG_UOTGHS_HSTPIPIDR
 (0x400AC620UË

	)

113 
	#REG_UOTGHS_HSTPIPINRQ
 (0x400AC650UË

	)

114 
	#REG_UOTGHS_HSTPIPERR
 (0x400AC680UË

	)

115 
	#REG_UOTGHS_HSTDMANXTDSC1
 (0x400AC710UË

	)

116 
	#REG_UOTGHS_HSTDMAADDRESS1
 (0x400AC714UË

	)

117 
	#REG_UOTGHS_HSTDMACONTROL1
 (0x400AC718UË

	)

118 
	#REG_UOTGHS_HSTDMASTATUS1
 (0x400AC71CUË

	)

119 
	#REG_UOTGHS_HSTDMANXTDSC2
 (0x400AC720UË

	)

120 
	#REG_UOTGHS_HSTDMAADDRESS2
 (0x400AC724UË

	)

121 
	#REG_UOTGHS_HSTDMACONTROL2
 (0x400AC728UË

	)

122 
	#REG_UOTGHS_HSTDMASTATUS2
 (0x400AC72CUË

	)

123 
	#REG_UOTGHS_HSTDMANXTDSC3
 (0x400AC730UË

	)

124 
	#REG_UOTGHS_HSTDMAADDRESS3
 (0x400AC734UË

	)

125 
	#REG_UOTGHS_HSTDMACONTROL3
 (0x400AC738UË

	)

126 
	#REG_UOTGHS_HSTDMASTATUS3
 (0x400AC73CUË

	)

127 
	#REG_UOTGHS_HSTDMANXTDSC4
 (0x400AC740UË

	)

128 
	#REG_UOTGHS_HSTDMAADDRESS4
 (0x400AC744UË

	)

129 
	#REG_UOTGHS_HSTDMACONTROL4
 (0x400AC748UË

	)

130 
	#REG_UOTGHS_HSTDMASTATUS4
 (0x400AC74CUË

	)

131 
	#REG_UOTGHS_HSTDMANXTDSC5
 (0x400AC750UË

	)

132 
	#REG_UOTGHS_HSTDMAADDRESS5
 (0x400AC754UË

	)

133 
	#REG_UOTGHS_HSTDMACONTROL5
 (0x400AC758UË

	)

134 
	#REG_UOTGHS_HSTDMASTATUS5
 (0x400AC75CUË

	)

135 
	#REG_UOTGHS_HSTDMANXTDSC6
 (0x400AC760UË

	)

136 
	#REG_UOTGHS_HSTDMAADDRESS6
 (0x400AC764UË

	)

137 
	#REG_UOTGHS_HSTDMACONTROL6
 (0x400AC768UË

	)

138 
	#REG_UOTGHS_HSTDMASTATUS6
 (0x400AC76CUË

	)

139 
	#REG_UOTGHS_HSTDMANXTDSC7
 (0x400AC770UË

	)

140 
	#REG_UOTGHS_HSTDMAADDRESS7
 (0x400AC774UË

	)

141 
	#REG_UOTGHS_HSTDMACONTROL7
 (0x400AC778UË

	)

142 
	#REG_UOTGHS_HSTDMASTATUS7
 (0x400AC77CUË

	)

143 
	#REG_UOTGHS_CTRL
 (0x400AC800UË

	)

144 
	#REG_UOTGHS_SR
 (0x400AC804UË

	)

145 
	#REG_UOTGHS_SCR
 (0x400AC808UË

	)

146 
	#REG_UOTGHS_SFR
 (0x400AC80CUË

	)

147 
	#REG_UOTGHS_FSM
 (0x400AC82CUË

	)

149 
	#REG_UOTGHS_DEVCTRL
 (*(
RwReg
*)0x400AC000UË

	)

150 
	#REG_UOTGHS_DEVISR
 (*(
RoReg
*)0x400AC004UË

	)

151 
	#REG_UOTGHS_DEVICR
 (*(
WoReg
*)0x400AC008UË

	)

152 
	#REG_UOTGHS_DEVIFR
 (*(
WoReg
*)0x400AC00CUË

	)

153 
	#REG_UOTGHS_DEVIMR
 (*(
RoReg
*)0x400AC010UË

	)

154 
	#REG_UOTGHS_DEVIDR
 (*(
WoReg
*)0x400AC014UË

	)

155 
	#REG_UOTGHS_DEVIER
 (*(
WoReg
*)0x400AC018UË

	)

156 
	#REG_UOTGHS_DEVEPT
 (*(
RwReg
*)0x400AC01CUË

	)

157 
	#REG_UOTGHS_DEVFNUM
 (*(
RoReg
*)0x400AC020UË

	)

158 
	#REG_UOTGHS_DEVEPTCFG
 (*(
RwReg
*)0x400AC100UË

	)

159 
	#REG_UOTGHS_DEVEPTISR
 (*(
RoReg
*)0x400AC130UË

	)

160 
	#REG_UOTGHS_DEVEPTICR
 (*(
WoReg
*)0x400AC160UË

	)

161 
	#REG_UOTGHS_DEVEPTIFR
 (*(
WoReg
*)0x400AC190UË

	)

162 
	#REG_UOTGHS_DEVEPTIMR
 (*(
RoReg
*)0x400AC1C0UË

	)

163 
	#REG_UOTGHS_DEVEPTIER
 (*(
WoReg
*)0x400AC1F0UË

	)

164 
	#REG_UOTGHS_DEVEPTIDR
 (*(
WoReg
*)0x400AC220UË

	)

165 
	#REG_UOTGHS_DEVDMANXTDSC1
 (*(
RwReg
*)0x400AC310UË

	)

166 
	#REG_UOTGHS_DEVDMAADDRESS1
 (*(
RwReg
*)0x400AC314UË

	)

167 
	#REG_UOTGHS_DEVDMACONTROL1
 (*(
RwReg
*)0x400AC318UË

	)

168 
	#REG_UOTGHS_DEVDMASTATUS1
 (*(
RwReg
*)0x400AC31CUË

	)

169 
	#REG_UOTGHS_DEVDMANXTDSC2
 (*(
RwReg
*)0x400AC320UË

	)

170 
	#REG_UOTGHS_DEVDMAADDRESS2
 (*(
RwReg
*)0x400AC324UË

	)

171 
	#REG_UOTGHS_DEVDMACONTROL2
 (*(
RwReg
*)0x400AC328UË

	)

172 
	#REG_UOTGHS_DEVDMASTATUS2
 (*(
RwReg
*)0x400AC32CUË

	)

173 
	#REG_UOTGHS_DEVDMANXTDSC3
 (*(
RwReg
*)0x400AC330UË

	)

174 
	#REG_UOTGHS_DEVDMAADDRESS3
 (*(
RwReg
*)0x400AC334UË

	)

175 
	#REG_UOTGHS_DEVDMACONTROL3
 (*(
RwReg
*)0x400AC338UË

	)

176 
	#REG_UOTGHS_DEVDMASTATUS3
 (*(
RwReg
*)0x400AC33CUË

	)

177 
	#REG_UOTGHS_DEVDMANXTDSC4
 (*(
RwReg
*)0x400AC340UË

	)

178 
	#REG_UOTGHS_DEVDMAADDRESS4
 (*(
RwReg
*)0x400AC344UË

	)

179 
	#REG_UOTGHS_DEVDMACONTROL4
 (*(
RwReg
*)0x400AC348UË

	)

180 
	#REG_UOTGHS_DEVDMASTATUS4
 (*(
RwReg
*)0x400AC34CUË

	)

181 
	#REG_UOTGHS_DEVDMANXTDSC5
 (*(
RwReg
*)0x400AC350UË

	)

182 
	#REG_UOTGHS_DEVDMAADDRESS5
 (*(
RwReg
*)0x400AC354UË

	)

183 
	#REG_UOTGHS_DEVDMACONTROL5
 (*(
RwReg
*)0x400AC358UË

	)

184 
	#REG_UOTGHS_DEVDMASTATUS5
 (*(
RwReg
*)0x400AC35CUË

	)

185 
	#REG_UOTGHS_DEVDMANXTDSC6
 (*(
RwReg
*)0x400AC360UË

	)

186 
	#REG_UOTGHS_DEVDMAADDRESS6
 (*(
RwReg
*)0x400AC364UË

	)

187 
	#REG_UOTGHS_DEVDMACONTROL6
 (*(
RwReg
*)0x400AC368UË

	)

188 
	#REG_UOTGHS_DEVDMASTATUS6
 (*(
RwReg
*)0x400AC36CUË

	)

189 
	#REG_UOTGHS_DEVDMANXTDSC7
 (*(
RwReg
*)0x400AC370UË

	)

190 
	#REG_UOTGHS_DEVDMAADDRESS7
 (*(
RwReg
*)0x400AC374UË

	)

191 
	#REG_UOTGHS_DEVDMACONTROL7
 (*(
RwReg
*)0x400AC378UË

	)

192 
	#REG_UOTGHS_DEVDMASTATUS7
 (*(
RwReg
*)0x400AC37CUË

	)

193 
	#REG_UOTGHS_HSTCTRL
 (*(
RwReg
*)0x400AC400UË

	)

194 
	#REG_UOTGHS_HSTISR
 (*(
RoReg
*)0x400AC404UË

	)

195 
	#REG_UOTGHS_HSTICR
 (*(
WoReg
*)0x400AC408UË

	)

196 
	#REG_UOTGHS_HSTIFR
 (*(
WoReg
*)0x400AC40CUË

	)

197 
	#REG_UOTGHS_HSTIMR
 (*(
RoReg
*)0x400AC410UË

	)

198 
	#REG_UOTGHS_HSTIDR
 (*(
WoReg
*)0x400AC414UË

	)

199 
	#REG_UOTGHS_HSTIER
 (*(
WoReg
*)0x400AC418UË

	)

200 
	#REG_UOTGHS_HSTPIP
 (*(
RwReg
*)0x400AC41CUË

	)

201 
	#REG_UOTGHS_HSTFNUM
 (*(
RwReg
*)0x400AC420UË

	)

202 
	#REG_UOTGHS_HSTADDR1
 (*(
RwReg
*)0x400AC424UË

	)

203 
	#REG_UOTGHS_HSTADDR2
 (*(
RwReg
*)0x400AC428UË

	)

204 
	#REG_UOTGHS_HSTADDR3
 (*(
RwReg
*)0x400AC42CUË

	)

205 
	#REG_UOTGHS_HSTPIPCFG
 (*(
RwReg
*)0x400AC500UË

	)

206 
	#REG_UOTGHS_HSTPIPISR
 (*(
RoReg
*)0x400AC530UË

	)

207 
	#REG_UOTGHS_HSTPIPICR
 (*(
WoReg
*)0x400AC560UË

	)

208 
	#REG_UOTGHS_HSTPIPIFR
 (*(
WoReg
*)0x400AC590UË

	)

209 
	#REG_UOTGHS_HSTPIPIMR
 (*(
RoReg
*)0x400AC5C0UË

	)

210 
	#REG_UOTGHS_HSTPIPIER
 (*(
WoReg
*)0x400AC5F0UË

	)

211 
	#REG_UOTGHS_HSTPIPIDR
 (*(
WoReg
*)0x400AC620UË

	)

212 
	#REG_UOTGHS_HSTPIPINRQ
 (*(
RwReg
*)0x400AC650UË

	)

213 
	#REG_UOTGHS_HSTPIPERR
 (*(
RwReg
*)0x400AC680UË

	)

214 
	#REG_UOTGHS_HSTDMANXTDSC1
 (*(
RwReg
*)0x400AC710UË

	)

215 
	#REG_UOTGHS_HSTDMAADDRESS1
 (*(
RwReg
*)0x400AC714UË

	)

216 
	#REG_UOTGHS_HSTDMACONTROL1
 (*(
RwReg
*)0x400AC718UË

	)

217 
	#REG_UOTGHS_HSTDMASTATUS1
 (*(
RwReg
*)0x400AC71CUË

	)

218 
	#REG_UOTGHS_HSTDMANXTDSC2
 (*(
RwReg
*)0x400AC720UË

	)

219 
	#REG_UOTGHS_HSTDMAADDRESS2
 (*(
RwReg
*)0x400AC724UË

	)

220 
	#REG_UOTGHS_HSTDMACONTROL2
 (*(
RwReg
*)0x400AC728UË

	)

221 
	#REG_UOTGHS_HSTDMASTATUS2
 (*(
RwReg
*)0x400AC72CUË

	)

222 
	#REG_UOTGHS_HSTDMANXTDSC3
 (*(
RwReg
*)0x400AC730UË

	)

223 
	#REG_UOTGHS_HSTDMAADDRESS3
 (*(
RwReg
*)0x400AC734UË

	)

224 
	#REG_UOTGHS_HSTDMACONTROL3
 (*(
RwReg
*)0x400AC738UË

	)

225 
	#REG_UOTGHS_HSTDMASTATUS3
 (*(
RwReg
*)0x400AC73CUË

	)

226 
	#REG_UOTGHS_HSTDMANXTDSC4
 (*(
RwReg
*)0x400AC740UË

	)

227 
	#REG_UOTGHS_HSTDMAADDRESS4
 (*(
RwReg
*)0x400AC744UË

	)

228 
	#REG_UOTGHS_HSTDMACONTROL4
 (*(
RwReg
*)0x400AC748UË

	)

229 
	#REG_UOTGHS_HSTDMASTATUS4
 (*(
RwReg
*)0x400AC74CUË

	)

230 
	#REG_UOTGHS_HSTDMANXTDSC5
 (*(
RwReg
*)0x400AC750UË

	)

231 
	#REG_UOTGHS_HSTDMAADDRESS5
 (*(
RwReg
*)0x400AC754UË

	)

232 
	#REG_UOTGHS_HSTDMACONTROL5
 (*(
RwReg
*)0x400AC758UË

	)

233 
	#REG_UOTGHS_HSTDMASTATUS5
 (*(
RwReg
*)0x400AC75CUË

	)

234 
	#REG_UOTGHS_HSTDMANXTDSC6
 (*(
RwReg
*)0x400AC760UË

	)

235 
	#REG_UOTGHS_HSTDMAADDRESS6
 (*(
RwReg
*)0x400AC764UË

	)

236 
	#REG_UOTGHS_HSTDMACONTROL6
 (*(
RwReg
*)0x400AC768UË

	)

237 
	#REG_UOTGHS_HSTDMASTATUS6
 (*(
RwReg
*)0x400AC76CUË

	)

238 
	#REG_UOTGHS_HSTDMANXTDSC7
 (*(
RwReg
*)0x400AC770UË

	)

239 
	#REG_UOTGHS_HSTDMAADDRESS7
 (*(
RwReg
*)0x400AC774UË

	)

240 
	#REG_UOTGHS_HSTDMACONTROL7
 (*(
RwReg
*)0x400AC778UË

	)

241 
	#REG_UOTGHS_HSTDMASTATUS7
 (*(
RwReg
*)0x400AC77CUË

	)

242 
	#REG_UOTGHS_CTRL
 (*(
RwReg
*)0x400AC800UË

	)

243 
	#REG_UOTGHS_SR
 (*(
RoReg
*)0x400AC804UË

	)

244 
	#REG_UOTGHS_SCR
 (*(
WoReg
*)0x400AC808UË

	)

245 
	#REG_UOTGHS_SFR
 (*(
WoReg
*)0x400AC80CUË

	)

246 
	#REG_UOTGHS_FSM
 (*(
RoReg
*)0x400AC82CUË

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_usart0.h

45 #i‚de‡
_SAM3XA_USART0_INSTANCE_


46 
	#_SAM3XA_USART0_INSTANCE_


	)

49 #i‡(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

50 
	#REG_USART0_CR
 (0x40098000UË

	)

51 
	#REG_USART0_MR
 (0x40098004UË

	)

52 
	#REG_USART0_IER
 (0x40098008UË

	)

53 
	#REG_USART0_IDR
 (0x4009800CUË

	)

54 
	#REG_USART0_IMR
 (0x40098010UË

	)

55 
	#REG_USART0_CSR
 (0x40098014UË

	)

56 
	#REG_USART0_RHR
 (0x40098018UË

	)

57 
	#REG_USART0_THR
 (0x4009801CUË

	)

58 
	#REG_USART0_BRGR
 (0x40098020UË

	)

59 
	#REG_USART0_RTOR
 (0x40098024UË

	)

60 
	#REG_USART0_TTGR
 (0x40098028UË

	)

61 
	#REG_USART0_FIDI
 (0x40098040UË

	)

62 
	#REG_USART0_NER
 (0x40098044UË

	)

63 
	#REG_USART0_IF
 (0x4009804CUË

	)

64 
	#REG_USART0_MAN
 (0x40098050UË

	)

65 
	#REG_USART0_LINMR
 (0x40098054UË

	)

66 
	#REG_USART0_LINIR
 (0x40098058UË

	)

67 
	#REG_USART0_WPMR
 (0x400980E4UË

	)

68 
	#REG_USART0_WPSR
 (0x400980E8UË

	)

69 
	#REG_USART0_RPR
 (0x40098100UË

	)

70 
	#REG_USART0_RCR
 (0x40098104UË

	)

71 
	#REG_USART0_TPR
 (0x40098108UË

	)

72 
	#REG_USART0_TCR
 (0x4009810CUË

	)

73 
	#REG_USART0_RNPR
 (0x40098110UË

	)

74 
	#REG_USART0_RNCR
 (0x40098114UË

	)

75 
	#REG_USART0_TNPR
 (0x40098118UË

	)

76 
	#REG_USART0_TNCR
 (0x4009811CUË

	)

77 
	#REG_USART0_PTCR
 (0x40098120UË

	)

78 
	#REG_USART0_PTSR
 (0x40098124UË

	)

80 
	#REG_USART0_CR
 (*(
WoReg
*)0x40098000UË

	)

81 
	#REG_USART0_MR
 (*(
RwReg
*)0x40098004UË

	)

82 
	#REG_USART0_IER
 (*(
WoReg
*)0x40098008UË

	)

83 
	#REG_USART0_IDR
 (*(
WoReg
*)0x4009800CUË

	)

84 
	#REG_USART0_IMR
 (*(
RoReg
*)0x40098010UË

	)

85 
	#REG_USART0_CSR
 (*(
RoReg
*)0x40098014UË

	)

86 
	#REG_USART0_RHR
 (*(
RoReg
*)0x40098018UË

	)

87 
	#REG_USART0_THR
 (*(
WoReg
*)0x4009801CUË

	)

88 
	#REG_USART0_BRGR
 (*(
RwReg
*)0x40098020UË

	)

89 
	#REG_USART0_RTOR
 (*(
RwReg
*)0x40098024UË

	)

90 
	#REG_USART0_TTGR
 (*(
RwReg
*)0x40098028UË

	)

91 
	#REG_USART0_FIDI
 (*(
RwReg
*)0x40098040UË

	)

92 
	#REG_USART0_NER
 (*(
RoReg
*)0x40098044UË

	)

93 
	#REG_USART0_IF
 (*(
RwReg
*)0x4009804CUË

	)

94 
	#REG_USART0_MAN
 (*(
RwReg
*)0x40098050UË

	)

95 
	#REG_USART0_LINMR
 (*(
RwReg
*)0x40098054UË

	)

96 
	#REG_USART0_LINIR
 (*(
RwReg
*)0x40098058UË

	)

97 
	#REG_USART0_WPMR
 (*(
RwReg
*)0x400980E4UË

	)

98 
	#REG_USART0_WPSR
 (*(
RoReg
*)0x400980E8UË

	)

99 
	#REG_USART0_RPR
 (*(
RwReg
*)0x40098100UË

	)

100 
	#REG_USART0_RCR
 (*(
RwReg
*)0x40098104UË

	)

101 
	#REG_USART0_TPR
 (*(
RwReg
*)0x40098108UË

	)

102 
	#REG_USART0_TCR
 (*(
RwReg
*)0x4009810CUË

	)

103 
	#REG_USART0_RNPR
 (*(
RwReg
*)0x40098110UË

	)

104 
	#REG_USART0_RNCR
 (*(
RwReg
*)0x40098114UË

	)

105 
	#REG_USART0_TNPR
 (*(
RwReg
*)0x40098118UË

	)

106 
	#REG_USART0_TNCR
 (*(
RwReg
*)0x4009811CUË

	)

107 
	#REG_USART0_PTCR
 (*(
WoReg
*)0x40098120UË

	)

108 
	#REG_USART0_PTSR
 (*(
RoReg
*)0x40098124UË

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_usart1.h

45 #i‚de‡
_SAM3XA_USART1_INSTANCE_


46 
	#_SAM3XA_USART1_INSTANCE_


	)

49 #i‡(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

50 
	#REG_USART1_CR
 (0x4009C000UË

	)

51 
	#REG_USART1_MR
 (0x4009C004UË

	)

52 
	#REG_USART1_IER
 (0x4009C008UË

	)

53 
	#REG_USART1_IDR
 (0x4009C00CUË

	)

54 
	#REG_USART1_IMR
 (0x4009C010UË

	)

55 
	#REG_USART1_CSR
 (0x4009C014UË

	)

56 
	#REG_USART1_RHR
 (0x4009C018UË

	)

57 
	#REG_USART1_THR
 (0x4009C01CUË

	)

58 
	#REG_USART1_BRGR
 (0x4009C020UË

	)

59 
	#REG_USART1_RTOR
 (0x4009C024UË

	)

60 
	#REG_USART1_TTGR
 (0x4009C028UË

	)

61 
	#REG_USART1_FIDI
 (0x4009C040UË

	)

62 
	#REG_USART1_NER
 (0x4009C044UË

	)

63 
	#REG_USART1_IF
 (0x4009C04CUË

	)

64 
	#REG_USART1_MAN
 (0x4009C050UË

	)

65 
	#REG_USART1_LINMR
 (0x4009C054UË

	)

66 
	#REG_USART1_LINIR
 (0x4009C058UË

	)

67 
	#REG_USART1_WPMR
 (0x4009C0E4UË

	)

68 
	#REG_USART1_WPSR
 (0x4009C0E8UË

	)

69 
	#REG_USART1_RPR
 (0x4009C100UË

	)

70 
	#REG_USART1_RCR
 (0x4009C104UË

	)

71 
	#REG_USART1_TPR
 (0x4009C108UË

	)

72 
	#REG_USART1_TCR
 (0x4009C10CUË

	)

73 
	#REG_USART1_RNPR
 (0x4009C110UË

	)

74 
	#REG_USART1_RNCR
 (0x4009C114UË

	)

75 
	#REG_USART1_TNPR
 (0x4009C118UË

	)

76 
	#REG_USART1_TNCR
 (0x4009C11CUË

	)

77 
	#REG_USART1_PTCR
 (0x4009C120UË

	)

78 
	#REG_USART1_PTSR
 (0x4009C124UË

	)

80 
	#REG_USART1_CR
 (*(
WoReg
*)0x4009C000UË

	)

81 
	#REG_USART1_MR
 (*(
RwReg
*)0x4009C004UË

	)

82 
	#REG_USART1_IER
 (*(
WoReg
*)0x4009C008UË

	)

83 
	#REG_USART1_IDR
 (*(
WoReg
*)0x4009C00CUË

	)

84 
	#REG_USART1_IMR
 (*(
RoReg
*)0x4009C010UË

	)

85 
	#REG_USART1_CSR
 (*(
RoReg
*)0x4009C014UË

	)

86 
	#REG_USART1_RHR
 (*(
RoReg
*)0x4009C018UË

	)

87 
	#REG_USART1_THR
 (*(
WoReg
*)0x4009C01CUË

	)

88 
	#REG_USART1_BRGR
 (*(
RwReg
*)0x4009C020UË

	)

89 
	#REG_USART1_RTOR
 (*(
RwReg
*)0x4009C024UË

	)

90 
	#REG_USART1_TTGR
 (*(
RwReg
*)0x4009C028UË

	)

91 
	#REG_USART1_FIDI
 (*(
RwReg
*)0x4009C040UË

	)

92 
	#REG_USART1_NER
 (*(
RoReg
*)0x4009C044UË

	)

93 
	#REG_USART1_IF
 (*(
RwReg
*)0x4009C04CUË

	)

94 
	#REG_USART1_MAN
 (*(
RwReg
*)0x4009C050UË

	)

95 
	#REG_USART1_LINMR
 (*(
RwReg
*)0x4009C054UË

	)

96 
	#REG_USART1_LINIR
 (*(
RwReg
*)0x4009C058UË

	)

97 
	#REG_USART1_WPMR
 (*(
RwReg
*)0x4009C0E4UË

	)

98 
	#REG_USART1_WPSR
 (*(
RoReg
*)0x4009C0E8UË

	)

99 
	#REG_USART1_RPR
 (*(
RwReg
*)0x4009C100UË

	)

100 
	#REG_USART1_RCR
 (*(
RwReg
*)0x4009C104UË

	)

101 
	#REG_USART1_TPR
 (*(
RwReg
*)0x4009C108UË

	)

102 
	#REG_USART1_TCR
 (*(
RwReg
*)0x4009C10CUË

	)

103 
	#REG_USART1_RNPR
 (*(
RwReg
*)0x4009C110UË

	)

104 
	#REG_USART1_RNCR
 (*(
RwReg
*)0x4009C114UË

	)

105 
	#REG_USART1_TNPR
 (*(
RwReg
*)0x4009C118UË

	)

106 
	#REG_USART1_TNCR
 (*(
RwReg
*)0x4009C11CUË

	)

107 
	#REG_USART1_PTCR
 (*(
WoReg
*)0x4009C120UË

	)

108 
	#REG_USART1_PTSR
 (*(
RoReg
*)0x4009C124UË

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_usart2.h

45 #i‚de‡
_SAM3XA_USART2_INSTANCE_


46 
	#_SAM3XA_USART2_INSTANCE_


	)

49 #i‡(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

50 
	#REG_USART2_CR
 (0x400A0000UË

	)

51 
	#REG_USART2_MR
 (0x400A0004UË

	)

52 
	#REG_USART2_IER
 (0x400A0008UË

	)

53 
	#REG_USART2_IDR
 (0x400A000CUË

	)

54 
	#REG_USART2_IMR
 (0x400A0010UË

	)

55 
	#REG_USART2_CSR
 (0x400A0014UË

	)

56 
	#REG_USART2_RHR
 (0x400A0018UË

	)

57 
	#REG_USART2_THR
 (0x400A001CUË

	)

58 
	#REG_USART2_BRGR
 (0x400A0020UË

	)

59 
	#REG_USART2_RTOR
 (0x400A0024UË

	)

60 
	#REG_USART2_TTGR
 (0x400A0028UË

	)

61 
	#REG_USART2_FIDI
 (0x400A0040UË

	)

62 
	#REG_USART2_NER
 (0x400A0044UË

	)

63 
	#REG_USART2_IF
 (0x400A004CUË

	)

64 
	#REG_USART2_MAN
 (0x400A0050UË

	)

65 
	#REG_USART2_LINMR
 (0x400A0054UË

	)

66 
	#REG_USART2_LINIR
 (0x400A0058UË

	)

67 
	#REG_USART2_WPMR
 (0x400A00E4UË

	)

68 
	#REG_USART2_WPSR
 (0x400A00E8UË

	)

69 
	#REG_USART2_RPR
 (0x400A0100UË

	)

70 
	#REG_USART2_RCR
 (0x400A0104UË

	)

71 
	#REG_USART2_TPR
 (0x400A0108UË

	)

72 
	#REG_USART2_TCR
 (0x400A010CUË

	)

73 
	#REG_USART2_RNPR
 (0x400A0110UË

	)

74 
	#REG_USART2_RNCR
 (0x400A0114UË

	)

75 
	#REG_USART2_TNPR
 (0x400A0118UË

	)

76 
	#REG_USART2_TNCR
 (0x400A011CUË

	)

77 
	#REG_USART2_PTCR
 (0x400A0120UË

	)

78 
	#REG_USART2_PTSR
 (0x400A0124UË

	)

80 
	#REG_USART2_CR
 (*(
WoReg
*)0x400A0000UË

	)

81 
	#REG_USART2_MR
 (*(
RwReg
*)0x400A0004UË

	)

82 
	#REG_USART2_IER
 (*(
WoReg
*)0x400A0008UË

	)

83 
	#REG_USART2_IDR
 (*(
WoReg
*)0x400A000CUË

	)

84 
	#REG_USART2_IMR
 (*(
RoReg
*)0x400A0010UË

	)

85 
	#REG_USART2_CSR
 (*(
RoReg
*)0x400A0014UË

	)

86 
	#REG_USART2_RHR
 (*(
RoReg
*)0x400A0018UË

	)

87 
	#REG_USART2_THR
 (*(
WoReg
*)0x400A001CUË

	)

88 
	#REG_USART2_BRGR
 (*(
RwReg
*)0x400A0020UË

	)

89 
	#REG_USART2_RTOR
 (*(
RwReg
*)0x400A0024UË

	)

90 
	#REG_USART2_TTGR
 (*(
RwReg
*)0x400A0028UË

	)

91 
	#REG_USART2_FIDI
 (*(
RwReg
*)0x400A0040UË

	)

92 
	#REG_USART2_NER
 (*(
RoReg
*)0x400A0044UË

	)

93 
	#REG_USART2_IF
 (*(
RwReg
*)0x400A004CUË

	)

94 
	#REG_USART2_MAN
 (*(
RwReg
*)0x400A0050UË

	)

95 
	#REG_USART2_LINMR
 (*(
RwReg
*)0x400A0054UË

	)

96 
	#REG_USART2_LINIR
 (*(
RwReg
*)0x400A0058UË

	)

97 
	#REG_USART2_WPMR
 (*(
RwReg
*)0x400A00E4UË

	)

98 
	#REG_USART2_WPSR
 (*(
RoReg
*)0x400A00E8UË

	)

99 
	#REG_USART2_RPR
 (*(
RwReg
*)0x400A0100UË

	)

100 
	#REG_USART2_RCR
 (*(
RwReg
*)0x400A0104UË

	)

101 
	#REG_USART2_TPR
 (*(
RwReg
*)0x400A0108UË

	)

102 
	#REG_USART2_TCR
 (*(
RwReg
*)0x400A010CUË

	)

103 
	#REG_USART2_RNPR
 (*(
RwReg
*)0x400A0110UË

	)

104 
	#REG_USART2_RNCR
 (*(
RwReg
*)0x400A0114UË

	)

105 
	#REG_USART2_TNPR
 (*(
RwReg
*)0x400A0118UË

	)

106 
	#REG_USART2_TNCR
 (*(
RwReg
*)0x400A011CUË

	)

107 
	#REG_USART2_PTCR
 (*(
WoReg
*)0x400A0120UË

	)

108 
	#REG_USART2_PTSR
 (*(
RoReg
*)0x400A0124UË

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_usart3.h

45 #i‚de‡
_SAM3XA_USART3_INSTANCE_


46 
	#_SAM3XA_USART3_INSTANCE_


	)

49 #i‡(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

50 
	#REG_USART3_CR
 (0x400A4000UË

	)

51 
	#REG_USART3_MR
 (0x400A4004UË

	)

52 
	#REG_USART3_IER
 (0x400A4008UË

	)

53 
	#REG_USART3_IDR
 (0x400A400CUË

	)

54 
	#REG_USART3_IMR
 (0x400A4010UË

	)

55 
	#REG_USART3_CSR
 (0x400A4014UË

	)

56 
	#REG_USART3_RHR
 (0x400A4018UË

	)

57 
	#REG_USART3_THR
 (0x400A401CUË

	)

58 
	#REG_USART3_BRGR
 (0x400A4020UË

	)

59 
	#REG_USART3_RTOR
 (0x400A4024UË

	)

60 
	#REG_USART3_TTGR
 (0x400A4028UË

	)

61 
	#REG_USART3_FIDI
 (0x400A4040UË

	)

62 
	#REG_USART3_NER
 (0x400A4044UË

	)

63 
	#REG_USART3_IF
 (0x400A404CUË

	)

64 
	#REG_USART3_MAN
 (0x400A4050UË

	)

65 
	#REG_USART3_LINMR
 (0x400A4054UË

	)

66 
	#REG_USART3_LINIR
 (0x400A4058UË

	)

67 
	#REG_USART3_WPMR
 (0x400A40E4UË

	)

68 
	#REG_USART3_WPSR
 (0x400A40E8UË

	)

69 
	#REG_USART3_RPR
 (0x400A4100UË

	)

70 
	#REG_USART3_RCR
 (0x400A4104UË

	)

71 
	#REG_USART3_TPR
 (0x400A4108UË

	)

72 
	#REG_USART3_TCR
 (0x400A410CUË

	)

73 
	#REG_USART3_RNPR
 (0x400A4110UË

	)

74 
	#REG_USART3_RNCR
 (0x400A4114UË

	)

75 
	#REG_USART3_TNPR
 (0x400A4118UË

	)

76 
	#REG_USART3_TNCR
 (0x400A411CUË

	)

77 
	#REG_USART3_PTCR
 (0x400A4120UË

	)

78 
	#REG_USART3_PTSR
 (0x400A4124UË

	)

80 
	#REG_USART3_CR
 (*(
WoReg
*)0x400A4000UË

	)

81 
	#REG_USART3_MR
 (*(
RwReg
*)0x400A4004UË

	)

82 
	#REG_USART3_IER
 (*(
WoReg
*)0x400A4008UË

	)

83 
	#REG_USART3_IDR
 (*(
WoReg
*)0x400A400CUË

	)

84 
	#REG_USART3_IMR
 (*(
RoReg
*)0x400A4010UË

	)

85 
	#REG_USART3_CSR
 (*(
RoReg
*)0x400A4014UË

	)

86 
	#REG_USART3_RHR
 (*(
RoReg
*)0x400A4018UË

	)

87 
	#REG_USART3_THR
 (*(
WoReg
*)0x400A401CUË

	)

88 
	#REG_USART3_BRGR
 (*(
RwReg
*)0x400A4020UË

	)

89 
	#REG_USART3_RTOR
 (*(
RwReg
*)0x400A4024UË

	)

90 
	#REG_USART3_TTGR
 (*(
RwReg
*)0x400A4028UË

	)

91 
	#REG_USART3_FIDI
 (*(
RwReg
*)0x400A4040UË

	)

92 
	#REG_USART3_NER
 (*(
RoReg
*)0x400A4044UË

	)

93 
	#REG_USART3_IF
 (*(
RwReg
*)0x400A404CUË

	)

94 
	#REG_USART3_MAN
 (*(
RwReg
*)0x400A4050UË

	)

95 
	#REG_USART3_LINMR
 (*(
RwReg
*)0x400A4054UË

	)

96 
	#REG_USART3_LINIR
 (*(
RwReg
*)0x400A4058UË

	)

97 
	#REG_USART3_WPMR
 (*(
RwReg
*)0x400A40E4UË

	)

98 
	#REG_USART3_WPSR
 (*(
RoReg
*)0x400A40E8UË

	)

99 
	#REG_USART3_RPR
 (*(
RwReg
*)0x400A4100UË

	)

100 
	#REG_USART3_RCR
 (*(
RwReg
*)0x400A4104UË

	)

101 
	#REG_USART3_TPR
 (*(
RwReg
*)0x400A4108UË

	)

102 
	#REG_USART3_TCR
 (*(
RwReg
*)0x400A410CUË

	)

103 
	#REG_USART3_RNPR
 (*(
RwReg
*)0x400A4110UË

	)

104 
	#REG_USART3_RNCR
 (*(
RwReg
*)0x400A4114UË

	)

105 
	#REG_USART3_TNPR
 (*(
RwReg
*)0x400A4118UË

	)

106 
	#REG_USART3_TNCR
 (*(
RwReg
*)0x400A411CUË

	)

107 
	#REG_USART3_PTCR
 (*(
WoReg
*)0x400A4120UË

	)

108 
	#REG_USART3_PTSR
 (*(
RoReg
*)0x400A4124UË

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_wdt.h

45 #i‚de‡
_SAM3XA_WDT_INSTANCE_


46 
	#_SAM3XA_WDT_INSTANCE_


	)

49 #i‡(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

50 
	#REG_WDT_CR
 (0x400E1A50UË

	)

51 
	#REG_WDT_MR
 (0x400E1A54UË

	)

52 
	#REG_WDT_SR
 (0x400E1A58UË

	)

54 
	#REG_WDT_CR
 (*(
WoReg
*)0x400E1A50UË

	)

55 
	#REG_WDT_MR
 (*(
RwReg
*)0x400E1A54UË

	)

56 
	#REG_WDT_SR
 (*(
RoReg
*)0x400E1A58UË

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/pio/pio_sam3x8e.h

45 #i‚de‡
_SAM3X8E_PIO_


46 
	#_SAM3X8E_PIO_


	)

48 
	#PIO_PA0
 (1u << 0Ë

	)

49 
	#PIO_PA1
 (1u << 1Ë

	)

50 
	#PIO_PA2
 (1u << 2Ë

	)

51 
	#PIO_PA3
 (1u << 3Ë

	)

52 
	#PIO_PA4
 (1u << 4Ë

	)

53 
	#PIO_PA5
 (1u << 5Ë

	)

54 
	#PIO_PA6
 (1u << 6Ë

	)

55 
	#PIO_PA7
 (1u << 7Ë

	)

56 
	#PIO_PA8
 (1u << 8Ë

	)

57 
	#PIO_PA9
 (1u << 9Ë

	)

58 
	#PIO_PA10
 (1u << 10Ë

	)

59 
	#PIO_PA11
 (1u << 11Ë

	)

60 
	#PIO_PA12
 (1u << 12Ë

	)

61 
	#PIO_PA13
 (1u << 13Ë

	)

62 
	#PIO_PA14
 (1u << 14Ë

	)

63 
	#PIO_PA15
 (1u << 15Ë

	)

64 
	#PIO_PA16
 (1u << 16Ë

	)

65 
	#PIO_PA17
 (1u << 17Ë

	)

66 
	#PIO_PA18
 (1u << 18Ë

	)

67 
	#PIO_PA19
 (1u << 19Ë

	)

68 
	#PIO_PA20
 (1u << 20Ë

	)

69 
	#PIO_PA21
 (1u << 21Ë

	)

70 
	#PIO_PA22
 (1u << 22Ë

	)

71 
	#PIO_PA23
 (1u << 23Ë

	)

72 
	#PIO_PA24
 (1u << 24Ë

	)

73 
	#PIO_PA25
 (1u << 25Ë

	)

74 
	#PIO_PA26
 (1u << 26Ë

	)

75 
	#PIO_PA27
 (1u << 27Ë

	)

76 
	#PIO_PA28
 (1u << 28Ë

	)

77 
	#PIO_PA29
 (1u << 29Ë

	)

78 
	#PIO_PB0
 (1u << 0Ë

	)

79 
	#PIO_PB1
 (1u << 1Ë

	)

80 
	#PIO_PB2
 (1u << 2Ë

	)

81 
	#PIO_PB3
 (1u << 3Ë

	)

82 
	#PIO_PB4
 (1u << 4Ë

	)

83 
	#PIO_PB5
 (1u << 5Ë

	)

84 
	#PIO_PB6
 (1u << 6Ë

	)

85 
	#PIO_PB7
 (1u << 7Ë

	)

86 
	#PIO_PB8
 (1u << 8Ë

	)

87 
	#PIO_PB9
 (1u << 9Ë

	)

88 
	#PIO_PB10
 (1u << 10Ë

	)

89 
	#PIO_PB11
 (1u << 11Ë

	)

90 
	#PIO_PB12
 (1u << 12Ë

	)

91 
	#PIO_PB13
 (1u << 13Ë

	)

92 
	#PIO_PB14
 (1u << 14Ë

	)

93 
	#PIO_PB15
 (1u << 15Ë

	)

94 
	#PIO_PB16
 (1u << 16Ë

	)

95 
	#PIO_PB17
 (1u << 17Ë

	)

96 
	#PIO_PB18
 (1u << 18Ë

	)

97 
	#PIO_PB19
 (1u << 19Ë

	)

98 
	#PIO_PB20
 (1u << 20Ë

	)

99 
	#PIO_PB21
 (1u << 21Ë

	)

100 
	#PIO_PB22
 (1u << 22Ë

	)

101 
	#PIO_PB23
 (1u << 23Ë

	)

102 
	#PIO_PB24
 (1u << 24Ë

	)

103 
	#PIO_PB25
 (1u << 25Ë

	)

104 
	#PIO_PB26
 (1u << 26Ë

	)

105 
	#PIO_PB27
 (1u << 27Ë

	)

106 
	#PIO_PB28
 (1u << 28Ë

	)

107 
	#PIO_PB29
 (1u << 29Ë

	)

108 
	#PIO_PB30
 (1u << 30Ë

	)

109 
	#PIO_PB31
 (1u << 31Ë

	)

110 
	#PIO_PC0
 (1u << 0Ë

	)

111 
	#PIO_PC1
 (1u << 1Ë

	)

112 
	#PIO_PC2
 (1u << 2Ë

	)

113 
	#PIO_PC3
 (1u << 3Ë

	)

114 
	#PIO_PC4
 (1u << 4Ë

	)

115 
	#PIO_PC5
 (1u << 5Ë

	)

116 
	#PIO_PC6
 (1u << 6Ë

	)

117 
	#PIO_PC7
 (1u << 7Ë

	)

118 
	#PIO_PC8
 (1u << 8Ë

	)

119 
	#PIO_PC9
 (1u << 9Ë

	)

120 
	#PIO_PC10
 (1u << 10Ë

	)

121 
	#PIO_PC11
 (1u << 11Ë

	)

122 
	#PIO_PC12
 (1u << 12Ë

	)

123 
	#PIO_PC13
 (1u << 13Ë

	)

124 
	#PIO_PC14
 (1u << 14Ë

	)

125 
	#PIO_PC15
 (1u << 15Ë

	)

126 
	#PIO_PC16
 (1u << 16Ë

	)

127 
	#PIO_PC17
 (1u << 17Ë

	)

128 
	#PIO_PC18
 (1u << 18Ë

	)

129 
	#PIO_PC19
 (1u << 19Ë

	)

130 
	#PIO_PC20
 (1u << 20Ë

	)

131 
	#PIO_PC21
 (1u << 21Ë

	)

132 
	#PIO_PC22
 (1u << 22Ë

	)

133 
	#PIO_PC23
 (1u << 23Ë

	)

134 
	#PIO_PC24
 (1u << 24Ë

	)

135 
	#PIO_PC25
 (1u << 25Ë

	)

136 
	#PIO_PC26
 (1u << 26Ë

	)

137 
	#PIO_PC27
 (1u << 27Ë

	)

138 
	#PIO_PC28
 (1u << 28Ë

	)

139 
	#PIO_PC29
 (1u << 29Ë

	)

140 
	#PIO_PC30
 (1u << 30Ë

	)

141 
	#PIO_PD0
 (1u << 0Ë

	)

142 
	#PIO_PD1
 (1u << 1Ë

	)

143 
	#PIO_PD2
 (1u << 2Ë

	)

144 
	#PIO_PD3
 (1u << 3Ë

	)

145 
	#PIO_PD4
 (1u << 4Ë

	)

146 
	#PIO_PD5
 (1u << 5Ë

	)

147 
	#PIO_PD6
 (1u << 6Ë

	)

148 
	#PIO_PD7
 (1u << 7Ë

	)

149 
	#PIO_PD8
 (1u << 8Ë

	)

150 
	#PIO_PD9
 (1u << 9Ë

	)

151 
	#PIO_PD10
 (1u << 10Ë

	)

153 
	#PIO_PA2X1_AD0
 (1u << 2Ë

	)

154 
	#PIO_PA3X1_AD1
 (1u << 3Ë

	)

155 
	#PIO_PA3X1_WKUP1
 (1u << 3Ë

	)

156 
	#PIO_PB17X1_AD10
 (1u << 17Ë

	)

157 
	#PIO_PB18X1_AD11
 (1u << 18Ë

	)

158 
	#PIO_PB19X1_AD12
 (1u << 19Ë

	)

159 
	#PIO_PB20X1_AD13
 (1u << 20Ë

	)

160 
	#PIO_PB21X1_AD14
 (1u << 21Ë

	)

161 
	#PIO_PB21X1_WKUP13
 (1u << 21Ë

	)

162 
	#PIO_PA4X1_AD2
 (1u << 4Ë

	)

163 
	#PIO_PA6X1_AD3
 (1u << 6Ë

	)

164 
	#PIO_PA22X1_AD4
 (1u << 22Ë

	)

165 
	#PIO_PA23X1_AD5
 (1u << 23Ë

	)

166 
	#PIO_PA24X1_AD6
 (1u << 24Ë

	)

167 
	#PIO_PA16X1_AD7
 (1u << 16Ë

	)

168 
	#PIO_PB12X1_AD8
 (1u << 12Ë

	)

169 
	#PIO_PB13X1_AD9
 (1u << 13Ë

	)

170 
	#PIO_PA11B_ADTRG
 (1u << 11Ë

	)

172 
	#PIO_PA1A_CANRX0
 (1u << 1Ë

	)

173 
	#PIO_PA0A_CANTX0
 (1u << 0Ë

	)

175 
	#PIO_PB15A_CANRX1
 (1u << 15Ë

	)

176 
	#PIO_PB14A_CANTX1
 (1u << 14Ë

	)

178 
	#PIO_PB15X1_DAC0
 (1u << 15Ë

	)

179 
	#PIO_PB15X1_WKUP12
 (1u << 15Ë

	)

180 
	#PIO_PB16X1_DAC1
 (1u << 16Ë

	)

181 
	#PIO_PA10B_DATRG
 (1u << 10Ë

	)

183 
	#PIO_PC21A_A0
 (1u << 21Ë

	)

184 
	#PIO_PC21A_NBS0
 (1u << 21Ë

	)

185 
	#PIO_PC22A_A1
 (1u << 22Ë

	)

186 
	#PIO_PD0A_A10
 (1u << 0Ë

	)

187 
	#PIO_PD22A_A10
 (1u << 22Ë

	)

188 
	#PIO_PD1A_A11
 (1u << 1Ë

	)

189 
	#PIO_PD23A_A11
 (1u << 23Ë

	)

190 
	#PIO_PD2A_A12
 (1u << 2Ë

	)

191 
	#PIO_PD24A_A12
 (1u << 24Ë

	)

192 
	#PIO_PD3A_A13
 (1u << 3Ë

	)

193 
	#PIO_PD25A_A13
 (1u << 25Ë

	)

194 
	#PIO_PD4A_A14
 (1u << 4Ë

	)

195 
	#PIO_PD26A_A14
 (1u << 26Ë

	)

196 
	#PIO_PD5A_A15
 (1u << 5Ë

	)

197 
	#PIO_PD27A_A15
 (1u << 27Ë

	)

198 
	#PIO_PD6A_A16
 (1u << 6Ë

	)

199 
	#PIO_PD6A_BA0
 (1u << 6Ë

	)

200 
	#PIO_PD28A_A16
 (1u << 28Ë

	)

201 
	#PIO_PD28A_BA0
 (1u << 28Ë

	)

202 
	#PIO_PD7A_A17
 (1u << 7Ë

	)

203 
	#PIO_PD7A_BA1
 (1u << 7Ë

	)

204 
	#PIO_PD29A_A17
 (1u << 29Ë

	)

205 
	#PIO_PD29A_BA1
 (1u << 29Ë

	)

206 
	#PIO_PA25B_A18
 (1u << 25Ë

	)

207 
	#PIO_PB10B_A18
 (1u << 10Ë

	)

208 
	#PIO_PD30A_A18
 (1u << 30Ë

	)

209 
	#PIO_PA26B_A19
 (1u << 26Ë

	)

210 
	#PIO_PB11B_A19
 (1u << 11Ë

	)

211 
	#PIO_PE0A_A19
 (1u << 0Ë

	)

212 
	#PIO_PC23A_A2
 (1u << 23Ë

	)

213 
	#PIO_PA18B_A20
 (1u << 18Ë

	)

214 
	#PIO_PA27B_A20
 (1u << 27Ë

	)

215 
	#PIO_PE1A_A20
 (1u << 1Ë

	)

216 
	#PIO_PD8A_A21
 (1u << 8Ë

	)

217 
	#PIO_PD8A_NANDALE
 (1u << 8Ë

	)

218 
	#PIO_PE2A_A21
 (1u << 2Ë

	)

219 
	#PIO_PE2A_NANDALE
 (1u << 2Ë

	)

220 
	#PIO_PD9A_A22
 (1u << 9Ë

	)

221 
	#PIO_PD9A_NANDCLE
 (1u << 9Ë

	)

222 
	#PIO_PE3A_A22
 (1u << 3Ë

	)

223 
	#PIO_PE3A_NANDCLE
 (1u << 3Ë

	)

224 
	#PIO_PE4A_A23
 (1u << 4Ë

	)

225 
	#PIO_PC24A_A3
 (1u << 24Ë

	)

226 
	#PIO_PC25A_A4
 (1u << 25Ë

	)

227 
	#PIO_PC26A_A5
 (1u << 26Ë

	)

228 
	#PIO_PD17A_A5
 (1u << 17Ë

	)

229 
	#PIO_PC27A_A6
 (1u << 27Ë

	)

230 
	#PIO_PD18A_A6
 (1u << 18Ë

	)

231 
	#PIO_PC28A_A7
 (1u << 28Ë

	)

232 
	#PIO_PD19A_A7
 (1u << 19Ë

	)

233 
	#PIO_PC29A_A8
 (1u << 29Ë

	)

234 
	#PIO_PD20A_A8
 (1u << 20Ë

	)

235 
	#PIO_PC30A_A9
 (1u << 30Ë

	)

236 
	#PIO_PD21A_A9
 (1u << 21Ë

	)

237 
	#PIO_PD16A_CAS
 (1u << 16Ë

	)

238 
	#PIO_PC2A_D0
 (1u << 2Ë

	)

239 
	#PIO_PC3A_D1
 (1u << 3Ë

	)

240 
	#PIO_PC12A_D10
 (1u << 12Ë

	)

241 
	#PIO_PC13A_D11
 (1u << 13Ë

	)

242 
	#PIO_PC14A_D12
 (1u << 14Ë

	)

243 
	#PIO_PC15A_D13
 (1u << 15Ë

	)

244 
	#PIO_PC16A_D14
 (1u << 16Ë

	)

245 
	#PIO_PC17A_D15
 (1u << 17Ë

	)

246 
	#PIO_PC4A_D2
 (1u << 4Ë

	)

247 
	#PIO_PC5A_D3
 (1u << 5Ë

	)

248 
	#PIO_PC6A_D4
 (1u << 6Ë

	)

249 
	#PIO_PC7A_D5
 (1u << 7Ë

	)

250 
	#PIO_PC8A_D6
 (1u << 8Ë

	)

251 
	#PIO_PC9A_D7
 (1u << 9Ë

	)

252 
	#PIO_PC10A_D8
 (1u << 10Ë

	)

253 
	#PIO_PC11A_D9
 (1u << 11Ë

	)

254 
	#PIO_PC19A_NANDOE
 (1u << 19Ë

	)

255 
	#PIO_PA2B_NANDRDY
 (1u << 2Ë

	)

256 
	#PIO_PC20A_NANDWE
 (1u << 20Ë

	)

257 
	#PIO_PA6B_NCS0
 (1u << 6Ë

	)

258 
	#PIO_PA7B_NCS1
 (1u << 7Ë

	)

259 
	#PIO_PB24B_NCS2
 (1u << 24Ë

	)

260 
	#PIO_PB27A_NCS3
 (1u << 27Ë

	)

261 
	#PIO_PE5A_NCS4
 (1u << 5Ë

	)

262 
	#PIO_PE6A_NCS5
 (1u << 6Ë

	)

263 
	#PIO_PE18B_NCS6
 (1u << 18Ë

	)

264 
	#PIO_PE27A_NCS7
 (1u << 27Ë

	)

265 
	#PIO_PA29B_NRD
 (1u << 29Ë

	)

266 
	#PIO_PA4B_NWAIT
 (1u << 4Ë

	)

267 
	#PIO_PC18A_NWR0
 (1u << 18Ë

	)

268 
	#PIO_PC18A_NWE
 (1u << 18Ë

	)

269 
	#PIO_PD10A_NWR1
 (1u << 10Ë

	)

270 
	#PIO_PD10A_NBS1
 (1u << 10Ë

	)

271 
	#PIO_PD15A_RAS
 (1u << 15Ë

	)

272 
	#PIO_PD11A_SDA10
 (1u << 11Ë

	)

273 
	#PIO_PD13A_SDCKE
 (1u << 13Ë

	)

274 
	#PIO_PD12A_SDCS
 (1u << 12Ë

	)

275 
	#PIO_PD14A_SDWE
 (1u << 14Ë

	)

277 
	#PIO_PC13B_ECOL
 (1u << 13Ë

	)

278 
	#PIO_PC10B_ECRS
 (1u << 10Ë

	)

279 
	#PIO_PB4A_ECRSDV
 (1u << 4Ë

	)

280 
	#PIO_PB4A_ERXDV
 (1u << 4Ë

	)

281 
	#PIO_PB8A_EMDC
 (1u << 8Ë

	)

282 
	#PIO_PB9A_EMDIO
 (1u << 9Ë

	)

283 
	#PIO_PB5A_ERX0
 (1u << 5Ë

	)

284 
	#PIO_PB6A_ERX1
 (1u << 6Ë

	)

285 
	#PIO_PC11B_ERX2
 (1u << 11Ë

	)

286 
	#PIO_PC12B_ERX3
 (1u << 12Ë

	)

287 
	#PIO_PC14B_ERXCK
 (1u << 14Ë

	)

288 
	#PIO_PB7A_ERXER
 (1u << 7Ë

	)

289 
	#PIO_PB2A_ETX0
 (1u << 2Ë

	)

290 
	#PIO_PB3A_ETX1
 (1u << 3Ë

	)

291 
	#PIO_PC15B_ETX2
 (1u << 15Ë

	)

292 
	#PIO_PC16B_ETX3
 (1u << 16Ë

	)

293 
	#PIO_PB0A_ETXCK
 (1u << 0Ë

	)

294 
	#PIO_PB1A_ETXEN
 (1u << 1Ë

	)

295 
	#PIO_PC17B_ETXER
 (1u << 17Ë

	)

297 
	#PIO_PA20A_MCCDA
 (1u << 20Ë

	)

298 
	#PIO_PE20B_MCCDB
 (1u << 20Ë

	)

299 
	#PIO_PA19A_MCCK
 (1u << 19Ë

	)

300 
	#PIO_PA21A_MCDA0
 (1u << 21Ë

	)

301 
	#PIO_PA22A_MCDA1
 (1u << 22Ë

	)

302 
	#PIO_PA23A_MCDA2
 (1u << 23Ë

	)

303 
	#PIO_PA24A_MCDA3
 (1u << 24Ë

	)

304 
	#PIO_PD0B_MCDA4
 (1u << 0Ë

	)

305 
	#PIO_PD1B_MCDA5
 (1u << 1Ë

	)

306 
	#PIO_PD2B_MCDA6
 (1u << 2Ë

	)

307 
	#PIO_PD3B_MCDA7
 (1u << 3Ë

	)

308 
	#PIO_PE22B_MCDB0
 (1u << 22Ë

	)

309 
	#PIO_PE24B_MCDB1
 (1u << 24Ë

	)

310 
	#PIO_PE26B_MCDB2
 (1u << 26Ë

	)

311 
	#PIO_PE27B_MCDB3
 (1u << 27Ë

	)

313 
	#PIO_PA1B_PCK0
 (1u << 1Ë

	)

314 
	#PIO_PB22B_PCK0
 (1u << 22Ë

	)

315 
	#PIO_PA24B_PCK1
 (1u << 24Ë

	)

316 
	#PIO_PA30B_PCK1
 (1u << 30Ë

	)

317 
	#PIO_PA28B_PCK2
 (1u << 28Ë

	)

318 
	#PIO_PA31B_PCK2
 (1u << 31Ë

	)

320 
	#PIO_PA5B_PWMFI0
 (1u << 5Ë

	)

321 
	#PIO_PA3B_PWMFI1
 (1u << 3Ë

	)

322 
	#PIO_PD6B_PWMFI2
 (1u << 6Ë

	)

323 
	#PIO_PA8B_PWMH0
 (1u << 8Ë

	)

324 
	#PIO_PB12B_PWMH0
 (1u << 12Ë

	)

325 
	#PIO_PC3B_PWMH0
 (1u << 3Ë

	)

326 
	#PIO_PE15A_PWMH0
 (1u << 15Ë

	)

327 
	#PIO_PA19B_PWMH1
 (1u << 19Ë

	)

328 
	#PIO_PB13B_PWMH1
 (1u << 13Ë

	)

329 
	#PIO_PC5B_PWMH1
 (1u << 5Ë

	)

330 
	#PIO_PE16A_PWMH1
 (1u << 16Ë

	)

331 
	#PIO_PA13B_PWMH2
 (1u << 13Ë

	)

332 
	#PIO_PB14B_PWMH2
 (1u << 14Ë

	)

333 
	#PIO_PC7B_PWMH2
 (1u << 7Ë

	)

334 
	#PIO_PA9B_PWMH3
 (1u << 9Ë

	)

335 
	#PIO_PB15B_PWMH3
 (1u << 15Ë

	)

336 
	#PIO_PC9B_PWMH3
 (1u << 9Ë

	)

337 
	#PIO_PF3A_PWMH3
 (1u << 3Ë

	)

338 
	#PIO_PC20B_PWMH4
 (1u << 20Ë

	)

339 
	#PIO_PE20A_PWMH4
 (1u << 20Ë

	)

340 
	#PIO_PC19B_PWMH5
 (1u << 19Ë

	)

341 
	#PIO_PE22A_PWMH5
 (1u << 22Ë

	)

342 
	#PIO_PC18B_PWMH6
 (1u << 18Ë

	)

343 
	#PIO_PE24A_PWMH6
 (1u << 24Ë

	)

344 
	#PIO_PE26A_PWMH7
 (1u << 26Ë

	)

345 
	#PIO_PA21B_PWML0
 (1u << 21Ë

	)

346 
	#PIO_PB16B_PWML0
 (1u << 16Ë

	)

347 
	#PIO_PC2B_PWML0
 (1u << 2Ë

	)

348 
	#PIO_PE18A_PWML0
 (1u << 18Ë

	)

349 
	#PIO_PA12B_PWML1
 (1u << 12Ë

	)

350 
	#PIO_PB17B_PWML1
 (1u << 17Ë

	)

351 
	#PIO_PC4B_PWML1
 (1u << 4Ë

	)

352 
	#PIO_PA20B_PWML2
 (1u << 20Ë

	)

353 
	#PIO_PB18B_PWML2
 (1u << 18Ë

	)

354 
	#PIO_PC6B_PWML2
 (1u << 6Ë

	)

355 
	#PIO_PE17A_PWML2
 (1u << 17Ë

	)

356 
	#PIO_PA0B_PWML3
 (1u << 0Ë

	)

357 
	#PIO_PB19B_PWML3
 (1u << 19Ë

	)

358 
	#PIO_PC8B_PWML3
 (1u << 8Ë

	)

359 
	#PIO_PB6B_PWML4
 (1u << 6Ë

	)

360 
	#PIO_PC21B_PWML4
 (1u << 21Ë

	)

361 
	#PIO_PE19A_PWML4
 (1u << 19Ë

	)

362 
	#PIO_PB7B_PWML5
 (1u << 7Ë

	)

363 
	#PIO_PC22B_PWML5
 (1u << 22Ë

	)

364 
	#PIO_PE21A_PWML5
 (1u << 21Ë

	)

365 
	#PIO_PB8B_PWML6
 (1u << 8Ë

	)

366 
	#PIO_PC23B_PWML6
 (1u << 23Ë

	)

367 
	#PIO_PE23A_PWML6
 (1u << 23Ë

	)

368 
	#PIO_PB9B_PWML7
 (1u << 9Ë

	)

369 
	#PIO_PC24B_PWML7
 (1u << 24Ë

	)

370 
	#PIO_PE25A_PWML7
 (1u << 25Ë

	)

372 
	#PIO_PA25A_SPI0_MISO
 (1u << 25Ë

	)

373 
	#PIO_PA26A_SPI0_MOSI
 (1u << 26Ë

	)

374 
	#PIO_PA28A_SPI0_NPCS0
 (1u << 28Ë

	)

375 
	#PIO_PA29A_SPI0_NPCS1
 (1u << 29Ë

	)

376 
	#PIO_PB20B_SPI0_NPCS1
 (1u << 20Ë

	)

377 
	#PIO_PA30A_SPI0_NPCS2
 (1u << 30Ë

	)

378 
	#PIO_PB21B_SPI0_NPCS2
 (1u << 21Ë

	)

379 
	#PIO_PA31A_SPI0_NPCS3
 (1u << 31Ë

	)

380 
	#PIO_PB23B_SPI0_NPCS3
 (1u << 23Ë

	)

381 
	#PIO_PA27A_SPI0_SPCK
 (1u << 27Ë

	)

383 
	#PIO_PB18A_RD
 (1u << 18Ë

	)

384 
	#PIO_PB17A_RF
 (1u << 17Ë

	)

385 
	#PIO_PB19A_RK
 (1u << 19Ë

	)

386 
	#PIO_PA16B_TD
 (1u << 16Ë

	)

387 
	#PIO_PA15B_TF
 (1u << 15Ë

	)

388 
	#PIO_PA14B_TK
 (1u << 14Ë

	)

390 
	#PIO_PB26B_TCLK0
 (1u << 26Ë

	)

391 
	#PIO_PA4A_TCLK1
 (1u << 4Ë

	)

392 
	#PIO_PA7A_TCLK2
 (1u << 7Ë

	)

393 
	#PIO_PB25B_TIOA0
 (1u << 25Ë

	)

394 
	#PIO_PA2A_TIOA1
 (1u << 2Ë

	)

395 
	#PIO_PA5A_TIOA2
 (1u << 5Ë

	)

396 
	#PIO_PB27B_TIOB0
 (1u << 27Ë

	)

397 
	#PIO_PA3A_TIOB1
 (1u << 3Ë

	)

398 
	#PIO_PA6A_TIOB2
 (1u << 6Ë

	)

400 
	#PIO_PA22B_TCLK3
 (1u << 22Ë

	)

401 
	#PIO_PA23B_TCLK4
 (1u << 23Ë

	)

402 
	#PIO_PB16A_TCLK5
 (1u << 16Ë

	)

403 
	#PIO_PB0B_TIOA3
 (1u << 0Ë

	)

404 
	#PIO_PE9A_TIOA3
 (1u << 9Ë

	)

405 
	#PIO_PB2B_TIOA4
 (1u << 2Ë

	)

406 
	#PIO_PE11A_TIOA4
 (1u << 11Ë

	)

407 
	#PIO_PB4B_TIOA5
 (1u << 4Ë

	)

408 
	#PIO_PE13A_TIOA5
 (1u << 13Ë

	)

409 
	#PIO_PB1B_TIOB3
 (1u << 1Ë

	)

410 
	#PIO_PE10A_TIOB3
 (1u << 10Ë

	)

411 
	#PIO_PB3B_TIOB4
 (1u << 3Ë

	)

412 
	#PIO_PE12A_TIOB4
 (1u << 12Ë

	)

413 
	#PIO_PB5B_TIOB5
 (1u << 5Ë

	)

414 
	#PIO_PE14A_TIOB5
 (1u << 14Ë

	)

416 
	#PIO_PC27B_TCLK6
 (1u << 27Ë

	)

417 
	#PIO_PC30B_TCLK7
 (1u << 30Ë

	)

418 
	#PIO_PD9B_TCLK8
 (1u << 9Ë

	)

419 
	#PIO_PC25B_TIOA6
 (1u << 25Ë

	)

420 
	#PIO_PC28B_TIOA7
 (1u << 28Ë

	)

421 
	#PIO_PD7B_TIOA8
 (1u << 7Ë

	)

422 
	#PIO_PC26B_TIOB6
 (1u << 26Ë

	)

423 
	#PIO_PC29B_TIOB7
 (1u << 29Ë

	)

424 
	#PIO_PD8B_TIOB8
 (1u << 8Ë

	)

426 
	#PIO_PA18A_TWCK0
 (1u << 18Ë

	)

427 
	#PIO_PA17A_TWD0
 (1u << 17Ë

	)

429 
	#PIO_PB13A_TWCK1
 (1u << 13Ë

	)

430 
	#PIO_PB12A_TWD1
 (1u << 12Ë

	)

432 
	#PIO_PA8A_URXD
 (1u << 8Ë

	)

433 
	#PIO_PA9A_UTXD
 (1u << 9Ë

	)

435 
	#PIO_PB11A_UOTGID
 (1u << 11Ë

	)

436 
	#PIO_PB10A_UOTGVBOF
 (1u << 10Ë

	)

438 
	#PIO_PB26A_CTS0
 (1u << 26Ë

	)

439 
	#PIO_PB25A_RTS0
 (1u << 25Ë

	)

440 
	#PIO_PA10A_RXD0
 (1u << 10Ë

	)

441 
	#PIO_PA17B_SCK0
 (1u << 17Ë

	)

442 
	#PIO_PA11A_TXD0
 (1u << 11Ë

	)

444 
	#PIO_PA15A_CTS1
 (1u << 15Ë

	)

445 
	#PIO_PA14A_RTS1
 (1u << 14Ë

	)

446 
	#PIO_PA12A_RXD1
 (1u << 12Ë

	)

447 
	#PIO_PA16A_SCK1
 (1u << 16Ë

	)

448 
	#PIO_PA13A_TXD1
 (1u << 13Ë

	)

450 
	#PIO_PB23A_CTS2
 (1u << 23Ë

	)

451 
	#PIO_PB22A_RTS2
 (1u << 22Ë

	)

452 
	#PIO_PB21A_RXD2
 (1u << 21Ë

	)

453 
	#PIO_PB24A_SCK2
 (1u << 24Ë

	)

454 
	#PIO_PB20A_TXD2
 (1u << 20Ë

	)

456 
	#PIO_PF4A_CTS3
 (1u << 4Ë

	)

457 
	#PIO_PF5A_RTS3
 (1u << 5Ë

	)

458 
	#PIO_PD5B_RXD3
 (1u << 5Ë

	)

459 
	#PIO_PE16B_SCK3
 (1u << 16Ë

	)

460 
	#PIO_PD4B_TXD3
 (1u << 4Ë

	)

462 
	#PIO_PA0_IDX
 0

	)

463 
	#PIO_PA1_IDX
 1

	)

464 
	#PIO_PA2_IDX
 2

	)

465 
	#PIO_PA3_IDX
 3

	)

466 
	#PIO_PA4_IDX
 4

	)

467 
	#PIO_PA5_IDX
 5

	)

468 
	#PIO_PA6_IDX
 6

	)

469 
	#PIO_PA7_IDX
 7

	)

470 
	#PIO_PA8_IDX
 8

	)

471 
	#PIO_PA9_IDX
 9

	)

472 
	#PIO_PA10_IDX
 10

	)

473 
	#PIO_PA11_IDX
 11

	)

474 
	#PIO_PA12_IDX
 12

	)

475 
	#PIO_PA13_IDX
 13

	)

476 
	#PIO_PA14_IDX
 14

	)

477 
	#PIO_PA15_IDX
 15

	)

478 
	#PIO_PA16_IDX
 16

	)

479 
	#PIO_PA17_IDX
 17

	)

480 
	#PIO_PA18_IDX
 18

	)

481 
	#PIO_PA19_IDX
 19

	)

482 
	#PIO_PA20_IDX
 20

	)

483 
	#PIO_PA21_IDX
 21

	)

484 
	#PIO_PA22_IDX
 22

	)

485 
	#PIO_PA23_IDX
 23

	)

486 
	#PIO_PA24_IDX
 24

	)

487 
	#PIO_PA25_IDX
 25

	)

488 
	#PIO_PA26_IDX
 26

	)

489 
	#PIO_PA27_IDX
 27

	)

490 
	#PIO_PA28_IDX
 28

	)

491 
	#PIO_PA29_IDX
 29

	)

492 
	#PIO_PB0_IDX
 32

	)

493 
	#PIO_PB1_IDX
 33

	)

494 
	#PIO_PB2_IDX
 34

	)

495 
	#PIO_PB3_IDX
 35

	)

496 
	#PIO_PB4_IDX
 36

	)

497 
	#PIO_PB5_IDX
 37

	)

498 
	#PIO_PB6_IDX
 38

	)

499 
	#PIO_PB7_IDX
 39

	)

500 
	#PIO_PB8_IDX
 40

	)

501 
	#PIO_PB9_IDX
 41

	)

502 
	#PIO_PB10_IDX
 42

	)

503 
	#PIO_PB11_IDX
 43

	)

504 
	#PIO_PB12_IDX
 44

	)

505 
	#PIO_PB13_IDX
 45

	)

506 
	#PIO_PB14_IDX
 46

	)

507 
	#PIO_PB15_IDX
 47

	)

508 
	#PIO_PB16_IDX
 48

	)

509 
	#PIO_PB17_IDX
 49

	)

510 
	#PIO_PB18_IDX
 50

	)

511 
	#PIO_PB19_IDX
 51

	)

512 
	#PIO_PB20_IDX
 52

	)

513 
	#PIO_PB21_IDX
 53

	)

514 
	#PIO_PB22_IDX
 54

	)

515 
	#PIO_PB23_IDX
 55

	)

516 
	#PIO_PB24_IDX
 56

	)

517 
	#PIO_PB25_IDX
 57

	)

518 
	#PIO_PB26_IDX
 58

	)

519 
	#PIO_PB27_IDX
 59

	)

520 
	#PIO_PB28_IDX
 60

	)

521 
	#PIO_PB29_IDX
 61

	)

522 
	#PIO_PB30_IDX
 62

	)

523 
	#PIO_PB31_IDX
 63

	)

524 
	#PIO_PC0_IDX
 64

	)

525 
	#PIO_PC1_IDX
 65

	)

526 
	#PIO_PC2_IDX
 66

	)

527 
	#PIO_PC3_IDX
 67

	)

528 
	#PIO_PC4_IDX
 68

	)

529 
	#PIO_PC5_IDX
 69

	)

530 
	#PIO_PC6_IDX
 70

	)

531 
	#PIO_PC7_IDX
 71

	)

532 
	#PIO_PC8_IDX
 72

	)

533 
	#PIO_PC9_IDX
 73

	)

534 
	#PIO_PC10_IDX
 74

	)

535 
	#PIO_PC11_IDX
 75

	)

536 
	#PIO_PC12_IDX
 76

	)

537 
	#PIO_PC13_IDX
 77

	)

538 
	#PIO_PC14_IDX
 78

	)

539 
	#PIO_PC15_IDX
 79

	)

540 
	#PIO_PC16_IDX
 80

	)

541 
	#PIO_PC17_IDX
 81

	)

542 
	#PIO_PC18_IDX
 82

	)

543 
	#PIO_PC19_IDX
 83

	)

544 
	#PIO_PC20_IDX
 84

	)

545 
	#PIO_PC21_IDX
 85

	)

546 
	#PIO_PC22_IDX
 86

	)

547 
	#PIO_PC23_IDX
 87

	)

548 
	#PIO_PC24_IDX
 88

	)

549 
	#PIO_PC25_IDX
 89

	)

550 
	#PIO_PC26_IDX
 90

	)

551 
	#PIO_PC27_IDX
 91

	)

552 
	#PIO_PC28_IDX
 92

	)

553 
	#PIO_PC29_IDX
 93

	)

554 
	#PIO_PC30_IDX
 94

	)

555 
	#PIO_PD0_IDX
 96

	)

556 
	#PIO_PD1_IDX
 97

	)

557 
	#PIO_PD2_IDX
 98

	)

558 
	#PIO_PD3_IDX
 99

	)

559 
	#PIO_PD4_IDX
 100

	)

560 
	#PIO_PD5_IDX
 101

	)

561 
	#PIO_PD6_IDX
 102

	)

562 
	#PIO_PD7_IDX
 103

	)

563 
	#PIO_PD8_IDX
 104

	)

564 
	#PIO_PD9_IDX
 105

	)

565 
	#PIO_PD10_IDX
 106

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/sam3x8e.h

45 #i‚de‡
_SAM3X8E_


46 
	#_SAM3X8E_


	)

57 #ifde‡
__˝lu•lus


61 #i‡!(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

62 
	~<°döt.h
>

63 #i‚de‡
__˝lu•lus


64 vﬁ©ûêc⁄° 
	tuöt32_t
 
	tRoReg
;

66 vﬁ©ûê
	tuöt32_t
 
	tRoReg
;

68 vﬁ©ûê
	tuöt32_t
 
	tWoReg
;

69 vﬁ©ûê
	tuöt32_t
 
	tRwReg
;

79 
	eIRQn


82 
	gN⁄MaskabÀI¡_IRQn
 = -14,

83 
	gMem‹yM™agemít_IRQn
 = -12,

84 
	gBusFau…_IRQn
 = -11,

85 
	gUßgeFau…_IRQn
 = -10,

86 
	gSVCÆl_IRQn
 = -5,

87 
	gDebugM⁄ô‹_IRQn
 = -4,

88 
	gPídSV_IRQn
 = -2,

89 
	gSysTick_IRQn
 = -1,

92 
	gSUPC_IRQn
 = 0,

93 
	gRSTC_IRQn
 = 1,

94 
	gRTC_IRQn
 = 2,

95 
	gRTT_IRQn
 = 3,

96 
	gWDT_IRQn
 = 4,

97 
	gPMC_IRQn
 = 5,

98 
	gEFC0_IRQn
 = 6,

99 
	gEFC1_IRQn
 = 7,

100 
	gUART_IRQn
 = 8,

101 
	gSMC_IRQn
 = 9,

102 
	gPIOA_IRQn
 = 11,

103 
	gPIOB_IRQn
 = 12,

104 
	gPIOC_IRQn
 = 13,

105 
	gPIOD_IRQn
 = 14,

106 
	gUSART0_IRQn
 = 17,

107 
	gUSART1_IRQn
 = 18,

108 
	gUSART2_IRQn
 = 19,

109 
	gUSART3_IRQn
 = 20,

110 
	gHSMCI_IRQn
 = 21,

111 
	gTWI0_IRQn
 = 22,

112 
	gTWI1_IRQn
 = 23,

113 
	gSPI0_IRQn
 = 24,

114 
	gSSC_IRQn
 = 26,

115 
	gTC0_IRQn
 = 27,

116 
	gTC1_IRQn
 = 28,

117 
	gTC2_IRQn
 = 29,

118 
	gTC3_IRQn
 = 30,

119 
	gTC4_IRQn
 = 31,

120 
	gTC5_IRQn
 = 32,

121 
	gTC6_IRQn
 = 33,

122 
	gTC7_IRQn
 = 34,

123 
	gTC8_IRQn
 = 35,

124 
	gPWM_IRQn
 = 36,

125 
	gADC_IRQn
 = 37,

126 
	gDACC_IRQn
 = 38,

127 
	gDMAC_IRQn
 = 39,

128 
	gUOTGHS_IRQn
 = 40,

129 
	gTRNG_IRQn
 = 41,

130 
	gEMAC_IRQn
 = 42,

131 
	gCAN0_IRQn
 = 43,

132 
	gCAN1_IRQn
 = 44

133 } 
	tIRQn_Ty≥
;

135 
	s_Devi˚Ve˘‹s


138 * 
	gpvSèck
;

141 * 
	gp‚Re£t_H™dÀr
;

142 * 
	gp‚NMI_H™dÀr
;

143 * 
	gp‚H¨dFau…_H™dÀr
;

144 * 
	gp‚MemM™age_H™dÀr
;

145 * 
	gp‚BusFau…_H™dÀr
;

146 * 
	gp‚UßgeFau…_H™dÀr
;

147 * 
	gp‚Re£rved1_H™dÀr
;

148 * 
	gp‚Re£rved2_H™dÀr
;

149 * 
	gp‚Re£rved3_H™dÀr
;

150 * 
	gp‚Re£rved4_H™dÀr
;

151 * 
	gp‚SVC_H™dÀr
;

152 * 
	gp‚DebugM⁄_H™dÀr
;

153 * 
	gp‚Re£rved5_H™dÀr
;

154 * 
	gp‚PídSV_H™dÀr
;

155 * 
	gp‚SysTick_H™dÀr
;

158 * 
	gp‚SUPC_H™dÀr
;

159 * 
	gp‚RSTC_H™dÀr
;

160 * 
	gp‚RTC_H™dÀr
;

161 * 
	gp‚RTT_H™dÀr
;

162 * 
	gp‚WDT_H™dÀr
;

163 * 
	gp‚PMC_H™dÀr
;

164 * 
	gp‚EFC0_H™dÀr
;

165 * 
	gp‚EFC1_H™dÀr
;

166 * 
	gp‚UART_H™dÀr
;

167 * 
	gp‚SMC_H™dÀr
;

168 * 
	gpvRe£rved10
;

169 * 
	gp‚PIOA_H™dÀr
;

170 * 
	gp‚PIOB_H™dÀr
;

171 * 
	gp‚PIOC_H™dÀr
;

172 * 
	gp‚PIOD_H™dÀr
;

173 * 
	gpvRe£rved15
;

174 * 
	gpvRe£rved16
;

175 * 
	gp‚USART0_H™dÀr
;

176 * 
	gp‚USART1_H™dÀr
;

177 * 
	gp‚USART2_H™dÀr
;

178 * 
	gp‚USART3_H™dÀr
;

179 * 
	gp‚HSMCI_H™dÀr
;

180 * 
	gp‚TWI0_H™dÀr
;

181 * 
	gp‚TWI1_H™dÀr
;

182 * 
	gp‚SPI0_H™dÀr
;

183 * 
	gpvRe£rved25
;

184 * 
	gp‚SSC_H™dÀr
;

185 * 
	gp‚TC0_H™dÀr
;

186 * 
	gp‚TC1_H™dÀr
;

187 * 
	gp‚TC2_H™dÀr
;

188 * 
	gp‚TC3_H™dÀr
;

189 * 
	gp‚TC4_H™dÀr
;

190 * 
	gp‚TC5_H™dÀr
;

191 * 
	gp‚TC6_H™dÀr
;

192 * 
	gp‚TC7_H™dÀr
;

193 * 
	gp‚TC8_H™dÀr
;

194 * 
	gp‚PWM_H™dÀr
;

195 * 
	gp‚ADC_H™dÀr
;

196 * 
	gp‚DACC_H™dÀr
;

197 * 
	gp‚DMAC_H™dÀr
;

198 * 
	gp‚UOTGHS_H™dÀr
;

199 * 
	gp‚TRNG_H™dÀr
;

200 * 
	gp‚EMAC_H™dÀr
;

201 * 
	gp‚CAN0_H™dÀr
;

202 * 
	gp‚CAN1_H™dÀr
;

203 } 
	tDevi˚Ve˘‹s
;

206 
Re£t_H™dÀr
 ( );

207 
NMI_H™dÀr
 ( );

208 
H¨dFau…_H™dÀr
 ( );

209 
MemM™age_H™dÀr
 ( );

210 
BusFau…_H™dÀr
 ( );

211 
UßgeFau…_H™dÀr
 ( );

212 
SVC_H™dÀr
 ( );

213 
DebugM⁄_H™dÀr
 ( );

214 
PídSV_H™dÀr
 ( );

215 
SysTick_H™dÀr
 ( );

218 
ADC_H™dÀr
 ( );

219 
CAN0_H™dÀr
 ( );

220 
CAN1_H™dÀr
 ( );

221 
DACC_H™dÀr
 ( );

222 
DMAC_H™dÀr
 ( );

223 
EFC0_H™dÀr
 ( );

224 
EFC1_H™dÀr
 ( );

225 
EMAC_H™dÀr
 ( );

226 
HSMCI_H™dÀr
 ( );

227 
PIOA_H™dÀr
 ( );

228 
PIOB_H™dÀr
 ( );

229 
PIOC_H™dÀr
 ( );

230 
PIOD_H™dÀr
 ( );

231 
PMC_H™dÀr
 ( );

232 
PWM_H™dÀr
 ( );

233 
RSTC_H™dÀr
 ( );

234 
RTC_H™dÀr
 ( );

235 
RTT_H™dÀr
 ( );

236 
SMC_H™dÀr
 ( );

237 
SPI0_H™dÀr
 ( );

238 
SSC_H™dÀr
 ( );

239 
SUPC_H™dÀr
 ( );

240 
TC0_H™dÀr
 ( );

241 
TC1_H™dÀr
 ( );

242 
TC2_H™dÀr
 ( );

243 
TC3_H™dÀr
 ( );

244 
TC4_H™dÀr
 ( );

245 
TC5_H™dÀr
 ( );

246 
TC6_H™dÀr
 ( );

247 
TC7_H™dÀr
 ( );

248 
TC8_H™dÀr
 ( );

249 
TRNG_H™dÀr
 ( );

250 
TWI0_H™dÀr
 ( );

251 
TWI1_H™dÀr
 ( );

252 
UART_H™dÀr
 ( );

253 
UOTGHS_H™dÀr
 ( );

254 
USART0_H™dÀr
 ( );

255 
USART1_H™dÀr
 ( );

256 
USART2_H™dÀr
 ( );

257 
USART3_H™dÀr
 ( );

258 
WDT_H™dÀr
 ( );

264 
	#__CM3_REV
 0x0200

	)

265 
	#__MPU_PRESENT
 1

	)

266 
	#__NVIC_PRIO_BITS
 4

	)

267 
	#__Víd‹_SysTickC⁄fig
 0

	)

273 
	~<c‹e_cm3.h
>

274 #i‡!
deföed
 
DONT_USE_CMSIS_INIT


275 
	~"sy°em_ßm3x.h
"

286 
	~"comp⁄ít/comp⁄ít_adc.h
"

287 
	~"comp⁄ít/comp⁄ít_ˇn.h
"

288 
	~"comp⁄ít/comp⁄ít_chùid.h
"

289 
	~"comp⁄ít/comp⁄ít_dacc.h
"

290 
	~"comp⁄ít/comp⁄ít_dmac.h
"

291 
	~"comp⁄ít/comp⁄ít_efc.h
"

292 
	~"comp⁄ít/comp⁄ít_emac.h
"

293 
	~"comp⁄ít/comp⁄ít_gpbr.h
"

294 
	~"comp⁄ít/comp⁄ít_hsmci.h
"

295 
	~"comp⁄ít/comp⁄ít_m©rix.h
"

296 
	~"comp⁄ít/comp⁄ít_pdc.h
"

297 
	~"comp⁄ít/comp⁄ít_pio.h
"

298 
	~"comp⁄ít/comp⁄ít_pmc.h
"

299 
	~"comp⁄ít/comp⁄ít_pwm.h
"

300 
	~"comp⁄ít/comp⁄ít_r°c.h
"

301 
	~"comp⁄ít/comp⁄ít_πc.h
"

302 
	~"comp⁄ít/comp⁄ít_πt.h
"

303 
	~"comp⁄ít/comp⁄ít_smc.h
"

304 
	~"comp⁄ít/comp⁄ít_•i.h
"

305 
	~"comp⁄ít/comp⁄ít_ssc.h
"

306 
	~"comp⁄ít/comp⁄ít_supc.h
"

307 
	~"comp⁄ít/comp⁄ít_tc.h
"

308 
	~"comp⁄ít/comp⁄ít_ång.h
"

309 
	~"comp⁄ít/comp⁄ít_twi.h
"

310 
	~"comp⁄ít/comp⁄ít_u¨t.h
"

311 
	~"comp⁄ít/comp⁄ít_uŸghs.h
"

312 
	~"comp⁄ít/comp⁄ít_ußπ.h
"

313 
	~"comp⁄ít/comp⁄ít_wdt.h
"

322 
	~"ö°™˚/ö°™˚_hsmci.h
"

323 
	~"ö°™˚/ö°™˚_ssc.h
"

324 
	~"ö°™˚/ö°™˚_•i0.h
"

325 
	~"ö°™˚/ö°™˚_tc0.h
"

326 
	~"ö°™˚/ö°™˚_tc1.h
"

327 
	~"ö°™˚/ö°™˚_tc2.h
"

328 
	~"ö°™˚/ö°™˚_twi0.h
"

329 
	~"ö°™˚/ö°™˚_twi1.h
"

330 
	~"ö°™˚/ö°™˚_pwm.h
"

331 
	~"ö°™˚/ö°™˚_ußπ0.h
"

332 
	~"ö°™˚/ö°™˚_ußπ1.h
"

333 
	~"ö°™˚/ö°™˚_ußπ2.h
"

334 
	~"ö°™˚/ö°™˚_ußπ3.h
"

335 
	~"ö°™˚/ö°™˚_uŸghs.h
"

336 
	~"ö°™˚/ö°™˚_emac.h
"

337 
	~"ö°™˚/ö°™˚_ˇn0.h
"

338 
	~"ö°™˚/ö°™˚_ˇn1.h
"

339 
	~"ö°™˚/ö°™˚_ång.h
"

340 
	~"ö°™˚/ö°™˚_adc.h
"

341 
	~"ö°™˚/ö°™˚_dmac.h
"

342 
	~"ö°™˚/ö°™˚_dacc.h
"

343 
	~"ö°™˚/ö°™˚_smc.h
"

344 
	~"ö°™˚/ö°™˚_m©rix.h
"

345 
	~"ö°™˚/ö°™˚_pmc.h
"

346 
	~"ö°™˚/ö°™˚_u¨t.h
"

347 
	~"ö°™˚/ö°™˚_chùid.h
"

348 
	~"ö°™˚/ö°™˚_efc0.h
"

349 
	~"ö°™˚/ö°™˚_efc1.h
"

350 
	~"ö°™˚/ö°™˚_piﬂ.h
"

351 
	~"ö°™˚/ö°™˚_piob.h
"

352 
	~"ö°™˚/ö°™˚_pioc.h
"

353 
	~"ö°™˚/ö°™˚_piod.h
"

354 
	~"ö°™˚/ö°™˚_r°c.h
"

355 
	~"ö°™˚/ö°™˚_supc.h
"

356 
	~"ö°™˚/ö°™˚_πt.h
"

357 
	~"ö°™˚/ö°™˚_wdt.h
"

358 
	~"ö°™˚/ö°™˚_πc.h
"

359 
	~"ö°™˚/ö°™˚_gpbr.h
"

368 
	#ID_SUPC
 ( 0Ë

	)

369 
	#ID_RSTC
 ( 1Ë

	)

370 
	#ID_RTC
 ( 2Ë

	)

371 
	#ID_RTT
 ( 3Ë

	)

372 
	#ID_WDT
 ( 4Ë

	)

373 
	#ID_PMC
 ( 5Ë

	)

374 
	#ID_EFC0
 ( 6Ë

	)

375 
	#ID_EFC1
 ( 7Ë

	)

376 
	#ID_UART
 ( 8Ë

	)

377 
	#ID_SMC
 ( 9Ë

	)

378 
	#ID_PIOA
 (11Ë

	)

379 
	#ID_PIOB
 (12Ë

	)

380 
	#ID_PIOC
 (13Ë

	)

381 
	#ID_PIOD
 (14Ë

	)

382 
	#ID_USART0
 (17Ë

	)

383 
	#ID_USART1
 (18Ë

	)

384 
	#ID_USART2
 (19Ë

	)

385 
	#ID_USART3
 (20Ë

	)

386 
	#ID_HSMCI
 (21Ë

	)

387 
	#ID_TWI0
 (22Ë

	)

388 
	#ID_TWI1
 (23Ë

	)

389 
	#ID_SPI0
 (24Ë

	)

390 
	#ID_SSC
 (26Ë

	)

391 
	#ID_TC0
 (27Ë

	)

392 
	#ID_TC1
 (28Ë

	)

393 
	#ID_TC2
 (29Ë

	)

394 
	#ID_TC3
 (30Ë

	)

395 
	#ID_TC4
 (31Ë

	)

396 
	#ID_TC5
 (32Ë

	)

397 
	#ID_TC6
 (33Ë

	)

398 
	#ID_TC7
 (34Ë

	)

399 
	#ID_TC8
 (35Ë

	)

400 
	#ID_PWM
 (36Ë

	)

401 
	#ID_ADC
 (37Ë

	)

402 
	#ID_DACC
 (38Ë

	)

403 
	#ID_DMAC
 (39Ë

	)

404 
	#ID_UOTGHS
 (40Ë

	)

405 
	#ID_TRNG
 (41Ë

	)

406 
	#ID_EMAC
 (42Ë

	)

407 
	#ID_CAN0
 (43Ë

	)

408 
	#ID_CAN1
 (44Ë

	)

417 #i‡(
deföed
(
__ASSEMBLY__
Ë|| deföed(
__IAR_SYSTEMS_ASM__
))

418 
	#HSMCI
 (0x40000000UË

	)

419 
	#SSC
 (0x40004000UË

	)

420 
	#SPI0
 (0x40008000UË

	)

421 
	#TC0
 (0x40080000UË

	)

422 
	#TC1
 (0x40084000UË

	)

423 
	#TC2
 (0x40088000UË

	)

424 
	#TWI0
 (0x4008C000UË

	)

425 
	#PDC_TWI0
 (0x4008C100UË

	)

426 
	#TWI1
 (0x40090000UË

	)

427 
	#PDC_TWI1
 (0x40090100UË

	)

428 
	#PWM
 (0x40094000UË

	)

429 
	#PDC_PWM
 (0x40094100UË

	)

430 
	#USART0
 (0x40098000UË

	)

431 
	#PDC_USART0
 (0x40098100UË

	)

432 
	#USART1
 (0x4009C000UË

	)

433 
	#PDC_USART1
 (0x4009C100UË

	)

434 
	#USART2
 (0x400A0000UË

	)

435 
	#PDC_USART2
 (0x400A0100UË

	)

436 
	#USART3
 (0x400A4000UË

	)

437 
	#PDC_USART3
 (0x400A4100UË

	)

438 
	#UOTGHS
 (0x400AC000UË

	)

439 
	#EMAC
 (0x400B0000UË

	)

440 
	#CAN0
 (0x400B4000UË

	)

441 
	#CAN1
 (0x400B8000UË

	)

442 
	#TRNG
 (0x400BC000UË

	)

443 
	#ADC
 (0x400C0000UË

	)

444 
	#PDC_ADC
 (0x400C0100UË

	)

445 
	#DMAC
 (0x400C4000UË

	)

446 
	#DACC
 (0x400C8000UË

	)

447 
	#PDC_DACC
 (0x400C8100UË

	)

448 
	#SMC
 (0x400E0000UË

	)

449 
	#MATRIX
 (0x400E0400UË

	)

450 
	#PMC
 (0x400E0600UË

	)

451 
	#UART
 (0x400E0800UË

	)

452 
	#PDC_UART
 (0x400E0900UË

	)

453 
	#CHIPID
 (0x400E0940UË

	)

454 
	#EFC0
 (0x400E0A00UË

	)

455 
	#EFC1
 (0x400E0C00UË

	)

456 
	#PIOA
 (0x400E0E00UË

	)

457 
	#PIOB
 (0x400E1000UË

	)

458 
	#PIOC
 (0x400E1200UË

	)

459 
	#PIOD
 (0x400E1400UË

	)

460 
	#RSTC
 (0x400E1A00UË

	)

461 
	#SUPC
 (0x400E1A10UË

	)

462 
	#RTT
 (0x400E1A30UË

	)

463 
	#WDT
 (0x400E1A50UË

	)

464 
	#RTC
 (0x400E1A60UË

	)

465 
	#GPBR
 (0x400E1A90UË

	)

467 
	#HSMCI
 ((
Hsmci
 *)0x40000000UË

	)

468 
	#SSC
 ((
Ssc
 *)0x40004000UË

	)

469 
	#SPI0
 ((
Spi
 *)0x40008000UË

	)

470 
	#TC0
 ((
Tc
 *)0x40080000UË

	)

471 
	#TC1
 ((
Tc
 *)0x40084000UË

	)

472 
	#TC2
 ((
Tc
 *)0x40088000UË

	)

473 
	#TWI0
 ((
Twi
 *)0x4008C000UË

	)

474 
	#PDC_TWI0
 ((
Pdc
 *)0x4008C100UË

	)

475 
	#TWI1
 ((
Twi
 *)0x40090000UË

	)

476 
	#PDC_TWI1
 ((
Pdc
 *)0x40090100UË

	)

477 
	#PWM
 ((
Pwm
 *)0x40094000UË

	)

478 
	#PDC_PWM
 ((
Pdc
 *)0x40094100UË

	)

479 
	#USART0
 ((
Ußπ
 *)0x40098000UË

	)

480 
	#PDC_USART0
 ((
Pdc
 *)0x40098100UË

	)

481 
	#USART1
 ((
Ußπ
 *)0x4009C000UË

	)

482 
	#PDC_USART1
 ((
Pdc
 *)0x4009C100UË

	)

483 
	#USART2
 ((
Ußπ
 *)0x400A0000UË

	)

484 
	#PDC_USART2
 ((
Pdc
 *)0x400A0100UË

	)

485 
	#USART3
 ((
Ußπ
 *)0x400A4000UË

	)

486 
	#PDC_USART3
 ((
Pdc
 *)0x400A4100UË

	)

487 
	#UOTGHS
 ((
UŸghs
 *)0x400AC000UË

	)

488 
	#EMAC
 ((
Emac
 *)0x400B0000UË

	)

489 
	#CAN0
 ((
C™
 *)0x400B4000UË

	)

490 
	#CAN1
 ((
C™
 *)0x400B8000UË

	)

491 
	#TRNG
 ((
T∫g
 *)0x400BC000UË

	)

492 
	#ADC
 ((
Adc
 *)0x400C0000UË

	)

493 
	#PDC_ADC
 ((
Pdc
 *)0x400C0100UË

	)

494 
	#DMAC
 ((
Dmac
 *)0x400C4000UË

	)

495 
	#DACC
 ((
Dacc
 *)0x400C8000UË

	)

496 
	#PDC_DACC
 ((
Pdc
 *)0x400C8100UË

	)

497 
	#SMC
 ((
Smc
 *)0x400E0000UË

	)

498 
	#MATRIX
 ((
M©rix
 *)0x400E0400UË

	)

499 
	#PMC
 ((
Pmc
 *)0x400E0600UË

	)

500 
	#UART
 ((
U¨t
 *)0x400E0800UË

	)

501 
	#PDC_UART
 ((
Pdc
 *)0x400E0900UË

	)

502 
	#CHIPID
 ((
Chùid
 *)0x400E0940UË

	)

503 
	#EFC0
 ((
Efc
 *)0x400E0A00UË

	)

504 
	#EFC1
 ((
Efc
 *)0x400E0C00UË

	)

505 
	#PIOA
 ((
Pio
 *)0x400E0E00UË

	)

506 
	#PIOB
 ((
Pio
 *)0x400E1000UË

	)

507 
	#PIOC
 ((
Pio
 *)0x400E1200UË

	)

508 
	#PIOD
 ((
Pio
 *)0x400E1400UË

	)

509 
	#RSTC
 ((
R°c
 *)0x400E1A00UË

	)

510 
	#SUPC
 ((
Supc
 *)0x400E1A10UË

	)

511 
	#RTT
 ((
Râ
 *)0x400E1A30UË

	)

512 
	#WDT
 ((
Wdt
 *)0x400E1A50UË

	)

513 
	#RTC
 ((
Rtc
 *)0x400E1A60UË

	)

514 
	#GPBR
 ((
Gpbr
 *)0x400E1A90UË

	)

524 
	~"pio/pio_ßm3x8e.h
"

531 
	#IFLASH0_SIZE
 (0x40000u)

	)

532 
	#IFLASH0_PAGE_SIZE
 (256u)

	)

533 
	#IFLASH0_LOCK_REGION_SIZE
 (16384u)

	)

534 
	#IFLASH0_NB_OF_PAGES
 (1024u)

	)

535 
	#IFLASH1_SIZE
 (0x40000u)

	)

536 
	#IFLASH1_PAGE_SIZE
 (256u)

	)

537 
	#IFLASH1_LOCK_REGION_SIZE
 (16384u)

	)

538 
	#IFLASH1_NB_OF_PAGES
 (1024u)

	)

539 
	#IRAM0_SIZE
 (0x10000u)

	)

540 
	#IRAM1_SIZE
 (0x8000u)

	)

541 
	#NFCRAM_SIZE
 (0x1000u)

	)

542 
	#IFLASH_SIZE
 (
IFLASH0_SIZE
+
IFLASH1_SIZE
)

	)

543 
	#IRAM_SIZE
 (
IRAM0_SIZE
+
IRAM1_SIZE
)

	)

545 
	#IFLASH0_ADDR
 (0x00080000uË

	)

546 #i‡
deföed
 
IFLASH0_SIZE


547 
	#IFLASH1_ADDR
 (
IFLASH0_ADDR
+
IFLASH0_SIZE
Ë

	)

549 
	#IROM_ADDR
 (0x00100000uË

	)

550 
	#IRAM0_ADDR
 (0x20000000uË

	)

551 
	#IRAM1_ADDR
 (0x20080000uË

	)

552 
	#NFC_RAM_ADDR
 (0x20100000uË

	)

553 
	#UOTGHS_RAM_ADDR
 (0x20180000uË

	)

554 
	#EBI_CS0_ADDR
 (0x60000000uË

	)

555 
	#EBI_CS1_ADDR
 (0x61000000uË

	)

556 
	#EBI_CS2_ADDR
 (0x62000000uË

	)

557 
	#EBI_CS3_ADDR
 (0x63000000uË

	)

558 
	#EBI_CS4_ADDR
 (0x64000000uË

	)

559 
	#EBI_CS5_ADDR
 (0x65000000uË

	)

560 
	#EBI_CS6_ADDR
 (0x66000000uË

	)

561 
	#EBI_CS7_ADDR
 (0x67000000uË

	)

568 
	#CHIP_FREQ_SLCK_RC_MIN
 (20000UL)

	)

569 
	#CHIP_FREQ_SLCK_RC
 (32000UL)

	)

570 
	#CHIP_FREQ_SLCK_RC_MAX
 (44000UL)

	)

571 
	#CHIP_FREQ_MAINCK_RC_4MHZ
 (4000000UL)

	)

572 
	#CHIP_FREQ_MAINCK_RC_8MHZ
 (8000000UL)

	)

573 
	#CHIP_FREQ_MAINCK_RC_12MHZ
 (12000000UL)

	)

574 
	#CHIP_FREQ_CPU_MAX
 (84000000UL)

	)

575 
	#CHIP_FREQ_XTAL_32K
 (32768UL)

	)

576 
	#CHIP_FREQ_XTAL_12M
 (12000000UL)

	)

579 
	#CHIP_FLASH_WRITE_WAIT_STATE
 (6U)

	)

582 
	#CHIP_FREQ_FWS_0
 (19000000ULË

	)

583 
	#CHIP_FREQ_FWS_1
 (50000000ULË

	)

584 
	#CHIP_FREQ_FWS_2
 (64000000ULË

	)

585 
	#CHIP_FREQ_FWS_3
 (80000000ULË

	)

586 
	#CHIP_FREQ_FWS_4
 (90000000ULË

	)

588 #ifde‡
__˝lu•lus


	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/sam3xa.h

45 #i‚de‡
_SAM3XA_


46 
	#_SAM3XA_


	)

48 #i‡
deföed
 
__SAM3A4C__


49 
	~"ßm3a4c.h
"

50 #ñi‡
deföed
 
__SAM3A8C__


51 
	~"ßm3a8c.h
"

52 #ñi‡
deföed
 
__SAM3X4C__


53 
	~"ßm3x4c.h
"

54 #ñi‡
deföed
 
__SAM3X4E__


55 
	~"ßm3x4e.h
"

56 #ñi‡
deföed
 
__SAM3X8C__


57 
	~"ßm3x8c.h
"

58 #ñi‡
deföed
 
__SAM3X8E__


59 
	~"ßm3x8e.h
"

60 #ñi‡
deföed
 
__SAM3X8H__


61 
	~"ßm3x8h.h
"

63 #îr‹ 
Libøry
 
d€s
 
nŸ
 
suµ‹t
 
the
 
•ecifõd
 
devi˚
.

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/source/templates/exceptions.c

57 
	~"ex˚±i⁄s.h
"

61 #ifde‡
__˝lu•lus


67 #ifde‡
__GNUC__


69 
	$NMI_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

70 
	$H¨dFau…_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

71 
	$MemM™age_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

72 
	$BusFau…_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

73 
	$UßgeFau…_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

74 
	$SVC_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

75 
	$DebugM⁄_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

76 
	$PídSV_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

77 
	$SysTick_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

80 
	$SUPC_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

81 
	$RSTC_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

82 
	$RTC_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

83 
	$RTT_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

84 
	$WDT_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

85 
	$PMC_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

86 
	$EFC0_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

87 
	$EFC1_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

88 
	$UART_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

89 #ifde‡
_SAM3XA_SMC_INSTANCE_


90 
	$SMC_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

92 #ifde‡
_SAM3XA_SDRAMC_INSTANCE_


93 
	$SDRAMC_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

95 
	$PIOA_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

96 
	$PIOB_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

97 #ifde‡
_SAM3XA_PIOC_INSTANCE_


98 
	$PIOC_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

100 #ifde‡
_SAM3XA_PIOD_INSTANCE_


101 
	$PIOD_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

103 #ifde‡
_SAM3XA_PIOE_INSTANCE_


104 
	$PIOE_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

106 #ifde‡
_SAM3XA_PIOF_INSTANCE_


107 
	$PIOF_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

109 
	$USART0_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

110 
	$USART1_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

111 
	$USART2_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

112 #ifde‡
_SAM3XA_USART3_INSTANCE_


113 
	$USART3_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

115 
	$HSMCI_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

116 
	$TWI0_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

117 
	$TWI1_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

118 
	$SPI0_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

119 #ifde‡
_SAM3XA_SPI1_INSTANCE_


120 
	$SPI1_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

122 
	$SSC_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

123 
	$TC0_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

124 
	$TC1_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

125 
	$TC2_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

126 
	$TC3_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

127 
	$TC4_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

128 
	$TC5_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

129 #ifde‡
_SAM3XA_TC2_INSTANCE_


130 
	$TC6_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

131 
	$TC7_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

132 
	$TC8_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

134 
	$PWM_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

135 
	$ADC_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

136 
	$DACC_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

137 
	$DMAC_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

138 
	$UOTGHS_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

139 
	$TRNG_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

140 #ifde‡
_SAM3XA_EMAC_INSTANCE_


141 
	$EMAC_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

143 
	$CAN0_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

144 
	$CAN1_H™dÀr
 ( Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
("Dummy_Handler")));

147 #ifde‡
__ICCARM__


149 #¥agm®
wók
 
NMI_H™dÀr
=
Dummy_H™dÀr


150 #¥agm®
wók
 
H¨dFau…_H™dÀr
=
Dummy_H™dÀr


151 #¥agm®
wók
 
MemM™age_H™dÀr
=
Dummy_H™dÀr


152 #¥agm®
wók
 
BusFau…_H™dÀr
=
Dummy_H™dÀr


153 #¥agm®
wók
 
UßgeFau…_H™dÀr
=
Dummy_H™dÀr


154 #¥agm®
wók
 
SVC_H™dÀr
=
Dummy_H™dÀr


155 #¥agm®
wók
 
DebugM⁄_H™dÀr
=
Dummy_H™dÀr


156 #¥agm®
wók
 
PídSV_H™dÀr
=
Dummy_H™dÀr


157 #¥agm®
wók
 
SysTick_H™dÀr
=
Dummy_H™dÀr


160 #¥agm®
wók
 
SUPC_H™dÀr
=
Dummy_H™dÀr


161 #¥agm®
wók
 
RSTC_H™dÀr
=
Dummy_H™dÀr


162 #¥agm®
wók
 
RTC_H™dÀr
=
Dummy_H™dÀr


163 #¥agm®
wók
 
RTT_H™dÀr
=
Dummy_H™dÀr


164 #¥agm®
wók
 
WDT_H™dÀr
=
Dummy_H™dÀr


165 #¥agm®
wók
 
PMC_H™dÀr
=
Dummy_H™dÀr


166 #¥agm®
wók
 
EFC0_H™dÀr
=
Dummy_H™dÀr


167 #¥agm®
wók
 
EFC1_H™dÀr
=
Dummy_H™dÀr


168 #¥agm®
wók
 
UART_H™dÀr
=
Dummy_H™dÀr


169 #ifde‡
_SAM3XA_SMC_INSTANCE_


170 #¥agm®
wók
 
SMC_H™dÀr
=
Dummy_H™dÀr


172 #ifde‡
_SAM3XA_SDRAMC_INSTANCE_


173 #¥agm®
wók
 
SDRAMC_H™dÀr
=
Dummy_H™dÀr


175 #¥agm®
wók
 
PIOA_H™dÀr
=
Dummy_H™dÀr


176 #¥agm®
wók
 
PIOB_H™dÀr
=
Dummy_H™dÀr


177 #ifde‡
_SAM3XA_PIOC_INSTANCE_


178 #¥agm®
wók
 
PIOC_H™dÀr
=
Dummy_H™dÀr


180 #ifde‡
_SAM3XA_PIOD_INSTANCE_


181 #¥agm®
wók
 
PIOD_H™dÀr
=
Dummy_H™dÀr


183 #ifde‡
_SAM3XA_PIOE_INSTANCE_


184 #¥agm®
wók
 
PIOE_H™dÀr
=
Dummy_H™dÀr


186 #ifde‡
_SAM3XA_PIOF_INSTANCE_


187 #¥agm®
wók
 
PIOF_H™dÀr
=
Dummy_H™dÀr


189 #¥agm®
wók
 
USART0_H™dÀr
=
Dummy_H™dÀr


190 #¥agm®
wók
 
USART1_H™dÀr
=
Dummy_H™dÀr


191 #¥agm®
wók
 
USART2_H™dÀr
=
Dummy_H™dÀr


192 #ifde‡
_SAM3XA_USART3_INSTANCE_


193 #¥agm®
wók
 
USART3_H™dÀr
=
Dummy_H™dÀr


195 #¥agm®
wók
 
HSMCI_H™dÀr
=
Dummy_H™dÀr


196 #¥agm®
wók
 
TWI0_H™dÀr
=
Dummy_H™dÀr


197 #¥agm®
wók
 
TWI1_H™dÀr
=
Dummy_H™dÀr


198 #¥agm®
wók
 
SPI0_H™dÀr
=
Dummy_H™dÀr


199 #ifde‡
_SAM3XA_SPI1_INSTANCE_


200 #¥agm®
wók
 
SPI1_H™dÀr
=
Dummy_H™dÀr


202 #¥agm®
wók
 
SSC_H™dÀr
=
Dummy_H™dÀr


203 #¥agm®
wók
 
TC0_H™dÀr
=
Dummy_H™dÀr


204 #¥agm®
wók
 
TC1_H™dÀr
=
Dummy_H™dÀr


205 #¥agm®
wók
 
TC2_H™dÀr
=
Dummy_H™dÀr


206 #¥agm®
wók
 
TC3_H™dÀr
=
Dummy_H™dÀr


207 #¥agm®
wók
 
TC4_H™dÀr
=
Dummy_H™dÀr


208 #¥agm®
wók
 
TC5_H™dÀr
=
Dummy_H™dÀr


209 #ifde‡
_SAM3XA_TC2_INSTANCE_


210 #¥agm®
wók
 
TC6_H™dÀr
=
Dummy_H™dÀr


211 #¥agm®
wók
 
TC7_H™dÀr
=
Dummy_H™dÀr


212 #¥agm®
wók
 
TC8_H™dÀr
=
Dummy_H™dÀr


214 #¥agm®
wók
 
PWM_H™dÀr
=
Dummy_H™dÀr


215 #¥agm®
wók
 
ADC_H™dÀr
=
Dummy_H™dÀr


216 #¥agm®
wók
 
DACC_H™dÀr
=
Dummy_H™dÀr


217 #¥agm®
wók
 
DMAC_H™dÀr
=
Dummy_H™dÀr


218 #¥agm®
wók
 
UOTGHS_H™dÀr
=
Dummy_H™dÀr


219 #¥agm®
wók
 
TRNG_H™dÀr
=
Dummy_H™dÀr


220 #ifde‡
_SAM3XA_EMAC_INSTANCE_


221 #¥agm®
wók
 
EMAC_H™dÀr
=
Dummy_H™dÀr


223 #¥agm®
wók
 
CAN0_H™dÀr
=
Dummy_H™dÀr


224 #¥agm®
wók
 
CAN1_H™dÀr
=
Dummy_H™dÀr


230 
	`Dummy_H™dÀr
()

238 #ifde‡
__˝lu•lus


239 
	}
}

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/source/templates/exceptions.h

47 #i‚de‡
EXCEPTIONS_H_INCLUDED


48 
	#EXCEPTIONS_H_INCLUDED


	)

50 
	~"ßm3xa.h
"

54 #ifde‡
__˝lu•lus


61 (*
I¡Func
) ();

64 
Dummy_H™dÀr
();

68 #ifde‡
__˝lu•lus


	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/source/templates/gcc/startup_sam3x.c

47 
	~"ex˚±i⁄s.h
"

48 
	~"ßm3xa.h
"

49 
	~"sy°em_ßm3x.h
"

52 
uöt32_t
 
_sfixed
;

53 
uöt32_t
 
_efixed
;

54 
uöt32_t
 
_ëext
;

55 
uöt32_t
 
_§ñoˇã
;

56 
uöt32_t
 
_îñoˇã
;

57 
uöt32_t
 
_szîo
;

58 
uöt32_t
 
_ezîo
;

59 
uöt32_t
 
_s°ack
;

60 
uöt32_t
 
_e°ack
;

63 
maö
();

66 
__libc_öô_¨øy
();

69 
__©åibuã__
 ((
£˘i⁄
(".vectors")))

70 
I¡Func
 
	gex˚±i⁄_èbÀ
[] = {

73 (
I¡Func
Ë(&
_e°ack
),

74 (*Ë
Re£t_H™dÀr
,

76 (*Ë
NMI_H™dÀr
,

77 (*Ë
H¨dFau…_H™dÀr
,

78 (*Ë
MemM™age_H™dÀr
,

79 (*Ë
BusFau…_H™dÀr
,

80 (*Ë
UßgeFau…_H™dÀr
,

85 (*Ë
SVC_H™dÀr
,

86 (*Ë
DebugM⁄_H™dÀr
,

88 (*Ë
PídSV_H™dÀr
,

89 (*Ë
SysTick_H™dÀr
,

92 (*Ë
SUPC_H™dÀr
,

93 (*Ë
RSTC_H™dÀr
,

94 (*Ë
RTC_H™dÀr
,

95 (*Ë
RTT_H™dÀr
,

96 (*Ë
WDT_H™dÀr
,

97 (*Ë
PMC_H™dÀr
,

98 (*Ë
EFC0_H™dÀr
,

99 (*Ë
EFC1_H™dÀr
,

100 (*Ë
UART_H™dÀr
,

101 #ifde‡
_SAM3XA_SMC_INSTANCE_


102 (*Ë
SMC_H™dÀr
,

106 #ifde‡
_SAM3XA_SDRAMC_INSTANCE_


107 (*Ë
SDRAMC_H™dÀr
,

111 (*Ë
PIOA_H™dÀr
,

112 (*Ë
PIOB_H™dÀr
,

113 #ifde‡
_SAM3XA_PIOC_INSTANCE_


114 (*Ë
PIOC_H™dÀr
,

118 #ifde‡
_SAM3XA_PIOD_INSTANCE_


119 (*Ë
PIOD_H™dÀr
,

123 #ifde‡
_SAM3XA_PIOE_INSTANCE_


124 (*Ë
PIOE_H™dÀr
,

128 #ifde‡
_SAM3XA_PIOF_INSTANCE_


129 (*Ë
PIOF_H™dÀr
,

133 (*Ë
USART0_H™dÀr
,

134 (*Ë
USART1_H™dÀr
,

135 (*Ë
USART2_H™dÀr
,

136 #ifde‡
_SAM3XA_USART3_INSTANCE_


137 (*Ë
USART3_H™dÀr
,

141 (*Ë
HSMCI_H™dÀr
,

142 (*Ë
TWI0_H™dÀr
,

143 (*Ë
TWI1_H™dÀr
,

144 (*Ë
SPI0_H™dÀr
,

145 #ifde‡
_SAM3XA_SPI1_INSTANCE_


146 (*Ë
SPI1_H™dÀr
,

150 (*Ë
SSC_H™dÀr
,

151 (*Ë
TC0_H™dÀr
,

152 (*Ë
TC1_H™dÀr
,

153 (*Ë
TC2_H™dÀr
,

154 (*Ë
TC3_H™dÀr
,

155 (*Ë
TC4_H™dÀr
,

156 (*Ë
TC5_H™dÀr
,

157 #ifde‡
_SAM3XA_TC2_INSTANCE_


158 (*Ë
TC6_H™dÀr
,

159 (*Ë
TC7_H™dÀr
,

160 (*Ë
TC8_H™dÀr
,

166 (*Ë
PWM_H™dÀr
,

167 (*Ë
ADC_H™dÀr
,

168 (*Ë
DACC_H™dÀr
,

169 (*Ë
DMAC_H™dÀr
,

170 (*Ë
UOTGHS_H™dÀr
,

171 (*Ë
TRNG_H™dÀr
,

172 #ifde‡
_SAM3XA_EMAC_INSTANCE_


173 (*Ë
EMAC_H™dÀr
,

177 (*Ë
CAN0_H™dÀr
,

178 (*Ë
CAN1_H™dÀr


182 
	#SCB_VTOR_TBLBASE_Pos
 29

	)

183 
	#SCB_VTOR_TBLBASE_Msk
 (1UL << 
SCB_VTOR_TBLBASE_Pos
Ë

	)

189 
	$Re£t_H™dÀr
()

191 
uöt32_t
 *
pSrc
, *
pDe°
;

194 
pSrc
 = &
_ëext
;

195 
pDe°
 = &
_§ñoˇã
;

197 i‡(
pSrc
 !
pDe°
) {

198 ; 
pDe°
 < &
_îñoˇã
;) {

199 *
pDe°
++ = *
pSrc
++;

204 
pDe°
 = &
_szîo
;ÖDe° < &
_ezîo
;) {

205 *
pDe°
++ = 0;

209 
pSrc
 = (
uöt32_t
 *Ë& 
_sfixed
;

210 
SCB
->
VTOR
 = ((
uöt32_t
Ë
pSrc
 & 
SCB_VTOR_TBLOFF_Msk
);

212 i‡(((
uöt32_t
Ë
pSrc
 >
IRAM0_ADDR
Ë&& ((uöt32_tËpSr¯< 
NFC_RAM_ADDR
)) {

213 
SCB
->
VTOR
 |1 << 
SCB_VTOR_TBLBASE_Pos
;

217 
	`__libc_öô_¨øy
();

220 
	`maö
();

224 
	}
}

	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/source/templates/system_sam3x.c

48 
	~"sy°em_ßm3x.h
"

49 
	~"ßm3xa.h
"

53 #ifde‡
__˝lu•lus


60 
	#SYS_BOARD_OSCOUNT
 (
	`CKGR_MOR_MOSCXTST
(0x8))

	)

61 
	#SYS_BOARD_PLLAR
 (
CKGR_PLLAR_ONE
 \

62 | 
	`CKGR_PLLAR_MULA
(0xdUL) \

63 | 
	`CKGR_PLLAR_PLLACOUNT
(0x3fUL) \

64 | 
	`CKGR_PLLAR_DIVA
(0x1UL))

	)

65 
	#SYS_BOARD_MCKR
 (
PMC_MCKR_PRES_CLK_2
 | 
PMC_MCKR_CSS_PLLA_CLK
)

	)

68 
	#SYS_UTMIPLL
 (480000000ULË

	)

70 
	#SYS_CKGR_MOR_KEY_VALUE
 
	`CKGR_MOR_KEY
(0x37Ë

	)

73 
uöt32_t
 
Sy°emC‹eClock
 = 
CHIP_FREQ_MAINCK_RC_4MHZ
;

79 
__no_ölöe


80 
RAMFUNC


81 
Sy°emInô
()

84 
EFC0
->
EEFC_FMR
 = 
EEFC_FMR_FWS
(4);

85 
EFC1
->
EEFC_FMR
 = 
EEFC_FMR_FWS
(4);

88 i‡(!(
PMC
->
CKGR_MOR
 & 
CKGR_MOR_MOSCSEL
)) {

89 
PMC
->
CKGR_MOR
 = 
SYS_CKGR_MOR_KEY_VALUE
 | 
SYS_BOARD_OSCOUNT
 |

90 
CKGR_MOR_MOSCRCEN
 | 
CKGR_MOR_MOSCXTEN
;

91 !(
PMC
->
PMC_SR
 & 
PMC_SR_MOSCXTS
)) {

96 
PMC
->
CKGR_MOR
 = 
SYS_CKGR_MOR_KEY_VALUE
 | 
SYS_BOARD_OSCOUNT
 |

97 
CKGR_MOR_MOSCRCEN
 | 
CKGR_MOR_MOSCXTEN
 | 
CKGR_MOR_MOSCSEL
;

99 !(
PMC
->
PMC_SR
 & 
PMC_SR_MOSCSELS
)) {

101 
PMC
->
PMC_MCKR
 = (PMC->PMC_MCKR & ~(
uöt32_t
)
PMC_MCKR_CSS_Msk
) |

102 
PMC_MCKR_CSS_MAIN_CLK
;

103 !(
PMC
->
PMC_SR
 & 
PMC_SR_MCKRDY
)) {

107 
PMC
->
CKGR_PLLAR
 = 
SYS_BOARD_PLLAR
;

108 !(
PMC
->
PMC_SR
 & 
PMC_SR_LOCKA
)) {

112 
PMC
->
PMC_MCKR
 = (
SYS_BOARD_MCKR
 & ~
PMC_MCKR_CSS_Msk
Ë| 
PMC_MCKR_CSS_MAIN_CLK
;

113 !(
PMC
->
PMC_SR
 & 
PMC_SR_MCKRDY
)) {

117 
PMC
->
PMC_MCKR
 = 
SYS_BOARD_MCKR
;

118 !(
PMC
->
PMC_SR
 & 
PMC_SR_MCKRDY
)) {

121 
Sy°emC‹eClock
 = 
CHIP_FREQ_CPU_MAX
;

124 
Sy°emC‹eClockUpd©e
()

127 
PMC
->
PMC_MCKR
 & 
PMC_MCKR_CSS_Msk
) {

128 
PMC_MCKR_CSS_SLOW_CLK
:

129 i‡(
SUPC
->
SUPC_SR
 & 
SUPC_SR_OSCSEL
) {

130 
Sy°emC‹eClock
 = 
CHIP_FREQ_XTAL_32K
;

132 
Sy°emC‹eClock
 = 
CHIP_FREQ_SLCK_RC
;

135 
PMC_MCKR_CSS_MAIN_CLK
:

136 i‡(
PMC
->
CKGR_MOR
 & 
CKGR_MOR_MOSCSEL
) {

137 
Sy°emC‹eClock
 = 
CHIP_FREQ_XTAL_12M
;

139 
Sy°emC‹eClock
 = 
CHIP_FREQ_MAINCK_RC_4MHZ
;

141 
PMC
->
CKGR_MOR
 & 
CKGR_MOR_MOSCRCF_Msk
) {

142 
CKGR_MOR_MOSCRCF_4_MHz
:

144 
CKGR_MOR_MOSCRCF_8_MHz
:

145 
Sy°emC‹eClock
 *= 2U;

147 
CKGR_MOR_MOSCRCF_12_MHz
:

148 
Sy°emC‹eClock
 *= 3U;

155 
PMC_MCKR_CSS_PLLA_CLK
:

156 
PMC_MCKR_CSS_UPLL_CLK
:

157 i‡(
PMC
->
CKGR_MOR
 & 
CKGR_MOR_MOSCSEL
) {

158 
Sy°emC‹eClock
 = 
CHIP_FREQ_XTAL_12M
;

160 
Sy°emC‹eClock
 = 
CHIP_FREQ_MAINCK_RC_4MHZ
;

162 
PMC
->
CKGR_MOR
 & 
CKGR_MOR_MOSCRCF_Msk
) {

163 
CKGR_MOR_MOSCRCF_4_MHz
:

165 
CKGR_MOR_MOSCRCF_8_MHz
:

166 
Sy°emC‹eClock
 *= 2U;

168 
CKGR_MOR_MOSCRCF_12_MHz
:

169 
Sy°emC‹eClock
 *= 3U;

175 i‡((
PMC
->
PMC_MCKR
 & 
PMC_MCKR_CSS_Msk
Ë=
PMC_MCKR_CSS_PLLA_CLK
) {

176 
Sy°emC‹eClock
 *((((
PMC
->
CKGR_PLLAR
Ë& 
CKGR_PLLAR_MULA_Msk
) >>

177 
CKGR_PLLAR_MULA_Pos
) + 1U);

178 
Sy°emC‹eClock
 /((((
PMC
->
CKGR_PLLAR
Ë& 
CKGR_PLLAR_DIVA_Msk
) >>

179 
CKGR_PLLAR_DIVA_Pos
));

181 
Sy°emC‹eClock
 = 
SYS_UTMIPLL
 / 2U;

186 i‡((
PMC
->
PMC_MCKR
 & 
PMC_MCKR_PRES_Msk
Ë=
PMC_MCKR_PRES_CLK_3
) {

187 
Sy°emC‹eClock
 /= 3U;

189 
Sy°emC‹eClock
 >>((
PMC
->
PMC_MCKR
 & 
PMC_MCKR_PRES_Msk
) >>

190 
PMC_MCKR_PRES_Pos
);

197 
__no_ölöe


198 
RAMFUNC


199 
sy°em_öô_Êash
(
uöt32_t
 
ul_˛k
)

202 i‡(
ul_˛k
 < 
CHIP_FREQ_FWS_0
) {

203 
EFC0
->
EEFC_FMR
 = 
EEFC_FMR_FWS
(0);

204 
EFC1
->
EEFC_FMR
 = 
EEFC_FMR_FWS
(0);

205 } i‡(
ul_˛k
 < 
CHIP_FREQ_FWS_1
) {

206 
EFC0
->
EEFC_FMR
 = 
EEFC_FMR_FWS
(1);

207 
EFC1
->
EEFC_FMR
 = 
EEFC_FMR_FWS
(1);

208 } i‡(
ul_˛k
 < 
CHIP_FREQ_FWS_2
) {

209 
EFC0
->
EEFC_FMR
 = 
EEFC_FMR_FWS
(2);

210 
EFC1
->
EEFC_FMR
 = 
EEFC_FMR_FWS
(2);

211 } i‡(
ul_˛k
 < 
CHIP_FREQ_FWS_3
) {

212 
EFC0
->
EEFC_FMR
 = 
EEFC_FMR_FWS
(3);

213 
EFC1
->
EEFC_FMR
 = 
EEFC_FMR_FWS
(3);

214 } i‡(
ul_˛k
 < 
CHIP_FREQ_FWS_4
) {

215 
EFC0
->
EEFC_FMR
 = 
EEFC_FMR_FWS
(4);

216 
EFC1
->
EEFC_FMR
 = 
EEFC_FMR_FWS
(4);

218 
EFC0
->
EEFC_FMR
 = 
EEFC_FMR_FWS
(5);

219 
EFC1
->
EEFC_FMR
 = 
EEFC_FMR_FWS
(5);

225 #ifde‡
__˝lu•lus


	@/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/source/templates/system_sam3x.h

48 #i‚de‡
SYSTEM_SAM3X_H_INCLUDED


49 
	#SYSTEM_SAM3X_H_INCLUDED


	)

53 #ifde‡
__˝lu•lus


59 
	~<°döt.h
>

60 
	~<compûî.h
>

62 
uöt32_t
 
Sy°emC‹eClock
;

68 
Sy°emInô
();

74 
Sy°emC‹eClockUpd©e
();

79 
sy°em_öô_Êash
(
uöt32_t
 
ul_˛k
);

83 #ifde‡
__˝lu•lus


	@/home/vaje/Documents/vaja9/asf/sam/utils/compiler.h

47 #i‚de‡
UTILS_COMPILER_H


48 
	#UTILS_COMPILER_H


	)

58 
	~<°ddef.h
>

60 #i‡(
deföed
 
__ICCARM__
)

61 
	~<öåösics.h
>

64 
	~<∑πs.h
>

65 
	~"¥ïro˚ss‹.h
"

67 
	~<io.h
>

71 #i‚de‡
__ASSEMBLY__


73 
	~<°dio.h
>

74 
	~<°dboﬁ.h
>

75 
	~<°döt.h
>

76 
	~<°dlib.h
>

78 #ifde‡
__ICCARM__


84 
	#__asm__
 
asm


	)

85 
	#__ölöe__
 
ölöe


	)

86 
	#__vﬁ©ûe__


	)

91 
	#FUNC_PTR
 *

	)

96 
	#UNUSED
(
v
Ë()(v)

	)

102 
	#unu£d
(
v
Ëdÿ{ ()(v); } 0)

	)

108 
	#b¨rõr
(Ë
	`__DMB
()

	)

116 
	#COMPILER_PRAGMA
(
¨g
Ë
	`_Pøgma
(#¨g)

	)

123 
	#COMPILER_PACK_SET
(
Æignmít
Ë
	`COMPILER_PRAGMA
(
	`∑ck
◊lignmít))

	)

130 
	#COMPILER_PACK_RESET
(Ë
	`COMPILER_PRAGMA
(
	`∑ck
())

	)

136 #i‡(
deföed
 
__GNUC__
Ë|| (deföed 
__CC_ARM
)

137 
	#COMPILER_ALIGNED
(
a
Ë
	`__©åibuã__
((
	`__Æig√d__
◊)))

	)

138 #ñi‡(
deföed
 
__ICCARM__
)

139 
	#COMPILER_ALIGNED
(
a
Ë
	`COMPILER_PRAGMA
(
d©a_Æignmít
 =á)

	)

145 #i‡(
deföed
 
__GNUC__
Ë|| deföed(
__CC_ARM
)

146 
	#COMPILER_WORD_ALIGNED
 
	`__©åibuã__
((
	`__Æig√d__
(4)))

	)

147 #ñi‡(
deföed
 
__ICCARM__
)

148 
	#COMPILER_WORD_ALIGNED
 
	`COMPILER_PRAGMA
(
d©a_Æignmít
 = 4)

	)

159 #i‡
deföed
(
__CC_ARM
)

160 
	#__Æways_ölöe
 
__f‹˚ölöe


	)

161 #ñi‡(
deföed
 
__GNUC__
)

162 #ifde‡
__Æways_ölöe


163 #unde‡
__Æways_ölöe


165 
	#__Æways_ölöe
 
ölöe
 
	`__©åibuã__
((
__Æways_ölöe__
))

	)

166 #ñi‡(
deföed
 
__ICCARM__
)

167 
	#__Æways_ölöe
 
	`_Pøgma
("ölöe=f‹˚d")

	)

177 #i‡
deföed
(
__CC_ARM
)

178 
	#__no_ölöe
 
	`__©åibuã__
((
noölöe
))

	)

179 #ñi‡(
deföed
 
__GNUC__
)

180 
	#__no_ölöe
 
	`__©åibuã__
((
__noölöe__
))

	)

181 #ñi‡(
deföed
 
__ICCARM__
)

182 
	#__no_ölöe
 
	`_Pøgma
("ölöeÚevî")

	)

194 #i‡
deföed
(
_ASSERT_ENABLE_
)

195 #i‡
deföed
(
TEST_SUITE_DEFINE_ASSERT_MACRO
)

197 
	~"unô_ã°/suôe.h
"

199 #unde‡
TEST_SUITE_DEFINE_ASSERT_MACRO


200 
	#As£π
(
ex¥
) \

202 i‡(!(
ex¥
)Ë
åue
);\

203 }

	)

206 
	#As£π
(
ex¥
Ë((Ë0)

	)

210 #i‡
deföed
 ( 
__CC_ARM
 )

211 
	#WEAK
 
	`__©åibuã__
 ((
wók
))

	)

212 #ñi‡
deföed
 ( 
__ICCARM__
 )

213 
	#WEAK
 
__wók


	)

214 #ñi‡
deföed
 ( 
__GNUC__
 )

215 
	#WEAK
 
	`__©åibuã__
 ((
wók
))

	)

219 #i‡
deföed
 ( 
__CC_ARM
 )

220 
	#NO_INIT
 
	`__©åibuã__
((
zîo_öô
))

	)

221 #ñi‡
deföed
 ( 
__ICCARM__
 )

222 
	#NO_INIT
 
__no_öô


	)

223 #ñi‡
deföed
 ( 
__GNUC__
 )

224 
	#NO_INIT
 
	`__©åibuã__
((
	`£˘i⁄
(".no_öô")))

	)

228 #i‡
deföed
 ( 
__CC_ARM
 )

229 
	#RAMFUNC
 
	`__©åibuã__
 ((
	`£˘i⁄
(".ømfunc")))

	)

230 #ñi‡
deföed
 ( 
__ICCARM__
 )

231 
	#RAMFUNC
 
__ømfunc


	)

232 #ñi‡
deföed
 ( 
__GNUC__
 )

233 
	#RAMFUNC
 
	`__©åibuã__
 ((
	`£˘i⁄
(".ømfunc")))

	)

237 #i‡
deföed
 ( 
__CC_ARM
 )

238 
	#OPTIMIZE_HIGH
 
	`_Pøgma
("O3")

	)

239 #ñi‡
deföed
 ( 
__ICCARM__
 )

240 
	#OPTIMIZE_HIGH
 
	`_Pøgma
("›timize=high")

	)

241 #ñi‡
deföed
 ( 
__GNUC__
 )

242 
	#OPTIMIZE_HIGH
 
	`__©åibuã__
((
	`›timize
("s")))

	)

245 
	~"öãºu±.h
"

250 
	tBoﬁ
;

251 #i‚de‡
__˝lu•lus


252 #i‡!
deföed
(
__boﬁ_åue_Ál£_¨e_deföed
)

253 
	tboﬁ
;

256 
öt8_t
 
	tS8
 ;

257 
uöt8_t
 
	tU8
 ;

258 
öt16_t
 
	tS16
;

259 
uöt16_t
 
	tU16
;

260 
uöt16_t
 
	tÀ16_t
;

261 
uöt16_t
 
	tbe16_t
;

262 
öt32_t
 
	tS32
;

263 
uöt32_t
 
	tU32
;

264 
uöt32_t
 
	tÀ32_t
;

265 
uöt32_t
 
	tbe32_t
;

266 
öt64_t
 
	tS64
;

267 
uöt64_t
 
	tU64
;

268 
	tF32
;

269 
	tF64
;

270 
uöt32_t
 
	túam_size_t
;

277 
boﬁ
 
	tSètus_boﬁ_t
;

278 
U8
 
	tSètus_t
;

289 
S16
 
	ms16
 ;

290 
U16
 
	mu16
 ;

291 
S8
 
	ms8
 [2];

292 
U8
 
	mu8
 [2];

293 } 
	tUni⁄16
;

298 
S32
 
	ms32
 ;

299 
U32
 
	mu32
 ;

300 
S16
 
	ms16
[2];

301 
U16
 
	mu16
[2];

302 
S8
 
	ms8
 [4];

303 
U8
 
	mu8
 [4];

304 } 
	tUni⁄32
;

309 
S64
 
	ms64
 ;

310 
U64
 
	mu64
 ;

311 
S32
 
	ms32
[2];

312 
U32
 
	mu32
[2];

313 
S16
 
	ms16
[4];

314 
U16
 
	mu16
[4];

315 
S8
 
	ms8
 [8];

316 
U8
 
	mu8
 [8];

317 } 
	tUni⁄64
;

322 
S64
 *
	ms64±r
;

323 
U64
 *
	mu64±r
;

324 
S32
 *
	ms32±r
;

325 
U32
 *
	mu32±r
;

326 
S16
 *
	ms16±r
;

327 
U16
 *
	mu16±r
;

328 
S8
 *
	ms8±r
 ;

329 
U8
 *
	mu8±r
 ;

330 } 
	tUni⁄På
;

335 vﬁ©ûê
S64
 *
	ms64±r
;

336 vﬁ©ûê
U64
 *
	mu64±r
;

337 vﬁ©ûê
S32
 *
	ms32±r
;

338 vﬁ©ûê
U32
 *
	mu32±r
;

339 vﬁ©ûê
S16
 *
	ms16±r
;

340 vﬁ©ûê
U16
 *
	mu16±r
;

341 vﬁ©ûê
S8
 *
	ms8±r
 ;

342 vﬁ©ûê
U8
 *
	mu8±r
 ;

343 } 
	tUni⁄VPå
;

348 c⁄° 
S64
 *
	ms64±r
;

349 c⁄° 
U64
 *
	mu64±r
;

350 c⁄° 
S32
 *
	ms32±r
;

351 c⁄° 
U32
 *
	mu32±r
;

352 c⁄° 
S16
 *
	ms16±r
;

353 c⁄° 
U16
 *
	mu16±r
;

354 c⁄° 
S8
 *
	ms8±r
 ;

355 c⁄° 
U8
 *
	mu8±r
 ;

356 } 
	tUni⁄CPå
;

361 c⁄° vﬁ©ûê
S64
 *
	ms64±r
;

362 c⁄° vﬁ©ûê
U64
 *
	mu64±r
;

363 c⁄° vﬁ©ûê
S32
 *
	ms32±r
;

364 c⁄° vﬁ©ûê
U32
 *
	mu32±r
;

365 c⁄° vﬁ©ûê
S16
 *
	ms16±r
;

366 c⁄° vﬁ©ûê
U16
 *
	mu16±r
;

367 c⁄° vﬁ©ûê
S8
 *
	ms8±r
 ;

368 c⁄° vﬁ©ûê
U8
 *
	mu8±r
 ;

369 } 
	tUni⁄CVPå
;

374 
S64
 *
	ms64±r
;

375 
U64
 *
	mu64±r
;

376 
S32
 *
	ms32±r
;

377 
U32
 *
	mu32±r
;

378 
S16
 *
	ms16±r
;

379 
U16
 *
	mu16±r
;

380 
S8
 *
	ms8±r
 ;

381 
U8
 *
	mu8±r
 ;

382 } 
	tSåu˘På
;

387 vﬁ©ûê
S64
 *
	ms64±r
;

388 vﬁ©ûê
U64
 *
	mu64±r
;

389 vﬁ©ûê
S32
 *
	ms32±r
;

390 vﬁ©ûê
U32
 *
	mu32±r
;

391 vﬁ©ûê
S16
 *
	ms16±r
;

392 vﬁ©ûê
U16
 *
	mu16±r
;

393 vﬁ©ûê
S8
 *
	ms8±r
 ;

394 vﬁ©ûê
U8
 *
	mu8±r
 ;

395 } 
	tSåu˘VPå
;

400 c⁄° 
S64
 *
	ms64±r
;

401 c⁄° 
U64
 *
	mu64±r
;

402 c⁄° 
S32
 *
	ms32±r
;

403 c⁄° 
U32
 *
	mu32±r
;

404 c⁄° 
S16
 *
	ms16±r
;

405 c⁄° 
U16
 *
	mu16±r
;

406 c⁄° 
S8
 *
	ms8±r
 ;

407 c⁄° 
U8
 *
	mu8±r
 ;

408 } 
	tSåu˘CPå
;

413 c⁄° vﬁ©ûê
S64
 *
	ms64±r
;

414 c⁄° vﬁ©ûê
U64
 *
	mu64±r
;

415 c⁄° vﬁ©ûê
S32
 *
	ms32±r
;

416 c⁄° vﬁ©ûê
U32
 *
	mu32±r
;

417 c⁄° vﬁ©ûê
S16
 *
	ms16±r
;

418 c⁄° vﬁ©ûê
U16
 *
	mu16±r
;

419 c⁄° vﬁ©ûê
S8
 *
	ms8±r
 ;

420 c⁄° vﬁ©ûê
U8
 *
	mu8±r
 ;

421 } 
	tSåu˘CVPå
;

430 
	#DISABLE
 0

	)

431 
	#ENABLE
 1

	)

432 #i‚de‡
__˝lu•lus


433 #i‡!
deföed
(
__boﬁ_åue_Ál£_¨e_deföed
)

434 
	#Ál£
 0

	)

435 
	#åue
 1

	)

438 
	#PASS
 0

	)

439 
	#FAIL
 1

	)

440 
	#LOW
 0

	)

441 
	#HIGH
 1

	)

445 #i‚de‡
__ASSEMBLY__


454 #i‚de‡
likñy


455 
	#likñy
(
exp
Ë”xp)

	)

462 #i‚de‡
u∆ikñy


463 
	#u∆ikñy
(
exp
Ë”xp)

	)

474 #i‡(
deföed
 
__GNUC__
Ë|| (deföed 
__CC_ARM
)

475 
	#is_c⁄°™t
(
exp
Ë
	`__buûtö_c⁄°™t_p
”xp)

	)

477 
	#is_c⁄°™t
(
exp
Ë(0)

	)

493 
	#Rd_bôs
–
vÆue
, 
mask
Ë((vÆueË& (mask))

	)

503 
	#Wr_bôs
(
lvÆue
, 
mask
, 
bôs
) ((lvalue) = ((lvalue) & ~(mask)) |\

504 ((
bôs
 ) & (
mask
)))

	)

513 
	#T°_bôs
–
vÆue
, 
mask
Ë(
	`Rd_bôs
(vÆue, maskË!0)

	)

522 
	#CÃ_bôs
(
lvÆue
, 
mask
Ë(÷vÆueË&~(mask))

	)

531 
	#Së_bôs
(
lvÆue
, 
mask
Ë(÷vÆueË|(mask))

	)

540 
	#Tgl_bôs
(
lvÆue
, 
mask
Ë(÷vÆueË^(mask))

	)

549 
	#Rd_bôfõld
–
vÆue
, 
mask
Ë(
	`Rd_bôs
–vÆue, maskË>> 
	`˘z
(mask))

	)

559 
	#Wr_bôfõld
(
lvÆue
, 
mask
, 
bôfõld
Ë(
	`Wr_bôs
÷vÆue, mask, (
U32
)(bôfõldË<< 
	`˘z
(mask)))

	)

584 #i‡(
deföed
 
__GNUC__
Ë|| (deföed 
__CC_ARM
)

585 
	#˛z
(
u
Ë((uË? 
	`__buûtö_˘z
(uË: 32)

	)

586 #ñi‡(
deföed
 
__ICCARM__
)

587 
	#˛z
(
u
Ë((uË? 
	`__CLZ
(uË: 32)

	)

589 
	#˛z
(
u
) (((u) == 0) ? 32 : \

590 ((
u
) & (1ul << 31)) ? 0 : \

591 ((
u
) & (1ul << 30)) ? 1 : \

592 ((
u
) & (1ul << 29)) ? 2 : \

593 ((
u
) & (1ul << 28)) ? 3 : \

594 ((
u
) & (1ul << 27)) ? 4 : \

595 ((
u
) & (1ul << 26)) ? 5 : \

596 ((
u
) & (1ul << 25)) ? 6 : \

597 ((
u
) & (1ul << 24)) ? 7 : \

598 ((
u
) & (1ul << 23)) ? 8 : \

599 ((
u
) & (1ul << 22)) ? 9 : \

600 ((
u
) & (1ul << 21)) ? 10 : \

601 ((
u
) & (1ul << 20)) ? 11 : \

602 ((
u
) & (1ul << 19)) ? 12 : \

603 ((
u
) & (1ul << 18)) ? 13 : \

604 ((
u
) & (1ul << 17)) ? 14 : \

605 ((
u
) & (1ul << 16)) ? 15 : \

606 ((
u
) & (1ul << 15)) ? 16 : \

607 ((
u
) & (1ul << 14)) ? 17 : \

608 ((
u
) & (1ul << 13)) ? 18 : \

609 ((
u
) & (1ul << 12)) ? 19 : \

610 ((
u
) & (1ul << 11)) ? 20 : \

611 ((
u
) & (1ul << 10)) ? 21 : \

612 ((
u
) & (1ul << 9)) ? 22 : \

613 ((
u
) & (1ul << 8)) ? 23 : \

614 ((
u
) & (1ul << 7)) ? 24 : \

615 ((
u
) & (1ul << 6)) ? 25 : \

616 ((
u
) & (1ul << 5)) ? 26 : \

617 ((
u
) & (1ul << 4)) ? 27 : \

618 ((
u
) & (1ul << 3)) ? 28 : \

619 ((
u
) & (1ul << 2)) ? 29 : \

620 ((
u
) & (1ul << 1)) ? 30 : \

621 31)

	)

630 #i‡(
deföed
 
__GNUC__
Ë|| (deföed 
__CC_ARM
)

631 
	#˘z
(
u
Ë
	`__buûtö_˘z
(u)

	)

633 
	#˘z
(
u
) ((u) & (1ul << 0) ? 0 : \

634 (
u
) & (1ul << 1) ? 1 : \

635 (
u
) & (1ul << 2) ? 2 : \

636 (
u
) & (1ul << 3) ? 3 : \

637 (
u
) & (1ul << 4) ? 4 : \

638 (
u
) & (1ul << 5) ? 5 : \

639 (
u
) & (1ul << 6) ? 6 : \

640 (
u
) & (1ul << 7) ? 7 : \

641 (
u
) & (1ul << 8) ? 8 : \

642 (
u
) & (1ul << 9) ? 9 : \

643 (
u
) & (1ul << 10) ? 10 : \

644 (
u
) & (1ul << 11) ? 11 : \

645 (
u
) & (1ul << 12) ? 12 : \

646 (
u
) & (1ul << 13) ? 13 : \

647 (
u
) & (1ul << 14) ? 14 : \

648 (
u
) & (1ul << 15) ? 15 : \

649 (
u
) & (1ul << 16) ? 16 : \

650 (
u
) & (1ul << 17) ? 17 : \

651 (
u
) & (1ul << 18) ? 18 : \

652 (
u
) & (1ul << 19) ? 19 : \

653 (
u
) & (1ul << 20) ? 20 : \

654 (
u
) & (1ul << 21) ? 21 : \

655 (
u
) & (1ul << 22) ? 22 : \

656 (
u
) & (1ul << 23) ? 23 : \

657 (
u
) & (1ul << 24) ? 24 : \

658 (
u
) & (1ul << 25) ? 25 : \

659 (
u
) & (1ul << 26) ? 26 : \

660 (
u
) & (1ul << 27) ? 27 : \

661 (
u
) & (1ul << 28) ? 28 : \

662 (
u
) & (1ul << 29) ? 29 : \

663 (
u
) & (1ul << 30) ? 30 : \

664 (
u
) & (1ul << 31) ? 31 : \

665 32)

	)

681 
	#bô_ªvî£8
(
u8
Ë((
U8
)(
	`bô_ªvî£32
((U8)(u8)Ë>> 24))

	)

689 
	#bô_ªvî£16
(
u16
Ë((
U16
)(
	`bô_ªvî£32
((U16)(u16)Ë>> 16))

	)

697 
	#bô_ªvî£32
(
u32
Ë
	`__RBIT
(u32)

	)

705 
	#bô_ªvî£64
(
u64
Ë((
U64
)(((U64)
	`bô_ªvî£32
((U64)(u64) >> 32)) |\

706 ((
U64
)
	`bô_ªvî£32
((U64)(
u64
)Ë<< 32)))

	)

722 
	#Te°_Æign
(
vÆ
, 
n
 ) (!
	`T°_bôs
–vÆ, (nË- 1 ) )

	)

731 
	#Gë_Æign
–
vÆ
, 
n
 ) ( 
	`Rd_bôs
–vÆ, (nË- 1 ) )

	)

741 
	#Së_Æign
(
lvÆ
, 
n
, 
Æg
Ë–
	`Wr_bôs
÷vÆ, (nË- 1,álgË)

	)

750 
	#Align_up
–
vÆ
, 
n
 ) (((vÆË+ (“Ë- 1)Ë& ~(“Ë- 1))

	)

759 
	#Align_down
(
vÆ
, 
n
 ) ( (vÆË& ~(“Ë- 1))

	)

785 
	#Abs
(
a
Ë((◊Ë< 0 ) ? -◊Ë: (a))

	)

796 
	#Mö
(
a
, 
b
Ë((◊Ë< (b)Ë? (aË: (b))

	)

807 
	#Max
(
a
, 
b
Ë((◊Ë> (b)Ë? (aË: (b))

	)

820 
	#mö
(
a
, 
b
Ë
	`Mö
◊, b)

	)

831 
	#max
(
a
, 
b
Ë
	`Max
◊, b)

	)

847 
	#L⁄g_ˇŒ
(
addr
Ë((*((*)())◊ddr))())

	)

854 
	#MSB
(
u16
Ë(((
U8
 *)&(u16))[1])

855 
	#LSB
(
u16
Ë(((
U8
 *)&(u16))[0])

856 

	)

857 
	#MSH
(
u32
Ë(((
U16
 *)&(u32))[1])

858 
	#LSH
(
u32
Ë(((
U16
 *)&(u32))[0])

859 
	#MSB0W
(
u32
Ë(((
U8
 *)&(u32))[3])

860 
	#MSB1W
(
u32
Ë(((
U8
 *)&(u32))[2])

861 
	#MSB2W
(
u32
Ë(((
U8
 *)&(u32))[1])

862 
	#MSB3W
(
u32
Ë(((
U8
 *)&(u32))[0])

863 
	#LSB3W
(
u32
Ë
	`MSB0W
(u32)

864 
	#LSB2W
(
u32
Ë
	`MSB1W
(u32)

865 
	#LSB1W
(
u32
Ë
	`MSB2W
(u32)

866 
	#LSB0W
(
u32
Ë
	`MSB3W
(u32)

867 

	)

868 
	#MSW
(
u64
Ë(((
U32
 *)&(u64))[1])

869 
	#LSW
(
u64
Ë(((
U32
 *)&(u64))[0])

870 
	#MSH0
(
u64
Ë(((
U16
 *)&(u64))[3])

871 
	#MSH1
(
u64
Ë(((
U16
 *)&(u64))[2])

872 
	#MSH2
(
u64
Ë(((
U16
 *)&(u64))[1])

873 
	#MSH3
(
u64
Ë(((
U16
 *)&(u64))[0])

874 
	#LSH3
(
u64
Ë
	`MSH0
(u64)

875 
	#LSH2
(
u64
Ë
	`MSH1
(u64)

876 
	#LSH1
(
u64
Ë
	`MSH2
(u64)

877 
	#LSH0
(
u64
Ë
	`MSH3
(u64)

878 
	#MSB0D
(
u64
Ë(((
U8
 *)&(u64))[7])

879 
	#MSB1D
(
u64
Ë(((
U8
 *)&(u64))[6])

880 
	#MSB2D
(
u64
Ë(((
U8
 *)&(u64))[5])

881 
	#MSB3D
(
u64
Ë(((
U8
 *)&(u64))[4])

882 
	#MSB4D
(
u64
Ë(((
U8
 *)&(u64))[3])

883 
	#MSB5D
(
u64
Ë(((
U8
 *)&(u64))[2])

884 
	#MSB6D
(
u64
Ë(((
U8
 *)&(u64))[1])

885 
	#MSB7D
(
u64
Ë(((
U8
 *)&(u64))[0])

886 
	#LSB7D
(
u64
Ë
	`MSB0D
(u64)

887 
	#LSB6D
(
u64
Ë
	`MSB1D
(u64)

888 
	#LSB5D
(
u64
Ë
	`MSB2D
(u64)

889 
	#LSB4D
(
u64
Ë
	`MSB3D
(u64)

890 
	#LSB3D
(
u64
Ë
	`MSB4D
(u64)

891 
	#LSB2D
(
u64
Ë
	`MSB5D
(u64)

892 
	#LSB1D
(
u64
Ë
	`MSB6D
(u64)

893 
	#LSB0D
(
u64
Ë
	`MSB7D
(u64)

894 

	)

895 
	#BE16
(
x
Ë
	`sw≠16
(x)

	)

896 
	#LE16
(
x
Ë(x)

	)

898 
	#À16_to_˝u
(
x
Ë(x)

	)

899 
	#˝u_to_À16
(
x
Ë(x)

	)

900 
	#LE16_TO_CPU
(
x
Ë(x)

	)

901 
	#CPU_TO_LE16
(
x
Ë(x)

	)

903 
	#be16_to_˝u
(
x
Ë
	`sw≠16
(x)

	)

904 
	#˝u_to_be16
(
x
Ë
	`sw≠16
(x)

	)

905 
	#BE16_TO_CPU
(
x
Ë
	`sw≠16
(x)

	)

906 
	#CPU_TO_BE16
(
x
Ë
	`sw≠16
(x)

	)

908 
	#À32_to_˝u
(
x
Ë(x)

	)

909 
	#˝u_to_À32
(
x
Ë(x)

	)

910 
	#LE32_TO_CPU
(
x
Ë(x)

	)

911 
	#CPU_TO_LE32
(
x
Ë(x)

	)

913 
	#be32_to_˝u
(
x
Ë
	`sw≠32
(x)

	)

914 
	#˝u_to_be32
(
x
Ë
	`sw≠32
(x)

	)

915 
	#BE32_TO_CPU
(
x
Ë
	`sw≠32
(x)

	)

916 
	#CPU_TO_BE32
(
x
Ë
	`sw≠32
(x)

	)

940 
	#Sw≠16
(
u16
Ë((
U16
)(((U16)(u16) >> 8) |\

941 ((
U16
)(
u16
Ë<< 8)))

	)

951 
	#Sw≠32
(
u32
Ë((
U32
)(((U32)
	`Sw≠16
((U32)(u32) >> 16)) |\

952 ((
U32
)
	`Sw≠16
((U32)(
u32
)Ë<< 16)))

	)

962 
	#Sw≠64
(
u64
Ë((
U64
)(((U64)
	`Sw≠32
((U64)(u64) >> 32)) |\

963 ((
U64
)
	`Sw≠32
((U64)(
u64
)Ë<< 32)))

	)

973 
	#sw≠16
(
u16
Ë
	`Sw≠16
(u16)

	)

983 #i‡(
deföed
 
__GNUC__
)

984 
	#sw≠32
(
u32
Ë((
U32
)
	`__buûtö_bsw≠32
((U32)(u32)))

	)

986 
	#sw≠32
(
u32
Ë
	`Sw≠32
(u32)

	)

997 #i‡(
deföed
 
__GNUC__
)

998 
	#sw≠64
(
u64
Ë((
U64
)
	`__buûtö_bsw≠64
((U64)(u64)))

	)

1000 
	#sw≠64
(
u64
Ë((
U64
)(((U64)
	`sw≠32
((U64)(u64) >> 32)) |\

1001 ((
U64
)
	`sw≠32
((U64)(
u64
)Ë<< 32)))

	)

1011 
	#_GLOBEXT_
 

1012 
	#_CONST_TYPE_
 const

1013 
	#_MEM_TYPE_SLOW_


1014 
	#_MEM_TYPE_MEDFAST_


1015 
	#_MEM_TYPE_FAST_


1016 

	)

1017 
U8
 
	tByã
;

1019 
	#memcmp_øm2øm
 
memcmp


1020 
	#memcmp_code2øm
 
memcmp


1021 
	#mem˝y_øm2øm
 
mem˝y


1022 
	#mem˝y_code2øm
 
mem˝y


1023 

	)

1024 
	#LSB0
(
u32
Ë
	`LSB0W
(u32)

1025 
	#LSB1
(
u32
Ë
	`LSB1W
(u32)

1026 
	#LSB2
(
u32
Ë
	`LSB2W
(u32)

1027 
	#LSB3
(
u32
Ë
	`LSB3W
(u32)

1028 
	#MSB3
(
u32
Ë
	`MSB3W
(u32)

1029 
	#MSB2
(
u32
Ë
	`MSB2W
(u32)

1030 
	#MSB1
(
u32
Ë
	`MSB1W
(u32)

1031 
	#MSB0
(
u32
Ë
	`MSB0W
(u32)

1032 

	)

1044 
	#div_˚û
(
a
, 
b
Ë((◊Ë+ (bË- 1Ë/ (b))

	)

1049 #i‡
deföed
(
__ICCARM__
)

1050 
	#SHORTENUM
 
__∑cked


	)

1051 #ñi‡
deföed
(
__GNUC__
)

1052 
	#SHORTENUM
 
	`__©åibuã__
((
∑cked
))

	)

1056 #i‡
deföed
(
__ICCARM__
)

1057 
	#n›
(Ë
	`__no_›î©i⁄
()

	)

1058 #ñi‡
deföed
(
__GNUC__
)

1059 
	#n›
(Ë(
	`__NOP
())

	)

1062 
	#FLASH_DECLARE
(
x
Ëc⁄° 
	)
x

1063 
	#FLASH_EXTERN
(
x
Ëc⁄° 
	)
x

1064 
	#PGM_READ_BYTE
(
x
Ë*(x)

	)

1065 
	#PGM_READ_WORD
(
x
Ë*(x)

	)

1066 
	#PGM_READ_DWORD
(
x
Ë*(x)

	)

1067 
	#MEMCPY_ENDIAN
 
mem˝y


	)

1068 
	#PGM_READ_BLOCK
(
d°
, 
§c
, 
Àn
Ë
	`mem˝y
((d°), (§c), (Àn))

	)

1071 
	#CMD_ID_OCTET
 (0)

	)

1074 
	#CPU_ENDIAN_TO_LE16
(
x
Ë(x)

	)

1075 
	#CPU_ENDIAN_TO_LE32
(
x
Ë(x)

	)

1076 
	#CPU_ENDIAN_TO_LE64
(
x
Ë(x)

	)

1079 
	#LE16_TO_CPU_ENDIAN
(
x
Ë(x)

	)

1080 
	#LE32_TO_CPU_ENDIAN
(
x
Ë(x)

	)

1081 
	#LE64_TO_CPU_ENDIAN
(
x
Ë(x)

	)

1084 
	#CLE16_TO_CPU_ENDIAN
(
x
Ë(x)

	)

1085 
	#CLE32_TO_CPU_ENDIAN
(
x
Ë(x)

	)

1086 
	#CLE64_TO_CPU_ENDIAN
(
x
Ë(x)

	)

1089 
	#CCPU_ENDIAN_TO_LE16
(
x
Ë(x)

	)

1090 
	#CCPU_ENDIAN_TO_LE32
(
x
Ë(x)

	)

1091 
	#CCPU_ENDIAN_TO_LE64
(
x
Ë(x)

	)

1093 
	#ADDR_COPY_DST_SRC_16
(
d°
, 
§c
Ë((d°Ë(§c))

	)

1094 
	#ADDR_COPY_DST_SRC_64
(
d°
, 
§c
Ë((d°Ë(§c))

	)

1103 
ölöe
 
	$c⁄vît_64_bô_to_byã_¨øy
(
uöt64_t
 
vÆue
, 
uöt8_t
 *
d©a
)

1105 
uöt8_t
 
vÆ_ödex
 = 0;

1107 
vÆ_ödex
 < 8)

1109 
d©a
[
vÆ_ödex
++] = 
vÆue
 & 0xFF;

1110 
vÆue
 = value >> 8;

1112 
	}
}

1121 
ölöe
 
	$c⁄vît_16_bô_to_byã_¨øy
(
uöt16_t
 
vÆue
, 
uöt8_t
 *
d©a
)

1123 
d©a
[0] = 
vÆue
 & 0xFF;

1124 
d©a
[1] = (
vÆue
 >> 8) & 0xFF;

1125 
	}
}

1128 
ölöe
 
	$c⁄vît_•ec_16_bô_to_byã_¨øy
(
uöt16_t
 
vÆue
, 
uöt8_t
 *
d©a
)

1130 
d©a
[0] = 
vÆue
 & 0xFF;

1131 
d©a
[1] = (
vÆue
 >> 8) & 0xFF;

1132 
	}
}

1135 
ölöe
 
	$c⁄vît_16_bô_to_byã_addªss
(
uöt16_t
 
vÆue
, 
uöt8_t
 *
d©a
)

1137 
d©a
[0] = 
vÆue
 & 0xFF;

1138 
d©a
[1] = (
vÆue
 >> 8) & 0xFF;

1139 
	}
}

1149 
ölöe
 
uöt16_t
 
	$c⁄vît_byã_¨øy_to_16_bô
(
uöt8_t
 *
d©a
)

1151  (
d©a
[0] | ((
uöt16_t
)data[1] << 8));

1152 
	}
}

1155 
ölöe
 
uöt32_t
 
	$c⁄vît_byã_¨øy_to_32_bô
(
uöt8_t
 *
d©a
)

1159 
uöt32_t
 
u32
;

1160 
uöt8_t
 
u8
[8];

1161 }
l⁄g_addr
;

1162 
uöt8_t
 
ödex
;

1163 
ödex
 = 0; index < 4; index++)

1165 
l⁄g_addr
.
u8
[
ödex
] = *
d©a
++;

1167  
l⁄g_addr
.
u32
;

1168 
	}
}

1178 
ölöe
 
uöt64_t
 
	$c⁄vît_byã_¨øy_to_64_bô
(
uöt8_t
 *
d©a
)

1182 
uöt64_t
 
u64
;

1183 
uöt8_t
 
u8
[8];

1184 } 
l⁄g_addr
;

1186 
uöt8_t
 
vÆ_ödex
;

1188 
vÆ_ödex
 = 0; val_index < 8; val_index++)

1190 
l⁄g_addr
.
u8
[
vÆ_ödex
] = *
d©a
++;

1193  
l⁄g_addr
.
u64
;

1194 
	}
}

	@/home/vaje/Documents/vaja9/asf/sam/utils/header_files/io.h

49 #i‚de‡
_SAM_IO_


50 
	#_SAM_IO_


	)

55 #i‡(
SAM3S
)

56 #i‡(
SAM3S8
 || 
SAM3SD8
)

57 
	~"ßm3s8.h
"

59 
	~"ßm3s.h
"

64 #i‡(
SAM3U
)

65 
	~"ßm3u.h
"

69 #i‡(
SAM3N
)

70 
	~"ßm3n.h
"

74 #i‡(
SAM3XA
)

75 
	~"ßm3xa.h
"

79 #i‡(
SAM4S
)

80 
	~"ßm4s.h
"

84 #i‡(
SAM4L
)

85 
	~"ßm4l.h
"

89 #i‡(
SAM4E
)

90 
	~"ßm4e.h
"

94 #i‡(
SAM4N
)

95 
	~"ßm4n.h
"

99 #i‡(
SAM4C
)

100 
	~"ßm4c.h
"

104 #i‡(
SAM4CM
)

105 #i‡(
SAM4CMP32
 || 
SAM4CMS32
)

106 
	~"ßm4cm32.h
"

108 
	~"ßm4cm.h
"

113 #i‡(
SAM4CP
)

114 
	~"ßm4˝.h
"

118 #i‡(
SAMG51
)

119 
	~"ßmg51.h
"

123 #i‡(
SAMG53
)

124 
	~"ßmg53.h
"

128 #i‡(
SAMG54
)

129 
	~"ßmg54.h
"

133 #i‡(
SAMG55
)

134 
	~"ßmg55.h
"

138 #i‡(
SAMV71
)

139 
	~"ßmv71.h
"

143 #i‡(
SAMV70
)

144 
	~"ßmv70.h
"

148 #i‡(
SAME70
)

149 
	~"ßme70.h
"

153 #i‡(
SAMS70
)

154 
	~"ßms70.h
"

	@/home/vaje/Documents/vaja9/asf/sam/utils/linker_scripts/sam3x/sam3x8/gcc/flash.ld

44 
OUTPUT_FORMAT
("elf32-littlearm", "elf32-littlearm", "elf32-littlearm")

45 
	$OUTPUT_ARCH
(
¨m
)

46 
	$SEARCH_DIR
(.)

49 
MEMORY


51 
	`rom
 (
rx
Ë: 
ORIGIN
 = 0x00080000, 
LENGTH
 = 0x00080000

52 
	`§am0
 (
rwx
Ë: 
ORIGIN
 = 0x20000000, 
LENGTH
 = 0x00010000

53 
	`§am1
 (
rwx
Ë: 
ORIGIN
 = 0x20080000, 
LENGTH
 = 0x00008000

54 
	`øm
 (
rwx
Ë: 
ORIGIN
 = 0x20070000, 
LENGTH
 = 0x00018000

56 
	}
}

59 
	g__°ack_size__
 = 
DEFINED
(
__°ack_size__
) ? __stack_size__ : 0x2000;

60 
	g__øm_íd__
 = 
ORIGIN
(
øm
Ë+ 
LENGTH
(ram) - 4;

63 
	gSECTIONS


65 .
	gãxt
 :

67 . = 
ALIGN
(4);

68 
	g_sfixed
 = .;

69 
KEEP
(*(.
ve˘‹s
 .vectors.*))

70 *(.
	gãxt
 .ãxt.* .
	ggnu
.
	glök⁄˚
.
	gt
.*)

71 *(.
	gglue_7t
Ë*(.
	gglue_7
)

72 *(.
	grod©a
 .rod©a* .
	ggnu
.
	glök⁄˚
.
	gr
.*)

73 *(.
	gARM
.
	gexèb
* .
	ggnu
.
	glök⁄˚
.
	g¨mexèb
.*)

77 . = 
ALIGN
(4);

78 
KEEP
(*(.
öô
))

79 . = 
ALIGN
(4);

80 
	g__¥eöô_¨øy_°¨t
 = .;

81 
KEEP
 (*(.
¥eöô_¨øy
))

82 
	g__¥eöô_¨øy_íd
 = .;

84 . = 
ALIGN
(4);

85 
	g__öô_¨øy_°¨t
 = .;

86 
KEEP
 (*(
SORT
(.
öô_¨øy
.*)))

87 
KEEP
 (*(.
öô_¨øy
))

88 
	g__öô_¨øy_íd
 = .;

90 . = 
ALIGN
(0x4);

91 
KEEP
 (*
¸tbegö
.
o
(.
˘‹s
))

92 
KEEP
 (*(
EXCLUDE_FILE
 (*
¸ãnd
.
o
Ë.
˘‹s
))

93 
KEEP
 (*(
SORT
(.
˘‹s
.*)))

94 
KEEP
 (*
¸ãnd
.
o
(.
˘‹s
))

96 . = 
ALIGN
(4);

97 
KEEP
(*(.
föi
))

99 . = 
ALIGN
(4);

100 
	g__föi_¨øy_°¨t
 = .;

101 
KEEP
 (*(.
föi_¨øy
))

102 
KEEP
 (*(
SORT
(.
föi_¨øy
.*)))

103 
	g__föi_¨øy_íd
 = .;

105 
KEEP
 (*
¸tbegö
.
o
(.
dt‹s
))

106 
KEEP
 (*(
EXCLUDE_FILE
 (*
¸ãnd
.
o
Ë.
dt‹s
))

107 
KEEP
 (*(
SORT
(.
dt‹s
.*)))

108 
KEEP
 (*
¸ãnd
.
o
(.
dt‹s
))

110 . = 
ALIGN
(4);

111 
	g_efixed
 = .;

112 } > 
rom


115 
PROVIDE_HIDDEN
 (
__exidx_°¨t
 = .);

116 .
	gARM
.
	gexidx
 :

118 *(.
ARM
.
exidx
* .
gnu
.
lök⁄˚
.
¨mexidx
.*)

119 } > 
rom


120 
PROVIDE_HIDDEN
 (
__exidx_íd
 = .);

122 . = 
ALIGN
(4);

123 
	g_ëext
 = .;

125 .
	gªloˇã
 : 
AT
 (
_ëext
)

127 . = 
ALIGN
(4);

128 
	g_§ñoˇã
 = .;

129 *(.
	gømfunc
 .ramfunc.*);

130 *(.
	gd©a
 .data.*);

131 . = 
ALIGN
(4);

132 
	g_îñoˇã
 = .;

133 } > 
	gøm


136 .
bss
 (
NOLOAD
) :

138 . = 
ALIGN
(4);

139 
	g_sbss
 = . ;

140 
	g_szîo
 = .;

141 *(.
	gbss
 .bss.*)

142 *(
	gCOMMON
)

143 . = 
ALIGN
(4);

144 
	g_ebss
 = . ;

145 
	g_ezîo
 = .;

146 } > 
	gøm


149 .
°ack
 (
NOLOAD
):

151 . = 
ALIGN
(8);

152 
	g_s°ack
 = .;

153 . = . + 
__°ack_size__
;

154 . = 
ALIGN
(8);

155 
	g_e°ack
 = .;

156 } > 
	gøm


158 . = 
ALIGN
(4);

159 
	g_íd
 = . ;

	@/home/vaje/Documents/vaja9/asf/sam/utils/linker_scripts/sam3x/sam3x8/gcc/sram.ld

42 
OUTPUT_FORMAT
("elf32-littlearm", "elf32-littlearm", "elf32-littlearm")

43 
	$OUTPUT_ARCH
(
¨m
)

44 
	$SEARCH_DIR
(.)

47 
MEMORY


49 
	`rom
 (
rx
Ë: 
ORIGIN
 = 0x00080000, 
LENGTH
 = 0x00080000

50 
	`§am0
 (
rwx
Ë: 
ORIGIN
 = 0x20000000, 
LENGTH
 = 0x00010000

51 
	`§am1
 (
rwx
Ë: 
ORIGIN
 = 0x20080000, 
LENGTH
 = 0x00008000

52 
	`øm
 (
rwx
Ë: 
ORIGIN
 = 0x20070000, 
LENGTH
 = 0x00018000

54 
	}
}

57 
	g__°ack_size__
 = 
DEFINED
(
__°ack_size__
) ? __stack_size__ : 0x2000;

58 
	g__øm_íd__
 = 
ORIGIN
(
øm
Ë+ 
LENGTH
(ram) - 4;

61 
	gSECTIONS


63 .
	gãxt
 :

65 . = 
ALIGN
(4);

66 
	g_sfixed
 = .;

67 
KEEP
(*(.
ve˘‹s
 .vectors.*))

68 *(.
	gãxt
 .ãxt.* .
	ggnu
.
	glök⁄˚
.
	gt
.*)

69 *(.
	gglue_7t
Ë*(.
	gglue_7
)

70 *(.
	grod©a
 .rod©a* .
	ggnu
.
	glök⁄˚
.
	gr
.*)

71 *(.
	gARM
.
	gexèb
* .
	ggnu
.
	glök⁄˚
.
	g¨mexèb
.*)

75 . = 
ALIGN
(4);

76 
KEEP
(*(.
öô
))

77 . = 
ALIGN
(4);

78 
	g__¥eöô_¨øy_°¨t
 = .;

79 
KEEP
 (*(.
¥eöô_¨øy
))

80 
	g__¥eöô_¨øy_íd
 = .;

82 . = 
ALIGN
(4);

83 
	g__öô_¨øy_°¨t
 = .;

84 
KEEP
 (*(
SORT
(.
öô_¨øy
.*)))

85 
KEEP
 (*(.
öô_¨øy
))

86 
	g__öô_¨øy_íd
 = .;

88 . = 
ALIGN
(0x4);

89 
KEEP
 (*
¸tbegö
.
o
(.
˘‹s
))

90 
KEEP
 (*(
EXCLUDE_FILE
 (*
¸ãnd
.
o
Ë.
˘‹s
))

91 
KEEP
 (*(
SORT
(.
˘‹s
.*)))

92 
KEEP
 (*
¸ãnd
.
o
(.
˘‹s
))

94 . = 
ALIGN
(4);

95 
KEEP
(*(.
föi
))

97 . = 
ALIGN
(4);

98 
	g__föi_¨øy_°¨t
 = .;

99 
KEEP
 (*(.
föi_¨øy
))

100 
KEEP
 (*(
SORT
(.
föi_¨øy
.*)))

101 
	g__föi_¨øy_íd
 = .;

103 
KEEP
 (*
¸tbegö
.
o
(.
dt‹s
))

104 
KEEP
 (*(
EXCLUDE_FILE
 (*
¸ãnd
.
o
Ë.
dt‹s
))

105 
KEEP
 (*(
SORT
(.
dt‹s
.*)))

106 
KEEP
 (*
¸ãnd
.
o
(.
dt‹s
))

108 . = 
ALIGN
(4);

109 
	g_efixed
 = .;

110 } > 
	gøm


112 . = 
ALIGN
(4);

113 
	g_ëext
 = .;

115 .
	gªloˇã
 : 
AT
 (
_ëext
)

117 . = 
ALIGN
(4);

118 
	g_§ñoˇã
 = .;

119 *(.
	gømfunc
 .ramfunc.*);

120 *(.
	gd©a
 .data.*);

121 . = 
ALIGN
(4);

122 
	g_îñoˇã
 = .;

123 } > 
	gøm


126 .
bss
 (
NOLOAD
) :

128 . = 
ALIGN
(4);

129 
	g_sbss
 = . ;

130 
	g_szîo
 = .;

131 *(.
	gbss
 .bss.*)

132 *(
	gCOMMON
)

133 . = 
ALIGN
(4);

134 
	g_ebss
 = . ;

135 
	g_ezîo
 = .;

136 } > 
	gøm


139 .
°ack
 (
NOLOAD
):

141 
_s°ack
 = .;

142 . = . + 
__°ack_size__
;

143 . = 
ALIGN
(8);

144 
	g_e°ack
 = .;

145 } > 
øm


148 
PROVIDE_HIDDEN
 (
__exidx_°¨t
 = .);

149 .
	gARM
.
	gexidx
 :

151 *(.
ARM
.
exidx
* .
gnu
.
lök⁄˚
.
¨mexidx
.*)

152 } > 
øm


153 
PROVIDE_HIDDEN
 (
__exidx_íd
 = .);

155 . = 
ALIGN
(4);

156 
	g_íd
 = . ;

	@/home/vaje/Documents/vaja9/asf/sam/utils/make/Makefile.sam.in

1 #Li° 
of
 
avaûabÀ
 
make
 
gﬂls
:

2 #
#Æ»
DeÁu…
 
èrgë
, 
buûds
 
the
 
¥oje˘


4 #˛ó¿
CÀ™
 
up
 
the
 
¥oje˘


5 #ªbuûd 
Rebuûd
 
the
 
¥oje˘


6 #debug_Êash 
Buûds
 
the
 
¥oje˘
 
™d
 
debug
 
ö
 
Êash


7 #debug_§am 
Buûds
 
the
 
¥oje˘
 
™d
 
debug
 
ö
 
§am


8 #
#do¯
Buûd
 
the
 
documíèti⁄


10 #˛óndo¯
CÀ™
 
up
 
the
 
documíèti⁄


11 #ªbuûddo¯
Rebuûd
 
the
 
documíèti⁄


12 #
#\
fûe


14 #
#C›yrighà(
c
Ë2011 - 2013 
Atmñ
 
C‹p‹©i⁄
. 
AŒ
 
rights
 
ª£rved
.

16 #
#\
asf_li˚n£_°¨t


18 #
#\
∑ge
 
Li˚n£


20 #
#Redi°ributi⁄ 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
f‹ms
, 
wôh
 
‹
 
wôhout


22 #modifiˇti⁄, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
c⁄dôi⁄s
áª 
më
:

23 #
#1. 
Redi°ributi⁄s
 
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
c›yright
 
nŸi˚
,

25 #thi†
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
dis˛aimî
.

26 #
#2. 
Redi°ributi⁄s
 
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
above
 
c›yright
 
nŸi˚
,

28 #thi†
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
dis˛aimî
 
ö
Åhê
documíèti⁄


29 #™d/
‹
 
Ÿhî
 
m©îüls
 
¥ovided
 
wôh
 
the
 
di°ributi⁄
.

30 #
#3. 
The
 
«me
 
of
 
Atmñ
 
may
 
nŸ
 
be
 
u£d
 
to
 
íd‹£
 
‹
 
¥omŸe
 
¥odu˘s
 
dîived


32 #‰om 
this
 
so·w¨e
 
wôhout
 
•ecific
 
¥i‹
 
wrôãn
 
≥rmissi⁄
.

33 #
#4. 
This
 
so·w¨e
 
may
 
⁄ly
 
be
 
ªdi°ribuãd
 
™d
 
u£d
 
ö
 
c⁄√˘i⁄
 
wôh
 
™


35 #Atmñ 
mi¸oc⁄åﬁÀr
 
¥odu˘
.

36 #
#THIS 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
ATMEL
 "AS IS" 
AND
 
ANY
 
EXPRESS
 
OR
 
IMPLIED


38 #WARRANTIES, 
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
, 
THE
 
IMPLIED
 
WARRANTIES
 
OF


39 #MERCHANTABILITY, 
FITNESS
 
FOR
 
A
 
PARTICULAR
 
PURPOSE
 
AND
 
NON
-
INFRINGEMENT
 
ARE


40 #EXPRESSLY 
AND
 
SPECIFICALLY
 
DISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
ATMEL
 
BE
 
LIABLE
 
FOR


41 #ANY 
DIRECT
, 
INDIRECT
, 
INCIDENTAL
, 
SPECIAL
, 
EXEMPLARY
, 
OR
 
CONSEQUENTIAL


42 #DAMAGES (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
, 
PROCUREMENT
 
OF
 
SUBSTITUTE
 
GOODS


43 #OR 
SERVICES
; 
LOSS
 
OF
 
USE
, 
DATA
, 
OR
 
PROFITS
; OR 
BUSINESS
 
INTERRUPTION
)

44 #HOWEVER 
CAUSED
 
AND
 
ON
 
ANY
 
THEORY
 
OF
 
LIABILITY
, 
WHETHER
 
IN
 
CONTRACT
,

45 #STRICT 
LIABILITY
, 
OR
 
TORT
 (
INCLUDING
 
NEGLIGENCE
 OR 
OTHERWISE
Ë
ARISING
 
IN


46 #ANY 
WAY
 
OUT
 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE

47 #POSSIBILITY 
OF
 
SUCH
 
DAMAGE
.

48 #
#\
asf_li˚n£_°›


52 #In˛udê
the
 
c⁄fig
.
mk
 
fûe
 
‰om
Åhê
cuºít
 
w‹kög
 
∑th
, 
e
.
g
., 
whîe
Åhe

53 #u£∏
ˇŒed
 
make
.

54 
ö˛ude
 
	gc⁄fig
.
	gmk


56 #Toﬁ 
to
 
u£
Åÿ
gíî©e
 
documíèti⁄
 
‰om
 
the
 
sour˚
 
code


57 
	gDOCGEN
 ?
doxygí


59 #Look 
sour˚
 
fûes
 
ªœtive
 
to
 
the
 
t›
-
Àvñ
 sour˚ 
dúe˘‹y


60 
VPATH
 :
	$$
(
PRJ_PATH
)

62 #Ouçuà
èrgë
 
fûe


63 
¥oje˘_ty≥
 :
	$$
(
PROJECT_TYPE
)

65 #Ouçuà
èrgë
 
fûe


66 
	`i„q
 (
	`$
(
¥oje˘_ty≥
),
Êash
)

67 
èrgë
 :
	$$
(
TARGET_FLASH
)

68 
lökî_s¸ùt
 :
	`$
(
PRJ_PATH
)/
	$$
(
LINKER_SCRIPT_FLASH
)

69 
debug_s¸ùt
 :
	`$
(
PRJ_PATH
)/
	$$
(
DEBUG_SCRIPT_FLASH
)

71 
èrgë
 :
	$$
(
TARGET_SRAM
)

72 
lökî_s¸ùt
 :
	`$
(
PRJ_PATH
)/
	$$
(
LINKER_SCRIPT_SRAM
)

73 
debug_s¸ùt
 :
	`$
(
PRJ_PATH
)/
	$$
(
DEBUG_SCRIPT_SRAM
)

74 
ídif


76 #Ouçuà
¥oje˘
 
	`«me
 (
èrgë
 
«me
 
möus
 
suffix
)

77 
¥oje˘
 :
	`$
(
ba£«me
 
	$$
(
èrgë
))

79 #Ouçuà
èrgë
 
	`fûe
 (
typiˇŒy
 
ELF
 
‹
 
libøry
)

80 
	`i„q
 (
	`$
(
suffix
 $(
èrgë
)),.
a
)

81 
èrgë_ty≥
 :
lib


83 
	`i„q
 (
	`$
(
suffix
 $(
èrgë
)),.
ñf
)

84 
èrgë_ty≥
 :
ñf


86 
	`$
(
îr‹
 "TargetÅype $(target_type) isÇot supported")

87 
ídif


88 
ídif


90 #AŒow 
ovîride
 
of
 
›î©ög
 
sy°em
 
dëe˘i⁄
. 
The
 
u£r
 
ˇn
 
add
 
OS
=
Löux
 
‹


91 #OS=
Wödows
 
⁄
 
the
 
comm™d
 
löe
 
to
 
ex∂icô
 
£t
Åhê
ho°
 
OS
.

92 #
#Thi†
Ælows
 
to
 
w‹k
 
¨ound
 
brokí
 
u«me
 
utûôy
 
⁄
 
˚πaö
 
sy°ems
.

94 
ifdef
 
OS


95 
	`i„q
 (
	`$
(
°rù
 $(
OS
)), 
Löux
)

96 
os_ty≥
 :
Löux


97 
ídif


98 
	`i„q
 (
	`$
(
°rù
 $(
OS
)), 
Wödows
)

99 
os_ty≥
 :
wödows32_64


100 
ídif


101 
ídif


103 
os_ty≥
 ?
	`$
(
°rù
 
	$$
(
shñl
 
u«me
))

105 
	`i„q
 (
	`$
(
os_ty≥
),
wödows32
)

106 
os
 :
Wödows


108 
	`i„q
 (
	`$
(
os_ty≥
),
wödows64
)

109 
os
 :
Wödows


111 
	`i„q
 (
	`$
(
os_ty≥
),
wödows32_64
)

112 
os
 ?
Wödows


114 
	`i„q
 (
	`$
(
os_ty≥
),)

115 
os
 :
Wödows


117 #DeÁu… 
to
 
Löux
 
°yÀ
 
›î©ög
 
sy°em
. 
BŸh
 
Cygwö
 
™d
 
mögw
 
¨e
 
fuŒy


118 #com∑tibÀ (
this
 
Makefûe
Ë
wôh
 
Löux
.

119 
os
 :
Löux


120 
ídif


121 
ídif


122 
ídif


123 
ídif


125 #Ouçuà
documíèti⁄
 
dúe˘‹y
 
™d
 
c⁄figuøti⁄
 
fûe
.

126 
docdú
 :../
doxygí
/
html


127 
doccfg
 :../
doxygí
/
doxyfûe
.doxygen

129 
CROSS
 ?
¨m
-
n⁄e
-
óbi
-

130 
AR
 :
	$$
(
CROSS
)
¨


131 
AS
 :
	$$
(
CROSS
)
as


132 
CC
 :
	$$
(
CROSS
)
gcc


133 
CPP
 :
	$$
(
CROSS
)
gcc
 -
E


134 
CXX
 :
	$$
(
CROSS
)
g
++

135 
LD
 :
	$$
(
CROSS
)
g
++

136 
NM
 :
	$$
(
CROSS
)
nm


137 
OBJCOPY
 :
	$$
(
CROSS
)
objc›y


138 
OBJDUMP
 :
	$$
(
CROSS
)
objdump


139 
SIZE
 :
	$$
(
CROSS
)
size


140 
GDB
 :
	$$
(
CROSS
)
gdb


142 
RM
 :
rm


143 
	`i„q
 (
	`$
(
os
),
Wödows
)

144 
RMDIR
 :
rmdú
 /
S
 /
Q


146 
RMDIR
 :
rmdú
 -
p
 --
ign‹e
-
Áû
-
⁄
-
n⁄
-
em±y


147 
ídif


149 #O¿
Wödows
, 
we
 
√ed
 
to
 
ovîride
 
the
 
shñl
Åÿ
f‹˚
Åhê
u£
 
of
 
cmd
.
exe


150 
	`i„q
 (
	`$
(
os
),
Wödows
)

151 
SHELL
 :
cmd


152 
ídif


154 #Såög†
bóutifyög
 
ouçut


155 
MSG_CLEAN_FILES
 = "RM *.o *.d"

156 
MSG_CLEAN_DIRS
 = "RMDIR $(strip $(clean-dirs))"

157 
MSG_CLEAN_DOC
 = "RMDIR $(docdir)"

158 
MSG_MKDIR
 = "MKDIR $(dir $@)"

160 
MSG_INFO
 = "INFO "

161 
MSG_PREBUILD
 = "PREBUILD $(PREBUILD_CMD)"

162 
MSG_POSTBUILD
 = "POSTBUILD $(POSTBUILD_CMD)"

164 
MSG_ARCHIVING
 = "AR $@"

165 
MSG_ASSEMBLING
 = "AS $@"

166 
MSG_BINARY_IMAGE
 = "OBJCOPY $@"

167 
MSG_COMPILING
 = "CC $@"

168 
MSG_COMPILING_CXX
 = "CXX $@"

169 
MSG_EXTENDED_LISTING
 = "OBJDUMP $@"

170 
MSG_IHEX_IMAGE
 = "OBJCOPY $@"

171 
MSG_LINKING
 = "LN $@"

172 
MSG_PREPROCESSING
 = "CPP $@"

173 
MSG_SIZE
 = "SIZE $@"

174 
MSG_SYMBOL_TABLE
 = "NM $@"

176 
MSG_GENERATING_DOC
 = "DOXYGEN $(docdir)"

178 #D⁄'àu£ make'
s
 
buût
-
ö
 
ruÀs
 
™d
 
v¨übÀs


179 
MAKEFLAGS
 +-
rR


181 #D⁄'à¥öà'
E¡îög
 
dúe˘‹y
 ...'

182 
MAKEFLAGS
 +--
no
-
¥öt
-
dúe˘‹y


184 #Fun˘i⁄ 
ªvîsög
 
the
 
‹dî
 
of
 
a
 
li°


185 
ªvî£
 = 
	`$
($(1),$(
ˇŒ
Ñevî£,$(
w‹dli°
 2,$(
w‹ds
 $(1)),$(1)))Ë$(
fú°w‹d
 
	$$
(1))

187 #Hidê
comm™d
 
ouçut
 
by
 , 
but
 
Ælow
 
the
 
u£r
 
to
 
ovîride
 
this


188 #by 
addög
 
V
=1 
⁄
 
the
 
comm™d
 
löe
.

189 #
#Thi†
is
 
ö•úed
 
by
 
the
 
Kbuûd
 
sy°em
 
u£d
 byÅhê
Löux
 
kî√l
.

191 
ifdef
 
V


192 
	`i„q
 ("$(origin V)", "commandÜine")

193 
VERBOSE
 = 
	$$
(
V
)

194 
ídif


195 
ídif


196 
i‚def
 
VERBOSE


197 
VERBOSE
 = 0

198 
ídif


200 
	`i„q
 (
	`$
(
VERBOSE
), 1)

201 
Q
 =

203 
Q
 = @

204 
ídif


206 
¨Êags
-
gnu
-
y
 :
	$$
(
ARFLAGS
)

207 
asÊags
-
gnu
-
y
 :
	$$
(
ASFLAGS
)

208 
cÊags
-
gnu
-
y
 :
	$$
(
CFLAGS
)

209 
cxxÊags
-
gnu
-
y
 :
	$$
(
CXXFLAGS
)

210 
˝pÊags
-
gnu
-
y
 :
	$$
(
CPPFLAGS
)

211 
˝uÊags
-
gnu
-
y
 :=

212 
dbgÊags
-
gnu
-
y
 :
	$$
(
DBGFLAGS
)

213 
libÊags
-
gnu
-
y
 :
	`$
(
f‹óch
 
LIB
,$(
LIBS
),-
	$l$
(
LIB
))

214 
ldÊags
-
gnu
-
y
 :
	$$
(
LDFLAGS
)

215 
ÊashÊags
-
gnu
-
y
 :=

216 
˛ón
-
fûes
 :=

217 
˛ón
-
dús
 :=

219 
˛ón
-
fûes
 +
	`$
(
wûdˇrd
 $(
èrgë
Ë$(
¥oje˘
).
m≠
)

220 
˛ón
-
fûes
 +
	`$
(
wûdˇrd
 $(
¥oje˘
).
hex
 $’roje˘).
bö
)

221 
˛ón
-
fûes
 +
	`$
(
wûdˇrd
 $(
¥oje˘
).
lss
 $’roje˘).
sym
)

222 
˛ón
-
fûes
 +
	`$
(
wûdˇrd
 
	$$
(
buûd
))

224 #U£ 
pùes
 
ö°ód
 
of
 
ãmp‹¨y
 
fûes
 
communiˇti⁄
 
bëwìn
 
¥o˚s£s


225 
cÊags
-
gnu
-
y
 +-
pùe


226 
asÊags
-
gnu
-
y
 +-
pùe


227 
ldÊags
-
gnu
-
y
 +-
pùe


229 #Archivî 
Êags
.

230 
¨Êags
-
gnu
-
y
 +
rcs


232 #Alway†
íabÀ
 
w¨nögs
. 
And
 
be
 
vîy
 
ˇªful
 
about
 
im∂icô


234 
cÊags
-
gnu
-
y
 +-
WÆl
 -
W°ri˘
-
¥ŸŸy≥s
 -
Wmissög
-prototypes

235 
cÊags
-
gnu
-
y
 +-
Wîr‹
-
im∂icô
-
fun˘i⁄
-
de˛¨©i⁄


236 
cxxÊags
-
gnu
-
y
 +-
WÆl


237 #IAR 
d€¢
'tállowárithmetic on voidÖointers, so warnáboutÅhat.

238 
cÊags
-
gnu
-
y
 +-
Wpoöãr
-
¨ôh


239 
cxxÊags
-
gnu
-
y
 +-
Wpoöãr
-
¨ôh


241 #Pª¥o˚ss‹ 
Êags
.

242 
˝pÊags
-
gnu
-
y
 +
	`$
(
f‹óch
 
INC
,$(
add¥efix
 $(
PRJ_PATH
)/,$(
INC_PATH
)),-
	$I$
(
INC
))

243 
asÊags
-
gnu
-
y
 +
	`$
(
f‹óch
 
INC
,$(
add¥efix
 $(
PRJ_PATH
)/,$(
INC_PATH
)),'-Wa,-I$(INC)')

245 #CPU 
•ecific
 
Êags
.

246 
˝uÊags
-
gnu
-
y
 +-
m˝u
=
	`$
(
ARCH
Ë-
mthumb
 -
D
=
	$__$
(
PART
)
__


248 #Dïídícy 
fûe
 
Êags
.

249 
dïÊags
 = -
MD
 -
MP
 -
MQ
 
$
@

251 #Debug 
•ecific
 
Êags
.

252 
ifdef
 
BUILD_DEBUG_LEVEL


253 
dbgÊags
-
gnu
-
y
 +-
	$g$
(
BUILD_DEBUG_LEVEL
)

255 
dbgÊags
-
gnu
-
y
 +-
g3


256 
ídif


258 #O±imiz©i⁄ 
•ecific
 
Êags
.

259 
ifdef
 
BUILD_OPTIMIZATION


260 
›tÊags
-
gnu
-
y
 = -
	$O$
(
BUILD_OPTIMIZATION
)

262 
›tÊags
-
gnu
-
y
 = 
	$$
(
OPTIMIZATION
)

263 
ídif


265 #Alway†
¥ïro˚ss
 
as£mbÀr
 
fûes
.

266 
asÊags
-
gnu
-
y
 +-
x
 
as£mbÀr
-
wôh
-
˝p


267 #Compûê
C
 
fûes
 
usög
 
the
 
GNU99
 
°™d¨d
.

268 
cÊags
-
gnu
-
y
 +-
°d
=
gnu99


269 #Compûê
C
++ 
fûes
 
usög
 
the
 
GNU
++98 
°™d¨d
.

270 
cxxÊags
-
gnu
-
y
 +-
°d
=gnu++98

273 
cÊags
-
gnu
-
y
 +-
‚o
-
°ri˘
-
Æüsög


274 
cxxÊags
-
gnu
-
y
 +-
‚o
-
°ri˘
-
Æüsög


276 #Sï¨©ê
óch
 
fun˘i⁄
 
™d
 
d©a
 
öto
 
ôs
 
own
 
£∑øã
 
£˘i⁄
 
to
 
Ælow


277 #g¨bagê
cﬁÀ˘i⁄
 
of
 
unu£d
 
£˘i⁄s
.

278 
cÊags
-
gnu
-
y
 +-
ffun˘i⁄
-
£˘i⁄s
 -
fd©a
-sections

279 
cxxÊags
-
gnu
-
y
 +-
ffun˘i⁄
-
£˘i⁄s
 -
fd©a
-sections

281 #V¨iou†
cÊags
.

282 
cÊags
-
gnu
-
y
 +-
Wch¨
-
subs¸ùts
 -
Wcommít
 -
Wf‹m©
=2 -
Wim∂icô
-

283 
cÊags
-
gnu
-
y
 +-
Wmaö
 -
W∑ª¡he£s


284 
cÊags
-
gnu
-
y
 +-
W£quí˚
-
poöt
 -
Wªtu∫
-
ty≥
 -
Wswôch
 -
Wåigøphs
 -
Wunu£d


285 
cÊags
-
gnu
-
y
 +-
Wunöôülized
 -
Wunknown
-
¥agmas
 -
WÊﬂt
-
equÆ
 -
Wundef


286 
cÊags
-
gnu
-
y
 +-
Wshadow
 -
Wbad
-
fun˘i⁄
-
ˇ°
 -
Wwrôe
-
°rögs


287 
cÊags
-
gnu
-
y
 +-
Wsign
-
com∑ª
 -
Waggªg©e
-

288 
cÊags
-
gnu
-
y
 +-
Wmissög
-
de˛¨©i⁄s


289 
cÊags
-
gnu
-
y
 +-
Wf‹m©
 -
Wmissög
-
f‹m©
-
©åibuã
 -
Wno
-
dïªˇãd
-
de˛¨©i⁄s


290 
cÊags
-
gnu
-
y
 +-
W∑cked
 -
Wªdund™t
-
de˛s
 -
W√°ed
-
exã∫s
 -
Wölöe
 -
Wl⁄g
-

291 
cÊags
-
gnu
-
y
 +-
WuƒóchabÀ
-
code


292 
cÊags
-
gnu
-
y
 +-
Wˇ°
-
Æign


293 
cÊags
-
gnu
-
y
 +--
∑øm
 
max
-
ölöe
-
ö¢s
-
sögÀ
=500

295 #G¨bagê
cﬁÀ˘
 
uƒe„ºed
 
£˘i⁄s
 
whí
 
lökög
.

296 
ldÊags
-
gnu
-
y
 +-
Wl
,--
gc
-
£˘i⁄s


298 #U£ 
the
 
lökî
 
s¸ùt
 
¥ovided
 
by
Åhê
¥oje˘
.

299 
	`i‚eq
 (
	`$
(
°rù
 $(
lökî_s¸ùt
)),)

300 
ldÊags
-
gnu
-
y
 +-
Wl
,-
T
 
	$$
(
lökî_s¸ùt
)

301 
ídif


303 #Ouçuà
a
 
lök
 
m≠
 
fûe
 
™d
á 
¸oss
 
ª„ªn˚
 
èbÀ


304 
ldÊags
-
gnu
-
y
 +-
Wl
,-
M≠
=
	`$
(
¥oje˘
).
m≠
,--
¸ef


306 #Add 
libøry
 
£¨ch
 
∑ths
 
ªœtive
 
to
 
the
 
t›
 
Àvñ
 
dúe˘‹y
.

307 
ldÊags
-
gnu
-
y
 +
	`$
(
f‹óch
 
_LIB_PATH
,$(
add¥efix
 $(
PRJ_PATH
)/,$(
LIB_PATH
)),-
	$L$
(
_LIB_PATH
))

309 
a_Êags
 = 
	`$
(
˝uÊags
-
gnu
-
y
Ë$(
dïÊags
Ë$(
˝pÊags
-gnu-yË$(
asÊags
-gnu-yË-
D__ASSEMBLY__


310 
c_Êags
 = 
	`$
(
˝uÊags
-
gnu
-
y
Ë$(
dbgÊags
-gnu-yË$(
dïÊags
Ë$(
›tÊags
-gnu-yË$(
˝pÊags
-gnu-yË$(
cÊags
-gnu-y)

311 
cxx_Êags

	`$
(
˝uÊags
-
gnu
-
y
Ë$(
dbgÊags
-gnu-yË$(
dïÊags
Ë$(
›tÊags
-gnu-yË$(
˝pÊags
-gnu-yË$(
cxxÊags
-gnu-y)

312 
l_Êags
 = -
Wl
,--
íåy
=
Re£t_H™dÀr
 -Wl,--
¸ef
 
	`$
(
˝uÊags
-
gnu
-
y
Ë$(
›tÊags
-gnu-yË$(
ldÊags
-gnu-y)

313 
¨_Êags
 = 
	`$
(
¨Êags
-
gnu
-
y
)

315 #Sour˚ 
fûes
 
li°
 
™d
 
∑π
 
öf‹m©i⁄s
 
mu°
 
Æªady
 
be
 
ö˛uded
 
bef‹e


316 #ru¬ög 
this
 
makefûe


318 #I‡
a
 
cu°om
 
buûd
 
dúe˘‹y
 
is
 
•ecifõd
, 
u£
 
ô
 -- 
f‹˚
 
åaûög
 / 
ö
 dúe˘‹y 
«me
.

319 
ifdef
 
BUILD_DIR


320 
buûd
-
dú
 :
	`$
(dú $(
BUILD_DIR
))$($(
nŸdú
 $(BUILD_DIR)),$(notdir $(BUILD_DIR))/)

322 
buûd
-
dú
 =

323 
ídif


325 #Cª©ê
obje˘
 
fûes
 
li°
 
‰om
 
sour˚
 filesÜist.

326 
obj
-
y
 :
	`$
(
add¥efix
 $(
buûd
-
dú
), $(
addsuffix
 .
o
,$(
ba£«me
 $(
CSRCS
Ë
	$$
(
ASSRCS
))))

327 #Cª©ê
dïídícy
 
fûes
 
li°
 
‰om
 
sour˚
 filesÜist.

328 
dï
-
fûes
 :
	`$
(
wûdˇrd
 $(
f‹óch
 
f
,$(
obj
-
y
),$(
ba£«me
 $(f)).
d
))

330 
˛ón
-
fûes
 +
	`$
(
wûdˇrd
 $(
obj
-
y
))

331 
˛ón
-
fûes
 +
	`$
(
dï
-files)

333 
˛ón
-
dús
 +
	`$
(
ˇŒ
 
ªvî£
,$(
s‹t
 $(
wûdˇrd
 $(
dú
 $(
obj
-
y
)))))

335 #DeÁu… 
èrgë
.

336 .
PHONY
: 
Æl


337 
	`i„q
 (
	`$
(
¥oje˘_ty≥
),
Æl
)

338 
Æl
:

339 
	$$
(
MAKE
Ë
Æl
 
PROJECT_TYPE
=
Êash


340 
	$$
(
MAKE
Ë
Æl
 
PROJECT_TYPE
=
§am


342 
	`i„q
 (
	`$
(
èrgë_ty≥
),
lib
)

343 
Æl
: 
	`$
(
èrgë
Ë$(
¥oje˘
).
lss
 $’roje˘).
sym


345 
	`i„q
 (
	`$
(
èrgë_ty≥
),
ñf
)

346 
Æl
: 
¥ebuûd
 
	`$
(
èrgë
Ë$(
¥oje˘
).
lss
 $’roje˘).
sym
 $’roje˘).
hex
 $’roje˘).
bö
 
po°buûd


347 
ídif


348 
ídif


349 
ídif


351 
¥ebuûd
:

352 
	`i‚eq
 (
	`$
(
°rù
 $(
PREBUILD_CMD
)),)

353 @
echo
 
	`$
(
MSG_PREBUILD
)

354 
	`$
(
Q
)
	$$
(
PREBUILD_CMD
)

355 
ídif


357 
po°buûd
:

358 
	`i‚eq
 (
	`$
(
°rù
 $(
POSTBUILD_CMD
)),)

359 @
echo
 
	`$
(
MSG_POSTBUILD
)

360 
	`$
(
Q
)
	$$
(
POSTBUILD_CMD
)

361 
ídif


363 #CÀ™ 
up
 
the
 
¥oje˘
.

364 .
PHONY
: 
˛ón


365 
˛ón
:

366 @
	`$
($(
°rù
 $(
˛ón
-
fûes
)),
echo
 $(
MSG_CLEAN_FILES
))

367 
	`$
($(
°rù
 $(
˛ón
-
fûes
)),$(
Q
)$(
RM
) $(clean-files),)

368 @
	`$
($(
°rù
 $(
˛ón
-
dús
)),
echo
 
	$$
(
MSG_CLEAN_DIRS
))

369 #Removê
¸óãd
 
dúe˘‹õs
, 
™d
 
make
 
suª
 
we
 
⁄ly
 
ªmove
 
exi°ög


370 #dúe˘‹õs, 
sö˚
 
ªcursive
 
rmdú
 
might
 
hñp
 
us
 
a
 
bô
 
⁄
 
the
 
way
.

371 
	`i„q
 (
	`$
(
os
),
Wödows
)

372 
	`$
(
Q
)$($(
°rù
 $(
˛ón
-
dús
)), \

373 
	`$
(
RMDIR
Ë$(
°rù
 $(
sub°
 /,\,$(
˛ón
-
dús
))))

375 
	`$
(
Q
)$($(
°rù
 $(
˛ón
-
dús
)), \

376 
dúe˘‹y
 
ö
 
	`$
(
°rù
 $(
˛ón
-
dús
)); do \

377 [ -
d
 "$$dúe˘‹y" ]; 
thí
 \

378 
	`$
(
RMDIR
Ë
$$dúe˘‹y
; \

379 
fi
 \

380 
d⁄e
 \

382 
ídif


384 #Rebuûd 
the
 
¥oje˘
.

385 .
PHONY
: 
ªbuûd


386 
ªbuûd
: 
˛ón
 
Æl


388 #Debug 
the
 
¥oje˘
 
ö
 
Êash
.

389 .
PHONY
: 
debug_Êash


390 
debug_Êash
: 
Æl


391 
	`$
(
GDB
Ë-
x
 "$(PRJ_PATH)/$(DEBUG_SCRIPT_FLASH)" -
ex
 "ª£t" -
ªadnow
 -
£
 
	$$
(
TARGET_FLASH
)

393 #Debug 
the
 
¥oje˘
 
ö
 
§am
.

394 .
PHONY
: 
debug_§am


395 
debug_§am
: 
Æl


396 
	`$
(
GDB
Ë-
x
 "$(PRJ_PATH)/$(DEBUG_SCRIPT_SRAM)" -
ex
 "ª£t" -
ªadnow
 -
£
 $(
TARGET_SRAM
)

398 .
PHONY
: 
objfûes


399 
objfûes
: 
	`$
(
obj
-
y
)

401 #Cª©ê
obje˘
 
fûes
 
‰om
 
C
 
sour˚
 files.

402 
	`$
(
buûd
-
dú
)%.
o
: %.
c
 
	$$
(
MAKEFILE_PATH
Ë
c⁄fig
.
mk


403 
	$$
(
Q
)
ã°
 -
d
 
	`$
(
dú
 
$
@Ë|| 
echo
 
	$$
(
MSG_MKDIR
)

404 
	`i„q
 (
	`$
(
os
),
Wödows
)

405 
	$$
(
Q
)
ã°
 -
d
 
	`$
(
∑tsub°
 %/,%,$(
dú
 
$
@)Ë|| 
mkdú
 $(
sub°
 /,\,$(dir $@))

407 
	$$
(
Q
)
ã°
 -
d
 
	`$
(
dú
 
$
@Ë|| 
mkdú
 -
p
 $(dir $@)

408 
ídif


409 @
echo
 
	`$
(
MSG_COMPILING
)

410 
	`$
(
Q
)$(
CC
Ë$(
c_Êags
Ë-
c
 
$
< -
o
 $@

412 #Cª©ê
obje˘
 
fûes
 
‰om
 
C
++ 
sour˚
 files.

413 
	`$
(
buûd
-
dú
)%.
o
: %.
˝p
 
	$$
(
MAKEFILE_PATH
Ë
c⁄fig
.
mk


414 
	$$
(
Q
)
ã°
 -
d
 
	`$
(
dú
 
$
@Ë|| 
echo
 
	$$
(
MSG_MKDIR
)

415 
	`i„q
 (
	`$
(
os
),
Wödows
)

416 
	$$
(
Q
)
ã°
 -
d
 
	`$
(
∑tsub°
 %/,%,$(
dú
 
$
@)Ë|| 
mkdú
 $(
sub°
 /,\,$(dir $@))

418 
	$$
(
Q
)
ã°
 -
d
 
	`$
(
dú
 
$
@Ë|| 
mkdú
 -
p
 $(dir $@)

419 
ídif


420 @
echo
 
	`$
(
MSG_COMPILING_CXX
)

421 
	`$
(
Q
)$(
CXX
Ë$(
cxx_Êags
Ë-
c
 
$
< -
o
 $@

423 #Pª¥o˚s†
™d
 
as£mbÀ
: 
¸óã
 
obje˘
 
fûes
 
‰om
 
as£mbÀr
 
sour˚
 files.

424 
	`$
(
buûd
-
dú
)%.
o
: %.
S
 
	$$
(
MAKEFILE_PATH
Ë
c⁄fig
.
mk


425 
	$$
(
Q
)
ã°
 -
d
 
	`$
(
dú
 
$
@Ë|| 
echo
 
	$$
(
MSG_MKDIR
)

426 
	`i„q
 (
	`$
(
os
),
Wödows
)

427 
	$$
(
Q
)
ã°
 -
d
 
	`$
(
∑tsub°
 %/,%,$(
dú
 
$
@)Ë|| 
mkdú
 $(
sub°
 /,\,$(dir $@))

429 
	$$
(
Q
)
ã°
 -
d
 
	`$
(
dú
 
$
@Ë|| 
mkdú
 -
p
 $(dir $@)

430 
ídif


431 @
echo
 
	`$
(
MSG_ASSEMBLING
)

432 
	`$
(
Q
)$(
CC
Ë$(
a_Êags
Ë-
c
 
$
< -
o
 $@

434 #In˛udê
Æl
 
dïídícy
 
fûes
 
to
 
add
 
dïedícy
ÅÿÆ»
hódî
 fûe†
ö
 
u£
.

435 
ö˛ude
 
	`$
(
dï
-
fûes
)

437 
	`i„q
 (
	`$
(
èrgë_ty≥
),
lib
)

438 #Archivê
obje˘
 
fûes
 
öto
 
™
 
¨chive


439 
	$$
(
èrgë
): 
	$$
(
MAKEFILE_PATH
Ë
c⁄fig
.
mk
 
	`$
(
obj
-
y
)

440 @
echo
 
	`$
(
MSG_ARCHIVING
)

441 
	`$
(
Q
)$(
AR
Ë$(
¨_Êags
Ë
$
@ $(
obj
-
y
)

442 @
echo
 
	`$
(
MSG_SIZE
)

443 
	`$
(
Q
)$(
SIZE
Ë-
Bxt
 
$
@

445 
	`i„q
 (
	`$
(
èrgë_ty≥
),
ñf
)

446 #Lök 
the
 
obje˘
 
fûes
 
öto
 
™
 
ELF
 
fûe
. 
Also
 
make
 
suª
Åhê
èrgë
 
is
 
ªbuût


447 #i‡
the
 
comm⁄
 
Makefûe
.
ßm
.
ö
 
‹
 
¥oje˘
 
c⁄fig
.
mk
 
is
 
ch™ged
.

448 
	$$
(
èrgë
): 
	`$
(
lökî_s¸ùt
Ë
	$$
(
MAKEFILE_PATH
Ë
c⁄fig
.
mk
 
	`$
(
obj
-
y
)

449 @
echo
 
	`$
(
MSG_LINKING
)

450 
	`$
(
Q
)$(
LD
Ë$(
l_Êags
Ë$(
obj
-
y
Ë$(
libÊags
-
gnu
-yË-
o
 
$
@

451 @
echo
 
	`$
(
MSG_SIZE
)

452 
	`$
(
Q
)$(
SIZE
Ë-
Ax
 
$
@

453 
	`$
(
Q
)$(
SIZE
Ë-
Bx
 
$
@

454 
ídif


455 
ídif


457 #Cª©ê
exãnded
 
fun˘i⁄
 
li°ög
 
‰om
 
èrgë
 
ouçut
 
fûe
.

458 %.
lss
: 
	`$
(
èrgë
)

459 @
echo
 
	`$
(
MSG_EXTENDED_LISTING
)

460 
	`$
(
Q
)$(
OBJDUMP
Ë-
h
 -
S
 
$
< > $@

462 #Cª©ê
symbﬁ
 
èbÀ
 
‰om
 
èrgë
 
ouçut
 
fûe
.

463 %.
sym
: 
	`$
(
èrgë
)

464 @
echo
 
	`$
(
MSG_SYMBOL_TABLE
)

465 
	`$
(
Q
)$(
NM
Ë-
n
 
$
< > $@

467 #Cª©ê
I¡ñ
 
HEX
 
image
 
‰om
 
ELF
 
ouçut
 
fûe
.

468 %.
hex
: 
	`$
(
èrgë
)

469 @
echo
 
	`$
(
MSG_IHEX_IMAGE
)

470 
	`$
(
Q
)$(
OBJCOPY
Ë-
O
 
ihex
 $(
ÊashÊags
-
gnu
-
y
Ë
$
< $@

472 #Cª©ê
bö¨y
 
image
 
‰om
 
ELF
 
ouçut
 
fûe
.

473 %.
bö
: 
	`$
(
èrgë
)

474 @
echo
 
	`$
(
MSG_BINARY_IMAGE
)

475 
	`$
(
Q
)$(
OBJCOPY
Ë-
O
 
bö¨y
 
$
< $@

477 #Providê
öf‹m©i⁄
 
about
 
the
 
dëe˘ed
 
ho°
 
›î©ög
 
sy°em
.

478 .
SECONDARY
: 
öfo
-
os


479 
öfo
-
os
:

480 @
echo
 
	`$
(
MSG_INFO
)
	$$
(
os
Ë
buûd
 
ho°
 
dëe˘ed


482 #Buûd 
Doxygí
 
gíî©ed
 
documíèti⁄
.

483 .
PHONY
: 
doc


484 
doc
:

485 @
echo
 
	`$
(
MSG_GENERATING_DOC
)

486 
	$$
(
Q
)
cd
 
	`$
(
dú
 $(
doccfg
)Ë&& $(
DOCGEN
Ë$(
nŸdú
 
	$$
(
doccfg
))

488 #CÀ™ 
Doxygí
 
gíî©ed
 
documíèti⁄
.

489 .
PHONY
: 
˛óndoc


490 
˛óndoc
:

491 @
	`$
($(
wûdˇrd
 $(
docdú
)),
echo
 $(
MSG_CLEAN_DOC
))

492 
	`$
(
Q
)$($(
wûdˇrd
 $(
docdú
)),$(
RM
Ë--
ªcursive
 
	$$
(
docdú
))

494 #Rebuûd 
the
 
Doxygí
 
gíî©ed
 
documíèti⁄
.

495 .
PHONY
: 
ªbuûddoc


496 
ªbuûddoc
: 
˛óndoc
 
doc


	@/home/vaje/Documents/vaja9/asf/sam/utils/preprocessor/mrepeat.h

47 #i‚de‡
_MREPEAT_H_


48 
	#_MREPEAT_H_


	)

58 
	~"¥ïro˚ss‹.h
"

62 
	#MREPEAT_LIMIT
 256

	)

75 
	#MREPEAT
(
cou¡
, 
ma¸o
, 
d©a
Ë
	`TPASTE2
(
MREPEAT
, cou¡)(ma¸o, d©a)

	)

77 
	#MREPEAT0
–
ma¸o
, 
d©a
)

	)

78 
	#MREPEAT1
–
ma¸o
, 
d©a
Ë
	`MREPEAT0
–ma¸o, d©aË
	`ma¸o
–0, d©a)

	)

79 
	#MREPEAT2
–
ma¸o
, 
d©a
Ë
	`MREPEAT1
–ma¸o, d©aË
	`ma¸o
–1, d©a)

	)

80 
	#MREPEAT3
–
ma¸o
, 
d©a
Ë
	`MREPEAT2
–ma¸o, d©aË
	`ma¸o
–2, d©a)

	)

81 
	#MREPEAT4
–
ma¸o
, 
d©a
Ë
	`MREPEAT3
–ma¸o, d©aË
	`ma¸o
–3, d©a)

	)

82 
	#MREPEAT5
–
ma¸o
, 
d©a
Ë
	`MREPEAT4
–ma¸o, d©aË
	`ma¸o
–4, d©a)

	)

83 
	#MREPEAT6
–
ma¸o
, 
d©a
Ë
	`MREPEAT5
–ma¸o, d©aË
	`ma¸o
–5, d©a)

	)

84 
	#MREPEAT7
–
ma¸o
, 
d©a
Ë
	`MREPEAT6
–ma¸o, d©aË
	`ma¸o
–6, d©a)

	)

85 
	#MREPEAT8
–
ma¸o
, 
d©a
Ë
	`MREPEAT7
–ma¸o, d©aË
	`ma¸o
–7, d©a)

	)

86 
	#MREPEAT9
–
ma¸o
, 
d©a
Ë
	`MREPEAT8
–ma¸o, d©aË
	`ma¸o
–8, d©a)

	)

87 
	#MREPEAT10
–
ma¸o
, 
d©a
Ë
	`MREPEAT9
–ma¸o, d©aË
	`ma¸o
–9, d©a)

	)

88 
	#MREPEAT11
–
ma¸o
, 
d©a
Ë
	`MREPEAT10
–ma¸o, d©aË
	`ma¸o
–10, d©a)

	)

89 
	#MREPEAT12
–
ma¸o
, 
d©a
Ë
	`MREPEAT11
–ma¸o, d©aË
	`ma¸o
–11, d©a)

	)

90 
	#MREPEAT13
–
ma¸o
, 
d©a
Ë
	`MREPEAT12
–ma¸o, d©aË
	`ma¸o
–12, d©a)

	)

91 
	#MREPEAT14
–
ma¸o
, 
d©a
Ë
	`MREPEAT13
–ma¸o, d©aË
	`ma¸o
–13, d©a)

	)

92 
	#MREPEAT15
–
ma¸o
, 
d©a
Ë
	`MREPEAT14
–ma¸o, d©aË
	`ma¸o
–14, d©a)

	)

93 
	#MREPEAT16
–
ma¸o
, 
d©a
Ë
	`MREPEAT15
–ma¸o, d©aË
	`ma¸o
–15, d©a)

	)

94 
	#MREPEAT17
–
ma¸o
, 
d©a
Ë
	`MREPEAT16
–ma¸o, d©aË
	`ma¸o
–16, d©a)

	)

95 
	#MREPEAT18
–
ma¸o
, 
d©a
Ë
	`MREPEAT17
–ma¸o, d©aË
	`ma¸o
–17, d©a)

	)

96 
	#MREPEAT19
–
ma¸o
, 
d©a
Ë
	`MREPEAT18
–ma¸o, d©aË
	`ma¸o
–18, d©a)

	)

97 
	#MREPEAT20
–
ma¸o
, 
d©a
Ë
	`MREPEAT19
–ma¸o, d©aË
	`ma¸o
–19, d©a)

	)

98 
	#MREPEAT21
–
ma¸o
, 
d©a
Ë
	`MREPEAT20
–ma¸o, d©aË
	`ma¸o
–20, d©a)

	)

99 
	#MREPEAT22
–
ma¸o
, 
d©a
Ë
	`MREPEAT21
–ma¸o, d©aË
	`ma¸o
–21, d©a)

	)

100 
	#MREPEAT23
–
ma¸o
, 
d©a
Ë
	`MREPEAT22
–ma¸o, d©aË
	`ma¸o
–22, d©a)

	)

101 
	#MREPEAT24
–
ma¸o
, 
d©a
Ë
	`MREPEAT23
–ma¸o, d©aË
	`ma¸o
–23, d©a)

	)

102 
	#MREPEAT25
–
ma¸o
, 
d©a
Ë
	`MREPEAT24
–ma¸o, d©aË
	`ma¸o
–24, d©a)

	)

103 
	#MREPEAT26
–
ma¸o
, 
d©a
Ë
	`MREPEAT25
–ma¸o, d©aË
	`ma¸o
–25, d©a)

	)

104 
	#MREPEAT27
–
ma¸o
, 
d©a
Ë
	`MREPEAT26
–ma¸o, d©aË
	`ma¸o
–26, d©a)

	)

105 
	#MREPEAT28
–
ma¸o
, 
d©a
Ë
	`MREPEAT27
–ma¸o, d©aË
	`ma¸o
–27, d©a)

	)

106 
	#MREPEAT29
–
ma¸o
, 
d©a
Ë
	`MREPEAT28
–ma¸o, d©aË
	`ma¸o
–28, d©a)

	)

107 
	#MREPEAT30
–
ma¸o
, 
d©a
Ë
	`MREPEAT29
–ma¸o, d©aË
	`ma¸o
–29, d©a)

	)

108 
	#MREPEAT31
–
ma¸o
, 
d©a
Ë
	`MREPEAT30
–ma¸o, d©aË
	`ma¸o
–30, d©a)

	)

109 
	#MREPEAT32
–
ma¸o
, 
d©a
Ë
	`MREPEAT31
–ma¸o, d©aË
	`ma¸o
–31, d©a)

	)

110 
	#MREPEAT33
–
ma¸o
, 
d©a
Ë
	`MREPEAT32
–ma¸o, d©aË
	`ma¸o
–32, d©a)

	)

111 
	#MREPEAT34
–
ma¸o
, 
d©a
Ë
	`MREPEAT33
–ma¸o, d©aË
	`ma¸o
–33, d©a)

	)

112 
	#MREPEAT35
–
ma¸o
, 
d©a
Ë
	`MREPEAT34
–ma¸o, d©aË
	`ma¸o
–34, d©a)

	)

113 
	#MREPEAT36
–
ma¸o
, 
d©a
Ë
	`MREPEAT35
–ma¸o, d©aË
	`ma¸o
–35, d©a)

	)

114 
	#MREPEAT37
–
ma¸o
, 
d©a
Ë
	`MREPEAT36
–ma¸o, d©aË
	`ma¸o
–36, d©a)

	)

115 
	#MREPEAT38
–
ma¸o
, 
d©a
Ë
	`MREPEAT37
–ma¸o, d©aË
	`ma¸o
–37, d©a)

	)

116 
	#MREPEAT39
–
ma¸o
, 
d©a
Ë
	`MREPEAT38
–ma¸o, d©aË
	`ma¸o
–38, d©a)

	)

117 
	#MREPEAT40
–
ma¸o
, 
d©a
Ë
	`MREPEAT39
–ma¸o, d©aË
	`ma¸o
–39, d©a)

	)

118 
	#MREPEAT41
–
ma¸o
, 
d©a
Ë
	`MREPEAT40
–ma¸o, d©aË
	`ma¸o
–40, d©a)

	)

119 
	#MREPEAT42
–
ma¸o
, 
d©a
Ë
	`MREPEAT41
–ma¸o, d©aË
	`ma¸o
–41, d©a)

	)

120 
	#MREPEAT43
–
ma¸o
, 
d©a
Ë
	`MREPEAT42
–ma¸o, d©aË
	`ma¸o
–42, d©a)

	)

121 
	#MREPEAT44
–
ma¸o
, 
d©a
Ë
	`MREPEAT43
–ma¸o, d©aË
	`ma¸o
–43, d©a)

	)

122 
	#MREPEAT45
–
ma¸o
, 
d©a
Ë
	`MREPEAT44
–ma¸o, d©aË
	`ma¸o
–44, d©a)

	)

123 
	#MREPEAT46
–
ma¸o
, 
d©a
Ë
	`MREPEAT45
–ma¸o, d©aË
	`ma¸o
–45, d©a)

	)

124 
	#MREPEAT47
–
ma¸o
, 
d©a
Ë
	`MREPEAT46
–ma¸o, d©aË
	`ma¸o
–46, d©a)

	)

125 
	#MREPEAT48
–
ma¸o
, 
d©a
Ë
	`MREPEAT47
–ma¸o, d©aË
	`ma¸o
–47, d©a)

	)

126 
	#MREPEAT49
–
ma¸o
, 
d©a
Ë
	`MREPEAT48
–ma¸o, d©aË
	`ma¸o
–48, d©a)

	)

127 
	#MREPEAT50
–
ma¸o
, 
d©a
Ë
	`MREPEAT49
–ma¸o, d©aË
	`ma¸o
–49, d©a)

	)

128 
	#MREPEAT51
–
ma¸o
, 
d©a
Ë
	`MREPEAT50
–ma¸o, d©aË
	`ma¸o
–50, d©a)

	)

129 
	#MREPEAT52
–
ma¸o
, 
d©a
Ë
	`MREPEAT51
–ma¸o, d©aË
	`ma¸o
–51, d©a)

	)

130 
	#MREPEAT53
–
ma¸o
, 
d©a
Ë
	`MREPEAT52
–ma¸o, d©aË
	`ma¸o
–52, d©a)

	)

131 
	#MREPEAT54
–
ma¸o
, 
d©a
Ë
	`MREPEAT53
–ma¸o, d©aË
	`ma¸o
–53, d©a)

	)

132 
	#MREPEAT55
–
ma¸o
, 
d©a
Ë
	`MREPEAT54
–ma¸o, d©aË
	`ma¸o
–54, d©a)

	)

133 
	#MREPEAT56
–
ma¸o
, 
d©a
Ë
	`MREPEAT55
–ma¸o, d©aË
	`ma¸o
–55, d©a)

	)

134 
	#MREPEAT57
–
ma¸o
, 
d©a
Ë
	`MREPEAT56
–ma¸o, d©aË
	`ma¸o
–56, d©a)

	)

135 
	#MREPEAT58
–
ma¸o
, 
d©a
Ë
	`MREPEAT57
–ma¸o, d©aË
	`ma¸o
–57, d©a)

	)

136 
	#MREPEAT59
–
ma¸o
, 
d©a
Ë
	`MREPEAT58
–ma¸o, d©aË
	`ma¸o
–58, d©a)

	)

137 
	#MREPEAT60
–
ma¸o
, 
d©a
Ë
	`MREPEAT59
–ma¸o, d©aË
	`ma¸o
–59, d©a)

	)

138 
	#MREPEAT61
–
ma¸o
, 
d©a
Ë
	`MREPEAT60
–ma¸o, d©aË
	`ma¸o
–60, d©a)

	)

139 
	#MREPEAT62
–
ma¸o
, 
d©a
Ë
	`MREPEAT61
–ma¸o, d©aË
	`ma¸o
–61, d©a)

	)

140 
	#MREPEAT63
–
ma¸o
, 
d©a
Ë
	`MREPEAT62
–ma¸o, d©aË
	`ma¸o
–62, d©a)

	)

141 
	#MREPEAT64
–
ma¸o
, 
d©a
Ë
	`MREPEAT63
–ma¸o, d©aË
	`ma¸o
–63, d©a)

	)

142 
	#MREPEAT65
–
ma¸o
, 
d©a
Ë
	`MREPEAT64
–ma¸o, d©aË
	`ma¸o
–64, d©a)

	)

143 
	#MREPEAT66
–
ma¸o
, 
d©a
Ë
	`MREPEAT65
–ma¸o, d©aË
	`ma¸o
–65, d©a)

	)

144 
	#MREPEAT67
–
ma¸o
, 
d©a
Ë
	`MREPEAT66
–ma¸o, d©aË
	`ma¸o
–66, d©a)

	)

145 
	#MREPEAT68
–
ma¸o
, 
d©a
Ë
	`MREPEAT67
–ma¸o, d©aË
	`ma¸o
–67, d©a)

	)

146 
	#MREPEAT69
–
ma¸o
, 
d©a
Ë
	`MREPEAT68
–ma¸o, d©aË
	`ma¸o
–68, d©a)

	)

147 
	#MREPEAT70
–
ma¸o
, 
d©a
Ë
	`MREPEAT69
–ma¸o, d©aË
	`ma¸o
–69, d©a)

	)

148 
	#MREPEAT71
–
ma¸o
, 
d©a
Ë
	`MREPEAT70
–ma¸o, d©aË
	`ma¸o
–70, d©a)

	)

149 
	#MREPEAT72
–
ma¸o
, 
d©a
Ë
	`MREPEAT71
–ma¸o, d©aË
	`ma¸o
–71, d©a)

	)

150 
	#MREPEAT73
–
ma¸o
, 
d©a
Ë
	`MREPEAT72
–ma¸o, d©aË
	`ma¸o
–72, d©a)

	)

151 
	#MREPEAT74
–
ma¸o
, 
d©a
Ë
	`MREPEAT73
–ma¸o, d©aË
	`ma¸o
–73, d©a)

	)

152 
	#MREPEAT75
–
ma¸o
, 
d©a
Ë
	`MREPEAT74
–ma¸o, d©aË
	`ma¸o
–74, d©a)

	)

153 
	#MREPEAT76
–
ma¸o
, 
d©a
Ë
	`MREPEAT75
–ma¸o, d©aË
	`ma¸o
–75, d©a)

	)

154 
	#MREPEAT77
–
ma¸o
, 
d©a
Ë
	`MREPEAT76
–ma¸o, d©aË
	`ma¸o
–76, d©a)

	)

155 
	#MREPEAT78
–
ma¸o
, 
d©a
Ë
	`MREPEAT77
–ma¸o, d©aË
	`ma¸o
–77, d©a)

	)

156 
	#MREPEAT79
–
ma¸o
, 
d©a
Ë
	`MREPEAT78
–ma¸o, d©aË
	`ma¸o
–78, d©a)

	)

157 
	#MREPEAT80
–
ma¸o
, 
d©a
Ë
	`MREPEAT79
–ma¸o, d©aË
	`ma¸o
–79, d©a)

	)

158 
	#MREPEAT81
–
ma¸o
, 
d©a
Ë
	`MREPEAT80
–ma¸o, d©aË
	`ma¸o
–80, d©a)

	)

159 
	#MREPEAT82
–
ma¸o
, 
d©a
Ë
	`MREPEAT81
–ma¸o, d©aË
	`ma¸o
–81, d©a)

	)

160 
	#MREPEAT83
–
ma¸o
, 
d©a
Ë
	`MREPEAT82
–ma¸o, d©aË
	`ma¸o
–82, d©a)

	)

161 
	#MREPEAT84
–
ma¸o
, 
d©a
Ë
	`MREPEAT83
–ma¸o, d©aË
	`ma¸o
–83, d©a)

	)

162 
	#MREPEAT85
–
ma¸o
, 
d©a
Ë
	`MREPEAT84
–ma¸o, d©aË
	`ma¸o
–84, d©a)

	)

163 
	#MREPEAT86
–
ma¸o
, 
d©a
Ë
	`MREPEAT85
–ma¸o, d©aË
	`ma¸o
–85, d©a)

	)

164 
	#MREPEAT87
–
ma¸o
, 
d©a
Ë
	`MREPEAT86
–ma¸o, d©aË
	`ma¸o
–86, d©a)

	)

165 
	#MREPEAT88
–
ma¸o
, 
d©a
Ë
	`MREPEAT87
–ma¸o, d©aË
	`ma¸o
–87, d©a)

	)

166 
	#MREPEAT89
–
ma¸o
, 
d©a
Ë
	`MREPEAT88
–ma¸o, d©aË
	`ma¸o
–88, d©a)

	)

167 
	#MREPEAT90
–
ma¸o
, 
d©a
Ë
	`MREPEAT89
–ma¸o, d©aË
	`ma¸o
–89, d©a)

	)

168 
	#MREPEAT91
–
ma¸o
, 
d©a
Ë
	`MREPEAT90
–ma¸o, d©aË
	`ma¸o
–90, d©a)

	)

169 
	#MREPEAT92
–
ma¸o
, 
d©a
Ë
	`MREPEAT91
–ma¸o, d©aË
	`ma¸o
–91, d©a)

	)

170 
	#MREPEAT93
–
ma¸o
, 
d©a
Ë
	`MREPEAT92
–ma¸o, d©aË
	`ma¸o
–92, d©a)

	)

171 
	#MREPEAT94
–
ma¸o
, 
d©a
Ë
	`MREPEAT93
–ma¸o, d©aË
	`ma¸o
–93, d©a)

	)

172 
	#MREPEAT95
–
ma¸o
, 
d©a
Ë
	`MREPEAT94
–ma¸o, d©aË
	`ma¸o
–94, d©a)

	)

173 
	#MREPEAT96
–
ma¸o
, 
d©a
Ë
	`MREPEAT95
–ma¸o, d©aË
	`ma¸o
–95, d©a)

	)

174 
	#MREPEAT97
–
ma¸o
, 
d©a
Ë
	`MREPEAT96
–ma¸o, d©aË
	`ma¸o
–96, d©a)

	)

175 
	#MREPEAT98
–
ma¸o
, 
d©a
Ë
	`MREPEAT97
–ma¸o, d©aË
	`ma¸o
–97, d©a)

	)

176 
	#MREPEAT99
–
ma¸o
, 
d©a
Ë
	`MREPEAT98
–ma¸o, d©aË
	`ma¸o
–98, d©a)

	)

177 
	#MREPEAT100
(
ma¸o
, 
d©a
Ë
	`MREPEAT99
–ma¸o, d©aË
	`ma¸o
–99, d©a)

	)

178 
	#MREPEAT101
(
ma¸o
, 
d©a
Ë
	`MREPEAT100
(ma¸o, d©aË
	`ma¸o
(100, d©a)

	)

179 
	#MREPEAT102
(
ma¸o
, 
d©a
Ë
	`MREPEAT101
(ma¸o, d©aË
	`ma¸o
(101, d©a)

	)

180 
	#MREPEAT103
(
ma¸o
, 
d©a
Ë
	`MREPEAT102
(ma¸o, d©aË
	`ma¸o
(102, d©a)

	)

181 
	#MREPEAT104
(
ma¸o
, 
d©a
Ë
	`MREPEAT103
(ma¸o, d©aË
	`ma¸o
(103, d©a)

	)

182 
	#MREPEAT105
(
ma¸o
, 
d©a
Ë
	`MREPEAT104
(ma¸o, d©aË
	`ma¸o
(104, d©a)

	)

183 
	#MREPEAT106
(
ma¸o
, 
d©a
Ë
	`MREPEAT105
(ma¸o, d©aË
	`ma¸o
(105, d©a)

	)

184 
	#MREPEAT107
(
ma¸o
, 
d©a
Ë
	`MREPEAT106
(ma¸o, d©aË
	`ma¸o
(106, d©a)

	)

185 
	#MREPEAT108
(
ma¸o
, 
d©a
Ë
	`MREPEAT107
(ma¸o, d©aË
	`ma¸o
(107, d©a)

	)

186 
	#MREPEAT109
(
ma¸o
, 
d©a
Ë
	`MREPEAT108
(ma¸o, d©aË
	`ma¸o
(108, d©a)

	)

187 
	#MREPEAT110
(
ma¸o
, 
d©a
Ë
	`MREPEAT109
(ma¸o, d©aË
	`ma¸o
(109, d©a)

	)

188 
	#MREPEAT111
(
ma¸o
, 
d©a
Ë
	`MREPEAT110
(ma¸o, d©aË
	`ma¸o
(110, d©a)

	)

189 
	#MREPEAT112
(
ma¸o
, 
d©a
Ë
	`MREPEAT111
(ma¸o, d©aË
	`ma¸o
(111, d©a)

	)

190 
	#MREPEAT113
(
ma¸o
, 
d©a
Ë
	`MREPEAT112
(ma¸o, d©aË
	`ma¸o
(112, d©a)

	)

191 
	#MREPEAT114
(
ma¸o
, 
d©a
Ë
	`MREPEAT113
(ma¸o, d©aË
	`ma¸o
(113, d©a)

	)

192 
	#MREPEAT115
(
ma¸o
, 
d©a
Ë
	`MREPEAT114
(ma¸o, d©aË
	`ma¸o
(114, d©a)

	)

193 
	#MREPEAT116
(
ma¸o
, 
d©a
Ë
	`MREPEAT115
(ma¸o, d©aË
	`ma¸o
(115, d©a)

	)

194 
	#MREPEAT117
(
ma¸o
, 
d©a
Ë
	`MREPEAT116
(ma¸o, d©aË
	`ma¸o
(116, d©a)

	)

195 
	#MREPEAT118
(
ma¸o
, 
d©a
Ë
	`MREPEAT117
(ma¸o, d©aË
	`ma¸o
(117, d©a)

	)

196 
	#MREPEAT119
(
ma¸o
, 
d©a
Ë
	`MREPEAT118
(ma¸o, d©aË
	`ma¸o
(118, d©a)

	)

197 
	#MREPEAT120
(
ma¸o
, 
d©a
Ë
	`MREPEAT119
(ma¸o, d©aË
	`ma¸o
(119, d©a)

	)

198 
	#MREPEAT121
(
ma¸o
, 
d©a
Ë
	`MREPEAT120
(ma¸o, d©aË
	`ma¸o
(120, d©a)

	)

199 
	#MREPEAT122
(
ma¸o
, 
d©a
Ë
	`MREPEAT121
(ma¸o, d©aË
	`ma¸o
(121, d©a)

	)

200 
	#MREPEAT123
(
ma¸o
, 
d©a
Ë
	`MREPEAT122
(ma¸o, d©aË
	`ma¸o
(122, d©a)

	)

201 
	#MREPEAT124
(
ma¸o
, 
d©a
Ë
	`MREPEAT123
(ma¸o, d©aË
	`ma¸o
(123, d©a)

	)

202 
	#MREPEAT125
(
ma¸o
, 
d©a
Ë
	`MREPEAT124
(ma¸o, d©aË
	`ma¸o
(124, d©a)

	)

203 
	#MREPEAT126
(
ma¸o
, 
d©a
Ë
	`MREPEAT125
(ma¸o, d©aË
	`ma¸o
(125, d©a)

	)

204 
	#MREPEAT127
(
ma¸o
, 
d©a
Ë
	`MREPEAT126
(ma¸o, d©aË
	`ma¸o
(126, d©a)

	)

205 
	#MREPEAT128
(
ma¸o
, 
d©a
Ë
	`MREPEAT127
(ma¸o, d©aË
	`ma¸o
(127, d©a)

	)

206 
	#MREPEAT129
(
ma¸o
, 
d©a
Ë
	`MREPEAT128
(ma¸o, d©aË
	`ma¸o
(128, d©a)

	)

207 
	#MREPEAT130
(
ma¸o
, 
d©a
Ë
	`MREPEAT129
(ma¸o, d©aË
	`ma¸o
(129, d©a)

	)

208 
	#MREPEAT131
(
ma¸o
, 
d©a
Ë
	`MREPEAT130
(ma¸o, d©aË
	`ma¸o
(130, d©a)

	)

209 
	#MREPEAT132
(
ma¸o
, 
d©a
Ë
	`MREPEAT131
(ma¸o, d©aË
	`ma¸o
(131, d©a)

	)

210 
	#MREPEAT133
(
ma¸o
, 
d©a
Ë
	`MREPEAT132
(ma¸o, d©aË
	`ma¸o
(132, d©a)

	)

211 
	#MREPEAT134
(
ma¸o
, 
d©a
Ë
	`MREPEAT133
(ma¸o, d©aË
	`ma¸o
(133, d©a)

	)

212 
	#MREPEAT135
(
ma¸o
, 
d©a
Ë
	`MREPEAT134
(ma¸o, d©aË
	`ma¸o
(134, d©a)

	)

213 
	#MREPEAT136
(
ma¸o
, 
d©a
Ë
	`MREPEAT135
(ma¸o, d©aË
	`ma¸o
(135, d©a)

	)

214 
	#MREPEAT137
(
ma¸o
, 
d©a
Ë
	`MREPEAT136
(ma¸o, d©aË
	`ma¸o
(136, d©a)

	)

215 
	#MREPEAT138
(
ma¸o
, 
d©a
Ë
	`MREPEAT137
(ma¸o, d©aË
	`ma¸o
(137, d©a)

	)

216 
	#MREPEAT139
(
ma¸o
, 
d©a
Ë
	`MREPEAT138
(ma¸o, d©aË
	`ma¸o
(138, d©a)

	)

217 
	#MREPEAT140
(
ma¸o
, 
d©a
Ë
	`MREPEAT139
(ma¸o, d©aË
	`ma¸o
(139, d©a)

	)

218 
	#MREPEAT141
(
ma¸o
, 
d©a
Ë
	`MREPEAT140
(ma¸o, d©aË
	`ma¸o
(140, d©a)

	)

219 
	#MREPEAT142
(
ma¸o
, 
d©a
Ë
	`MREPEAT141
(ma¸o, d©aË
	`ma¸o
(141, d©a)

	)

220 
	#MREPEAT143
(
ma¸o
, 
d©a
Ë
	`MREPEAT142
(ma¸o, d©aË
	`ma¸o
(142, d©a)

	)

221 
	#MREPEAT144
(
ma¸o
, 
d©a
Ë
	`MREPEAT143
(ma¸o, d©aË
	`ma¸o
(143, d©a)

	)

222 
	#MREPEAT145
(
ma¸o
, 
d©a
Ë
	`MREPEAT144
(ma¸o, d©aË
	`ma¸o
(144, d©a)

	)

223 
	#MREPEAT146
(
ma¸o
, 
d©a
Ë
	`MREPEAT145
(ma¸o, d©aË
	`ma¸o
(145, d©a)

	)

224 
	#MREPEAT147
(
ma¸o
, 
d©a
Ë
	`MREPEAT146
(ma¸o, d©aË
	`ma¸o
(146, d©a)

	)

225 
	#MREPEAT148
(
ma¸o
, 
d©a
Ë
	`MREPEAT147
(ma¸o, d©aË
	`ma¸o
(147, d©a)

	)

226 
	#MREPEAT149
(
ma¸o
, 
d©a
Ë
	`MREPEAT148
(ma¸o, d©aË
	`ma¸o
(148, d©a)

	)

227 
	#MREPEAT150
(
ma¸o
, 
d©a
Ë
	`MREPEAT149
(ma¸o, d©aË
	`ma¸o
(149, d©a)

	)

228 
	#MREPEAT151
(
ma¸o
, 
d©a
Ë
	`MREPEAT150
(ma¸o, d©aË
	`ma¸o
(150, d©a)

	)

229 
	#MREPEAT152
(
ma¸o
, 
d©a
Ë
	`MREPEAT151
(ma¸o, d©aË
	`ma¸o
(151, d©a)

	)

230 
	#MREPEAT153
(
ma¸o
, 
d©a
Ë
	`MREPEAT152
(ma¸o, d©aË
	`ma¸o
(152, d©a)

	)

231 
	#MREPEAT154
(
ma¸o
, 
d©a
Ë
	`MREPEAT153
(ma¸o, d©aË
	`ma¸o
(153, d©a)

	)

232 
	#MREPEAT155
(
ma¸o
, 
d©a
Ë
	`MREPEAT154
(ma¸o, d©aË
	`ma¸o
(154, d©a)

	)

233 
	#MREPEAT156
(
ma¸o
, 
d©a
Ë
	`MREPEAT155
(ma¸o, d©aË
	`ma¸o
(155, d©a)

	)

234 
	#MREPEAT157
(
ma¸o
, 
d©a
Ë
	`MREPEAT156
(ma¸o, d©aË
	`ma¸o
(156, d©a)

	)

235 
	#MREPEAT158
(
ma¸o
, 
d©a
Ë
	`MREPEAT157
(ma¸o, d©aË
	`ma¸o
(157, d©a)

	)

236 
	#MREPEAT159
(
ma¸o
, 
d©a
Ë
	`MREPEAT158
(ma¸o, d©aË
	`ma¸o
(158, d©a)

	)

237 
	#MREPEAT160
(
ma¸o
, 
d©a
Ë
	`MREPEAT159
(ma¸o, d©aË
	`ma¸o
(159, d©a)

	)

238 
	#MREPEAT161
(
ma¸o
, 
d©a
Ë
	`MREPEAT160
(ma¸o, d©aË
	`ma¸o
(160, d©a)

	)

239 
	#MREPEAT162
(
ma¸o
, 
d©a
Ë
	`MREPEAT161
(ma¸o, d©aË
	`ma¸o
(161, d©a)

	)

240 
	#MREPEAT163
(
ma¸o
, 
d©a
Ë
	`MREPEAT162
(ma¸o, d©aË
	`ma¸o
(162, d©a)

	)

241 
	#MREPEAT164
(
ma¸o
, 
d©a
Ë
	`MREPEAT163
(ma¸o, d©aË
	`ma¸o
(163, d©a)

	)

242 
	#MREPEAT165
(
ma¸o
, 
d©a
Ë
	`MREPEAT164
(ma¸o, d©aË
	`ma¸o
(164, d©a)

	)

243 
	#MREPEAT166
(
ma¸o
, 
d©a
Ë
	`MREPEAT165
(ma¸o, d©aË
	`ma¸o
(165, d©a)

	)

244 
	#MREPEAT167
(
ma¸o
, 
d©a
Ë
	`MREPEAT166
(ma¸o, d©aË
	`ma¸o
(166, d©a)

	)

245 
	#MREPEAT168
(
ma¸o
, 
d©a
Ë
	`MREPEAT167
(ma¸o, d©aË
	`ma¸o
(167, d©a)

	)

246 
	#MREPEAT169
(
ma¸o
, 
d©a
Ë
	`MREPEAT168
(ma¸o, d©aË
	`ma¸o
(168, d©a)

	)

247 
	#MREPEAT170
(
ma¸o
, 
d©a
Ë
	`MREPEAT169
(ma¸o, d©aË
	`ma¸o
(169, d©a)

	)

248 
	#MREPEAT171
(
ma¸o
, 
d©a
Ë
	`MREPEAT170
(ma¸o, d©aË
	`ma¸o
(170, d©a)

	)

249 
	#MREPEAT172
(
ma¸o
, 
d©a
Ë
	`MREPEAT171
(ma¸o, d©aË
	`ma¸o
(171, d©a)

	)

250 
	#MREPEAT173
(
ma¸o
, 
d©a
Ë
	`MREPEAT172
(ma¸o, d©aË
	`ma¸o
(172, d©a)

	)

251 
	#MREPEAT174
(
ma¸o
, 
d©a
Ë
	`MREPEAT173
(ma¸o, d©aË
	`ma¸o
(173, d©a)

	)

252 
	#MREPEAT175
(
ma¸o
, 
d©a
Ë
	`MREPEAT174
(ma¸o, d©aË
	`ma¸o
(174, d©a)

	)

253 
	#MREPEAT176
(
ma¸o
, 
d©a
Ë
	`MREPEAT175
(ma¸o, d©aË
	`ma¸o
(175, d©a)

	)

254 
	#MREPEAT177
(
ma¸o
, 
d©a
Ë
	`MREPEAT176
(ma¸o, d©aË
	`ma¸o
(176, d©a)

	)

255 
	#MREPEAT178
(
ma¸o
, 
d©a
Ë
	`MREPEAT177
(ma¸o, d©aË
	`ma¸o
(177, d©a)

	)

256 
	#MREPEAT179
(
ma¸o
, 
d©a
Ë
	`MREPEAT178
(ma¸o, d©aË
	`ma¸o
(178, d©a)

	)

257 
	#MREPEAT180
(
ma¸o
, 
d©a
Ë
	`MREPEAT179
(ma¸o, d©aË
	`ma¸o
(179, d©a)

	)

258 
	#MREPEAT181
(
ma¸o
, 
d©a
Ë
	`MREPEAT180
(ma¸o, d©aË
	`ma¸o
(180, d©a)

	)

259 
	#MREPEAT182
(
ma¸o
, 
d©a
Ë
	`MREPEAT181
(ma¸o, d©aË
	`ma¸o
(181, d©a)

	)

260 
	#MREPEAT183
(
ma¸o
, 
d©a
Ë
	`MREPEAT182
(ma¸o, d©aË
	`ma¸o
(182, d©a)

	)

261 
	#MREPEAT184
(
ma¸o
, 
d©a
Ë
	`MREPEAT183
(ma¸o, d©aË
	`ma¸o
(183, d©a)

	)

262 
	#MREPEAT185
(
ma¸o
, 
d©a
Ë
	`MREPEAT184
(ma¸o, d©aË
	`ma¸o
(184, d©a)

	)

263 
	#MREPEAT186
(
ma¸o
, 
d©a
Ë
	`MREPEAT185
(ma¸o, d©aË
	`ma¸o
(185, d©a)

	)

264 
	#MREPEAT187
(
ma¸o
, 
d©a
Ë
	`MREPEAT186
(ma¸o, d©aË
	`ma¸o
(186, d©a)

	)

265 
	#MREPEAT188
(
ma¸o
, 
d©a
Ë
	`MREPEAT187
(ma¸o, d©aË
	`ma¸o
(187, d©a)

	)

266 
	#MREPEAT189
(
ma¸o
, 
d©a
Ë
	`MREPEAT188
(ma¸o, d©aË
	`ma¸o
(188, d©a)

	)

267 
	#MREPEAT190
(
ma¸o
, 
d©a
Ë
	`MREPEAT189
(ma¸o, d©aË
	`ma¸o
(189, d©a)

	)

268 
	#MREPEAT191
(
ma¸o
, 
d©a
Ë
	`MREPEAT190
(ma¸o, d©aË
	`ma¸o
(190, d©a)

	)

269 
	#MREPEAT192
(
ma¸o
, 
d©a
Ë
	`MREPEAT191
(ma¸o, d©aË
	`ma¸o
(191, d©a)

	)

270 
	#MREPEAT193
(
ma¸o
, 
d©a
Ë
	`MREPEAT192
(ma¸o, d©aË
	`ma¸o
(192, d©a)

	)

271 
	#MREPEAT194
(
ma¸o
, 
d©a
Ë
	`MREPEAT193
(ma¸o, d©aË
	`ma¸o
(193, d©a)

	)

272 
	#MREPEAT195
(
ma¸o
, 
d©a
Ë
	`MREPEAT194
(ma¸o, d©aË
	`ma¸o
(194, d©a)

	)

273 
	#MREPEAT196
(
ma¸o
, 
d©a
Ë
	`MREPEAT195
(ma¸o, d©aË
	`ma¸o
(195, d©a)

	)

274 
	#MREPEAT197
(
ma¸o
, 
d©a
Ë
	`MREPEAT196
(ma¸o, d©aË
	`ma¸o
(196, d©a)

	)

275 
	#MREPEAT198
(
ma¸o
, 
d©a
Ë
	`MREPEAT197
(ma¸o, d©aË
	`ma¸o
(197, d©a)

	)

276 
	#MREPEAT199
(
ma¸o
, 
d©a
Ë
	`MREPEAT198
(ma¸o, d©aË
	`ma¸o
(198, d©a)

	)

277 
	#MREPEAT200
(
ma¸o
, 
d©a
Ë
	`MREPEAT199
(ma¸o, d©aË
	`ma¸o
(199, d©a)

	)

278 
	#MREPEAT201
(
ma¸o
, 
d©a
Ë
	`MREPEAT200
(ma¸o, d©aË
	`ma¸o
(200, d©a)

	)

279 
	#MREPEAT202
(
ma¸o
, 
d©a
Ë
	`MREPEAT201
(ma¸o, d©aË
	`ma¸o
(201, d©a)

	)

280 
	#MREPEAT203
(
ma¸o
, 
d©a
Ë
	`MREPEAT202
(ma¸o, d©aË
	`ma¸o
(202, d©a)

	)

281 
	#MREPEAT204
(
ma¸o
, 
d©a
Ë
	`MREPEAT203
(ma¸o, d©aË
	`ma¸o
(203, d©a)

	)

282 
	#MREPEAT205
(
ma¸o
, 
d©a
Ë
	`MREPEAT204
(ma¸o, d©aË
	`ma¸o
(204, d©a)

	)

283 
	#MREPEAT206
(
ma¸o
, 
d©a
Ë
	`MREPEAT205
(ma¸o, d©aË
	`ma¸o
(205, d©a)

	)

284 
	#MREPEAT207
(
ma¸o
, 
d©a
Ë
	`MREPEAT206
(ma¸o, d©aË
	`ma¸o
(206, d©a)

	)

285 
	#MREPEAT208
(
ma¸o
, 
d©a
Ë
	`MREPEAT207
(ma¸o, d©aË
	`ma¸o
(207, d©a)

	)

286 
	#MREPEAT209
(
ma¸o
, 
d©a
Ë
	`MREPEAT208
(ma¸o, d©aË
	`ma¸o
(208, d©a)

	)

287 
	#MREPEAT210
(
ma¸o
, 
d©a
Ë
	`MREPEAT209
(ma¸o, d©aË
	`ma¸o
(209, d©a)

	)

288 
	#MREPEAT211
(
ma¸o
, 
d©a
Ë
	`MREPEAT210
(ma¸o, d©aË
	`ma¸o
(210, d©a)

	)

289 
	#MREPEAT212
(
ma¸o
, 
d©a
Ë
	`MREPEAT211
(ma¸o, d©aË
	`ma¸o
(211, d©a)

	)

290 
	#MREPEAT213
(
ma¸o
, 
d©a
Ë
	`MREPEAT212
(ma¸o, d©aË
	`ma¸o
(212, d©a)

	)

291 
	#MREPEAT214
(
ma¸o
, 
d©a
Ë
	`MREPEAT213
(ma¸o, d©aË
	`ma¸o
(213, d©a)

	)

292 
	#MREPEAT215
(
ma¸o
, 
d©a
Ë
	`MREPEAT214
(ma¸o, d©aË
	`ma¸o
(214, d©a)

	)

293 
	#MREPEAT216
(
ma¸o
, 
d©a
Ë
	`MREPEAT215
(ma¸o, d©aË
	`ma¸o
(215, d©a)

	)

294 
	#MREPEAT217
(
ma¸o
, 
d©a
Ë
	`MREPEAT216
(ma¸o, d©aË
	`ma¸o
(216, d©a)

	)

295 
	#MREPEAT218
(
ma¸o
, 
d©a
Ë
	`MREPEAT217
(ma¸o, d©aË
	`ma¸o
(217, d©a)

	)

296 
	#MREPEAT219
(
ma¸o
, 
d©a
Ë
	`MREPEAT218
(ma¸o, d©aË
	`ma¸o
(218, d©a)

	)

297 
	#MREPEAT220
(
ma¸o
, 
d©a
Ë
	`MREPEAT219
(ma¸o, d©aË
	`ma¸o
(219, d©a)

	)

298 
	#MREPEAT221
(
ma¸o
, 
d©a
Ë
	`MREPEAT220
(ma¸o, d©aË
	`ma¸o
(220, d©a)

	)

299 
	#MREPEAT222
(
ma¸o
, 
d©a
Ë
	`MREPEAT221
(ma¸o, d©aË
	`ma¸o
(221, d©a)

	)

300 
	#MREPEAT223
(
ma¸o
, 
d©a
Ë
	`MREPEAT222
(ma¸o, d©aË
	`ma¸o
(222, d©a)

	)

301 
	#MREPEAT224
(
ma¸o
, 
d©a
Ë
	`MREPEAT223
(ma¸o, d©aË
	`ma¸o
(223, d©a)

	)

302 
	#MREPEAT225
(
ma¸o
, 
d©a
Ë
	`MREPEAT224
(ma¸o, d©aË
	`ma¸o
(224, d©a)

	)

303 
	#MREPEAT226
(
ma¸o
, 
d©a
Ë
	`MREPEAT225
(ma¸o, d©aË
	`ma¸o
(225, d©a)

	)

304 
	#MREPEAT227
(
ma¸o
, 
d©a
Ë
	`MREPEAT226
(ma¸o, d©aË
	`ma¸o
(226, d©a)

	)

305 
	#MREPEAT228
(
ma¸o
, 
d©a
Ë
	`MREPEAT227
(ma¸o, d©aË
	`ma¸o
(227, d©a)

	)

306 
	#MREPEAT229
(
ma¸o
, 
d©a
Ë
	`MREPEAT228
(ma¸o, d©aË
	`ma¸o
(228, d©a)

	)

307 
	#MREPEAT230
(
ma¸o
, 
d©a
Ë
	`MREPEAT229
(ma¸o, d©aË
	`ma¸o
(229, d©a)

	)

308 
	#MREPEAT231
(
ma¸o
, 
d©a
Ë
	`MREPEAT230
(ma¸o, d©aË
	`ma¸o
(230, d©a)

	)

309 
	#MREPEAT232
(
ma¸o
, 
d©a
Ë
	`MREPEAT231
(ma¸o, d©aË
	`ma¸o
(231, d©a)

	)

310 
	#MREPEAT233
(
ma¸o
, 
d©a
Ë
	`MREPEAT232
(ma¸o, d©aË
	`ma¸o
(232, d©a)

	)

311 
	#MREPEAT234
(
ma¸o
, 
d©a
Ë
	`MREPEAT233
(ma¸o, d©aË
	`ma¸o
(233, d©a)

	)

312 
	#MREPEAT235
(
ma¸o
, 
d©a
Ë
	`MREPEAT234
(ma¸o, d©aË
	`ma¸o
(234, d©a)

	)

313 
	#MREPEAT236
(
ma¸o
, 
d©a
Ë
	`MREPEAT235
(ma¸o, d©aË
	`ma¸o
(235, d©a)

	)

314 
	#MREPEAT237
(
ma¸o
, 
d©a
Ë
	`MREPEAT236
(ma¸o, d©aË
	`ma¸o
(236, d©a)

	)

315 
	#MREPEAT238
(
ma¸o
, 
d©a
Ë
	`MREPEAT237
(ma¸o, d©aË
	`ma¸o
(237, d©a)

	)

316 
	#MREPEAT239
(
ma¸o
, 
d©a
Ë
	`MREPEAT238
(ma¸o, d©aË
	`ma¸o
(238, d©a)

	)

317 
	#MREPEAT240
(
ma¸o
, 
d©a
Ë
	`MREPEAT239
(ma¸o, d©aË
	`ma¸o
(239, d©a)

	)

318 
	#MREPEAT241
(
ma¸o
, 
d©a
Ë
	`MREPEAT240
(ma¸o, d©aË
	`ma¸o
(240, d©a)

	)

319 
	#MREPEAT242
(
ma¸o
, 
d©a
Ë
	`MREPEAT241
(ma¸o, d©aË
	`ma¸o
(241, d©a)

	)

320 
	#MREPEAT243
(
ma¸o
, 
d©a
Ë
	`MREPEAT242
(ma¸o, d©aË
	`ma¸o
(242, d©a)

	)

321 
	#MREPEAT244
(
ma¸o
, 
d©a
Ë
	`MREPEAT243
(ma¸o, d©aË
	`ma¸o
(243, d©a)

	)

322 
	#MREPEAT245
(
ma¸o
, 
d©a
Ë
	`MREPEAT244
(ma¸o, d©aË
	`ma¸o
(244, d©a)

	)

323 
	#MREPEAT246
(
ma¸o
, 
d©a
Ë
	`MREPEAT245
(ma¸o, d©aË
	`ma¸o
(245, d©a)

	)

324 
	#MREPEAT247
(
ma¸o
, 
d©a
Ë
	`MREPEAT246
(ma¸o, d©aË
	`ma¸o
(246, d©a)

	)

325 
	#MREPEAT248
(
ma¸o
, 
d©a
Ë
	`MREPEAT247
(ma¸o, d©aË
	`ma¸o
(247, d©a)

	)

326 
	#MREPEAT249
(
ma¸o
, 
d©a
Ë
	`MREPEAT248
(ma¸o, d©aË
	`ma¸o
(248, d©a)

	)

327 
	#MREPEAT250
(
ma¸o
, 
d©a
Ë
	`MREPEAT249
(ma¸o, d©aË
	`ma¸o
(249, d©a)

	)

328 
	#MREPEAT251
(
ma¸o
, 
d©a
Ë
	`MREPEAT250
(ma¸o, d©aË
	`ma¸o
(250, d©a)

	)

329 
	#MREPEAT252
(
ma¸o
, 
d©a
Ë
	`MREPEAT251
(ma¸o, d©aË
	`ma¸o
(251, d©a)

	)

330 
	#MREPEAT253
(
ma¸o
, 
d©a
Ë
	`MREPEAT252
(ma¸o, d©aË
	`ma¸o
(252, d©a)

	)

331 
	#MREPEAT254
(
ma¸o
, 
d©a
Ë
	`MREPEAT253
(ma¸o, d©aË
	`ma¸o
(253, d©a)

	)

332 
	#MREPEAT255
(
ma¸o
, 
d©a
Ë
	`MREPEAT254
(ma¸o, d©aË
	`ma¸o
(254, d©a)

	)

333 
	#MREPEAT256
(
ma¸o
, 
d©a
Ë
	`MREPEAT255
(ma¸o, d©aË
	`ma¸o
(255, d©a)

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/preprocessor/preprocessor.h

47 #i‚de‡
_PREPROCESSOR_H_


48 
	#_PREPROCESSOR_H_


	)

50 
	~"ça°e.h
"

51 
	~"°rögz.h
"

52 
	~"mª≥©.h
"

	@/home/vaje/Documents/vaja9/asf/sam/utils/preprocessor/stringz.h

47 #i‚de‡
_STRINGZ_H_


48 
	#_STRINGZ_H_


	)

68 
	#STRINGZ
(
x
Ë#x

	)

79 
	#ASTRINGZ
(
x
Ë
	`STRINGZ
(x)

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/preprocessor/tpaste.h

47 #i‚de‡
_TPASTE_H_


48 
	#_TPASTE_H_


	)

69 
	#TPASTE2
–
a
, 
b
Ëa##
	)
b

70 
	#TPASTE3
–
a
, 
b
, 
c
Ëa##b##
	)
c

71 
	#TPASTE4
–
a
, 
b
, 
c
, 
d
Ëa##b##c##
	)
d

72 
	#TPASTE5
–
a
, 
b
, 
c
, 
d
, 
e
Ëa##b##c##d##
	)
e

73 
	#TPASTE6
–
a
, 
b
, 
c
, 
d
, 
e
, 
f
Ëa##b##c##d##e##
	)
f

74 
	#TPASTE7
–
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
Ëa##b##c##d##e##f##
	)
g

75 
	#TPASTE8
–
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
Ëa##b##c##d##e##f##g##
	)
h

76 
	#TPASTE9
–
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
i
Ëa##b##c##d##e##f##g##h##
	)
i

77 
	#TPASTE10
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
i
, 
j
Ëa##b##c##d##e##f##g##h##i##
	)
j

90 
	#ATPASTE2
–
a
, 
b
Ë
	`TPASTE2
–a, b)

	)

91 
	#ATPASTE3
–
a
, 
b
, 
c
Ë
	`TPASTE3
–a, b, c)

	)

92 
	#ATPASTE4
–
a
, 
b
, 
c
, 
d
Ë
	`TPASTE4
–a, b, c, d)

	)

93 
	#ATPASTE5
–
a
, 
b
, 
c
, 
d
, 
e
Ë
	`TPASTE5
–a, b, c, d,É)

	)

94 
	#ATPASTE6
–
a
, 
b
, 
c
, 
d
, 
e
, 
f
Ë
	`TPASTE6
–a, b, c, d,É, f)

	)

95 
	#ATPASTE7
–
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
Ë
	`TPASTE7
–a, b, c, d,É, f, g)

	)

96 
	#ATPASTE8
–
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
Ë
	`TPASTE8
–a, b, c, d,É, f, g, h)

	)

97 
	#ATPASTE9
–
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
i
Ë
	`TPASTE9
–a, b, c, d,É, f, g, h, i)

	)

98 
	#ATPASTE10
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
i
, 
j
Ë
	`TPASTE10
◊, b, c, d,É, f, g, h, i, j)

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/status_codes.h

50 #i‚de‡
STATUS_CODES_H_INCLUDED


51 
	#STATUS_CODES_H_INCLUDED


	)

55 #i‡
deföed
(
__LWIP_ERR_H__
Ë&& deföed(
ERR_TIMEOUT
)

56 #i‡(
ERR_TIMEOUT
 != -3)

61 #îr‹ 
ASF
 
devñ›îs
: 
check
 
lwù
 
îr
.
h
 
√w
 
vÆue
 
ERR_TIMEOUT


63 #unde‡
ERR_TIMEOUT


75 
	e°©us_code
 {

76 
	mSTATUS_OK
 = 0,

77 
	mSTATUS_ERR_BUSY
 = 0x19,

78 
	mSTATUS_ERR_DENIED
 = 0x1C,

79 
	mSTATUS_ERR_TIMEOUT
 = 0x12,

80 
	mERR_IO_ERROR
 = -1,

81 
	mERR_FLUSHED
 = -2,

82 
	mERR_TIMEOUT
 = -3,

83 
	mERR_BAD_DATA
 = -4,

84 
	mERR_PROTOCOL
 = -5,

85 
	mERR_UNSUPPORTED_DEV
 = -6,

86 
	mERR_NO_MEMORY
 = -7,

87 
	mERR_INVALID_ARG
 = -8,

88 
	mERR_BAD_ADDRESS
 = -9,

89 
	mERR_BUSY
 = -10,

90 
	mERR_BAD_FORMAT
 = -11,

91 
	mERR_NO_TIMER
 = -12,

92 
	mERR_TIMER_ALREADY_RUNNING
 = -13,

93 
	mERR_TIMER_NOT_RUNNING
 = -14,

94 
	mERR_ABORTED
 = -15,

104 
	mOPERATION_IN_PROGRESS
 = -128,

107 
°©us_code
 
	t°©us_code_t
;

109 #i‡
deföed
(
__LWIP_ERR_H__
)

110 
	#ERR_TIMEOUT
 -3

	)

	@/home/vaje/Documents/vaja9/asf/sam/utils/syscalls/gcc/syscalls.c

47 
	~<°dio.h
>

48 
	~<°d¨g.h
>

49 
	~<sys/ty≥s.h
>

50 
	~<sys/°©.h
>

54 #ifde‡
__˝lu•lus


60 #unde‡
î∫o


61 
î∫o
;

62 
_íd
;

63 
__øm_íd__
;

65 
ˇddr_t
 
_sbrk
(
ö¸
);

66 
lök
(*
ﬁd
, *
√w
);

67 
_˛o£
(
fûe
);

68 
_f°©
(
fûe
, 
°©
 *
°
);

69 
_ißây
(
fûe
);

70 
_l£ek
(
fûe
, 
±r
, 
dú
);

71 
_exô
(
°©us
);

72 
_kûl
(
pid
, 
sig
);

73 
_gëpid
();

75 
ˇddr_t
 
_sbrk
(
ö¸
)

77 *
hóp
 = 
NULL
;

78 *
¥ev_hóp
;

79 
ømíd
 = ()&
__øm_íd__
;

81 i‡(
hóp
 =
NULL
) {

82 
hóp
 = (*)&
_íd
;

84 
¥ev_hóp
 = 
hóp
;

86 i‡((()
¥ev_hóp
 + 
ö¸
Ë> 
ømíd
) {

87  (
ˇddr_t
) -1;

90 
hóp
 +
ö¸
;

92  (
ˇddr_t
Ë
¥ev_hóp
;

95 
lök
(*
ﬁd
, *
√w
)

100 
_˛o£
(
fûe
)

105 
_f°©
(
fûe
, 
°©
 *
°
)

107 
°
->
°_mode
 = 
S_IFCHR
;

112 
_ißây
(
fûe
)

117 
_l£ek
(
fûe
, 
±r
, 
dú
)

122 
_exô
(
°©us
)

124 
asm
("BKPT #0");

128 
_kûl
(
pid
, 
sig
)

133 
_gëpid
()

140 #ifde‡
__˝lu•lus


	@/home/vaje/Documents/vaja9/asf/thirdparty/CMSIS/include/core_cm3.h

38 #i‡
deföed
 ( 
__ICCARM__
 )

39 #¥agm®
sy°em_ö˛ude


42 #i‚de‡
__CORE_CM3_H_GENERIC


43 
	#__CORE_CM3_H_GENERIC


	)

45 #ifde‡
__˝lu•lus


71 
	#__CM3_CMSIS_VERSION_MAIN
 (0x04Ë

	)

72 
	#__CM3_CMSIS_VERSION_SUB
 (0x00Ë

	)

73 
	#__CM3_CMSIS_VERSION
 ((
__CM3_CMSIS_VERSION_MAIN
 << 16) | \

74 
__CM3_CMSIS_VERSION_SUB
 )

	)

76 
	#__CORTEX_M
 (0x03Ë

	)

79 #i‡ 
deföed
 ( 
__CC_ARM
 )

80 
	#__ASM
 
__asm


	)

81 
	#__INLINE
 
__ölöe


	)

82 
	#__STATIC_INLINE
 
__ölöe


	)

84 #ñi‡
deföed
 ( 
__GNUC__
 )

85 
	#__ASM
 
__asm


	)

86 
	#__INLINE
 
ölöe


	)

87 
	#__STATIC_INLINE
 
ölöe


	)

89 #ñi‡
deföed
 ( 
__ICCARM__
 )

90 
	#__ASM
 
__asm


	)

91 
	#__INLINE
 
ölöe


	)

92 
	#__STATIC_INLINE
 
ölöe


	)

94 #ñi‡
deföed
 ( 
__TMS470__
 )

95 
	#__ASM
 
__asm


	)

96 
	#__STATIC_INLINE
 
ölöe


	)

98 #ñi‡
deföed
 ( 
__TASKING__
 )

99 
	#__ASM
 
__asm


	)

100 
	#__INLINE
 
ölöe


	)

101 
	#__STATIC_INLINE
 
ölöe


	)

103 #ñi‡
deföed
 ( 
__CSMC__
 )

104 
	#__∑cked


	)

105 
	#__ASM
 
_asm


	)

106 
	#__INLINE
 
ölöe


	)

107 
	#__STATIC_INLINE
 
ölöe


	)

114 
	#__FPU_USED
 0

	)

116 #i‡
deföed
 ( 
__CC_ARM
 )

117 #i‡
deföed
 
__TARGET_FPU_VFP


121 #ñi‡
deföed
 ( 
__GNUC__
 )

122 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

126 #ñi‡
deföed
 ( 
__ICCARM__
 )

127 #i‡
deföed
 
__ARMVFP__


131 #ñi‡
deföed
 ( 
__TMS470__
 )

132 #i‡
deföed
 
__TI__VFP_SUPPORT____


136 #ñi‡
deföed
 ( 
__TASKING__
 )

137 #i‡
deföed
 
__FPU_VFP__


141 #ñi‡
deföed
 ( 
__CSMC__
 )

142 #i‡–
__CSMC__
 & 0x400)

147 
	~<°döt.h
>

148 
	~<c‹e_cmIn°r.h
>

149 
	~<c‹e_cmFunc.h
>

151 #ifde‡
__˝lu•lus


157 #i‚de‡
__CMSIS_GENERIC


159 #i‚de‡
__CORE_CM3_H_DEPENDANT


160 
	#__CORE_CM3_H_DEPENDANT


	)

162 #ifde‡
__˝lu•lus


167 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


168 #i‚de‡
__CM3_REV


169 
	#__CM3_REV
 0x0200

	)

173 #i‚de‡
__MPU_PRESENT


174 
	#__MPU_PRESENT
 0

	)

178 #i‚de‡
__NVIC_PRIO_BITS


179 
	#__NVIC_PRIO_BITS
 4

	)

183 #i‚de‡
__Víd‹_SysTickC⁄fig


184 
	#__Víd‹_SysTickC⁄fig
 0

	)

197 #ifde‡
__˝lu•lus


198 
	#__I
 vﬁ©ûê

	)

200 
	#__I
 vﬁ©ûêc⁄°

	)

202 
	#__O
 vﬁ©ûê

	)

203 
	#__IO
 vﬁ©ûê

	)

235 #i‡(
__CORTEX_M
 != 0x04)

236 
uöt32_t
 
_ª£rved0
:27;

238 
uöt32_t
 
_ª£rved0
:16;

239 
uöt32_t
 
GE
:4;

240 
uöt32_t
 
_ª£rved1
:7;

242 
uöt32_t
 
Q
:1;

243 
uöt32_t
 
V
:1;

244 
uöt32_t
 
C
:1;

245 
uöt32_t
 
Z
:1;

246 
uöt32_t
 
N
:1;

247 } 
b
;

248 
uöt32_t
 
w
;

249 } 
	tAPSR_Ty≥
;

258 
uöt32_t
 
ISR
:9;

259 
uöt32_t
 
_ª£rved0
:23;

260 } 
b
;

261 
uöt32_t
 
w
;

262 } 
	tIPSR_Ty≥
;

271 
uöt32_t
 
ISR
:9;

272 #i‡(
__CORTEX_M
 != 0x04)

273 
uöt32_t
 
_ª£rved0
:15;

275 
uöt32_t
 
_ª£rved0
:7;

276 
uöt32_t
 
GE
:4;

277 
uöt32_t
 
_ª£rved1
:4;

279 
uöt32_t
 
T
:1;

280 
uöt32_t
 
IT
:2;

281 
uöt32_t
 
Q
:1;

282 
uöt32_t
 
V
:1;

283 
uöt32_t
 
C
:1;

284 
uöt32_t
 
Z
:1;

285 
uöt32_t
 
N
:1;

286 } 
b
;

287 
uöt32_t
 
w
;

288 } 
	txPSR_Ty≥
;

297 
uöt32_t
 
nPRIV
:1;

298 
uöt32_t
 
SPSEL
:1;

299 
uöt32_t
 
FPCA
:1;

300 
uöt32_t
 
_ª£rved0
:29;

301 } 
b
;

302 
uöt32_t
 
w
;

303 } 
	tCONTROL_Ty≥
;

318 
__IO
 
uöt32_t
 
ISER
[8];

319 
uöt32_t
 
RESERVED0
[24];

320 
__IO
 
uöt32_t
 
ICER
[8];

321 
uöt32_t
 
RSERVED1
[24];

322 
__IO
 
uöt32_t
 
ISPR
[8];

323 
uöt32_t
 
RESERVED2
[24];

324 
__IO
 
uöt32_t
 
ICPR
[8];

325 
uöt32_t
 
RESERVED3
[24];

326 
__IO
 
uöt32_t
 
IABR
[8];

327 
uöt32_t
 
RESERVED4
[56];

328 
__IO
 
uöt8_t
 
IP
[240];

329 
uöt32_t
 
RESERVED5
[644];

330 
__O
 
uöt32_t
 
STIR
;

331 } 
	tNVIC_Ty≥
;

334 
	#NVIC_STIR_INTID_Pos
 0

	)

335 
	#NVIC_STIR_INTID_Msk
 (0x1FFUL << 
NVIC_STIR_INTID_Pos
Ë

	)

350 
__I
 
uöt32_t
 
CPUID
;

351 
__IO
 
uöt32_t
 
ICSR
;

352 
__IO
 
uöt32_t
 
VTOR
;

353 
__IO
 
uöt32_t
 
AIRCR
;

354 
__IO
 
uöt32_t
 
SCR
;

355 
__IO
 
uöt32_t
 
CCR
;

356 
__IO
 
uöt8_t
 
SHP
[12];

357 
__IO
 
uöt32_t
 
SHCSR
;

358 
__IO
 
uöt32_t
 
CFSR
;

359 
__IO
 
uöt32_t
 
HFSR
;

360 
__IO
 
uöt32_t
 
DFSR
;

361 
__IO
 
uöt32_t
 
MMFAR
;

362 
__IO
 
uöt32_t
 
BFAR
;

363 
__IO
 
uöt32_t
 
AFSR
;

364 
__I
 
uöt32_t
 
PFR
[2];

365 
__I
 
uöt32_t
 
DFR
;

366 
__I
 
uöt32_t
 
ADR
;

367 
__I
 
uöt32_t
 
MMFR
[4];

368 
__I
 
uöt32_t
 
ISAR
[5];

369 
uöt32_t
 
RESERVED0
[5];

370 
__IO
 
uöt32_t
 
CPACR
;

371 } 
	tSCB_Ty≥
;

374 
	#SCB_CPUID_IMPLEMENTER_Pos
 24

	)

375 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

377 
	#SCB_CPUID_VARIANT_Pos
 20

	)

378 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

380 
	#SCB_CPUID_ARCHITECTURE_Pos
 16

	)

381 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

383 
	#SCB_CPUID_PARTNO_Pos
 4

	)

384 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

386 
	#SCB_CPUID_REVISION_Pos
 0

	)

387 
	#SCB_CPUID_REVISION_Msk
 (0xFUL << 
SCB_CPUID_REVISION_Pos
Ë

	)

390 
	#SCB_ICSR_NMIPENDSET_Pos
 31

	)

391 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

393 
	#SCB_ICSR_PENDSVSET_Pos
 28

	)

394 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

396 
	#SCB_ICSR_PENDSVCLR_Pos
 27

	)

397 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

399 
	#SCB_ICSR_PENDSTSET_Pos
 26

	)

400 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

402 
	#SCB_ICSR_PENDSTCLR_Pos
 25

	)

403 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

405 
	#SCB_ICSR_ISRPREEMPT_Pos
 23

	)

406 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

408 
	#SCB_ICSR_ISRPENDING_Pos
 22

	)

409 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

411 
	#SCB_ICSR_VECTPENDING_Pos
 12

	)

412 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

414 
	#SCB_ICSR_RETTOBASE_Pos
 11

	)

415 
	#SCB_ICSR_RETTOBASE_Msk
 (1UL << 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

417 
	#SCB_ICSR_VECTACTIVE_Pos
 0

	)

418 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL << 
SCB_ICSR_VECTACTIVE_Pos
Ë

	)

421 #i‡(
__CM3_REV
 < 0x0201)

422 
	#SCB_VTOR_TBLBASE_Pos
 29

	)

423 
	#SCB_VTOR_TBLBASE_Msk
 (1UL << 
SCB_VTOR_TBLBASE_Pos
Ë

	)

425 
	#SCB_VTOR_TBLOFF_Pos
 7

	)

426 
	#SCB_VTOR_TBLOFF_Msk
 (0x3FFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

428 
	#SCB_VTOR_TBLOFF_Pos
 7

	)

429 
	#SCB_VTOR_TBLOFF_Msk
 (0x1FFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

433 
	#SCB_AIRCR_VECTKEY_Pos
 16

	)

434 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

436 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16

	)

437 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

439 
	#SCB_AIRCR_ENDIANESS_Pos
 15

	)

440 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

442 
	#SCB_AIRCR_PRIGROUP_Pos
 8

	)

443 
	#SCB_AIRCR_PRIGROUP_Msk
 (7UL << 
SCB_AIRCR_PRIGROUP_Pos
Ë

	)

445 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2

	)

446 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

448 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1

	)

449 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

451 
	#SCB_AIRCR_VECTRESET_Pos
 0

	)

452 
	#SCB_AIRCR_VECTRESET_Msk
 (1UL << 
SCB_AIRCR_VECTRESET_Pos
Ë

	)

455 
	#SCB_SCR_SEVONPEND_Pos
 4

	)

456 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

458 
	#SCB_SCR_SLEEPDEEP_Pos
 2

	)

459 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

461 
	#SCB_SCR_SLEEPONEXIT_Pos
 1

	)

462 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

465 
	#SCB_CCR_STKALIGN_Pos
 9

	)

466 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

468 
	#SCB_CCR_BFHFNMIGN_Pos
 8

	)

469 
	#SCB_CCR_BFHFNMIGN_Msk
 (1UL << 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

471 
	#SCB_CCR_DIV_0_TRP_Pos
 4

	)

472 
	#SCB_CCR_DIV_0_TRP_Msk
 (1UL << 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

474 
	#SCB_CCR_UNALIGN_TRP_Pos
 3

	)

475 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

477 
	#SCB_CCR_USERSETMPEND_Pos
 1

	)

478 
	#SCB_CCR_USERSETMPEND_Msk
 (1UL << 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

480 
	#SCB_CCR_NONBASETHRDENA_Pos
 0

	)

481 
	#SCB_CCR_NONBASETHRDENA_Msk
 (1UL << 
SCB_CCR_NONBASETHRDENA_Pos
Ë

	)

484 
	#SCB_SHCSR_USGFAULTENA_Pos
 18

	)

485 
	#SCB_SHCSR_USGFAULTENA_Msk
 (1UL << 
SCB_SHCSR_USGFAULTENA_Pos
Ë

	)

487 
	#SCB_SHCSR_BUSFAULTENA_Pos
 17

	)

488 
	#SCB_SHCSR_BUSFAULTENA_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTENA_Pos
Ë

	)

490 
	#SCB_SHCSR_MEMFAULTENA_Pos
 16

	)

491 
	#SCB_SHCSR_MEMFAULTENA_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTENA_Pos
Ë

	)

493 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15

	)

494 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

496 
	#SCB_SHCSR_BUSFAULTPENDED_Pos
 14

	)

497 
	#SCB_SHCSR_BUSFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTPENDED_Pos
Ë

	)

499 
	#SCB_SHCSR_MEMFAULTPENDED_Pos
 13

	)

500 
	#SCB_SHCSR_MEMFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTPENDED_Pos
Ë

	)

502 
	#SCB_SHCSR_USGFAULTPENDED_Pos
 12

	)

503 
	#SCB_SHCSR_USGFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_USGFAULTPENDED_Pos
Ë

	)

505 
	#SCB_SHCSR_SYSTICKACT_Pos
 11

	)

506 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1UL << 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

508 
	#SCB_SHCSR_PENDSVACT_Pos
 10

	)

509 
	#SCB_SHCSR_PENDSVACT_Msk
 (1UL << 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

511 
	#SCB_SHCSR_MONITORACT_Pos
 8

	)

512 
	#SCB_SHCSR_MONITORACT_Msk
 (1UL << 
SCB_SHCSR_MONITORACT_Pos
Ë

	)

514 
	#SCB_SHCSR_SVCALLACT_Pos
 7

	)

515 
	#SCB_SHCSR_SVCALLACT_Msk
 (1UL << 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

517 
	#SCB_SHCSR_USGFAULTACT_Pos
 3

	)

518 
	#SCB_SHCSR_USGFAULTACT_Msk
 (1UL << 
SCB_SHCSR_USGFAULTACT_Pos
Ë

	)

520 
	#SCB_SHCSR_BUSFAULTACT_Pos
 1

	)

521 
	#SCB_SHCSR_BUSFAULTACT_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTACT_Pos
Ë

	)

523 
	#SCB_SHCSR_MEMFAULTACT_Pos
 0

	)

524 
	#SCB_SHCSR_MEMFAULTACT_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTACT_Pos
Ë

	)

527 
	#SCB_CFSR_USGFAULTSR_Pos
 16

	)

528 
	#SCB_CFSR_USGFAULTSR_Msk
 (0xFFFFUL << 
SCB_CFSR_USGFAULTSR_Pos
Ë

	)

530 
	#SCB_CFSR_BUSFAULTSR_Pos
 8

	)

531 
	#SCB_CFSR_BUSFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_BUSFAULTSR_Pos
Ë

	)

533 
	#SCB_CFSR_MEMFAULTSR_Pos
 0

	)

534 
	#SCB_CFSR_MEMFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_MEMFAULTSR_Pos
Ë

	)

537 
	#SCB_HFSR_DEBUGEVT_Pos
 31

	)

538 
	#SCB_HFSR_DEBUGEVT_Msk
 (1UL << 
SCB_HFSR_DEBUGEVT_Pos
Ë

	)

540 
	#SCB_HFSR_FORCED_Pos
 30

	)

541 
	#SCB_HFSR_FORCED_Msk
 (1UL << 
SCB_HFSR_FORCED_Pos
Ë

	)

543 
	#SCB_HFSR_VECTTBL_Pos
 1

	)

544 
	#SCB_HFSR_VECTTBL_Msk
 (1UL << 
SCB_HFSR_VECTTBL_Pos
Ë

	)

547 
	#SCB_DFSR_EXTERNAL_Pos
 4

	)

548 
	#SCB_DFSR_EXTERNAL_Msk
 (1UL << 
SCB_DFSR_EXTERNAL_Pos
Ë

	)

550 
	#SCB_DFSR_VCATCH_Pos
 3

	)

551 
	#SCB_DFSR_VCATCH_Msk
 (1UL << 
SCB_DFSR_VCATCH_Pos
Ë

	)

553 
	#SCB_DFSR_DWTTRAP_Pos
 2

	)

554 
	#SCB_DFSR_DWTTRAP_Msk
 (1UL << 
SCB_DFSR_DWTTRAP_Pos
Ë

	)

556 
	#SCB_DFSR_BKPT_Pos
 1

	)

557 
	#SCB_DFSR_BKPT_Msk
 (1UL << 
SCB_DFSR_BKPT_Pos
Ë

	)

559 
	#SCB_DFSR_HALTED_Pos
 0

	)

560 
	#SCB_DFSR_HALTED_Msk
 (1UL << 
SCB_DFSR_HALTED_Pos
Ë

	)

575 
uöt32_t
 
RESERVED0
[1];

576 
__I
 
uöt32_t
 
ICTR
;

577 #i‡((
deföed
 
__CM3_REV
) && (__CM3_REV >= 0x200))

578 
__IO
 
uöt32_t
 
ACTLR
;

580 
uöt32_t
 
RESERVED1
[1];

582 } 
	tSCnSCB_Ty≥
;

585 
	#SCnSCB_ICTR_INTLINESNUM_Pos
 0

	)

586 
	#SCnSCB_ICTR_INTLINESNUM_Msk
 (0xFUL << 
SCnSCB_ICTR_INTLINESNUM_Pos
Ë

	)

590 
	#SCnSCB_ACTLR_DISFOLD_Pos
 2

	)

591 
	#SCnSCB_ACTLR_DISFOLD_Msk
 (1UL << 
SCnSCB_ACTLR_DISFOLD_Pos
Ë

	)

593 
	#SCnSCB_ACTLR_DISDEFWBUF_Pos
 1

	)

594 
	#SCnSCB_ACTLR_DISDEFWBUF_Msk
 (1UL << 
SCnSCB_ACTLR_DISDEFWBUF_Pos
Ë

	)

596 
	#SCnSCB_ACTLR_DISMCYCINT_Pos
 0

	)

597 
	#SCnSCB_ACTLR_DISMCYCINT_Msk
 (1UL << 
SCnSCB_ACTLR_DISMCYCINT_Pos
Ë

	)

612 
__IO
 
uöt32_t
 
CTRL
;

613 
__IO
 
uöt32_t
 
LOAD
;

614 
__IO
 
uöt32_t
 
VAL
;

615 
__I
 
uöt32_t
 
CALIB
;

616 } 
	tSysTick_Ty≥
;

619 
	#SysTick_CTRL_COUNTFLAG_Pos
 16

	)

620 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

622 
	#SysTick_CTRL_CLKSOURCE_Pos
 2

	)

623 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

625 
	#SysTick_CTRL_TICKINT_Pos
 1

	)

626 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

628 
	#SysTick_CTRL_ENABLE_Pos
 0

	)

629 
	#SysTick_CTRL_ENABLE_Msk
 (1UL << 
SysTick_CTRL_ENABLE_Pos
Ë

	)

632 
	#SysTick_LOAD_RELOAD_Pos
 0

	)

633 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL << 
SysTick_LOAD_RELOAD_Pos
Ë

	)

636 
	#SysTick_VAL_CURRENT_Pos
 0

	)

637 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

640 
	#SysTick_CALIB_NOREF_Pos
 31

	)

641 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

643 
	#SysTick_CALIB_SKEW_Pos
 30

	)

644 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

646 
	#SysTick_CALIB_TENMS_Pos
 0

	)

647 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL << 
SysTick_CALIB_TENMS_Pos
Ë

	)

662 
__O
 union

664 
__O
 
uöt8_t
 
u8
;

665 
__O
 
uöt16_t
 
u16
;

666 
__O
 
uöt32_t
 
u32
;

667 } 
PORT
 [32];

668 
uöt32_t
 
RESERVED0
[864];

669 
__IO
 
uöt32_t
 
TER
;

670 
uöt32_t
 
RESERVED1
[15];

671 
__IO
 
uöt32_t
 
TPR
;

672 
uöt32_t
 
RESERVED2
[15];

673 
__IO
 
uöt32_t
 
TCR
;

674 
uöt32_t
 
RESERVED3
[29];

675 
__O
 
uöt32_t
 
IWR
;

676 
__I
 
uöt32_t
 
IRR
;

677 
__IO
 
uöt32_t
 
IMCR
;

678 
uöt32_t
 
RESERVED4
[43];

679 
__O
 
uöt32_t
 
LAR
;

680 
__I
 
uöt32_t
 
LSR
;

681 
uöt32_t
 
RESERVED5
[6];

682 
__I
 
uöt32_t
 
PID4
;

683 
__I
 
uöt32_t
 
PID5
;

684 
__I
 
uöt32_t
 
PID6
;

685 
__I
 
uöt32_t
 
PID7
;

686 
__I
 
uöt32_t
 
PID0
;

687 
__I
 
uöt32_t
 
PID1
;

688 
__I
 
uöt32_t
 
PID2
;

689 
__I
 
uöt32_t
 
PID3
;

690 
__I
 
uöt32_t
 
CID0
;

691 
__I
 
uöt32_t
 
CID1
;

692 
__I
 
uöt32_t
 
CID2
;

693 
__I
 
uöt32_t
 
CID3
;

694 } 
	tITM_Ty≥
;

697 
	#ITM_TPR_PRIVMASK_Pos
 0

	)

698 
	#ITM_TPR_PRIVMASK_Msk
 (0xFUL << 
ITM_TPR_PRIVMASK_Pos
Ë

	)

701 
	#ITM_TCR_BUSY_Pos
 23

	)

702 
	#ITM_TCR_BUSY_Msk
 (1UL << 
ITM_TCR_BUSY_Pos
Ë

	)

704 
	#ITM_TCR_Tø˚BusID_Pos
 16

	)

705 
	#ITM_TCR_Tø˚BusID_Msk
 (0x7FUL << 
ITM_TCR_Tø˚BusID_Pos
Ë

	)

707 
	#ITM_TCR_GTSFREQ_Pos
 10

	)

708 
	#ITM_TCR_GTSFREQ_Msk
 (3UL << 
ITM_TCR_GTSFREQ_Pos
Ë

	)

710 
	#ITM_TCR_TSPªsˇÀ_Pos
 8

	)

711 
	#ITM_TCR_TSPªsˇÀ_Msk
 (3UL << 
ITM_TCR_TSPªsˇÀ_Pos
Ë

	)

713 
	#ITM_TCR_SWOENA_Pos
 4

	)

714 
	#ITM_TCR_SWOENA_Msk
 (1UL << 
ITM_TCR_SWOENA_Pos
Ë

	)

716 
	#ITM_TCR_DWTENA_Pos
 3

	)

717 
	#ITM_TCR_DWTENA_Msk
 (1UL << 
ITM_TCR_DWTENA_Pos
Ë

	)

719 
	#ITM_TCR_SYNCENA_Pos
 2

	)

720 
	#ITM_TCR_SYNCENA_Msk
 (1UL << 
ITM_TCR_SYNCENA_Pos
Ë

	)

722 
	#ITM_TCR_TSENA_Pos
 1

	)

723 
	#ITM_TCR_TSENA_Msk
 (1UL << 
ITM_TCR_TSENA_Pos
Ë

	)

725 
	#ITM_TCR_ITMENA_Pos
 0

	)

726 
	#ITM_TCR_ITMENA_Msk
 (1UL << 
ITM_TCR_ITMENA_Pos
Ë

	)

729 
	#ITM_IWR_ATVALIDM_Pos
 0

	)

730 
	#ITM_IWR_ATVALIDM_Msk
 (1UL << 
ITM_IWR_ATVALIDM_Pos
Ë

	)

733 
	#ITM_IRR_ATREADYM_Pos
 0

	)

734 
	#ITM_IRR_ATREADYM_Msk
 (1UL << 
ITM_IRR_ATREADYM_Pos
Ë

	)

737 
	#ITM_IMCR_INTEGRATION_Pos
 0

	)

738 
	#ITM_IMCR_INTEGRATION_Msk
 (1UL << 
ITM_IMCR_INTEGRATION_Pos
Ë

	)

741 
	#ITM_LSR_ByãAcc_Pos
 2

	)

742 
	#ITM_LSR_ByãAcc_Msk
 (1UL << 
ITM_LSR_ByãAcc_Pos
Ë

	)

744 
	#ITM_LSR_Ac˚ss_Pos
 1

	)

745 
	#ITM_LSR_Ac˚ss_Msk
 (1UL << 
ITM_LSR_Ac˚ss_Pos
Ë

	)

747 
	#ITM_LSR_Pª£¡_Pos
 0

	)

748 
	#ITM_LSR_Pª£¡_Msk
 (1UL << 
ITM_LSR_Pª£¡_Pos
Ë

	)

763 
__IO
 
uöt32_t
 
CTRL
;

764 
__IO
 
uöt32_t
 
CYCCNT
;

765 
__IO
 
uöt32_t
 
CPICNT
;

766 
__IO
 
uöt32_t
 
EXCCNT
;

767 
__IO
 
uöt32_t
 
SLEEPCNT
;

768 
__IO
 
uöt32_t
 
LSUCNT
;

769 
__IO
 
uöt32_t
 
FOLDCNT
;

770 
__I
 
uöt32_t
 
PCSR
;

771 
__IO
 
uöt32_t
 
COMP0
;

772 
__IO
 
uöt32_t
 
MASK0
;

773 
__IO
 
uöt32_t
 
FUNCTION0
;

774 
uöt32_t
 
RESERVED0
[1];

775 
__IO
 
uöt32_t
 
COMP1
;

776 
__IO
 
uöt32_t
 
MASK1
;

777 
__IO
 
uöt32_t
 
FUNCTION1
;

778 
uöt32_t
 
RESERVED1
[1];

779 
__IO
 
uöt32_t
 
COMP2
;

780 
__IO
 
uöt32_t
 
MASK2
;

781 
__IO
 
uöt32_t
 
FUNCTION2
;

782 
uöt32_t
 
RESERVED2
[1];

783 
__IO
 
uöt32_t
 
COMP3
;

784 
__IO
 
uöt32_t
 
MASK3
;

785 
__IO
 
uöt32_t
 
FUNCTION3
;

786 } 
	tDWT_Ty≥
;

789 
	#DWT_CTRL_NUMCOMP_Pos
 28

	)

790 
	#DWT_CTRL_NUMCOMP_Msk
 (0xFUL << 
DWT_CTRL_NUMCOMP_Pos
Ë

	)

792 
	#DWT_CTRL_NOTRCPKT_Pos
 27

	)

793 
	#DWT_CTRL_NOTRCPKT_Msk
 (0x1UL << 
DWT_CTRL_NOTRCPKT_Pos
Ë

	)

795 
	#DWT_CTRL_NOEXTTRIG_Pos
 26

	)

796 
	#DWT_CTRL_NOEXTTRIG_Msk
 (0x1UL << 
DWT_CTRL_NOEXTTRIG_Pos
Ë

	)

798 
	#DWT_CTRL_NOCYCCNT_Pos
 25

	)

799 
	#DWT_CTRL_NOCYCCNT_Msk
 (0x1UL << 
DWT_CTRL_NOCYCCNT_Pos
Ë

	)

801 
	#DWT_CTRL_NOPRFCNT_Pos
 24

	)

802 
	#DWT_CTRL_NOPRFCNT_Msk
 (0x1UL << 
DWT_CTRL_NOPRFCNT_Pos
Ë

	)

804 
	#DWT_CTRL_CYCEVTENA_Pos
 22

	)

805 
	#DWT_CTRL_CYCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCEVTENA_Pos
Ë

	)

807 
	#DWT_CTRL_FOLDEVTENA_Pos
 21

	)

808 
	#DWT_CTRL_FOLDEVTENA_Msk
 (0x1UL << 
DWT_CTRL_FOLDEVTENA_Pos
Ë

	)

810 
	#DWT_CTRL_LSUEVTENA_Pos
 20

	)

811 
	#DWT_CTRL_LSUEVTENA_Msk
 (0x1UL << 
DWT_CTRL_LSUEVTENA_Pos
Ë

	)

813 
	#DWT_CTRL_SLEEPEVTENA_Pos
 19

	)

814 
	#DWT_CTRL_SLEEPEVTENA_Msk
 (0x1UL << 
DWT_CTRL_SLEEPEVTENA_Pos
Ë

	)

816 
	#DWT_CTRL_EXCEVTENA_Pos
 18

	)

817 
	#DWT_CTRL_EXCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_EXCEVTENA_Pos
Ë

	)

819 
	#DWT_CTRL_CPIEVTENA_Pos
 17

	)

820 
	#DWT_CTRL_CPIEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CPIEVTENA_Pos
Ë

	)

822 
	#DWT_CTRL_EXCTRCENA_Pos
 16

	)

823 
	#DWT_CTRL_EXCTRCENA_Msk
 (0x1UL << 
DWT_CTRL_EXCTRCENA_Pos
Ë

	)

825 
	#DWT_CTRL_PCSAMPLENA_Pos
 12

	)

826 
	#DWT_CTRL_PCSAMPLENA_Msk
 (0x1UL << 
DWT_CTRL_PCSAMPLENA_Pos
Ë

	)

828 
	#DWT_CTRL_SYNCTAP_Pos
 10

	)

829 
	#DWT_CTRL_SYNCTAP_Msk
 (0x3UL << 
DWT_CTRL_SYNCTAP_Pos
Ë

	)

831 
	#DWT_CTRL_CYCTAP_Pos
 9

	)

832 
	#DWT_CTRL_CYCTAP_Msk
 (0x1UL << 
DWT_CTRL_CYCTAP_Pos
Ë

	)

834 
	#DWT_CTRL_POSTINIT_Pos
 5

	)

835 
	#DWT_CTRL_POSTINIT_Msk
 (0xFUL << 
DWT_CTRL_POSTINIT_Pos
Ë

	)

837 
	#DWT_CTRL_POSTPRESET_Pos
 1

	)

838 
	#DWT_CTRL_POSTPRESET_Msk
 (0xFUL << 
DWT_CTRL_POSTPRESET_Pos
Ë

	)

840 
	#DWT_CTRL_CYCCNTENA_Pos
 0

	)

841 
	#DWT_CTRL_CYCCNTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCCNTENA_Pos
Ë

	)

844 
	#DWT_CPICNT_CPICNT_Pos
 0

	)

845 
	#DWT_CPICNT_CPICNT_Msk
 (0xFFUL << 
DWT_CPICNT_CPICNT_Pos
Ë

	)

848 
	#DWT_EXCCNT_EXCCNT_Pos
 0

	)

849 
	#DWT_EXCCNT_EXCCNT_Msk
 (0xFFUL << 
DWT_EXCCNT_EXCCNT_Pos
Ë

	)

852 
	#DWT_SLEEPCNT_SLEEPCNT_Pos
 0

	)

853 
	#DWT_SLEEPCNT_SLEEPCNT_Msk
 (0xFFUL << 
DWT_SLEEPCNT_SLEEPCNT_Pos
Ë

	)

856 
	#DWT_LSUCNT_LSUCNT_Pos
 0

	)

857 
	#DWT_LSUCNT_LSUCNT_Msk
 (0xFFUL << 
DWT_LSUCNT_LSUCNT_Pos
Ë

	)

860 
	#DWT_FOLDCNT_FOLDCNT_Pos
 0

	)

861 
	#DWT_FOLDCNT_FOLDCNT_Msk
 (0xFFUL << 
DWT_FOLDCNT_FOLDCNT_Pos
Ë

	)

864 
	#DWT_MASK_MASK_Pos
 0

	)

865 
	#DWT_MASK_MASK_Msk
 (0x1FUL << 
DWT_MASK_MASK_Pos
Ë

	)

868 
	#DWT_FUNCTION_MATCHED_Pos
 24

	)

869 
	#DWT_FUNCTION_MATCHED_Msk
 (0x1UL << 
DWT_FUNCTION_MATCHED_Pos
Ë

	)

871 
	#DWT_FUNCTION_DATAVADDR1_Pos
 16

	)

872 
	#DWT_FUNCTION_DATAVADDR1_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR1_Pos
Ë

	)

874 
	#DWT_FUNCTION_DATAVADDR0_Pos
 12

	)

875 
	#DWT_FUNCTION_DATAVADDR0_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR0_Pos
Ë

	)

877 
	#DWT_FUNCTION_DATAVSIZE_Pos
 10

	)

878 
	#DWT_FUNCTION_DATAVSIZE_Msk
 (0x3UL << 
DWT_FUNCTION_DATAVSIZE_Pos
Ë

	)

880 
	#DWT_FUNCTION_LNK1ENA_Pos
 9

	)

881 
	#DWT_FUNCTION_LNK1ENA_Msk
 (0x1UL << 
DWT_FUNCTION_LNK1ENA_Pos
Ë

	)

883 
	#DWT_FUNCTION_DATAVMATCH_Pos
 8

	)

884 
	#DWT_FUNCTION_DATAVMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_DATAVMATCH_Pos
Ë

	)

886 
	#DWT_FUNCTION_CYCMATCH_Pos
 7

	)

887 
	#DWT_FUNCTION_CYCMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_CYCMATCH_Pos
Ë

	)

889 
	#DWT_FUNCTION_EMITRANGE_Pos
 5

	)

890 
	#DWT_FUNCTION_EMITRANGE_Msk
 (0x1UL << 
DWT_FUNCTION_EMITRANGE_Pos
Ë

	)

892 
	#DWT_FUNCTION_FUNCTION_Pos
 0

	)

893 
	#DWT_FUNCTION_FUNCTION_Msk
 (0xFUL << 
DWT_FUNCTION_FUNCTION_Pos
Ë

	)

908 
__IO
 
uöt32_t
 
SSPSR
;

909 
__IO
 
uöt32_t
 
CSPSR
;

910 
uöt32_t
 
RESERVED0
[2];

911 
__IO
 
uöt32_t
 
ACPR
;

912 
uöt32_t
 
RESERVED1
[55];

913 
__IO
 
uöt32_t
 
SPPR
;

914 
uöt32_t
 
RESERVED2
[131];

915 
__I
 
uöt32_t
 
FFSR
;

916 
__IO
 
uöt32_t
 
FFCR
;

917 
__I
 
uöt32_t
 
FSCR
;

918 
uöt32_t
 
RESERVED3
[759];

919 
__I
 
uöt32_t
 
TRIGGER
;

920 
__I
 
uöt32_t
 
FIFO0
;

921 
__I
 
uöt32_t
 
ITATBCTR2
;

922 
uöt32_t
 
RESERVED4
[1];

923 
__I
 
uöt32_t
 
ITATBCTR0
;

924 
__I
 
uöt32_t
 
FIFO1
;

925 
__IO
 
uöt32_t
 
ITCTRL
;

926 
uöt32_t
 
RESERVED5
[39];

927 
__IO
 
uöt32_t
 
CLAIMSET
;

928 
__IO
 
uöt32_t
 
CLAIMCLR
;

929 
uöt32_t
 
RESERVED7
[8];

930 
__I
 
uöt32_t
 
DEVID
;

931 
__I
 
uöt32_t
 
DEVTYPE
;

932 } 
	tTPI_Ty≥
;

935 
	#TPI_ACPR_PRESCALER_Pos
 0

	)

936 
	#TPI_ACPR_PRESCALER_Msk
 (0x1FFFUL << 
TPI_ACPR_PRESCALER_Pos
Ë

	)

939 
	#TPI_SPPR_TXMODE_Pos
 0

	)

940 
	#TPI_SPPR_TXMODE_Msk
 (0x3UL << 
TPI_SPPR_TXMODE_Pos
Ë

	)

943 
	#TPI_FFSR_FtN⁄St›_Pos
 3

	)

944 
	#TPI_FFSR_FtN⁄St›_Msk
 (0x1UL << 
TPI_FFSR_FtN⁄St›_Pos
Ë

	)

946 
	#TPI_FFSR_TCPª£¡_Pos
 2

	)

947 
	#TPI_FFSR_TCPª£¡_Msk
 (0x1UL << 
TPI_FFSR_TCPª£¡_Pos
Ë

	)

949 
	#TPI_FFSR_FtSt›≥d_Pos
 1

	)

950 
	#TPI_FFSR_FtSt›≥d_Msk
 (0x1UL << 
TPI_FFSR_FtSt›≥d_Pos
Ë

	)

952 
	#TPI_FFSR_FlInProg_Pos
 0

	)

953 
	#TPI_FFSR_FlInProg_Msk
 (0x1UL << 
TPI_FFSR_FlInProg_Pos
Ë

	)

956 
	#TPI_FFCR_TrigIn_Pos
 8

	)

957 
	#TPI_FFCR_TrigIn_Msk
 (0x1UL << 
TPI_FFCR_TrigIn_Pos
Ë

	)

959 
	#TPI_FFCR_EnFC⁄t_Pos
 1

	)

960 
	#TPI_FFCR_EnFC⁄t_Msk
 (0x1UL << 
TPI_FFCR_EnFC⁄t_Pos
Ë

	)

963 
	#TPI_TRIGGER_TRIGGER_Pos
 0

	)

964 
	#TPI_TRIGGER_TRIGGER_Msk
 (0x1UL << 
TPI_TRIGGER_TRIGGER_Pos
Ë

	)

967 
	#TPI_FIFO0_ITM_ATVALID_Pos
 29

	)

968 
	#TPI_FIFO0_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ITM_ATVALID_Pos
Ë

	)

970 
	#TPI_FIFO0_ITM_byãcou¡_Pos
 27

	)

971 
	#TPI_FIFO0_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ITM_byãcou¡_Pos
Ë

	)

973 
	#TPI_FIFO0_ETM_ATVALID_Pos
 26

	)

974 
	#TPI_FIFO0_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ETM_ATVALID_Pos
Ë

	)

976 
	#TPI_FIFO0_ETM_byãcou¡_Pos
 24

	)

977 
	#TPI_FIFO0_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ETM_byãcou¡_Pos
Ë

	)

979 
	#TPI_FIFO0_ETM2_Pos
 16

	)

980 
	#TPI_FIFO0_ETM2_Msk
 (0xFFUL << 
TPI_FIFO0_ETM2_Pos
Ë

	)

982 
	#TPI_FIFO0_ETM1_Pos
 8

	)

983 
	#TPI_FIFO0_ETM1_Msk
 (0xFFUL << 
TPI_FIFO0_ETM1_Pos
Ë

	)

985 
	#TPI_FIFO0_ETM0_Pos
 0

	)

986 
	#TPI_FIFO0_ETM0_Msk
 (0xFFUL << 
TPI_FIFO0_ETM0_Pos
Ë

	)

989 
	#TPI_ITATBCTR2_ATREADY_Pos
 0

	)

990 
	#TPI_ITATBCTR2_ATREADY_Msk
 (0x1UL << 
TPI_ITATBCTR2_ATREADY_Pos
Ë

	)

993 
	#TPI_FIFO1_ITM_ATVALID_Pos
 29

	)

994 
	#TPI_FIFO1_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ITM_ATVALID_Pos
Ë

	)

996 
	#TPI_FIFO1_ITM_byãcou¡_Pos
 27

	)

997 
	#TPI_FIFO1_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ITM_byãcou¡_Pos
Ë

	)

999 
	#TPI_FIFO1_ETM_ATVALID_Pos
 26

	)

1000 
	#TPI_FIFO1_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ETM_ATVALID_Pos
Ë

	)

1002 
	#TPI_FIFO1_ETM_byãcou¡_Pos
 24

	)

1003 
	#TPI_FIFO1_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ETM_byãcou¡_Pos
Ë

	)

1005 
	#TPI_FIFO1_ITM2_Pos
 16

	)

1006 
	#TPI_FIFO1_ITM2_Msk
 (0xFFUL << 
TPI_FIFO1_ITM2_Pos
Ë

	)

1008 
	#TPI_FIFO1_ITM1_Pos
 8

	)

1009 
	#TPI_FIFO1_ITM1_Msk
 (0xFFUL << 
TPI_FIFO1_ITM1_Pos
Ë

	)

1011 
	#TPI_FIFO1_ITM0_Pos
 0

	)

1012 
	#TPI_FIFO1_ITM0_Msk
 (0xFFUL << 
TPI_FIFO1_ITM0_Pos
Ë

	)

1015 
	#TPI_ITATBCTR0_ATREADY_Pos
 0

	)

1016 
	#TPI_ITATBCTR0_ATREADY_Msk
 (0x1UL << 
TPI_ITATBCTR0_ATREADY_Pos
Ë

	)

1019 
	#TPI_ITCTRL_Mode_Pos
 0

	)

1020 
	#TPI_ITCTRL_Mode_Msk
 (0x1UL << 
TPI_ITCTRL_Mode_Pos
Ë

	)

1023 
	#TPI_DEVID_NRZVALID_Pos
 11

	)

1024 
	#TPI_DEVID_NRZVALID_Msk
 (0x1UL << 
TPI_DEVID_NRZVALID_Pos
Ë

	)

1026 
	#TPI_DEVID_MANCVALID_Pos
 10

	)

1027 
	#TPI_DEVID_MANCVALID_Msk
 (0x1UL << 
TPI_DEVID_MANCVALID_Pos
Ë

	)

1029 
	#TPI_DEVID_PTINVALID_Pos
 9

	)

1030 
	#TPI_DEVID_PTINVALID_Msk
 (0x1UL << 
TPI_DEVID_PTINVALID_Pos
Ë

	)

1032 
	#TPI_DEVID_MöBufSz_Pos
 6

	)

1033 
	#TPI_DEVID_MöBufSz_Msk
 (0x7UL << 
TPI_DEVID_MöBufSz_Pos
Ë

	)

1035 
	#TPI_DEVID_AsynClkIn_Pos
 5

	)

1036 
	#TPI_DEVID_AsynClkIn_Msk
 (0x1UL << 
TPI_DEVID_AsynClkIn_Pos
Ë

	)

1038 
	#TPI_DEVID_NrTø˚I≈ut_Pos
 0

	)

1039 
	#TPI_DEVID_NrTø˚I≈ut_Msk
 (0x1FUL << 
TPI_DEVID_NrTø˚I≈ut_Pos
Ë

	)

1042 
	#TPI_DEVTYPE_SubTy≥_Pos
 0

	)

1043 
	#TPI_DEVTYPE_SubTy≥_Msk
 (0xFUL << 
TPI_DEVTYPE_SubTy≥_Pos
Ë

	)

1045 
	#TPI_DEVTYPE_Maj‹Ty≥_Pos
 4

	)

1046 
	#TPI_DEVTYPE_Maj‹Ty≥_Msk
 (0xFUL << 
TPI_DEVTYPE_Maj‹Ty≥_Pos
Ë

	)

1051 #i‡(
__MPU_PRESENT
 == 1)

1062 
__I
 
uöt32_t
 
TYPE
;

1063 
__IO
 
uöt32_t
 
CTRL
;

1064 
__IO
 
uöt32_t
 
RNR
;

1065 
__IO
 
uöt32_t
 
RBAR
;

1066 
__IO
 
uöt32_t
 
RASR
;

1067 
__IO
 
uöt32_t
 
RBAR_A1
;

1068 
__IO
 
uöt32_t
 
RASR_A1
;

1069 
__IO
 
uöt32_t
 
RBAR_A2
;

1070 
__IO
 
uöt32_t
 
RASR_A2
;

1071 
__IO
 
uöt32_t
 
RBAR_A3
;

1072 
__IO
 
uöt32_t
 
RASR_A3
;

1073 } 
	tMPU_Ty≥
;

1076 
	#MPU_TYPE_IREGION_Pos
 16

	)

1077 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

1079 
	#MPU_TYPE_DREGION_Pos
 8

	)

1080 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

1082 
	#MPU_TYPE_SEPARATE_Pos
 0

	)

1083 
	#MPU_TYPE_SEPARATE_Msk
 (1UL << 
MPU_TYPE_SEPARATE_Pos
Ë

	)

1086 
	#MPU_CTRL_PRIVDEFENA_Pos
 2

	)

1087 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

1089 
	#MPU_CTRL_HFNMIENA_Pos
 1

	)

1090 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

1092 
	#MPU_CTRL_ENABLE_Pos
 0

	)

1093 
	#MPU_CTRL_ENABLE_Msk
 (1UL << 
MPU_CTRL_ENABLE_Pos
Ë

	)

1096 
	#MPU_RNR_REGION_Pos
 0

	)

1097 
	#MPU_RNR_REGION_Msk
 (0xFFUL << 
MPU_RNR_REGION_Pos
Ë

	)

1100 
	#MPU_RBAR_ADDR_Pos
 5

	)

1101 
	#MPU_RBAR_ADDR_Msk
 (0x7FFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

1103 
	#MPU_RBAR_VALID_Pos
 4

	)

1104 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

1106 
	#MPU_RBAR_REGION_Pos
 0

	)

1107 
	#MPU_RBAR_REGION_Msk
 (0xFUL << 
MPU_RBAR_REGION_Pos
Ë

	)

1110 
	#MPU_RASR_ATTRS_Pos
 16

	)

1111 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

1113 
	#MPU_RASR_XN_Pos
 28

	)

1114 
	#MPU_RASR_XN_Msk
 (1UL << 
MPU_RASR_XN_Pos
Ë

	)

1116 
	#MPU_RASR_AP_Pos
 24

	)

1117 
	#MPU_RASR_AP_Msk
 (0x7UL << 
MPU_RASR_AP_Pos
Ë

	)

1119 
	#MPU_RASR_TEX_Pos
 19

	)

1120 
	#MPU_RASR_TEX_Msk
 (0x7UL << 
MPU_RASR_TEX_Pos
Ë

	)

1122 
	#MPU_RASR_S_Pos
 18

	)

1123 
	#MPU_RASR_S_Msk
 (1UL << 
MPU_RASR_S_Pos
Ë

	)

1125 
	#MPU_RASR_C_Pos
 17

	)

1126 
	#MPU_RASR_C_Msk
 (1UL << 
MPU_RASR_C_Pos
Ë

	)

1128 
	#MPU_RASR_B_Pos
 16

	)

1129 
	#MPU_RASR_B_Msk
 (1UL << 
MPU_RASR_B_Pos
Ë

	)

1131 
	#MPU_RASR_SRD_Pos
 8

	)

1132 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

1134 
	#MPU_RASR_SIZE_Pos
 1

	)

1135 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

1137 
	#MPU_RASR_ENABLE_Pos
 0

	)

1138 
	#MPU_RASR_ENABLE_Msk
 (1UL << 
MPU_RASR_ENABLE_Pos
Ë

	)

1154 
__IO
 
uöt32_t
 
DHCSR
;

1155 
__O
 
uöt32_t
 
DCRSR
;

1156 
__IO
 
uöt32_t
 
DCRDR
;

1157 
__IO
 
uöt32_t
 
DEMCR
;

1158 } 
	tC‹eDebug_Ty≥
;

1161 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16

	)

1162 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFUL << 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

1164 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25

	)

1165 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

1167 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24

	)

1168 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

1170 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19

	)

1171 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

1173 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18

	)

1174 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

1176 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17

	)

1177 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

1179 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16

	)

1180 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1UL << 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

1182 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Pos
 5

	)

1183 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Msk
 (1UL << 
C‹eDebug_DHCSR_C_SNAPSTALL_Pos
Ë

	)

1185 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3

	)

1186 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1UL << 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

1188 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2

	)

1189 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1UL << 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

1191 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1

	)

1192 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

1194 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0

	)

1195 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1UL << 
C‹eDebug_DHCSR_C_DEBUGEN_Pos
Ë

	)

1198 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16

	)

1199 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1UL << 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

1201 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0

	)

1202 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1FUL << 
C‹eDebug_DCRSR_REGSEL_Pos
Ë

	)

1205 
	#C‹eDebug_DEMCR_TRCENA_Pos
 24

	)

1206 
	#C‹eDebug_DEMCR_TRCENA_Msk
 (1UL << 
C‹eDebug_DEMCR_TRCENA_Pos
Ë

	)

1208 
	#C‹eDebug_DEMCR_MON_REQ_Pos
 19

	)

1209 
	#C‹eDebug_DEMCR_MON_REQ_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_REQ_Pos
Ë

	)

1211 
	#C‹eDebug_DEMCR_MON_STEP_Pos
 18

	)

1212 
	#C‹eDebug_DEMCR_MON_STEP_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_STEP_Pos
Ë

	)

1214 
	#C‹eDebug_DEMCR_MON_PEND_Pos
 17

	)

1215 
	#C‹eDebug_DEMCR_MON_PEND_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_PEND_Pos
Ë

	)

1217 
	#C‹eDebug_DEMCR_MON_EN_Pos
 16

	)

1218 
	#C‹eDebug_DEMCR_MON_EN_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_EN_Pos
Ë

	)

1220 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10

	)

1221 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

1223 
	#C‹eDebug_DEMCR_VC_INTERR_Pos
 9

	)

1224 
	#C‹eDebug_DEMCR_VC_INTERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_INTERR_Pos
Ë

	)

1226 
	#C‹eDebug_DEMCR_VC_BUSERR_Pos
 8

	)

1227 
	#C‹eDebug_DEMCR_VC_BUSERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_BUSERR_Pos
Ë

	)

1229 
	#C‹eDebug_DEMCR_VC_STATERR_Pos
 7

	)

1230 
	#C‹eDebug_DEMCR_VC_STATERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_STATERR_Pos
Ë

	)

1232 
	#C‹eDebug_DEMCR_VC_CHKERR_Pos
 6

	)

1233 
	#C‹eDebug_DEMCR_VC_CHKERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CHKERR_Pos
Ë

	)

1235 
	#C‹eDebug_DEMCR_VC_NOCPERR_Pos
 5

	)

1236 
	#C‹eDebug_DEMCR_VC_NOCPERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_NOCPERR_Pos
Ë

	)

1238 
	#C‹eDebug_DEMCR_VC_MMERR_Pos
 4

	)

1239 
	#C‹eDebug_DEMCR_VC_MMERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_MMERR_Pos
Ë

	)

1241 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0

	)

1242 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CORERESET_Pos
Ë

	)

1254 
	#SCS_BASE
 (0xE000E000ULË

	)

1255 
	#ITM_BASE
 (0xE0000000ULË

	)

1256 
	#DWT_BASE
 (0xE0001000ULË

	)

1257 
	#TPI_BASE
 (0xE0040000ULË

	)

1258 
	#C‹eDebug_BASE
 (0xE000EDF0ULË

	)

1259 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

1260 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

1261 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

1263 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

1264 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

1265 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

1266 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

1267 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
 )

	)

1268 
	#DWT
 ((
DWT_Ty≥
 *Ë
DWT_BASE
 )

	)

1269 
	#TPI
 ((
TPI_Ty≥
 *Ë
TPI_BASE
 )

	)

1270 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
Ë

	)

1272 #i‡(
__MPU_PRESENT
 == 1)

1273 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

1274 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

1311 
__STATIC_INLINE
 
NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

1313 
uöt32_t
 
ªg_vÆue
;

1314 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07);

1316 
ªg_vÆue
 = 
SCB
->
AIRCR
;

1317 
ªg_vÆue
 &~(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
);

1318 
ªg_vÆue
 = (reg_value |

1319 ((
uöt32_t
)0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1320 (
Pri‹ôyGroupTmp
 << 8));

1321 
SCB
->
AIRCR
 = 
ªg_vÆue
;

1331 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPri‹ôyGroupög
()

1333  ((
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
Ë>> 
SCB_AIRCR_PRIGROUP_Pos
);

1343 
__STATIC_INLINE
 
NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1345 
NVIC
->
ISER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1355 
__STATIC_INLINE
 
NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1357 
NVIC
->
ICER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1371 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1373 ((
uöt32_t
Ë((
NVIC
->
ISPR
[(uöt32_t)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));

1383 
__STATIC_INLINE
 
NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1385 
NVIC
->
ISPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1395 
__STATIC_INLINE
 
NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1397 
NVIC
->
ICPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1410 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

1412 ((
uöt32_t
)((
NVIC
->
IABR
[(uöt32_t)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));

1425 
__STATIC_INLINE
 
NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1427 if(
IRQn
 < 0) {

1428 
SCB
->
SHP
[((
uöt32_t
)(
IRQn
Ë& 0xF)-4] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1430 
NVIC
->
IP
[(
uöt32_t
)(
IRQn
)] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1445 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

1448 if(
IRQn
 < 0) {

1449 ((
uöt32_t
)(
SCB
->
SHP
[((uöt32_t)(
IRQn
Ë& 0xF)-4] >> (8 - 
__NVIC_PRIO_BITS
))); }

1451 ((
uöt32_t
)(
NVIC
->
IP
[(uöt32_t)(
IRQn
)] >> (8 - 
__NVIC_PRIO_BITS
))); }

1467 
__STATIC_INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

1469 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1470 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1471 
uöt32_t
 
SubPri‹ôyBôs
;

1473 
Pªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1474 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1477 ((
Pªem±Pri‹ôy
 & ((1 << (
Pªem±Pri‹ôyBôs
)Ë- 1)Ë<< 
SubPri‹ôyBôs
) |

1478 ((
SubPri‹ôy
 & ((1 << (
SubPri‹ôyBôs
 )) - 1)))

1495 
__STATIC_INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* 
pPªem±Pri‹ôy
, uöt32_t* 
pSubPri‹ôy
)

1497 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1498 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1499 
uöt32_t
 
SubPri‹ôyBôs
;

1501 
Pªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1502 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1504 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& ((1 << (
Pªem±Pri‹ôyBôs
)) - 1);

1505 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & ((1 << (
SubPri‹ôyBôs
 )) - 1);

1513 
__STATIC_INLINE
 
NVIC_Sy°emRe£t
()

1515 
__DSB
();

1517 
SCB
->
AIRCR
 = ((0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1518 (
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
) |

1519 
SCB_AIRCR_SYSRESETREQ_Msk
);

1520 
__DSB
();

1535 #i‡(
__Víd‹_SysTickC⁄fig
 == 0)

1552 
__STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

1554 i‡((
ticks
 - 1Ë> 
SysTick_LOAD_RELOAD_Msk
)  (1);

1556 
SysTick
->
LOAD
 = 
ticks
 - 1;

1557 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1<<
__NVIC_PRIO_BITS
) - 1);

1558 
SysTick
->
VAL
 = 0;

1559 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1560 
SysTick_CTRL_TICKINT_Msk
 |

1561 
SysTick_CTRL_ENABLE_Msk
;

1578 vﬁ©ûê
öt32_t
 
ITM_RxBuf„r
;

1579 
	#ITM_RXBUFFER_EMPTY
 0x5AA55AA5

	)

1592 
__STATIC_INLINE
 
uöt32_t
 
ITM_SídCh¨
 (uöt32_à
ch
)

1594 i‡((
	gITM
->
	gTCR
 & 
	gITM_TCR_ITMENA_Msk
) &&

1595 (
	gITM
->
	gTER
 & (1UL << 0) ) )

1597 
	gITM
->
	gPORT
[0].
	gu32
 == 0);

1598 
	gITM
->
	gPORT
[0].
	gu8
 = (
uöt8_t
Ë
ch
;

1600  (
	gch
);

1611 
__STATIC_INLINE
 
öt32_t
 
ITM_Re˚iveCh¨
 () {

1612 
öt32_t
 
	gch
 = -1;

1614 i‡(
	gITM_RxBuf„r
 !
ITM_RXBUFFER_EMPTY
) {

1615 
ch
 = 
ITM_RxBuf„r
;

1616 
	gITM_RxBuf„r
 = 
ITM_RXBUFFER_EMPTY
;

1619  (
	gch
);

1630 
__STATIC_INLINE
 
öt32_t
 
ITM_CheckCh¨
 () {

1632 i‡(
	gITM_RxBuf„r
 =
ITM_RXBUFFER_EMPTY
) {

1644 #ifde‡
__˝lu•lus


	@/home/vaje/Documents/vaja9/asf/thirdparty/CMSIS/include/core_cmFunc.h

38 #i‚de‡
__CORE_CMFUNC_H


39 
	#__CORE_CMFUNC_H


	)

48 #i‡ 
deföed
 ( 
__CC_ARM
 )

51 #i‡(
__ARMCC_VERSION
 < 400677)

64 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_CONTROL
()

66 
uöt32_t
 
__ªgC⁄åﬁ
 
	`__ASM
("control");

67 (
__ªgC⁄åﬁ
);

68 
	}
}

77 
__STATIC_INLINE
 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

79 
uöt32_t
 
__ªgC⁄åﬁ
 
	`__ASM
("control");

80 
__ªgC⁄åﬁ
 = 
c⁄åﬁ
;

81 
	}
}

90 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_IPSR
()

92 
uöt32_t
 
__ªgIPSR
 
	`__ASM
("ipsr");

93 (
__ªgIPSR
);

94 
	}
}

103 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_APSR
()

105 
uöt32_t
 
__ªgAPSR
 
	`__ASM
("apsr");

106 (
__ªgAPSR
);

107 
	}
}

116 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_xPSR
()

118 
uöt32_t
 
__ªgXPSR
 
	`__ASM
("xpsr");

119 (
__ªgXPSR
);

120 
	}
}

129 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_PSP
()

131 
uöt32_t
 
__ªgPro˚ssSèckPoöãr
 
	`__ASM
("psp");

132 (
__ªgPro˚ssSèckPoöãr
);

133 
	}
}

142 
__STATIC_INLINE
 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

144 
uöt32_t
 
__ªgPro˚ssSèckPoöãr
 
	`__ASM
("psp");

145 
__ªgPro˚ssSèckPoöãr
 = 
t›OfProcSèck
;

146 
	}
}

155 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_MSP
()

157 
uöt32_t
 
__ªgMaöSèckPoöãr
 
	`__ASM
("msp");

158 (
__ªgMaöSèckPoöãr
);

159 
	}
}

168 
__STATIC_INLINE
 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

170 
uöt32_t
 
__ªgMaöSèckPoöãr
 
	`__ASM
("msp");

171 
__ªgMaöSèckPoöãr
 = 
t›OfMaöSèck
;

172 
	}
}

181 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_PRIMASK
()

183 
uöt32_t
 
__ªgPriMask
 
	`__ASM
("primask");

184 (
__ªgPriMask
);

185 
	}
}

194 
__STATIC_INLINE
 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

196 
uöt32_t
 
__ªgPriMask
 
	`__ASM
("primask");

197 
__ªgPriMask
 = (
¥iMask
);

198 
	}
}

201 #i‡ (
__CORTEX_M
 >0x03Ë|| (
__CORTEX_SC
 >= 300)

208 
	#__íabÀ_Áu…_úq
 
__íabÀ_fiq


	)

216 
	#__dißbÀ_Áu…_úq
 
__dißbÀ_fiq


	)

225 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_BASEPRI
()

227 
uöt32_t
 
__ªgBa£Pri
 
	`__ASM
("basepri");

228 (
__ªgBa£Pri
);

229 
	}
}

238 
__STATIC_INLINE
 
	$__£t_BASEPRI
(
uöt32_t
 
ba£Pri
)

240 
uöt32_t
 
__ªgBa£Pri
 
	`__ASM
("basepri");

241 
__ªgBa£Pri
 = (
ba£Pri
 & 0xff);

242 
	}
}

251 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_FAULTMASK
()

253 
uöt32_t
 
__ªgFau…Mask
 
	`__ASM
("faultmask");

254 (
__ªgFau…Mask
);

255 
	}
}

264 
__STATIC_INLINE
 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

266 
uöt32_t
 
__ªgFau…Mask
 
	`__ASM
("faultmask");

267 
__ªgFau…Mask
 = (
Áu…Mask
 & (
uöt32_t
)1);

268 
	}
}

273 #i‡ (
__CORTEX_M
 == 0x04) || (__CORTEX_M == 0x07)

281 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_FPSCR
()

283 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

284 
uöt32_t
 
__ªgÂs¸
 
	`__ASM
("fpscr");

285 (
__ªgÂs¸
);

289 
	}
}

298 
__STATIC_INLINE
 
	$__£t_FPSCR
(
uöt32_t
 
Âs¸
)

300 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

301 
uöt32_t
 
__ªgÂs¸
 
	`__ASM
("fpscr");

302 
__ªgÂs¸
 = (
Âs¸
);

304 
	}
}

309 #ñi‡
deföed
 ( 
__GNUC__
 )

317 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__íabÀ_úq
()

319 
__ASM
 volatile ("cpsie i" : : : "memory");

320 
	}
}

328 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__dißbÀ_úq
()

330 
__ASM
 volatile ("cpsid i" : : : "memory");

331 
	}
}

340 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_CONTROL
()

342 
uöt32_t
 
ªsu…
;

344 
__ASM
 vﬁ©ûê("MRS %0, c⁄åﬁ" : "Ù" (
ªsu…
) );

345 (
ªsu…
);

346 
	}
}

355 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

357 
__ASM
 vﬁ©ûê("MSR c⁄åﬁ, %0" : : "r" (
c⁄åﬁ
) : "memory");

358 
	}
}

367 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_IPSR
()

369 
uöt32_t
 
ªsu…
;

371 
__ASM
 vﬁ©ûê("MRS %0, ip§" : "Ù" (
ªsu…
) );

372 (
ªsu…
);

373 
	}
}

382 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_APSR
()

384 
uöt32_t
 
ªsu…
;

386 
__ASM
 vﬁ©ûê("MRS %0,áp§" : "Ù" (
ªsu…
) );

387 (
ªsu…
);

388 
	}
}

397 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_xPSR
()

399 
uöt32_t
 
ªsu…
;

401 
__ASM
 vﬁ©ûê("MRS %0, xp§" : "Ù" (
ªsu…
) );

402 (
ªsu…
);

403 
	}
}

412 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_PSP
()

414 
uöt32_t
 
ªsu…
;

416 
__ASM
 vﬁ©ûê("MRS %0,Ö•\n" : "Ù" (
ªsu…
) );

417 (
ªsu…
);

418 
	}
}

427 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

429 
__ASM
 vﬁ©ûê("MSRÖ•, %0\n" : : "r" (
t›OfProcSèck
) : "sp");

430 
	}
}

439 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_MSP
()

441 
uöt32_t
 
ªsu…
;

443 
__ASM
 vﬁ©ûê("MRS %0, m•\n" : "Ù" (
ªsu…
) );

444 (
ªsu…
);

445 
	}
}

454 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

456 
__ASM
 vﬁ©ûê("MSR m•, %0\n" : : "r" (
t›OfMaöSèck
) : "sp");

457 
	}
}

466 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_PRIMASK
()

468 
uöt32_t
 
ªsu…
;

470 
__ASM
 vﬁ©ûê("MRS %0,Örimask" : "Ù" (
ªsu…
) );

471 (
ªsu…
);

472 
	}
}

481 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

483 
__ASM
 vﬁ©ûê("MSRÖrimask, %0" : : "r" (
¥iMask
) : "memory");

484 
	}
}

487 #i‡ (
__CORTEX_M
 >= 0x03)

494 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__íabÀ_Áu…_úq
()

496 
__ASM
 volatile ("cpsie f" : : : "memory");

497 
	}
}

505 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__dißbÀ_Áu…_úq
()

507 
__ASM
 volatile ("cpsid f" : : : "memory");

508 
	}
}

517 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_BASEPRI
()

519 
uöt32_t
 
ªsu…
;

521 
__ASM
 vﬁ©ûê("MRS %0, ba£¥i_max" : "Ù" (
ªsu…
) );

522 (
ªsu…
);

523 
	}
}

532 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_BASEPRI
(
uöt32_t
 
vÆue
)

534 
__ASM
 vﬁ©ûê("MSR ba£¥i, %0" : : "r" (
vÆue
) : "memory");

535 
	}
}

544 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_FAULTMASK
()

546 
uöt32_t
 
ªsu…
;

548 
__ASM
 vﬁ©ûê("MRS %0, fau…mask" : "Ù" (
ªsu…
) );

549 (
ªsu…
);

550 
	}
}

559 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

561 
__ASM
 vﬁ©ûê("MSR fau…mask, %0" : : "r" (
Áu…Mask
) : "memory");

562 
	}
}

567 #i‡ (
__CORTEX_M
 == 0x04) || (__CORTEX_M == 0x07)

575 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_FPSCR
()

577 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

578 
uöt32_t
 
ªsu…
;

581 
__ASM
 volatile ("");

582 
__ASM
 vﬁ©ûê("VMRS %0, fps¸" : "Ù" (
ªsu…
) );

583 
__ASM
 volatile ("");

584 (
ªsu…
);

588 
	}
}

597 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_FPSCR
(
uöt32_t
 
Âs¸
)

599 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

601 
__ASM
 volatile ("");

602 
__ASM
 vﬁ©ûê("VMSR fps¸, %0" : : "r" (
Âs¸
) : "vfpcc");

603 
__ASM
 volatile ("");

605 
	}
}

610 #ñi‡
deföed
 ( 
__ICCARM__
 )

612 
	~<cmsis_ür.h
>

615 #ñi‡
deföed
 ( 
__TMS470__
 )

617 
	~<cmsis_ccs.h
>

620 #ñi‡
deföed
 ( 
__TASKING__
 )

629 #ñi‡
deföed
 ( 
__CSMC__
 )

631 
	~<cmsis_csm.h
>

	@/home/vaje/Documents/vaja9/asf/thirdparty/CMSIS/include/core_cmInstr.h

38 #i‚de‡
__CORE_CMINSTR_H


39 
	#__CORE_CMINSTR_H


	)

48 #i‡ 
deföed
 ( 
__CC_ARM
 )

51 #i‡(
__ARMCC_VERSION
 < 400677)

60 
	#__NOP
 
__n›


	)

68 
	#__WFI
 
__wfi


	)

76 
	#__WFE
 
__w„


	)

83 
	#__SEV
 
__£v


	)

92 
	#__ISB
(Ë
	`__isb
(0xF)

	)

100 
	#__DSB
(Ë
	`__dsb
(0xF)

	)

108 
	#__DMB
(Ë
	`__dmb
(0xF)

	)

118 
	#__REV
 
__ªv


	)

128 #i‚de‡
__NO_EMBEDDED_ASM


129 
__©åibuã__
((
£˘i⁄
(".ªv16_ãxt"))Ë
__STATIC_INLINE
 
__ASM
 
uöt32_t
 
	$__REV16
(
uöt32_t
 
vÆue
)

131 
ªv16
 
r0
,Ñ0

132 
bx
 
Ã


133 
	}
}

143 #i‚de‡
__NO_EMBEDDED_ASM


144 
__©åibuã__
((
£˘i⁄
(".ªvsh_ãxt"))Ë
__STATIC_INLINE
 
__ASM
 
öt32_t
 
	$__REVSH
(
öt32_t
 
vÆue
)

146 
ªvsh
 
r0
,Ñ0

147 
bx
 
Ã


148 
	}
}

160 
	#__ROR
 
__r‹


	)

171 
	#__BKPT
(
vÆue
Ë
	`__bªakpoöt
(vÆue)

	)

174 #i‡ (
__CORTEX_M
 >0x03Ë|| (
__CORTEX_SC
 >= 300)

183 
	#__RBIT
 
__rbô


	)

193 
	#__LDREXB
(
±r
Ë((
uöt8_t
 ) 
	`__ldªx
’å))

	)

203 
	#__LDREXH
(
±r
Ë((
uöt16_t
Ë
	`__ldªx
’å))

	)

213 
	#__LDREXW
(
±r
Ë((
uöt32_t
 ) 
	`__ldªx
’å))

	)

225 
	#__STREXB
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

237 
	#__STREXH
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

249 
	#__STREXW
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

257 
	#__CLREX
 
__˛ªx


	)

268 
	#__SSAT
 
__sßt


	)

279 
	#__USAT
 
__ußt


	)

289 
	#__CLZ
 
__˛z


	)

299 #i‚de‡
__NO_EMBEDDED_ASM


300 
__©åibuã__
((
£˘i⁄
(".ºx_ãxt"))Ë
__STATIC_INLINE
 
__ASM
 
uöt32_t
 
	$__RRX
(
uöt32_t
 
vÆue
)

302 
ºx
 
r0
,Ñ0

303 
bx
 
Ã


304 
	}
}

315 
	#__LDRBT
(
±r
Ë((
uöt8_t
 ) 
	`__ldπ
’å))

	)

325 
	#__LDRHT
(
±r
Ë((
uöt16_t
Ë
	`__ldπ
’å))

	)

335 
	#__LDRT
(
±r
Ë((
uöt32_t
 ) 
	`__ldπ
’å))

	)

345 
	#__STRBT
(
vÆue
, 
±r
Ë
	`__°π
(vÆue,Öå)

	)

355 
	#__STRHT
(
vÆue
, 
±r
Ë
	`__°π
(vÆue,Öå)

	)

365 
	#__STRT
(
vÆue
, 
±r
Ë
	`__°π
(vÆue,Öå)

	)

370 #ñi‡
deföed
 ( 
__GNUC__
 )

376 #i‡
deföed
 (
__thumb__
Ë&& !deföed (
__thumb2__
)

377 
	#__CMSIS_GCC_OUT_REG
(
r
Ë"ˆ" (r)

	)

378 
	#__CMSIS_GCC_USE_REG
(
r
Ë"l" (r)

	)

380 
	#__CMSIS_GCC_OUT_REG
(
r
Ë"Ù" (r)

	)

381 
	#__CMSIS_GCC_USE_REG
(
r
Ë"r" (r)

	)

388 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__NOP
()

390 
__ASM
 volatile ("nop");

391 
	}
}

399 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__WFI
()

401 
__ASM
 volatile ("wfi");

402 
	}
}

410 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__WFE
()

412 
__ASM
 volatile ("wfe");

413 
	}
}

420 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__SEV
()

422 
__ASM
 volatile ("sev");

423 
	}
}

432 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__ISB
()

434 
__ASM
 volatile ("isb");

435 
	}
}

443 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__DSB
()

445 
__ASM
 volatile ("dsb");

446 
	}
}

454 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__DMB
()

456 
__ASM
 volatile ("dmb");

457 
	}
}

467 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__REV
(
uöt32_t
 
vÆue
)

469 #i‡(
__GNUC__
 > 4Ë|| (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 5)

470  
	`__buûtö_bsw≠32
(
vÆue
);

472 
uöt32_t
 
ªsu…
;

474 
__ASM
 vﬁ©ûê("ªv %0, %1" : 
	`__CMSIS_GCC_OUT_REG
 (
ªsu…
Ë: 
	`__CMSIS_GCC_USE_REG
 (
vÆue
) );

475 (
ªsu…
);

477 
	}
}

487 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__REV16
(
uöt32_t
 
vÆue
)

489 
uöt32_t
 
ªsu…
;

491 
__ASM
 vﬁ©ûê("ªv16 %0, %1" : 
	`__CMSIS_GCC_OUT_REG
 (
ªsu…
Ë: 
	`__CMSIS_GCC_USE_REG
 (
vÆue
) );

492 (
ªsu…
);

493 
	}
}

503 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
öt32_t
 
	$__REVSH
(
öt32_t
 
vÆue
)

505 #i‡(
__GNUC__
 > 4Ë|| (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 8)

506  ()
	`__buûtö_bsw≠16
(
vÆue
);

508 
uöt32_t
 
ªsu…
;

510 
__ASM
 vﬁ©ûê("ªvsh %0, %1" : 
	`__CMSIS_GCC_OUT_REG
 (
ªsu…
Ë: 
	`__CMSIS_GCC_USE_REG
 (
vÆue
) );

511 (
ªsu…
);

513 
	}
}

524 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__ROR
(
uöt32_t
 
›1
, uöt32_à
›2
)

526  (
›1
 >> 
›2
) | (op1 << (32 - op2));

527 
	}
}

538 
	#__BKPT
(
vÆue
Ë
__ASM
 vﬁ©ûê("bk± "#vÆue)

	)

541 #i‡ (
__CORTEX_M
 >0x03Ë|| ((
deföed
(
__CORTEX_SC
)) && (__CORTEX_SC >= 300))

550 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__RBIT
(
uöt32_t
 
vÆue
)

552 
uöt32_t
 
ªsu…
;

554 
__ASM
 vﬁ©ûê("rbô %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

555 (
ªsu…
);

556 
	}
}

566 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt8_t
 
	$__LDREXB
(vﬁ©ûê
uöt8_t
 *
addr
)

568 
uöt32_t
 
ªsu…
;

570 #i‡(
__GNUC__
 > 4Ë|| (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 8)

571 
__ASM
 vﬁ©ûê("ldªxb %0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
addr
) );

576 
__ASM
 vﬁ©ûê("ldªxb %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) : "memory" );

578  ((
uöt8_t
Ë
ªsu…
);

579 
	}
}

589 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt16_t
 
	$__LDREXH
(vﬁ©ûê
uöt16_t
 *
addr
)

591 
uöt32_t
 
ªsu…
;

593 #i‡(
__GNUC__
 > 4Ë|| (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 8)

594 
__ASM
 vﬁ©ûê("ldªxh %0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
addr
) );

599 
__ASM
 vﬁ©ûê("ldªxh %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) : "memory" );

601  ((
uöt16_t
Ë
ªsu…
);

602 
	}
}

612 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__LDREXW
(vﬁ©ûê
uöt32_t
 *
addr
)

614 
uöt32_t
 
ªsu…
;

616 
__ASM
 vﬁ©ûê("ldªx %0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
addr
) );

617 (
ªsu…
);

618 
	}
}

630 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__STREXB
(
uöt8_t
 
vÆue
, vﬁ©ûêuöt8_à*
addr
)

632 
uöt32_t
 
ªsu…
;

634 
__ASM
 vﬁ©ûê("°ªxb %0, %2, %1" : "=&r" (
ªsu…
), "=Q" (*
addr
Ë: "r" ((
uöt32_t
)
vÆue
) );

635 (
ªsu…
);

636 
	}
}

648 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__STREXH
(
uöt16_t
 
vÆue
, vﬁ©ûêuöt16_à*
addr
)

650 
uöt32_t
 
ªsu…
;

652 
__ASM
 vﬁ©ûê("°ªxh %0, %2, %1" : "=&r" (
ªsu…
), "=Q" (*
addr
Ë: "r" ((
uöt32_t
)
vÆue
) );

653 (
ªsu…
);

654 
	}
}

666 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__STREXW
(
uöt32_t
 
vÆue
, vﬁ©ûêuöt32_à*
addr
)

668 
uöt32_t
 
ªsu…
;

670 
__ASM
 vﬁ©ûê("°ªx %0, %2, %1" : "=&r" (
ªsu…
), "=Q" (*
addr
Ë: "r" (
vÆue
) );

671 (
ªsu…
);

672 
	}
}

680 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__CLREX
()

682 
__ASM
 volatile ("clrex" ::: "memory");

683 
	}
}

694 
	#__SSAT
(
ARG1
,
ARG2
) \

696 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

697 
	`__ASM
 ("sßà%0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

698 
__RES
; \

699 })

	)

710 
	#__USAT
(
ARG1
,
ARG2
) \

712 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

713 
	`__ASM
 ("ußà%0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

714 
__RES
; \

715 })

	)

725 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt8_t
 
	$__CLZ
(
uöt32_t
 
vÆue
)

727 
uöt32_t
 
ªsu…
;

729 
__ASM
 vﬁ©ûê("˛z %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

730  ((
uöt8_t
Ë
ªsu…
);

731 
	}
}

741 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__RRX
(
uöt32_t
 
vÆue
)

743 
uöt32_t
 
ªsu…
;

745 
__ASM
 vﬁ©ûê("ºx %0, %1" : 
	`__CMSIS_GCC_OUT_REG
 (
ªsu…
Ë: 
	`__CMSIS_GCC_USE_REG
 (
vÆue
) );

746 (
ªsu…
);

747 
	}
}

757 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt8_t
 
	$__LDRBT
(vﬁ©ûê
uöt8_t
 *
addr
)

759 
uöt32_t
 
ªsu…
;

761 #i‡(
__GNUC__
 > 4Ë|| (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 8)

762 
__ASM
 vﬁ©ûê("ldrbà%0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
addr
) );

767 
__ASM
 vﬁ©ûê("ldrbà%0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) : "memory" );

769  ((
uöt8_t
Ë
ªsu…
);

770 
	}
}

780 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt16_t
 
	$__LDRHT
(vﬁ©ûê
uöt16_t
 *
addr
)

782 
uöt32_t
 
ªsu…
;

784 #i‡(
__GNUC__
 > 4Ë|| (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 8)

785 
__ASM
 vﬁ©ûê("ldrhà%0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
addr
) );

790 
__ASM
 vﬁ©ûê("ldrhà%0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) : "memory" );

792  ((
uöt16_t
Ë
ªsu…
);

793 
	}
}

803 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__LDRT
(vﬁ©ûê
uöt32_t
 *
addr
)

805 
uöt32_t
 
ªsu…
;

807 
__ASM
 vﬁ©ûê("ldπ %0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
addr
) );

808 (
ªsu…
);

809 
	}
}

819 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__STRBT
(
uöt8_t
 
vÆue
, vﬁ©ûêuöt8_à*
addr
)

821 
__ASM
 vﬁ©ûê("°rbà%1, %0" : "=Q" (*
addr
Ë: "r" ((
uöt32_t
)
vÆue
) );

822 
	}
}

832 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__STRHT
(
uöt16_t
 
vÆue
, vﬁ©ûêuöt16_à*
addr
)

834 
__ASM
 vﬁ©ûê("°rhà%1, %0" : "=Q" (*
addr
Ë: "r" ((
uöt32_t
)
vÆue
) );

835 
	}
}

845 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__STRT
(
uöt32_t
 
vÆue
, vﬁ©ûêuöt32_à*
addr
)

847 
__ASM
 vﬁ©ûê("°π %1, %0" : "=Q" (*
addr
Ë: "r" (
vÆue
) );

848 
	}
}

853 #ñi‡
deföed
 ( 
__ICCARM__
 )

855 
	~<cmsis_ür.h
>

858 #ñi‡
deföed
 ( 
__TMS470__
 )

860 
	~<cmsis_ccs.h
>

863 #ñi‡
deföed
 ( 
__TASKING__
 )

872 #ñi‡
deföed
 ( 
__CSMC__
 )

874 
	~<cmsis_csm.h
>

	@/home/vaje/Documents/vaja9/clone.sh

1 #!/
bö
/
sh


2 
	gPROJECT_NAME
="${1}"

3 
PROJECT_DIR
="$(dirname ${2})"

4 
NEW_NAME
="${3}"

6 [ ! -
d
 "${PROJECT_DIR}"/"${NEW_NAME}" ]; 
thí


7 
	gecho
 "CloningÅo >> ${NEW_NAME} << ..."

8 
make
 
	g˛ón
 -
e
 
	gPN
="${PROJECT_NAME}" > /
dev
/
nuŒ
 2>&1

9 
mkdú
 "${PROJECT_DIR}"/"${NEW_NAME}"

10 [ -
d
 "${PROJECT_DIR}"/"${NEW_NAME}" ]; 
thí


11 
	gföd
 . | 
	g˝io
 -
	gpmd
 "${PROJECT_DIR}"/"${NEW_NAME}" > /
	gdev
/
	gnuŒ
 2>&1

12 
	gcd
 "${PROJECT_DIR}"/"${NEW_NAME}"

13 
	gmv
 "${PROJECT_NAME}".
	gcbp
 "${NEW_NAME}".
cbp


14 
	gmv
 "${PROJECT_NAME}".
	gœyout
 "${NEW_NAME}".
œyout


15 
	g£d
 -
	gi
 "s/tôÀ=\"${PROJECT_NAME}\"/tôÀ=\"${NEW_NAME}\"/g" "${NEW_NAME}".
cbp


16 
	g£d
 -
	gi
 "s/ouçut=\"${PROJECT_NAME}.ñf\"/ouçut=\"${NEW_NAME}.ñf\"/g" "${NEW_NAME}".
cbp


17 
fi


19 
	gecho
 "ERROR! Project withÅheÇame >> ${NEW_NAME} <<álreadyÉxists."

20 
	gfi


	@/home/vaje/Documents/vaja9/config.mk

1 #
#C›yrighà(
c
Ë2011 
Atmñ
 
C‹p‹©i⁄
. 
AŒ
 
rights
 
ª£rved
.

3 #
#\
asf_li˚n£_°¨t


5 #
#\
∑ge
 
Li˚n£


7 #
#Redi°ributi⁄ 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
f‹ms
, 
wôh
 
‹
 
wôhout


9 #modifiˇti⁄, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
c⁄dôi⁄s
áª 
më
:

10 #
#1. 
Redi°ributi⁄s
 
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
c›yright
 
nŸi˚
,

12 #thi†
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
dis˛aimî
.

13 #
#2. 
Redi°ributi⁄s
 
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
above
 
c›yright
 
nŸi˚
,

15 #thi†
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
dis˛aimî
 
ö
Åhê
documíèti⁄


16 #™d/
‹
 
Ÿhî
 
m©îüls
 
¥ovided
 
wôh
 
the
 
di°ributi⁄
.

17 #
#3. 
The
 
«me
 
of
 
Atmñ
 
may
 
nŸ
 
be
 
u£d
 
to
 
íd‹£
 
‹
 
¥omŸe
 
¥odu˘s
 
dîived


19 #‰om 
this
 
so·w¨e
 
wôhout
 
•ecific
 
¥i‹
 
wrôãn
 
≥rmissi⁄
.

20 #
#4. 
This
 
so·w¨e
 
may
 
⁄ly
 
be
 
ªdi°ribuãd
 
™d
 
u£d
 
ö
 
c⁄√˘i⁄
 
wôh
 
™


22 #Atmñ 
mi¸oc⁄åﬁÀr
 
¥odu˘
.

23 #
#THIS 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
ATMEL
 "AS IS" 
AND
 
ANY
 
EXPRESS
 
OR
 
IMPLIED


25 #WARRANTIES, 
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
, 
THE
 
IMPLIED
 
WARRANTIES
 
OF


26 #MERCHANTABILITY, 
FITNESS
 
FOR
 
A
 
PARTICULAR
 
PURPOSE
 
AND
 
NON
-
INFRINGEMENT
 
ARE


27 #EXPRESSLY 
AND
 
SPECIFICALLY
 
DISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
ATMEL
 
BE
 
LIABLE
 
FOR


28 #ANY 
DIRECT
, 
INDIRECT
, 
INCIDENTAL
, 
SPECIAL
, 
EXEMPLARY
, 
OR
 
CONSEQUENTIAL


29 #DAMAGES (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
, 
PROCUREMENT
 
OF
 
SUBSTITUTE
 
GOODS


30 #OR 
SERVICES
; 
LOSS
 
OF
 
USE
, 
DATA
, 
OR
 
PROFITS
; OR 
BUSINESS
 
INTERRUPTION
)

31 #HOWEVER 
CAUSED
 
AND
 
ON
 
ANY
 
THEORY
 
OF
 
LIABILITY
, 
WHETHER
 
IN
 
CONTRACT
,

32 #STRICT 
LIABILITY
, 
OR
 
TORT
 (
INCLUDING
 
NEGLIGENCE
 OR 
OTHERWISE
Ë
ARISING
 
IN


33 #ANY 
WAY
 
OUT
 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE

34 #POSSIBILITY 
OF
 
SUCH
 
DAMAGE
.

35 #
#\
asf_li˚n£_°›


39 #P©h 
to
 
t›
 
Àvñ
 
ASF
 
dúe˘‹y
 
ªœtive
Åÿ
this
 
¥oje˘
 directory.

40 
	gPRJ_PATH
 = .

42 #T¨gë 
CPU
 
¨chôe˘uª
: 
c‹ãx
-
m3
, c‹ãx-
m4


43 
	gARCH
 = 
c‹ãx
-
m3


45 #T¨gë 
∑π
: 
n⁄e
, 
ßm3n4
 
‹
 
ßm4l4Ø


46 
	gPART
 = 
ßm3x8e


48 #Aµliˇti⁄ 
èrgë
 
«me
. 
Giví
 
wôh
 
suffix
 .
a
 
libøry
 
™d
 .
ñf
 a

49 #°™dÆ⁄ê
≠∂iˇti⁄
.

51 #PROJ 
is
 
deföed
 
ö
 
Makefûe
 (
modifõd
 
by
 
Bø√
)

52 
TARGET_FLASH
 = 
$
(
PN
).
ñf


53 
TARGET_SRAM
 = 
$
(
PN
).
ñf


55 #Li° 
of
 
C
 
sour˚
 
fûes
.

56 
CSRCS
 = \

57 
$
(
wûdˇrd
 
≠p
/
§c


	@/home/vaje/Documents/vaja9/openocd.cfg

1 #Bø√ ≈Ω
dølo
 (19.1.2021)

3 #_iÁ˚ 
is
 "ﬁimex" 
‹
 "ftdi"

4 
£t
 
	g_iÁ˚
 "olimex"

5 #£à
_iÁ˚
 "ftdi"

7 #_u∂ﬂd 
is
 "ﬁd" 
‹
 "new"

8 
£t
 
	g_u∂ﬂd
 "old"

9 #£à
_u∂ﬂd
 "new"

11 {
	g$_iÁ˚
=="olimex"} {

12 
	gsour˚
 [
föd
 
öãrÁ˚
/
·di
/
ﬁimex
-
¨m
-
usb
-
ocd
-
h
.
cfg
]

13 
å™•‹t
 
£À˘
 
	gjèg


16 {
	g$_iÁ˚
=="ftdi"} {

17 
	gsour˚
 [
föd
 
öãrÁ˚
/
·di
/
möimoduÀ
-
swd
.
cfg
]

20 
	gsour˚
 [
föd
 
èrgë
/
©91ßm3ax_8x
.
cfg
]

22 
öô


23 
hÆt


25 
$_TARGETNAME
 
	gc⁄figuª
 -
evít
 
	ggdb
-
	g©èch
 {

26 
£tup_g≤vm


27 {
	g$_u∂ﬂd
=="old"} {

28 
u∂ﬂd_Êash
 
	g$_Êash_fûe


30 
¥ogøm
 
	g$_Êash_fûe
.
ñf
 
¥evîify
 
	gvîify


32 
ª£t_h¨d
 
$_iÁ˚


33 
ª£t
 
hÆt


34 
	gmww
 0x400e1a00 0xa500000c

35 #ad≠ã∏
•ìd
 150

38 
$_TARGETNAME
 
	gc⁄figuª
 -
evít
 
	ggdb
-
	gdëach
 {

39 
	gshutdown


42 
¥oc
 
	g£tup_g≤vm
 {} {

43 
	gecho
 "**Checking gpnvm flag.**"

44 
£t
 
	g_ª•⁄£
 [
ˇ±uª
 "at91sam3 gpnvm show"]

45 
	gªgexp
 {(
	gßm3
-
	gg≤vm1
:).([01])} 
$_ª•⁄£
 
_dummy
 _dummy 
_Êg


46 
echo
 "**gpnvm1 currently setÅo $_flg.**"

47 {
$_Êg
==0} {

48 
echo
 "**Setting gpnvm1.**"

49 
©91ßm3
 
g≤vm
 
£t
 1

53 
¥oc
 
u∂ﬂd_Êash
 {
_fûe
} {

54 
echo
 "Comparing flashÅo $_file.bin"

56 { [
ˇtch
 {
£t
 
_ª•⁄£
 [
ˇ±uª
 "Êash vîify_b™k 0 $_fûe.bö 0"]]} 
ªs
] } {

57 
£t
 
_ª•⁄£
 "contents differÉrror"

59 
ªgexp
 {(
c⁄ã¡s
).([
A
-
Za
-
z0
-9]*)} 
$_ª•⁄£
 
_dummy
 _dummy 
_m©ch


61 {
$_m©ch
=="match"} {

62 
echo
 "File matches flash. NoÇeedÅo upload."

64 
echo
 "File differs from flash. Uploading $_file.elf."

65 
£t
 
_ª•⁄£
 [
ˇ±uª
 "program $_file.elf verify"]

66 
ªgexp
 {(
Vîifõd
).([
A
-
Za
-
z0
-9]*)} 
$_ª•⁄£
 
_dummy
 _dummy 
_m©ch


67 {
$_m©ch
=="OK"} {

68 
echo
 "Upload OK."

70 
echo
 "Upload FAILED."

75 
¥oc
 
ª£t_h¨d
 {
_iÁ˚
} {

76 {
$_iÁ˚
=="ftdi"} {

77 
echo
 "External RESET"

78 
·di_£t_sig«l
 
nSRST
 0

79 
a·î
 10

80 
·di_£t_sig«l
 
nSRST
 1

81 
a·î
 200

	@/home/vaje/Documents/vaja9/startdbg.sh

1 #!/
bö
/
sh


2 #Bø√ ≈Ω
dølo
 (19.1.2021)

4 
	gOPENOCD
="/usr/local/bin/openocd"

6 
PO
=
	$$
(
pidof
 
›íocd
)

9 
thí


10 
echo
 "Killing openocd ..."

11 
kûl
 -
s
 
HUP
 "${PO}"

12 
¶ìp
 0.1

13 
fi


15 
echo
 "Starting openocd ..."

16 
$
{
OPENOCD
} -‡›íocd.cfg -¯"£à_Êash_fûê${1}" &

17 
¶ìp
 1

	@/home/vaje/Documents/vaja9/stopdbg.sh

1 #/
bö
/
bash


2 [ 
$
(
pidof
 
gdb
-
mu…ürch
) ];

3 
thí


4 
	gkûl
 -
KILL
 
$
(
pidof
 
gdb
-
mu…ürch
)

5 
fi


7 [ 
$
(
pidof
 
›íocd
) ];

8 
thí


9 
	gkûl
 -
HUP
 
	$$
(
pidof
 
›íocd
)

10 
fi


12 [ 
	`$
(
pidof
 
gdb
-
mu…ürch
) ];

13 
thí


14 
echo
 "Unsuccesfull - GDB stillÑunning!!!"

15 
fi


17 [ 
	`$
(
pidof
 
›íocd
) ];

18 
thí


19 
echo
 "Unsuccesfull - OpenOCD stillÑunning!!!"

20 
fi


	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


91 #i‡
deföed
 
__˝lu•lus


92 
	#as£π
(
ex¥
) \

93 (
°©ic_ˇ°
 <
boﬁ
> (
ex¥
) \

95 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

96 #ñi‡!
deföed
 
__GNUC__
 || deföed 
__STRICT_ANSI__


97 
	#as£π
(
ex¥
) \

98 ((
ex¥
) \

99 ? 
	`__ASSERT_VOID_CAST
 (0) \

100 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

107 
	#as£π
(
ex¥
) \

108 ((Ë ((
ex¥
Ë? 1 : 0), 
	`__exãnsi⁄__
 ({ \

109 i‡(
ex¥
) \

112 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
); \

113 
	}
}))

	)

116 #ifdef 
__USE_GNU


117 
	#as£π_≥º‹
(
î∫um
) \

118 (!(
î∫um
) \

119 ? 
	`__ASSERT_VOID_CAST
 (0) \

120 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

128 #i‡
deföed
 
__˝lu•lus
 ? 
__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

129 
	#__ASSERT_FUNCTION
 
__exãnsi⁄__
 
__PRETTY_FUNCTION__


	)

131 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

132 
	#__ASSERT_FUNCTION
 
__func__


	)

134 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

141 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


142 #unde‡
°©ic_as£π


143 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/wch¨.h
>

29 
	~<bôs/w‹dsize.h
>

34 
	~<bôs/°döt-öä.h
>

37 
	~<bôs/°döt-uöä.h
>

43 
__öt_Àa°8_t
 
	töt_Àa°8_t
;

44 
__öt_Àa°16_t
 
	töt_Àa°16_t
;

45 
__öt_Àa°32_t
 
	töt_Àa°32_t
;

46 
__öt_Àa°64_t
 
	töt_Àa°64_t
;

49 
__uöt_Àa°8_t
 
	tuöt_Àa°8_t
;

50 
__uöt_Àa°16_t
 
	tuöt_Àa°16_t
;

51 
__uöt_Àa°32_t
 
	tuöt_Àa°32_t
;

52 
__uöt_Àa°64_t
 
	tuöt_Àa°64_t
;

58 sig√d 
	töt_Á°8_t
;

59 #i‡
__WORDSIZE
 == 64

60 
	töt_Á°16_t
;

61 
	töt_Á°32_t
;

62 
	töt_Á°64_t
;

64 
	töt_Á°16_t
;

65 
	töt_Á°32_t
;

66 
__exãnsi⁄__


67 
	töt_Á°64_t
;

71 
	tuöt_Á°8_t
;

72 #i‡
__WORDSIZE
 == 64

73 
	tuöt_Á°16_t
;

74 
	tuöt_Á°32_t
;

75 
	tuöt_Á°64_t
;

77 
	tuöt_Á°16_t
;

78 
	tuöt_Á°32_t
;

79 
__exãnsi⁄__


80 
	tuöt_Á°64_t
;

85 #i‡
__WORDSIZE
 == 64

86 #i‚de‡
__öçå_t_deföed


87 
	töçå_t
;

88 
	#__öçå_t_deföed


	)

90 
	tuöçå_t
;

92 #i‚de‡
__öçå_t_deföed


93 
	töçå_t
;

94 
	#__öçå_t_deföed


	)

96 
	tuöçå_t
;

101 
__ötmax_t
 
	tötmax_t
;

102 
__uötmax_t
 
	tuötmax_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	#__INT64_C
(
c
Ë¯## 
L


	)

107 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

109 
	#__INT64_C
(
c
Ë¯## 
LL


	)

110 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

116 
	#INT8_MIN
 (-128)

	)

117 
	#INT16_MIN
 (-32767-1)

	)

118 
	#INT32_MIN
 (-2147483647-1)

	)

119 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

121 
	#INT8_MAX
 (127)

	)

122 
	#INT16_MAX
 (32767)

	)

123 
	#INT32_MAX
 (2147483647)

	)

124 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

127 
	#UINT8_MAX
 (255)

	)

128 
	#UINT16_MAX
 (65535)

	)

129 
	#UINT32_MAX
 (4294967295U)

	)

130 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

134 
	#INT_LEAST8_MIN
 (-128)

	)

135 
	#INT_LEAST16_MIN
 (-32767-1)

	)

136 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

137 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

139 
	#INT_LEAST8_MAX
 (127)

	)

140 
	#INT_LEAST16_MAX
 (32767)

	)

141 
	#INT_LEAST32_MAX
 (2147483647)

	)

142 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

145 
	#UINT_LEAST8_MAX
 (255)

	)

146 
	#UINT_LEAST16_MAX
 (65535)

	)

147 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

148 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

152 
	#INT_FAST8_MIN
 (-128)

	)

153 #i‡
__WORDSIZE
 == 64

154 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

155 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

157 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

158 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

160 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

162 
	#INT_FAST8_MAX
 (127)

	)

163 #i‡
__WORDSIZE
 == 64

164 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

165 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

167 
	#INT_FAST16_MAX
 (2147483647)

	)

168 
	#INT_FAST32_MAX
 (2147483647)

	)

170 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

173 
	#UINT_FAST8_MAX
 (255)

	)

174 #i‡
__WORDSIZE
 == 64

175 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

176 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

178 
	#UINT_FAST16_MAX
 (4294967295U)

	)

179 
	#UINT_FAST32_MAX
 (4294967295U)

	)

181 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

185 #i‡
__WORDSIZE
 == 64

186 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

187 
	#INTPTR_MAX
 (9223372036854775807L)

	)

188 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

190 
	#INTPTR_MIN
 (-2147483647-1)

	)

191 
	#INTPTR_MAX
 (2147483647)

	)

192 
	#UINTPTR_MAX
 (4294967295U)

	)

197 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

199 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

202 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

208 #i‡
__WORDSIZE
 == 64

209 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

210 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

212 #i‡
__WORDSIZE32_PTRDIFF_LONG


213 
	#PTRDIFF_MIN
 (-2147483647L-1)

	)

214 
	#PTRDIFF_MAX
 (2147483647L)

	)

216 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

217 
	#PTRDIFF_MAX
 (2147483647)

	)

222 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

223 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

226 #i‡
__WORDSIZE
 == 64

227 
	#SIZE_MAX
 (18446744073709551615UL)

	)

229 #i‡
__WORDSIZE32_SIZE_ULONG


230 
	#SIZE_MAX
 (4294967295UL)

	)

232 
	#SIZE_MAX
 (4294967295U)

	)

237 #i‚de‡
WCHAR_MIN


239 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

240 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

244 
	#WINT_MIN
 (0u)

	)

245 
	#WINT_MAX
 (4294967295u)

	)

248 
	#INT8_C
(
c
Ë
	)
c

249 
	#INT16_C
(
c
Ë
	)
c

250 
	#INT32_C
(
c
Ë
	)
c

251 #i‡
__WORDSIZE
 == 64

252 
	#INT64_C
(
c
Ë¯## 
L


	)

254 
	#INT64_C
(
c
Ë¯## 
LL


	)

258 
	#UINT8_C
(
c
Ë
	)
c

259 
	#UINT16_C
(
c
Ë
	)
c

260 
	#UINT32_C
(
c
Ë¯## 
U


	)

261 #i‡
__WORDSIZE
 == 64

262 
	#UINT64_C
(
c
Ë¯## 
UL


	)

264 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

268 #i‡
__WORDSIZE
 == 64

269 
	#INTMAX_C
(
c
Ë¯## 
L


	)

270 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

272 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

273 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

276 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

278 
	#INT8_WIDTH
 8

	)

279 
	#UINT8_WIDTH
 8

	)

280 
	#INT16_WIDTH
 16

	)

281 
	#UINT16_WIDTH
 16

	)

282 
	#INT32_WIDTH
 32

	)

283 
	#UINT32_WIDTH
 32

	)

284 
	#INT64_WIDTH
 64

	)

285 
	#UINT64_WIDTH
 64

	)

287 
	#INT_LEAST8_WIDTH
 8

	)

288 
	#UINT_LEAST8_WIDTH
 8

	)

289 
	#INT_LEAST16_WIDTH
 16

	)

290 
	#UINT_LEAST16_WIDTH
 16

	)

291 
	#INT_LEAST32_WIDTH
 32

	)

292 
	#UINT_LEAST32_WIDTH
 32

	)

293 
	#INT_LEAST64_WIDTH
 64

	)

294 
	#UINT_LEAST64_WIDTH
 64

	)

296 
	#INT_FAST8_WIDTH
 8

	)

297 
	#UINT_FAST8_WIDTH
 8

	)

298 
	#INT_FAST16_WIDTH
 
__WORDSIZE


	)

299 
	#UINT_FAST16_WIDTH
 
__WORDSIZE


	)

300 
	#INT_FAST32_WIDTH
 
__WORDSIZE


	)

301 
	#UINT_FAST32_WIDTH
 
__WORDSIZE


	)

302 
	#INT_FAST64_WIDTH
 64

	)

303 
	#UINT_FAST64_WIDTH
 64

	)

305 
	#INTPTR_WIDTH
 
__WORDSIZE


	)

306 
	#UINTPTR_WIDTH
 
__WORDSIZE


	)

308 
	#INTMAX_WIDTH
 64

	)

309 
	#UINTMAX_WIDTH
 64

	)

311 
	#PTRDIFF_WIDTH
 
__WORDSIZE


	)

312 
	#SIG_ATOMIC_WIDTH
 32

	)

313 
	#SIZE_WIDTH
 
__WORDSIZE


	)

314 
	#WCHAR_WIDTH
 32

	)

315 
	#WINT_WIDTH
 32

	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


24 
	#_STDIO_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	#__√ed___va_li°


	)

36 
	~<°d¨g.h
>

38 
	~<bôs/ty≥s.h
>

39 
	~<bôs/ty≥s/__Âos_t.h
>

40 
	~<bôs/ty≥s/__Âos64_t.h
>

41 
	~<bôs/ty≥s/__FILE.h
>

42 
	~<bôs/ty≥s/FILE.h
>

43 
	~<bôs/ty≥s/°ru˘_FILE.h
>

45 #ifde‡
__USE_GNU


46 
	~<bôs/ty≥s/cookõ_io_fun˘i⁄s_t.h
>

49 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


50 #ifde‡
__GNUC__


51 #i‚de‡
_VA_LIST_DEFINED


52 
__gnuc_va_li°
 
	tva_li°
;

53 
	#_VA_LIST_DEFINED


	)

56 
	~<°d¨g.h
>

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__off_t_deföed


62 #i‚de‡
__USE_FILE_OFFSET64


63 
__off_t
 
	toff_t
;

65 
__off64_t
 
	toff_t
;

67 
	#__off_t_deföed


	)

69 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


70 
__off64_t
 
	toff64_t
;

71 
	#__off64_t_deföed


	)

75 #ifde‡
__USE_XOPEN2K8


76 #i‚de‡
__ssize_t_deföed


77 
__ssize_t
 
	tssize_t
;

78 
	#__ssize_t_deföed


	)

83 #i‚de‡
__USE_FILE_OFFSET64


84 
__Âos_t
 
	tÂos_t
;

86 
__Âos64_t
 
	tÂos_t
;

88 #ifde‡
__USE_LARGEFILE64


89 
__Âos64_t
 
	tÂos64_t
;

93 
	#_IOFBF
 0

	)

94 
	#_IOLBF
 1

	)

95 
	#_IONBF
 2

	)

99 
	#BUFSIZ
 8192

	)

104 
	#EOF
 (-1)

	)

109 
	#SEEK_SET
 0

	)

110 
	#SEEK_CUR
 1

	)

111 
	#SEEK_END
 2

	)

112 #ifde‡
__USE_GNU


113 
	#SEEK_DATA
 3

	)

114 
	#SEEK_HOLE
 4

	)

118 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


120 
	#P_tmpdú
 "/tmp"

	)

133 
	~<bôs/°dio_lim.h
>

137 
FILE
 *
°dö
;

138 
FILE
 *
°dout
;

139 
FILE
 *
°dîr
;

141 
	#°dö
 
°dö


	)

142 
	#°dout
 
°dout


	)

143 
	#°dîr
 
°dîr


	)

146 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

148 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

150 #ifde‡
__USE_ATFILE


152 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

153 c⁄° *
__√w
Ë
__THROW
;

156 #ifde‡
__USE_GNU


158 
	#RENAME_NOREPLACE
 (1 << 0)

	)

159 
	#RENAME_EXCHANGE
 (1 << 1)

	)

160 
	#RENAME_WHITEOUT
 (1 << 2)

	)

164 
	$ª«mót2
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

165 c⁄° *
__√w
, 
__Êags
Ë
__THROW
;

172 #i‚de‡
__USE_FILE_OFFSET64


173 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

175 #ifde‡
__REDIRECT


176 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

178 
	#tmpfûe
 
tmpfûe64


	)

182 #ifde‡
__USE_LARGEFILE64


183 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

187 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

189 #ifde‡
__USE_MISC


192 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

196 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


204 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

205 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

213 
	`f˛o£
 (
FILE
 *
__°ªam
);

218 
	`fÊush
 (
FILE
 *
__°ªam
);

220 #ifde‡
__USE_MISC


227 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

230 #ifde‡
__USE_GNU


237 
	`f˛o£Æl
 ();

241 #i‚de‡
__USE_FILE_OFFSET64


246 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

247 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

252 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

253 c⁄° *
__ª°ri˘
 
__modes
,

254 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

256 #ifde‡
__REDIRECT


257 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

258 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

259 
__wur
;

260 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

261 c⁄° *
__ª°ri˘
 
__modes
,

262 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

263 
__wur
;

265 
	#f›í
 
f›í64


	)

266 
	#‰e›í
 
‰e›í64


	)

269 #ifde‡
__USE_LARGEFILE64


270 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

271 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

272 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
,

274 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

277 #ifdef 
__USE_POSIX


279 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

282 #ifdef 
__USE_GNU


285 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

286 c⁄° *
__ª°ri˘
 
__modes
,

287 
cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

290 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

292 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

293 
__THROW
 
__wur
;

298 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

304 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

308 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

309 
__modes
, 
size_t
 
__n
Ë
__THROW
;

311 #ifdef 
__USE_MISC


314 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

315 
size_t
 
__size
Ë
__THROW
;

318 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

326 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

327 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

332 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

334 
	$•rötf
 (*
__ª°ri˘
 
__s
,

335 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

341 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

342 
__gnuc_va_li°
 
__¨g
);

347 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
);

349 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

350 
__gnuc_va_li°
 
__¨g
Ë
__THROWNL
;

352 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


354 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

355 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

356 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

358 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

359 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

360 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

363 #i‡
	`__GLIBC_USE
 (
LIB_EXT2
)

366 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

367 
__gnuc_va_li°
 
__¨g
)

368 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

369 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

370 c⁄° *
__ª°ri˘
 
__fmt
, ...)

371 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

372 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

373 c⁄° *
__ª°ri˘
 
__fmt
, ...)

374 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

377 #ifde‡
__USE_XOPEN2K8


379 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

380 
__gnuc_va_li°
 
__¨g
)

381 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

382 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

383 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

391 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

392 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

397 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

399 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

400 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

402 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

403 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

404 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

405 #ifde‡
__REDIRECT


409 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

410 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

411 
__isoc99_fsˇnf
Ë
__wur
;

412 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

413 
__isoc99_sˇnf
Ë
__wur
;

414 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

415 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

416 
__isoc99_ssˇnf
);

418 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

419 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

420 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

421 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

422 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

423 
	#fsˇnf
 
__isoc99_fsˇnf


	)

424 
	#sˇnf
 
__isoc99_sˇnf


	)

425 
	#ssˇnf
 
__isoc99_ssˇnf


	)

429 #ifdef 
__USE_ISOC99


434 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

435 
__gnuc_va_li°
 
__¨g
)

436 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

442 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

443 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

446 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

447 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

448 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

450 #i‡!
deföed
 
__USE_GNU
 \

451 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

452 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

453 #ifde‡
__REDIRECT


457 
	`__REDIRECT
 (
vfsˇnf
,

458 (
FILE
 *
__ª°ri˘
 
__s
,

459 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
),

460 
__isoc99_vfsˇnf
)

461 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

462 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

463 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

464 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

465 
	`__REDIRECT_NTH
 (
vssˇnf
,

466 (c⁄° *
__ª°ri˘
 
__s
,

467 c⁄° *
__ª°ri˘
 
__f‹m©
,

468 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

469 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

471 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

472 c⁄° *
__ª°ri˘
 
__f‹m©
,

473 
__gnuc_va_li°
 
__¨g
Ë
__wur
;

474 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

475 
__gnuc_va_li°
 
__¨g
Ë
__wur
;

476 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

477 c⁄° *
__ª°ri˘
 
__f‹m©
,

478 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

479 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

480 
	#vsˇnf
 
__isoc99_vsˇnf


	)

481 
	#vssˇnf
 
__isoc99_vssˇnf


	)

491 
	`fgëc
 (
FILE
 *
__°ªam
);

492 
	`gëc
 (
FILE
 *
__°ªam
);

498 
	`gëch¨
 ();

500 #ifde‡
__USE_POSIX199506


505 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

506 
	`gëch¨_u∆ocked
 ();

509 #ifde‡
__USE_MISC


516 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

527 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

528 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

534 
	`putch¨
 (
__c
);

536 #ifde‡
__USE_MISC


543 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

546 #ifde‡
__USE_POSIX199506


551 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

552 
	`putch¨_u∆ocked
 (
__c
);

556 #i‡
deföed
 
__USE_MISC
 \

557 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

559 
	`gëw
 (
FILE
 *
__°ªam
);

562 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

570 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

571 
__wur
;

573 #i‡
	`__GLIBC_USE
 (
DEPRECATED_GETS
)

583 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

586 #ifde‡
__USE_GNU


593 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

594 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

598 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

609 
__ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

610 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

611 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

612 
__ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

613 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

614 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

622 
__ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

623 
size_t
 *
__ª°ri˘
 
__n
,

624 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

632 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

638 
	`puts
 (c⁄° *
__s
);

645 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

652 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

653 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

658 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

659 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

661 #ifde‡
__USE_GNU


668 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

669 
FILE
 *
__ª°ri˘
 
__°ªam
);

672 #ifde‡
__USE_MISC


679 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

680 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

681 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

682 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

690 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

695 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

700 
	`ªwöd
 (
FILE
 *
__°ªam
);

707 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


708 #i‚de‡
__USE_FILE_OFFSET64


713 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

718 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

720 #ifde‡
__REDIRECT


721 
	`__REDIRECT
 (
f£eko
,

722 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

723 
f£eko64
);

724 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

726 
	#f£eko
 
f£eko64


	)

727 
	#·ñlo
 
·ñlo64


	)

732 #i‚de‡
__USE_FILE_OFFSET64


737 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

742 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

744 #ifde‡
__REDIRECT


745 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

746 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

747 
	`__REDIRECT
 (
f£ços
,

748 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

750 
	#fgëpos
 
fgëpos64


	)

751 
	#f£ços
 
f£ços64


	)

755 #ifde‡
__USE_LARGEFILE64


756 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

757 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

758 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

759 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

763 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

765 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

767 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

769 #ifde‡
__USE_MISC


771 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

772 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

773 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

781 
	`≥º‹
 (c⁄° *
__s
);

787 
	~<bôs/sys_îæi°.h
>

790 #ifdef 
__USE_POSIX


792 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

795 #ifde‡
__USE_MISC


797 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

801 #ifde‡
__USE_POSIX2


806 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

812 
	`p˛o£
 (
FILE
 *
__°ªam
);

816 #ifdef 
__USE_POSIX


818 *
	$˘îmid
 (*
__s
Ë
__THROW
;

822 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
Ë|| deföed 
__USE_GNU


824 *
	`cu£rid
 (*
__s
);

828 #ifdef 
__USE_GNU


829 
ob°ack
;

832 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

833 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

834 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

835 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

836 c⁄° *
__ª°ri˘
 
__f‹m©
,

837 
__gnuc_va_li°
 
__¨gs
)

838 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

842 #ifde‡
__USE_POSIX199506


846 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

850 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

853 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

856 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


859 
	~<bôs/gë›t_posix.h
>

864 
	`__uÊow
 (
FILE
 *);

865 
	`__ovîÊow
 (
FILE
 *, );

869 #ifde‡
__USE_EXTERN_INLINES


870 
	~<bôs/°dio.h
>

872 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


873 
	~<bôs/°dio2.h
>

875 #ifde‡
__LDBL_COMPAT


876 
	~<bôs/°dio-ldbl.h
>

879 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

25 
	~<bôs/libc-hódî-°¨t.h
>

28 
	#__√ed_size_t


	)

29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

31 
	~<°ddef.h
>

33 
	g__BEGIN_DECLS


35 
	#_STDLIB_H
 1

	)

37 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


39 
	~<bôs/waôÊags.h
>

40 
	~<bôs/waô°©us.h
>

43 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

44 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

45 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

46 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

47 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

48 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

49 #ifde‡
__WIFCONTINUED


50 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

55 
	~<bôs/Êﬂä.h
>

60 
	mquŸ
;

61 
	mªm
;

62 } 
	tdiv_t
;

65 #i‚de‡
__ldiv_t_deföed


68 
	mquŸ
;

69 
	mªm
;

70 } 
	tldiv_t
;

71 
	#__ldiv_t_deföed
 1

	)

74 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


76 
__exãnsi⁄__
 struct

78 
	mquŸ
;

79 
	mªm
;

80 } 
	tŒdiv_t
;

81 
	#__Œdiv_t_deföed
 1

	)

86 
	#RAND_MAX
 2147483647

	)

91 
	#EXIT_FAILURE
 1

	)

92 
	#EXIT_SUCCESS
 0

	)

96 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

97 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

101 
	$©of
 (c⁄° *
__≈å
)

102 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

104 
	$©oi
 (c⁄° *
__≈å
)

105 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

107 
	$©ﬁ
 (c⁄° *
__≈å
)

108 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

110 #ifde‡
__USE_ISOC99


112 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

113 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

117 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

118 **
__ª°ri˘
 
__íd±r
)

119 
__THROW
 
	`__n⁄nuŒ
 ((1));

121 #ifdef 
__USE_ISOC99


123 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

124 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

126 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

127 **
__ª°ri˘
 
__íd±r
)

128 
__THROW
 
	`__n⁄nuŒ
 ((1));

133 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

134 
_Flﬂt16
 
	$°πof16
 (c⁄° *
__ª°ri˘
 
__≈å
,

135 **
__ª°ri˘
 
__íd±r
)

136 
__THROW
 
	`__n⁄nuŒ
 ((1));

139 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

140 
_Flﬂt32
 
	$°πof32
 (c⁄° *
__ª°ri˘
 
__≈å
,

141 **
__ª°ri˘
 
__íd±r
)

142 
__THROW
 
	`__n⁄nuŒ
 ((1));

145 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

146 
_Flﬂt64
 
	$°πof64
 (c⁄° *
__ª°ri˘
 
__≈å
,

147 **
__ª°ri˘
 
__íd±r
)

148 
__THROW
 
	`__n⁄nuŒ
 ((1));

151 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

152 
_Flﬂt128
 
	$°πof128
 (c⁄° *
__ª°ri˘
 
__≈å
,

153 **
__ª°ri˘
 
__íd±r
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1));

157 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

158 
_Flﬂt32x
 
	$°πof32x
 (c⁄° *
__ª°ri˘
 
__≈å
,

159 **
__ª°ri˘
 
__íd±r
)

160 
__THROW
 
	`__n⁄nuŒ
 ((1));

163 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

164 
_Flﬂt64x
 
	$°πof64x
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

169 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

170 
_Flﬂt128x
 
	$°πof128x
 (c⁄° *
__ª°ri˘
 
__≈å
,

171 **
__ª°ri˘
 
__íd±r
)

172 
__THROW
 
	`__n⁄nuŒ
 ((1));

176 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1));

180 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

181 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

182 
__THROW
 
	`__n⁄nuŒ
 ((1));

184 #ifde‡
__USE_MISC


186 
__exãnsi⁄__


187 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

191 
__exãnsi⁄__


192 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

193 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

194 
__THROW
 
	`__n⁄nuŒ
 ((1));

197 #ifde‡
__USE_ISOC99


199 
__exãnsi⁄__


200 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

204 
__exãnsi⁄__


205 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

206 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

207 
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

212 
	$°r‰omd
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

213 
__f
)

214 
__THROW
 
	`__n⁄nuŒ
 ((3));

216 
	$°r‰omf
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

217 
__f
)

218 
__THROW
 
	`__n⁄nuŒ
 ((3));

220 
	$°r‰oml
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

221 
__f
)

222 
__THROW
 
	`__n⁄nuŒ
 ((3));

225 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

226 
	$°r‰omf16
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

227 
_Flﬂt16
 
__f
)

228 
__THROW
 
	`__n⁄nuŒ
 ((3));

231 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

232 
	$°r‰omf32
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

233 
_Flﬂt32
 
__f
)

234 
__THROW
 
	`__n⁄nuŒ
 ((3));

237 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

238 
	$°r‰omf64
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

239 
_Flﬂt64
 
__f
)

240 
__THROW
 
	`__n⁄nuŒ
 ((3));

243 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

244 
	$°r‰omf128
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

245 
_Flﬂt128
 
__f
)

246 
__THROW
 
	`__n⁄nuŒ
 ((3));

249 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

250 
	$°r‰omf32x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

251 
_Flﬂt32x
 
__f
)

252 
__THROW
 
	`__n⁄nuŒ
 ((3));

255 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

256 
	$°r‰omf64x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

257 
_Flﬂt64x
 
__f
)

258 
__THROW
 
	`__n⁄nuŒ
 ((3));

261 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

262 
	$°r‰omf128x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

263 
_Flﬂt128x
 
__f
)

264 
__THROW
 
	`__n⁄nuŒ
 ((3));

268 #ifde‡
__USE_GNU


272 
	~<bôs/ty≥s/loˇÀ_t.h
>

274 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

275 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

276 
loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

278 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

279 **
__ª°ri˘
 
__íd±r
,

280 
__ba£
, 
loˇÀ_t
 
__loc
)

281 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

283 
__exãnsi⁄__


284 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

285 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

286 
loˇÀ_t
 
__loc
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

289 
__exãnsi⁄__


290 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

291 **
__ª°ri˘
 
__íd±r
,

292 
__ba£
, 
loˇÀ_t
 
__loc
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

295 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

296 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

299 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

300 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

301 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

303 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

304 **
__ª°ri˘
 
__íd±r
,

305 
loˇÀ_t
 
__loc
)

306 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

308 #i‡
__HAVE_FLOAT16


309 
_Flﬂt16
 
	$°πof16_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

310 **
__ª°ri˘
 
__íd±r
,

311 
loˇÀ_t
 
__loc
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

315 #i‡
__HAVE_FLOAT32


316 
_Flﬂt32
 
	$°πof32_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

317 **
__ª°ri˘
 
__íd±r
,

318 
loˇÀ_t
 
__loc
)

319 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

322 #i‡
__HAVE_FLOAT64


323 
_Flﬂt64
 
	$°πof64_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

324 **
__ª°ri˘
 
__íd±r
,

325 
loˇÀ_t
 
__loc
)

326 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

329 #i‡
__HAVE_FLOAT128


330 
_Flﬂt128
 
	$°πof128_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 **
__ª°ri˘
 
__íd±r
,

332 
loˇÀ_t
 
__loc
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

336 #i‡
__HAVE_FLOAT32X


337 
_Flﬂt32x
 
	$°πof32x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

338 **
__ª°ri˘
 
__íd±r
,

339 
loˇÀ_t
 
__loc
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

343 #i‡
__HAVE_FLOAT64X


344 
_Flﬂt64x
 
	$°πof64x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

345 **
__ª°ri˘
 
__íd±r
,

346 
loˇÀ_t
 
__loc
)

347 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

350 #i‡
__HAVE_FLOAT128X


351 
_Flﬂt128x
 
	$°πof128x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

352 **
__ª°ri˘
 
__íd±r
,

353 
loˇÀ_t
 
__loc
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

359 #ifde‡
__USE_EXTERN_INLINES


360 
__exã∫_ölöe
 

361 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

363  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

364 
	}
}

365 
__exã∫_ölöe
 

366 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

368  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

369 
	}
}

371 #ifde‡
__USE_ISOC99


372 
__exãnsi⁄__
 
__exã∫_ölöe
 

373 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

375  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

376 
	}
}

381 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


385 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

388 
	$a64l
 (c⁄° *
__s
)

389 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

393 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


394 
	~<sys/ty≥s.h
>

401 
	$øndom
 (Ë
__THROW
;

404 
	$§™dom
 (
__£ed
Ë
__THROW
;

410 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

411 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

415 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

418 #ifde‡
__USE_MISC


423 
	søndom_d©a


425 
öt32_t
 *
Âå
;

426 
öt32_t
 *
Ωå
;

427 
öt32_t
 *
°©e
;

428 
ønd_ty≥
;

429 
ønd_deg
;

430 
ønd_£p
;

431 
öt32_t
 *
íd_±r
;

434 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

435 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

437 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

438 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

441 
size_t
 
__°©ñí
,

442 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

443 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

445 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

446 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

447 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$ønd
 (Ë
__THROW
;

455 
	$§™d
 (
__£ed
Ë
__THROW
;

457 #ifde‡
__USE_POSIX199506


459 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

463 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


467 
	$dønd48
 (Ë
__THROW
;

468 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

471 
	$Ã™d48
 (Ë
__THROW
;

472 
	$ƒ™d48
 (
__xsubi
[3])

473 
__THROW
 
	`__n⁄nuŒ
 ((1));

476 
	$mønd48
 (Ë
__THROW
;

477 
	$jønd48
 (
__xsubi
[3])

478 
__THROW
 
	`__n⁄nuŒ
 ((1));

481 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

482 *
	$£ed48
 (
__£ed16v
[3])

483 
__THROW
 
	`__n⁄nuŒ
 ((1));

484 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

486 #ifde‡
__USE_MISC


490 
	sdønd48_d©a


492 
__x
[3];

493 
__ﬁd_x
[3];

494 
__c
;

495 
__öô
;

496 
__exãnsi⁄__
 
__a
;

501 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

502 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

503 
	$î™d48_r
 (
__xsubi
[3],

504 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

505 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

508 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

509 *
__ª°ri˘
 
__ªsu…
)

510 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

511 
	$ƒ™d48_r
 (
__xsubi
[3],

512 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

513 *
__ª°ri˘
 
__ªsu…
)

514 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

517 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

518 *
__ª°ri˘
 
__ªsu…
)

519 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

520 
	$jønd48_r
 (
__xsubi
[3],

521 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

522 *
__ª°ri˘
 
__ªsu…
)

523 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

526 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

527 
__THROW
 
	`__n⁄nuŒ
 ((2));

529 
	$£ed48_r
 (
__£ed16v
[3],

530 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

532 
	$lc⁄g48_r
 (
__∑øm
[7],

533 
dønd48_d©a
 *
__buf„r
)

534 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

539 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

541 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

542 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

549 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

550 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

552 #ifde‡
__USE_GNU


558 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

559 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

563 
	$‰ì
 (*
__±r
Ë
__THROW
;

565 #ifde‡
__USE_MISC


566 
	~<Æloˇ.h
>

569 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

570 || 
deföed
 
__USE_MISC


572 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

575 #ifde‡
__USE_XOPEN2K


577 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

581 #ifde‡
__USE_ISOC11


583 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

584 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

588 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

592 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

594 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


596 #ifde‡
__˝lu•lus


597 "C++" 
	$©_quick_exô
 ((*
__func
) ())

598 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

600 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

604 #ifdef 
__USE_MISC


607 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

608 
__THROW
 
	`__n⁄nuŒ
 ((1));

614 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

616 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


620 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

623 #ifde‡
__USE_ISOC99


626 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

631 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_GNU


636 *
	$£cuª_gëív
 (c⁄° *
__«me
)

637 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

640 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


644 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

647 #ifde‡
__USE_XOPEN2K


650 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

651 
__THROW
 
	`__n⁄nuŒ
 ((2));

654 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

657 #ifdef 
__USE_MISC


661 
	$˛óªnv
 (Ë
__THROW
;

665 #i‡
deföed
 
__USE_MISC
 \

666 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

672 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

675 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


684 #i‚de‡
__USE_FILE_OFFSET64


685 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

687 #ifde‡
__REDIRECT


688 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

689 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

691 
	#mk°emp
 
mk°emp64


	)

694 #ifde‡
__USE_LARGEFILE64


695 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

699 #ifde‡
__USE_MISC


706 #i‚de‡
__USE_FILE_OFFSET64


707 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

711 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

713 
	#mk°emps
 
mk°emps64


	)

716 #ifde‡
__USE_LARGEFILE64


717 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

718 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

722 #ifde‡
__USE_XOPEN2K8


728 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

731 #ifde‡
__USE_GNU


738 #i‚de‡
__USE_FILE_OFFSET64


739 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

741 #ifde‡
__REDIRECT


742 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

743 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

745 
	#mko°emp
 
mko°emp64


	)

748 #ifde‡
__USE_LARGEFILE64


749 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

758 #i‚de‡
__USE_FILE_OFFSET64


759 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

760 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

762 #ifde‡
__REDIRECT


763 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

764 
__Êags
), 
mko°emps64
)

765 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

767 
	#mko°emps
 
mko°emps64


	)

770 #ifde‡
__USE_LARGEFILE64


771 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

772 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

781 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

784 #ifdef 
__USE_GNU


787 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

788 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

791 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


797 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

798 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

803 #i‚de‡
__COMPAR_FN_T


804 
	#__COMPAR_FN_T


	)

805 (*
	t__com∑r_‚_t
) (const *, const *);

807 #ifdef 
__USE_GNU


808 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

811 #ifde‡
__USE_GNU


812 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

817 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

818 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

819 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

821 #ifde‡
__USE_EXTERN_INLINES


822 
	~<bôs/°dlib-b£¨ch.h
>

827 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

828 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

829 #ifde‡
__USE_GNU


830 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

831 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

832 
	`__n⁄nuŒ
 ((1, 4));

837 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

838 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

840 #ifde‡
__USE_ISOC99


841 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

842 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

849 
div_t
 
	$div
 (
__numî
, 
__díom
)

850 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

851 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

852 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

854 #ifde‡
__USE_ISOC99


855 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

856 
__díom
)

857 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

861 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

862 || 
deföed
 
__USE_MISC


869 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

870 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

875 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

876 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

881 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

882 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

885 #ifde‡
__USE_MISC


887 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

888 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

889 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

890 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

891 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

892 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

893 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

894 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

899 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

900 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

901 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

902 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

903 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

904 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

906 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

907 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

908 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

909 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

910 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

911 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

912 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

913 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

919 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

922 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

923 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

926 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

930 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

931 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

933 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

934 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

935 
__THROW
;

938 #ifde‡
__USE_MISC


943 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

947 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


954 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

955 *c⁄° *
__ª°ri˘
 
__tokís
,

956 **
__ª°ri˘
 
__vÆuï
)

957 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

963 #ifde‡
__USE_XOPEN2KXSI


965 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

968 #ifde‡
__USE_XOPEN_EXTENDED


973 
	$gø¡±
 (
__fd
Ë
__THROW
;

977 
	$u∆ock±
 (
__fd
Ë
__THROW
;

982 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

985 #ifde‡
__USE_GNU


989 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

990 
__THROW
 
	`__n⁄nuŒ
 ((2));

993 
	`gë±
 ();

996 #ifde‡
__USE_MISC


1000 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

1001 
__THROW
 
	`__n⁄nuŒ
 ((1));

1004 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K


1007 
	$ây¶Ÿ
 (Ë
__THROW
;

1010 
	~<bôs/°dlib-Êﬂt.h
>

1013 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1014 
	~<bôs/°dlib.h
>

1016 #ifde‡
__LDBL_COMPAT


1017 
	~<bôs/°dlib-ldbl.h
>

1020 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

37 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

52 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


53 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

54 
__c
, 
size_t
 
__n
)

55 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

63 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

64 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

67 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


70 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

71 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

72 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

75 #ifde‡
__OPTIMIZE__


76 
__exã∫_Æways_ölöe
 *

77 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


79  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

82 
__exã∫_Æways_ölöe
 const *

83 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


85  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

88 
	}
}

90 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

91 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

94 #ifde‡
__USE_GNU


97 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


98 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

99 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

100 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

101 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

108 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


109 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

110 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

112 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

121 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

122 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

124 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

125 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

129 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

132 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

133 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

137 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

139 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

140 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

147 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

148 
__THROW
 
	`__n⁄nuŒ
 ((2));

150 #ifde‡
__USE_XOPEN2K8


152 
	~<bôs/ty≥s/loˇÀ_t.h
>

155 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__l
)

156 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

159 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

160 
loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

163 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8
 \

164 || 
	$__GLIBC_USE
 (
LIB_EXT2
))

166 *
	$°rdup
 (c⁄° *
__s
)

167 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

173 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

174 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

175 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


180 
	#°rdu∑
(
s
) \

181 (
__exãnsi⁄__
 \

183 c⁄° *
__ﬁd
 = (
s
); \

184 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

185 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

186 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

187 
	}
}))

	)

190 
	#°∫du∑
(
s
, 
n
) \

191 (
__exãnsi⁄__
 \

193 c⁄° *
__ﬁd
 = (
s
); \

194 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

195 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

196 
__√w
[
__Àn
] = '\0'; \

197 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

198 }))

	)

202 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


205 *
°rchr
 (*
__s
, 
__c
)

206 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

207 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

208 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

210 #ifde‡
__OPTIMIZE__


211 
__exã∫_Æways_ölöe
 *

212 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


214  
__buûtö_°rchr
 (
__s
, 
__c
);

217 
__exã∫_Æways_ölöe
 const *

218 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


220  
__buûtö_°rchr
 (
__s
, 
__c
);

225 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

226 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

229 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


232 *
	`°ºchr
 (*
__s
, 
__c
)

233 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

234 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

235 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__OPTIMIZE__


238 
__exã∫_Æways_ölöe
 *

239 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


241  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

244 
__exã∫_Æways_ölöe
 const *

245 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


247  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

250 
	}
}

252 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

253 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

256 #ifde‡
__USE_GNU


259 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


260 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

261 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

262 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

263 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

266 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

272 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

273 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

276 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

279 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


282 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

283 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

285 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__OPTIMIZE__


288 
__exã∫_Æways_ölöe
 *

289 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


291  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

294 
__exã∫_Æways_ölöe
 const *

295 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


297  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

300 
	}
}

302 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

303 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

306 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


309 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

310 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

311 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

312 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

314 #ifde‡
__OPTIMIZE__


315 
__exã∫_Æways_ölöe
 *

316 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


318  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

321 
__exã∫_Æways_ölöe
 const *

322 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


324  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

327 
	}
}

329 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

330 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

335 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

336 
__THROW
 
	`__n⁄nuŒ
 ((2));

340 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

341 c⁄° *
__ª°ri˘
 
__dñim
,

342 **
__ª°ri˘
 
__ßve_±r
)

343 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

344 #ifde‡
__USE_POSIX


345 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

346 **
__ª°ri˘
 
__ßve_±r
)

347 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

350 #ifde‡
__USE_GNU


352 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


353 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

354 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

355 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

356 c⁄° *
__√edÀ
)

357 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

359 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

360 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 #ifde‡
__USE_GNU


368 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

369 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

370 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

374 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

375 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

377 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

378 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

379 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

384 
size_t
 
	$°æí
 (c⁄° *
__s
)

385 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

387 #ifdef 
__USE_XOPEN2K8


390 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

391 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

396 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

397 #ifde‡
__USE_XOPEN2K


405 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


408 #ifde‡
__REDIRECT_NTH


409 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

410 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

411 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

413 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

414 
__THROW
 
	`__n⁄nuŒ
 ((2));

415 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

420 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

425 #ifde‡
__USE_XOPEN2K8


427 *
	$°ªº‹_l
 (
__î∫um
, 
loˇÀ_t
 
__l
Ë
__THROW
;

430 #ifde‡
__USE_MISC


431 
	~<°rögs.h
>

435 
	$ex∂icô_bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

439 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

440 c⁄° *
__ª°ri˘
 
__dñim
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 #ifdef 
__USE_XOPEN2K8


446 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

449 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

451 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

452 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

456 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

457 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

458 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

460 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

464 #ifdef 
__USE_GNU


466 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

467 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

470 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

473 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

475 #i‚de‡
ba£«me


480 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


481 "C++" *
	$ba£«me
 (*
__fûíame
)

482 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

483 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

484 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

486 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

491 #i‡
	`__GNUC_PREREQ
 (3,4)

492 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


494 
	~<bôs/°rög_f‹tifõd.h
>

498 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

119 #unde‡
__USE_ISOC11


120 #unde‡
__USE_ISOC99


121 #unde‡
__USE_ISOC95


122 #unde‡
__USE_ISOCXX11


123 #unde‡
__USE_POSIX


124 #unde‡
__USE_POSIX2


125 #unde‡
__USE_POSIX199309


126 #unde‡
__USE_POSIX199506


127 #unde‡
__USE_XOPEN


128 #unde‡
__USE_XOPEN_EXTENDED


129 #unde‡
__USE_UNIX98


130 #unde‡
__USE_XOPEN2K


131 #unde‡
__USE_XOPEN2KXSI


132 #unde‡
__USE_XOPEN2K8


133 #unde‡
__USE_XOPEN2K8XSI


134 #unde‡
__USE_LARGEFILE


135 #unde‡
__USE_LARGEFILE64


136 #unde‡
__USE_FILE_OFFSET64


137 #unde‡
__USE_MISC


138 #unde‡
__USE_ATFILE


139 #unde‡
__USE_GNU


140 #unde‡
__USE_FORTIFY_LEVEL


141 #unde‡
__KERNEL_STRICT_NAMES


142 #unde‡
__GLIBC_USE_DEPRECATED_GETS


146 #i‚de‡
_LOOSE_KERNEL_NAMES


147 
	#__KERNEL_STRICT_NAMES


	)

157 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


158 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

159 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

161 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

168 #i‡
deföed
 
__˛™g_maj‹__
 && deföed 
__˛™g_mö‹__


169 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
) \

170 ((
__˛™g_maj‹__
 << 16Ë+ 
__˛™g_mö‹__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

172 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
Ë0

	)

176 
	#__GLIBC_USE
(
F
Ë
__GLIBC_USE_
 ## 
	)
F

182 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

183 && !
deföed
 
	g_DEFAULT_SOURCE


185 #unde‡
_DEFAULT_SOURCE


186 
	#_DEFAULT_SOURCE
 1

	)

190 #ifde‡
_GNU_SOURCE


191 #unde‡
_ISOC95_SOURCE


192 
	#_ISOC95_SOURCE
 1

	)

193 #unde‡
_ISOC99_SOURCE


194 
	#_ISOC99_SOURCE
 1

	)

195 #unde‡
_ISOC11_SOURCE


196 
	#_ISOC11_SOURCE
 1

	)

197 #unde‡
_POSIX_SOURCE


198 
	#_POSIX_SOURCE
 1

	)

199 #unde‡
_POSIX_C_SOURCE


200 
	#_POSIX_C_SOURCE
 200809L

	)

201 #unde‡
_XOPEN_SOURCE


202 
	#_XOPEN_SOURCE
 700

	)

203 #unde‡
_XOPEN_SOURCE_EXTENDED


204 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

205 #unde‡
_LARGEFILE64_SOURCE


206 
	#_LARGEFILE64_SOURCE
 1

	)

207 #unde‡
_DEFAULT_SOURCE


208 
	#_DEFAULT_SOURCE
 1

	)

209 #unde‡
_ATFILE_SOURCE


210 
	#_ATFILE_SOURCE
 1

	)

215 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

216 || (!
deföed
 
	g__STRICT_ANSI__
 \

217 && !
deföed
 
	g_ISOC99_SOURCE
 && !deföed 
	g_ISOC11_SOURCE
 \

218 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

219 && !
deföed
 
	g_XOPEN_SOURCE
))

220 #unde‡
_DEFAULT_SOURCE


221 
	#_DEFAULT_SOURCE
 1

	)

225 #i‡(
deföed
 
_ISOC11_SOURCE
 \

226 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

227 
	#__USE_ISOC11
 1

	)

231 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

232 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

233 
	#__USE_ISOC99
 1

	)

237 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

238 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

239 
	#__USE_ISOC95
 1

	)

242 #ifde‡
__˝lu•lus


244 #i‡
__˝lu•lus
 >= 201703L

245 
	#__USE_ISOC11
 1

	)

249 #i‡
__˝lu•lus
 >201103L || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__


250 
	#__USE_ISOCXX11
 1

	)

251 
	#__USE_ISOC99
 1

	)

258 #ifde‡
_DEFAULT_SOURCE


259 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


260 
	#__USE_POSIX_IMPLICITLY
 1

	)

262 #unde‡
_POSIX_SOURCE


263 
	#_POSIX_SOURCE
 1

	)

264 #unde‡
_POSIX_C_SOURCE


265 
	#_POSIX_C_SOURCE
 200809L

	)

268 #i‡((!
deföed
 
__STRICT_ANSI__
 \

269 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

270 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

271 
	#_POSIX_SOURCE
 1

	)

272 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

273 
	#_POSIX_C_SOURCE
 2

	)

274 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

275 
	#_POSIX_C_SOURCE
 199506L

	)

276 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

277 
	#_POSIX_C_SOURCE
 200112L

	)

279 
	#_POSIX_C_SOURCE
 200809L

	)

281 
	#__USE_POSIX_IMPLICITLY
 1

	)

290 #i‡((!
deföed
 
_POSIX_C_SOURCE
 || (_POSIX_C_SOURCE - 0) < 199506L) \

291 && (
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE
))

292 
	#_POSIX_SOURCE
 1

	)

293 #unde‡
_POSIX_C_SOURCE


294 
	#_POSIX_C_SOURCE
 199506L

	)

297 #i‡(
deföed
 
_POSIX_SOURCE
 \

298 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

299 || 
deföed
 
_XOPEN_SOURCE
)

300 
	#__USE_POSIX
 1

	)

303 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


304 
	#__USE_POSIX2
 1

	)

307 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

308 
	#__USE_POSIX199309
 1

	)

311 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

312 
	#__USE_POSIX199506
 1

	)

315 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

316 
	#__USE_XOPEN2K
 1

	)

317 #unde‡
__USE_ISOC95


318 
	#__USE_ISOC95
 1

	)

319 #unde‡
__USE_ISOC99


320 
	#__USE_ISOC99
 1

	)

323 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

324 
	#__USE_XOPEN2K8
 1

	)

325 #unde‡
_ATFILE_SOURCE


326 
	#_ATFILE_SOURCE
 1

	)

329 #ifdef 
_XOPEN_SOURCE


330 
	#__USE_XOPEN
 1

	)

331 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

332 
	#__USE_XOPEN_EXTENDED
 1

	)

333 
	#__USE_UNIX98
 1

	)

334 #unde‡
_LARGEFILE_SOURCE


335 
	#_LARGEFILE_SOURCE
 1

	)

336 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

337 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

338 
	#__USE_XOPEN2K8
 1

	)

339 
	#__USE_XOPEN2K8XSI
 1

	)

341 
	#__USE_XOPEN2K
 1

	)

342 
	#__USE_XOPEN2KXSI
 1

	)

343 #unde‡
__USE_ISOC95


344 
	#__USE_ISOC95
 1

	)

345 #unde‡
__USE_ISOC99


346 
	#__USE_ISOC99
 1

	)

349 #ifde‡
_XOPEN_SOURCE_EXTENDED


350 
	#__USE_XOPEN_EXTENDED
 1

	)

355 #ifde‡
_LARGEFILE_SOURCE


356 
	#__USE_LARGEFILE
 1

	)

359 #ifde‡
_LARGEFILE64_SOURCE


360 
	#__USE_LARGEFILE64
 1

	)

363 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

364 
	#__USE_FILE_OFFSET64
 1

	)

367 #i‡
deföed
 
_DEFAULT_SOURCE


368 
	#__USE_MISC
 1

	)

371 #ifdef 
_ATFILE_SOURCE


372 
	#__USE_ATFILE
 1

	)

375 #ifdef 
_GNU_SOURCE


376 
	#__USE_GNU
 1

	)

379 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

380 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

381 #i‡
_FORTIFY_SOURCE
 > 1

382 
	#__USE_FORTIFY_LEVEL
 2

	)

384 
	#__USE_FORTIFY_LEVEL
 1

	)

387 
	#__USE_FORTIFY_LEVEL
 0

	)

394 #i‡
deföed
 
__˝lu•lus
 ? __˝lu•lu†>201402L : deföed 
__USE_ISOC11


395 
	#__GLIBC_USE_DEPRECATED_GETS
 0

	)

397 
	#__GLIBC_USE_DEPRECATED_GETS
 1

	)

402 
	~<°dc-¥edef.h
>

410 #unde‡
__GNU_LIBRARY__


411 
	#__GNU_LIBRARY__
 6

	)

415 
	#__GLIBC__
 2

	)

416 
	#__GLIBC_MINOR__
 28

	)

418 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

419 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

422 #i‚de‡
__ASSEMBLER__


423 #i‚de‡
_SYS_CDEFS_H


424 
	~<sys/cdefs.h
>

429 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


430 
	#__USE_LARGEFILE
 1

	)

431 
	#__USE_LARGEFILE64
 1

	)

437 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

438 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

439 && 
deföed
 
	g__exã∫_ölöe


440 
	#__USE_EXTERN_INLINES
 1

	)

448 
	~<gnu/°ubs.h
>

	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

26 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

27 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

30 
	g__BEGIN_DECLS


32 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


34 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

35 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

38 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

39 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

42 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

45 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


48 *
	`ödex
 (*
__s
, 
__c
)

49 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

50 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

51 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

53 #i‡
deföed
 
__OPTIMIZE__


54 
__exã∫_Æways_ölöe
 *

55 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


57  
	`__buûtö_ödex
 (
__s
, 
__c
);

60 
__exã∫_Æways_ölöe
 const *

61 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
	}
}

68 *
	$ödex
 (c⁄° *
__s
, 
__c
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


76 *
	`rödex
 (*
__s
, 
__c
)

77 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

79 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #i‡
deföed
 
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


85  
	`__buûtö_rödex
 (
__s
, 
__c
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
	}
}

96 *
	$rödex
 (c⁄° *
__s
, 
__c
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


104 
	$ffs
 (
__i
Ë
__THROW
 
__©åibuã_c⁄°__
;

109 #ifdef 
__USE_MISC


110 
	$ff¶
 (
__l
Ë
__THROW
 
__©åibuã_c⁄°__
;

111 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

112 
__THROW
 
__©åibuã_c⁄°__
;

116 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

117 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

120 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

123 #ifdef 
__USE_XOPEN2K8


125 
	~<bôs/ty≥s/loˇÀ_t.h
>

128 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__loc
)

129 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

134 
size_t
 
__n
, 
loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


140 #i‡
	`__GNUC_PREREQ
 (3,4Ë&& 
__USE_FORTIFY_LEVEL
 > 0 \

141 && 
deföed
 
__f‹tify_fun˘i⁄


143 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


144 
	~<bôs/°rögs_f‹tifõd.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

58 
	#__STDC_ISO_10646__
 201706L

	)

	@
1
.
1
/usr/include
303
26071
/home/vaje/Documents/vaja9/Makefile
/home/vaje/Documents/vaja9/app/include/asf.h
/home/vaje/Documents/vaja9/app/include/bord.h
/home/vaje/Documents/vaja9/app/include/conf_clock.h
/home/vaje/Documents/vaja9/app/include/fifo.h
/home/vaje/Documents/vaja9/app/include/lcd.h
/home/vaje/Documents/vaja9/app/include/rtos.h
/home/vaje/Documents/vaja9/app/include/rtos_task.h
/home/vaje/Documents/vaja9/app/src/bord.c
/home/vaje/Documents/vaja9/app/src/fifo.c
/home/vaje/Documents/vaja9/app/src/lcd.c
/home/vaje/Documents/vaja9/app/src/main.c
/home/vaje/Documents/vaja9/app/src/rtos.c
/home/vaje/Documents/vaja9/app/src/rtos_task.c
/home/vaje/Documents/vaja9/archive.sh
/home/vaje/Documents/vaja9/asf/common/boards/board.h
/home/vaje/Documents/vaja9/asf/common/services/clock/dfll.h
/home/vaje/Documents/vaja9/asf/common/services/clock/genclk.h
/home/vaje/Documents/vaja9/asf/common/services/clock/osc.h
/home/vaje/Documents/vaja9/asf/common/services/clock/pll.h
/home/vaje/Documents/vaja9/asf/common/services/clock/sam3x/genclk.h
/home/vaje/Documents/vaja9/asf/common/services/clock/sam3x/osc.h
/home/vaje/Documents/vaja9/asf/common/services/clock/sam3x/pll.h
/home/vaje/Documents/vaja9/asf/common/services/clock/sam3x/sysclk.c
/home/vaje/Documents/vaja9/asf/common/services/clock/sam3x/sysclk.h
/home/vaje/Documents/vaja9/asf/common/services/clock/sysclk.h
/home/vaje/Documents/vaja9/asf/common/services/delay/delay.h
/home/vaje/Documents/vaja9/asf/common/services/delay/doxygen/common.services.delay_sam/doxygen_module_mainpage.h
/home/vaje/Documents/vaja9/asf/common/services/delay/sam/cycle_counter.c
/home/vaje/Documents/vaja9/asf/common/services/delay/sam/cycle_counter.h
/home/vaje/Documents/vaja9/asf/common/services/gpio/gpio.h
/home/vaje/Documents/vaja9/asf/common/services/gpio/sam_gpio/sam_gpio.h
/home/vaje/Documents/vaja9/asf/common/services/ioport/ioport.h
/home/vaje/Documents/vaja9/asf/common/services/ioport/sam/ioport_gpio.h
/home/vaje/Documents/vaja9/asf/common/services/ioport/sam/ioport_pio.h
/home/vaje/Documents/vaja9/asf/common/services/ioport/uc3/ioport.h
/home/vaje/Documents/vaja9/asf/common/services/ioport/unit_tests/unit_tests.c
/home/vaje/Documents/vaja9/asf/common/utils/interrupt.h
/home/vaje/Documents/vaja9/asf/common/utils/interrupt/interrupt_sam_nvic.c
/home/vaje/Documents/vaja9/asf/common/utils/interrupt/interrupt_sam_nvic.h
/home/vaje/Documents/vaja9/asf/common/utils/parts.h
/home/vaje/Documents/vaja9/asf/sam/boards/arduino_due_x/arduino_due_x.h
/home/vaje/Documents/vaja9/asf/sam/boards/arduino_due_x/debug_scripts/gcc/arduino_due_x_flash.gdb
/home/vaje/Documents/vaja9/asf/sam/boards/arduino_due_x/debug_scripts/gcc/arduino_due_x_sram.gdb
/home/vaje/Documents/vaja9/asf/sam/boards/arduino_due_x/init.c
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc.c
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc2.c
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc2.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_mode/example.c
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_mode/sam4c16c_sam4c_ek/conf_board.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_mode/sam4c16c_sam4c_ek/conf_clock.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_mode/sam4c16c_sam4c_ek/conf_uart_serial.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_mode/sam4c16c_sam4c_ek/gcc/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_mode/sam4c16c_sam4c_ek/iar/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_resolution_example/adc_enhanced_resolution_example.c
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_resolution_example/sam4n16c_sam4n_xplained_pro/conf_board.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_resolution_example/sam4n16c_sam4n_xplained_pro/conf_clock.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_resolution_example/sam4n16c_sam4n_xplained_pro/conf_sleepmgr.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_resolution_example/sam4n16c_sam4n_xplained_pro/conf_uart_serial.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_resolution_example/sam4n16c_sam4n_xplained_pro/gcc/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_resolution_example/sam4n16c_sam4n_xplained_pro/iar/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_resolution_example/samg53n19_samg_xplained_pro/conf_board.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_resolution_example/samg53n19_samg_xplained_pro/conf_clock.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_resolution_example/samg53n19_samg_xplained_pro/conf_sleepmgr.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_resolution_example/samg53n19_samg_xplained_pro/conf_uart_serial.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_resolution_example/samg53n19_samg_xplained_pro/gcc/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_resolution_example/samg53n19_samg_xplained_pro/iar/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_resolution_example/samg55j19_samg_xplained_pro/conf_board.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_resolution_example/samg55j19_samg_xplained_pro/conf_clock.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_resolution_example/samg55j19_samg_xplained_pro/conf_sleepmgr.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_resolution_example/samg55j19_samg_xplained_pro/conf_uart_serial.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_resolution_example/samg55j19_samg_xplained_pro/gcc/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_enhanced_resolution_example/samg55j19_samg_xplained_pro/iar/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_sam3u.c
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/adc2_temp_sensor_example.c
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/adc_temp_sensor_example.c
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam3s4c_sam3s_ek/conf_board.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam3s4c_sam3s_ek/conf_clock.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam3s4c_sam3s_ek/conf_uart_serial.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam3s4c_sam3s_ek/gcc/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam3s4c_sam3s_ek/iar/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam3sd8c_sam3s_ek2/conf_board.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam3sd8c_sam3s_ek2/conf_clock.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam3sd8c_sam3s_ek2/conf_uart_serial.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam3sd8c_sam3s_ek2/gcc/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam3sd8c_sam3s_ek2/iar/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam3x8e_arduino_due_x/conf_board.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam3x8e_arduino_due_x/conf_clock.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam3x8e_arduino_due_x/conf_uart_serial.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam3x8e_arduino_due_x/gcc/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam3x8e_arduino_due_x/iar/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam3x8h_sam3x_ek/conf_board.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam3x8h_sam3x_ek/conf_clock.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam3x8h_sam3x_ek/conf_uart_serial.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam3x8h_sam3x_ek/gcc/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam3x8h_sam3x_ek/iar/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4c16c_sam4c_ek/conf_board.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4c16c_sam4c_ek/conf_clock.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4c16c_sam4c_ek/conf_uart_serial.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4c16c_sam4c_ek/gcc/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4c16c_sam4c_ek/iar/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4cmp16c_sam4cmp_db/conf_board.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4cmp16c_sam4cmp_db/conf_clock.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4cmp16c_sam4cmp_db/conf_uart_serial.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4cmp16c_sam4cmp_db/gcc/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4cmp16c_sam4cmp_db/iar/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4cms16c_sam4cms_db/conf_board.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4cms16c_sam4cms_db/conf_clock.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4cms16c_sam4cms_db/conf_uart_serial.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4cms16c_sam4cms_db/gcc/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4cms16c_sam4cms_db/iar/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4n16c_sam4n_xplained_pro/conf_board.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4n16c_sam4n_xplained_pro/conf_clock.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4n16c_sam4n_xplained_pro/conf_sleepmgr.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4n16c_sam4n_xplained_pro/conf_uart_serial.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4n16c_sam4n_xplained_pro/gcc/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4n16c_sam4n_xplained_pro/iar/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4s16c_sam4s_ek/conf_board.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4s16c_sam4s_ek/conf_clock.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4s16c_sam4s_ek/conf_uart_serial.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4s16c_sam4s_ek/gcc/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4s16c_sam4s_ek/iar/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4s16c_sam4s_xplained/conf_board.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4s16c_sam4s_xplained/conf_clock.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4s16c_sam4s_xplained/conf_uart_serial.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4s16c_sam4s_xplained/gcc/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4s16c_sam4s_xplained/iar/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4sd32c_sam4s_ek2/conf_board.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4sd32c_sam4s_ek2/conf_clock.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4sd32c_sam4s_ek2/conf_uart_serial.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4sd32c_sam4s_ek2/gcc/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_temp_sensor_example/sam4sd32c_sam4s_ek2/iar/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/adc_threshold_wakeup_example.c
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3n4c_sam3n_ek/conf_board.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3n4c_sam3n_ek/conf_clock.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3n4c_sam3n_ek/conf_uart_serial.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3n4c_sam3n_ek/gcc/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3n4c_sam3n_ek/iar/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3s4c_sam3s_ek/conf_board.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3s4c_sam3s_ek/conf_clock.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3s4c_sam3s_ek/conf_uart_serial.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3s4c_sam3s_ek/gcc/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3s4c_sam3s_ek/iar/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3sd8c_sam3s_ek2/conf_board.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3sd8c_sam3s_ek2/conf_clock.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3sd8c_sam3s_ek2/conf_uart_serial.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3sd8c_sam3s_ek2/gcc/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3sd8c_sam3s_ek2/iar/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3x8e_arduino_due_x/conf_board.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3x8e_arduino_due_x/conf_clock.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3x8e_arduino_due_x/conf_uart_serial.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3x8e_arduino_due_x/gcc/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3x8e_arduino_due_x/iar/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3x8h_sam3x_ek/conf_board.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3x8h_sam3x_ek/conf_clock.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3x8h_sam3x_ek/conf_uart_serial.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3x8h_sam3x_ek/gcc/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam3x8h_sam3x_ek/iar/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam4c16c_sam4c_ek/conf_board.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam4c16c_sam4c_ek/conf_clock.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam4c16c_sam4c_ek/conf_uart_serial.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam4c16c_sam4c_ek/gcc/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam4c16c_sam4c_ek/iar/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam4s16c_sam4s_ek/conf_board.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam4s16c_sam4s_ek/conf_clock.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam4s16c_sam4s_ek/conf_uart_serial.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam4s16c_sam4s_ek/gcc/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam4s16c_sam4s_ek/iar/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam4sd32c_sam4s_ek2/conf_board.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam4sd32c_sam4s_ek2/conf_clock.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam4sd32c_sam4s_ek2/conf_uart_serial.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam4sd32c_sam4s_ek2/gcc/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/adc_threshold_wakeup_example/sam4sd32c_sam4s_ek2/iar/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/doxygen/sam.drivers.adc_1/doxygen_module_mainpage.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/doxygen/sam.drivers.adc_2/doxygen_module_mainpage.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/unit_tests/sam4n16c_sam4n_xplained_pro/conf_board.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/unit_tests/sam4n16c_sam4n_xplained_pro/conf_clock.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/unit_tests/sam4n16c_sam4n_xplained_pro/conf_sleepmgr.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/unit_tests/sam4n16c_sam4n_xplained_pro/conf_test.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/unit_tests/sam4n16c_sam4n_xplained_pro/conf_uart_serial.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/unit_tests/sam4n16c_sam4n_xplained_pro/gcc/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/unit_tests/sam4n16c_sam4n_xplained_pro/iar/asf.h
/home/vaje/Documents/vaja9/asf/sam/drivers/adc/unit_tests/unit_tests.c
/home/vaje/Documents/vaja9/asf/sam/drivers/pio/pio.c
/home/vaje/Documents/vaja9/asf/sam/drivers/pio/pio.h
/home/vaje/Documents/vaja9/asf/sam/drivers/pio/pio_handler.c
/home/vaje/Documents/vaja9/asf/sam/drivers/pio/pio_handler.h
/home/vaje/Documents/vaja9/asf/sam/drivers/pmc/pmc.c
/home/vaje/Documents/vaja9/asf/sam/drivers/pmc/pmc.h
/home/vaje/Documents/vaja9/asf/sam/drivers/pmc/sleep.c
/home/vaje/Documents/vaja9/asf/sam/drivers/pmc/sleep.h
/home/vaje/Documents/vaja9/asf/sam/drivers/tc/tc.c
/home/vaje/Documents/vaja9/asf/sam/drivers/tc/tc.h
/home/vaje/Documents/vaja9/asf/sam/drivers/uart/uart.c
/home/vaje/Documents/vaja9/asf/sam/drivers/uart/uart.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_adc.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_can.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_chipid.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_dacc.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_dmac.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_efc.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_emac.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_gpbr.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_hsmci.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_matrix.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_pdc.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_pio.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_pmc.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_pwm.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_rstc.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_rtc.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_rtt.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_sdramc.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_smc.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_spi.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_ssc.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_supc.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_tc.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_trng.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_twi.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_uart.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_uotghs.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_usart.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/component/component_wdt.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_adc.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_can0.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_can1.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_chipid.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_dacc.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_dmac.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_efc0.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_efc1.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_emac.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_gpbr.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_hsmci.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_matrix.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_pioa.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_piob.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_pioc.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_piod.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_pioe.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_piof.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_pmc.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_pwm.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_rstc.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_rtc.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_rtt.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_sdramc.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_smc.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_spi0.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_spi1.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_ssc.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_supc.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_tc0.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_tc1.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_tc2.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_trng.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_twi0.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_twi1.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_uart.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_uotghs.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_usart0.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_usart1.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_usart2.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_usart3.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/instance/instance_wdt.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/pio/pio_sam3x8e.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/sam3x8e.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/include/sam3xa.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/source/templates/exceptions.c
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/source/templates/exceptions.h
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/source/templates/gcc/startup_sam3x.c
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/source/templates/system_sam3x.c
/home/vaje/Documents/vaja9/asf/sam/utils/cmsis/sam3x/source/templates/system_sam3x.h
/home/vaje/Documents/vaja9/asf/sam/utils/compiler.h
/home/vaje/Documents/vaja9/asf/sam/utils/header_files/io.h
/home/vaje/Documents/vaja9/asf/sam/utils/linker_scripts/sam3x/sam3x8/gcc/flash.ld
/home/vaje/Documents/vaja9/asf/sam/utils/linker_scripts/sam3x/sam3x8/gcc/sram.ld
/home/vaje/Documents/vaja9/asf/sam/utils/make/Makefile.sam.in
/home/vaje/Documents/vaja9/asf/sam/utils/preprocessor/mrepeat.h
/home/vaje/Documents/vaja9/asf/sam/utils/preprocessor/preprocessor.h
/home/vaje/Documents/vaja9/asf/sam/utils/preprocessor/stringz.h
/home/vaje/Documents/vaja9/asf/sam/utils/preprocessor/tpaste.h
/home/vaje/Documents/vaja9/asf/sam/utils/status_codes.h
/home/vaje/Documents/vaja9/asf/sam/utils/syscalls/gcc/syscalls.c
/home/vaje/Documents/vaja9/asf/thirdparty/CMSIS/include/core_cm3.h
/home/vaje/Documents/vaja9/asf/thirdparty/CMSIS/include/core_cmFunc.h
/home/vaje/Documents/vaja9/asf/thirdparty/CMSIS/include/core_cmInstr.h
/home/vaje/Documents/vaja9/clone.sh
/home/vaje/Documents/vaja9/config.mk
/home/vaje/Documents/vaja9/openocd.cfg
/home/vaje/Documents/vaja9/startdbg.sh
/home/vaje/Documents/vaja9/stopdbg.sh
/usr/include/assert.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/alloca.h
/usr/include/features.h
/usr/include/strings.h
/usr/include/stdc-predef.h
